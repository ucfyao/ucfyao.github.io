[{"title":"0x01--智能合约开发之工具","url":"/eth_0x01_dev_tool/","content":"<h2 id=\"编辑器选择\"><a href=\"#编辑器选择\" class=\"headerlink\" title=\"编辑器选择\"></a>编辑器选择</h2><p>支持合约开发的编辑器挺多，基本上都有相关的插件比如：WebStorm，PHPStorm，Sublime，等等。这里推荐一下Atom，因为Atom轻量并且界面漂亮。由Github开发的一款开源的编辑器，值得拥有。</p>\n<span id=\"more\"></span>\n\n<p><strong>移步 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdG9tLmlvLw==\">https://atom.io/<i class=\"fa fa-external-link-alt\"></i></span> 地址，下载安装Atom。</strong></p>\n<ul>\n<li><code>autocomplete-solidity</code> 代码自动补齐</li>\n<li><code>language-ethereum</code> Ethereum language support in Atom</li>\n<li><code>linter-solium</code> 代码检查</li>\n<li><code>linter-solidity</code>  代码提示</li>\n</ul>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-b65548272f28015c.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"atom.jpeg\"></p>\n<p>在mac 上还可以使用命令行来安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">apm install linter</span><br><span class=\"line\">apm install linter-solidity</span><br></pre></td></tr></table></figure>\n\n<p>更多的插件可以在官方介绍查看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvaW5kZXguaHRtbA==\">https://solidity.readthedocs.io/en/latest/index.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>最终效果图，怎么样，是不是很赞！come on！！！<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-09061429a227592f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"atom_test.jpeg\"></p>\n<hr>\n<p>熊市攒币，牛市攒钱。这波大涨大跌一子没动，但是在过程中深刻领悟了这短短八个字的精髓，不就是低买卖高吗？</p>\n<p>慢慢熊市遥不可及地，在这个时间上，小伙伴们不如来一起学习区块链的知识，快速成长为区块链内行，争取在下一个牛市中站在风口中获得先机。<br>我们小伙伴特地组织了一个小小的队伍，共同精读原版比特币白皮书！有大神带队！互相监督，免费学习！还想错过下一波牛市吗？还要看着隔壁老王发家致富吗？你还在等什么？加入我们，只字不差的理解区块链世界！</p>\n<p>有兴趣的小伙伴可以加我微信，进入小组，让我们争当前行者！<br><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-ac29323099d27b51.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"WechatIMG136.jpeg\"></p>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"0x02--智能合约开发之调试","url":"/eth_0x02_debugging/","content":"<h2 id=\"一、调试模式\"><a href=\"#一、调试模式\" class=\"headerlink\" title=\"一、调试模式\"></a>一、调试模式</h2><blockquote>\n<p>目前browser-solidity有两种常用的调试方式，一个是采用本地虚拟机调试模式，一个是连接到本地的私有链进行调试。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"1-本地虚拟机调试模式\"><a href=\"#1-本地虚拟机调试模式\" class=\"headerlink\" title=\"1.本地虚拟机调试模式\"></a>1.本地虚拟机调试模式</h3><blockquote>\n<p>本地虚拟机调试，就是不连接任何一个节点，在内存虚拟出一个以太坊节点进行调试，优点是速度快，配置简单，缺点是因为只是虚拟调试，可能最后放到真正的<span class=\"exturl\" data-url=\"aHR0cDovL2xpYi5jc2RuLm5ldC9iYXNlL2Jsb2NrY2hhaW4=\">区块链<i class=\"fa fa-external-link-alt\"></i></span> 节点上运行智能合约会和预想的结果不同。</p>\n</blockquote>\n<ul>\n<li><p>首先在DEBUG环境设置中，选择JavaScript VM以设置本地虚拟调试模式。</p>\n</li>\n<li><p>智能合约代码编写好后，点击“Create”按钮部署智能合约到内存中，并进行调试，如果部署成功，会出现智能合约的函数运行按钮和参数输入框，然后就可以调试你的智能合约了。</p>\n</li>\n<li><p>运行函数后，会出现相应的交易数据，可以完成整个智能合约调试。</p>\n</li>\n<li><p>如果想逐步调试智能合约，那么选择小虫子图标，切换到逐步调试界面，即可实现单步运行智能合约，注意这里的单步运行不是指代码而是指智能合约编译后的OPCODE。</p>\n</li>\n</ul>\n<h3 id=\"2-连接到本地私有链调试\"><a href=\"#2-连接到本地私有链调试\" class=\"headerlink\" title=\"2.连接到本地私有链调试\"></a>2.连接到本地私有链调试</h3><blockquote>\n<p>连接到本地私有链调试，就是通过RPC接口，连接本地的以太坊节点，实际部署并调试智能合约，缺点是速度较慢，配置复杂，优点是能够真实运行智能合约，最大程度的防止出错，关于私有链的配置，请参考我原先发表的文章《区块链开发（一）搭建基于以太坊的私有链环境》。</p>\n</blockquote>\n<ul>\n<li><p>首先在DEBUG环境设置中，选择Web3 Provider以设置本地虚拟调试模式，同时默认会给出一个连接地址为<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4NTQ1Lw==\">http://localhost:8545<i class=\"fa fa-external-link-alt\"></i></span> ，如果你配置的私有链RPC端口修改了，记得要改成对应的端口</p>\n</li>\n<li><p>然后，切换到账号状态栏，此时显示的可用账号，应该都是你部署的私有链里面的账号，如果不是，说明没有成功连接私有链。可能的原因有两个，一是私有链提供的端口是用http访问，而browser-solidity的网页访问地址是https，解决的方法就是将browser-solidity访问地址改为http协议的地址即可<span class=\"exturl\" data-url=\"aHR0cDovL2V0aGVyZXVtLmdpdGh1Yi5pby9icm93c2VyLXNvbGlkaXR5Lw==\">http://ethereum.github.io/browser-solidity/<i class=\"fa fa-external-link-alt\"></i></span> ；二是系统的时间没有和网络同步，使用windows系统自带的时间同步功能同步一下即可。</p>\n</li>\n</ul>\n<h2 id=\"二、调试手段\"><a href=\"#二、调试手段\" class=\"headerlink\" title=\"二、调试手段\"></a>二、调试手段</h2><h3 id=\"1-变量查看\"><a href=\"#1-变量查看\" class=\"headerlink\" title=\"1. 变量查看\"></a>1. 变量查看</h3><ul>\n<li><p>（1）变量可设置为public address public withDrawAddress&#x3D; 0x0;</p>\n</li>\n<li><p>（2）在rimix函数变量调试栏，点击变量同名按钮，即可查看当前值</p>\n</li>\n</ul>\n<h3 id=\"2-日志查看\"><a href=\"#2-日志查看\" class=\"headerlink\" title=\"2. 日志查看\"></a>2. 日志查看</h3><ul>\n<li><p>（1）增加event事件的事件声明 event TransferWithDraw(uint balance);</p>\n</li>\n<li><p>（2）在要调用日志的地方，执行事件调用 TransferWithDraw(withDraw);</p>\n</li>\n<li><p>（3）执行函数时，remix在logs列，有TransferWithDraw日志输出语句</p>\n</li>\n</ul>\n<h3 id=\"3-使用remix的Debug功能\"><a href=\"#3-使用remix的Debug功能\" class=\"headerlink\" title=\"3 使用remix的Debug功能\"></a>3 使用remix的Debug功能</h3><ul>\n<li><p>（1）在remix右侧，点击执行要执行的函数</p>\n</li>\n<li><p>（2）查看remix下方，有执行结果输出</p>\n</li>\n<li><p>（3）点击remix下半部分的“Debug”按钮，在右侧弹出Debug工具栏</p>\n</li>\n</ul>\n<p>主要关心当前的调试步进，还有当前的变量值。</p>\n<h2 id=\"三、完整实例代码\"><a href=\"#三、完整实例代码\" class=\"headerlink\" title=\"三、完整实例代码\"></a>三、完整实例代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.14;</span><br><span class=\"line\"></span><br><span class=\"line\">contract testFundContract &#123;</span><br><span class=\"line\">    address owner;</span><br><span class=\"line\">    address public withDrawAddress = 0x0;</span><br><span class=\"line\"></span><br><span class=\"line\">    event TransferWithDraw(uint balance);</span><br><span class=\"line\"></span><br><span class=\"line\">    function testFundContract() &#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function withDrawAddress(address a) &#123;</span><br><span class=\"line\">        require(msg.sender == owner);</span><br><span class=\"line\">        withDrawAddress = a;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function addFund() payable returns (uint) &#123;</span><br><span class=\"line\">        return this.balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function withDraw() &#123;</span><br><span class=\"line\">        require(this.balance &gt; 0);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (0x0  == withDrawAddress )&#123;</span><br><span class=\"line\">            revert();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        uint withDraw = this.balance;</span><br><span class=\"line\">        withDrawAddress.transfer(withDraw);</span><br><span class=\"line\">        TransferWithDraw(withDraw);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"四、其他常见智能合约资源\"><a href=\"#四、其他常见智能合约资源\" class=\"headerlink\" title=\"四、其他常见智能合约资源\"></a>四、其他常见智能合约资源</h2><p>下面一些例子网站去参考一些成熟的代码，方便快速迭代学习，常见的例子网站如下：</p>\n<ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9Tb2xpZGl0eS1Db2xsZWN0aW9ucw==\">https://github.com/ethereum/wiki/wiki/Solidity-Collections<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2V0aGVyLmZ1bmQvY29udHJhY3RzLw==\">http://ether.fund/contracts/<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NocmlzZXRoL3NvbGlkaXR5LWV4YW1wbGVz\">https://github.com/chriseth/solidity-examples<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2RhcHAtYmlu\">https://github.com/ethereum/dapp-bin<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZpdmVkb2dpdC9zb2xpZGl0eS1iYWJ5LXN0ZXBz\">https://github.com/fivedogit/solidity-baby-steps<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2RhcHBzLmV0aGVyY2FzdHMuY29tLw==\">http://dapps.ethercasts.com<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2V0aGVyLmZ1bmQvY29udHJhY3Rz\">http://ether.fund/contracts<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h3 id=\"开发框架\"><a href=\"#开发框架\" class=\"headerlink\" title=\"开发框架\"></a>开发框架</h3><p>常用的有3个：</p>\n<ul>\n<li><p>Truffle：说明书地址<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGUucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0Lw==\">http://truffle.readthedocs.io/en/latest/<i class=\"fa fa-external-link-alt\"></i></span><br>  以太坊目前很流行的开发框架Truffle的说明书，这个框架比较流行。(主要推荐)</p>\n</li>\n<li><p>Dapple：说明书地址<span class=\"exturl\" data-url=\"aHR0cDovL2RhcHBsZS5yZWFkdGhlZG9jcy5pby9lbi9tYXN0ZXIv\">http://dapple.readthedocs.io/en/master/<i class=\"fa fa-external-link-alt\"></i></span><br>  这个开发框架是在gitter chart上看到的，感觉用的人不多，先观察</p>\n</li>\n<li><p>Meteor：说明书地址<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9EYXBwLXVzaW5nLU1ldGVvcg==\">https://github.com/ethereum/wiki/wiki/Dapp-using-Meteor<i class=\"fa fa-external-link-alt\"></i></span><br>  这个开发框架是以太坊官方推荐的，写进了以太坊的官方wiki，值得学习，当然，以太坊官方经常转换方向，以后换别的也没准</p>\n</li>\n</ul>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"0x05--智能合约开发流程详解","url":"/eth_0x05_contract_process/","content":"<h1 id=\"编写sol\"><a href=\"#编写sol\" class=\"headerlink\" title=\"编写sol\"></a>编写sol</h1><p>contracts 文件夹下放置*.sol 文件<br>引入其他文件，注意大小写</p>\n<span id=\"more\"></span>\n\n<h1 id=\"编译contracts下的sol\"><a href=\"#编译contracts下的sol\" class=\"headerlink\" title=\"编译contracts下的sol\"></a>编译contracts下的sol</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim 2_deploy_contracts.js </span><br></pre></td></tr></table></figure>\n<p>example：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var Ownable = artifacts.require(&quot;./Ownable.sol&quot;);</span><br><span class=\"line\">var SafeMath = artifacts.require(&quot;./SafeMath.sol&quot;);</span><br><span class=\"line\">var Payroll = artifacts.require(&quot;./Payroll.sol&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function(deployer) &#123;</span><br><span class=\"line\">  deployer.deploy(Ownable);</span><br><span class=\"line\">  deployer.deploy(SafeMath);</span><br><span class=\"line\"></span><br><span class=\"line\">  deployer.link(Ownable, Payroll);</span><br><span class=\"line\">  deployer.link(SafeMath, Payroll);</span><br><span class=\"line\">  deployer.deploy(Payroll);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>执行编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">trffle migrate</span><br></pre></td></tr></table></figure>\n\n<p>打开测试客户端 <code>testrpc</code></p>\n<h1 id=\"交互\"><a href=\"#交互\" class=\"headerlink\" title=\"交互\"></a>交互</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">truffle console </span><br><span class=\"line\"># 调用web3 获取地址</span><br><span class=\"line\">web3.eth.accounts</span><br><span class=\"line\"># 执行添加方法</span><br><span class=\"line\">payroll.addRmployee(&#x27;0xasdasdas2qwa0sd9uvnmaos&#x27;,2)</span><br><span class=\"line\"># 查看信息</span><br><span class=\"line\">paroll.employees.call(&#x27;0xasdasdas2qwa0sd9uvnmaos&#x27;).then(result=&gt;console.log)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"0x06--智能合约开发之前端开发","url":"/eth_0x06_contract_front/","content":"<blockquote>\n<p>基于智能合约+react 开发Dapp</p>\n</blockquote>\n<h1 id=\"引入初始化合约\"><a href=\"#引入初始化合约\" class=\"headerlink\" title=\"引入初始化合约\"></a>引入初始化合约</h1><p>src&#x2F;app.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Employer from &#x27;./components/Employer&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>componentWillMount<br>instantiateContract 中初始化<br>render(){} 渲染页面</p>\n<span id=\"more\"></span>\n\n<h1 id=\"编辑合约\"><a href=\"#编辑合约\" class=\"headerlink\" title=\"编辑合约\"></a>编辑合约</h1><p>contracts&#x2F;Payroll.sol </p>\n<p>修改后记得重新部署</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">truffle migrate --reset </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加前端组件\"><a href=\"#添加前端组件\" class=\"headerlink\" title=\"添加前端组件\"></a>添加前端组件</h1><p>src&#x2F;commponents&#x2F;Employer.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class=\"line\">import &#123; Card, Col, Row, Layout, Alert, message, Button &#125; from &#x27;antd&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">import Common from &#x27;./Common&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Employer extends Component &#123;</span><br><span class=\"line\">    constructor( props ) &#123;</span><br><span class=\"line\">        super( props );</span><br><span class=\"line\">        this.state = &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        this.checkEmployee();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    checkEmployee = async () =&gt; &#123;</span><br><span class=\"line\">        const &#123; payroll, account, web3 &#125; = this.props;</span><br><span class=\"line\">    </span><br><span class=\"line\">        const balanceWei = await web3.eth.getBalance(account)</span><br><span class=\"line\">        const employee = await payroll.employees.call( account,&#123;</span><br><span class=\"line\">            from: account</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">        </span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            address: employee[ 0 ],</span><br><span class=\"line\">            salary: web3.fromWei( employee[ 1 ].toNumber() ),</span><br><span class=\"line\">            lastPaidDate: new Date( employee[ 2 ].toNumber() * 1000 ).toLocaleString(),</span><br><span class=\"line\">            balance: web3.fromWei( balanceWei.toNumber() ),</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    getPaid = async () =&gt; &#123;</span><br><span class=\"line\">        const &#123; payroll, account, web3 &#125; = this.props;</span><br><span class=\"line\">        </span><br><span class=\"line\">        await payroll.getPaid(&#123;from: account&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">        this.checkEmployee()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    renderContent() &#123;</span><br><span class=\"line\">        const &#123; salary, lastPaidDate, balance &#125; = this.state;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if ( !salary || salary === &#x27;0&#x27; ) &#123;</span><br><span class=\"line\">            return &lt;Alert message=&quot;你不是员工&quot; type=&quot;error&quot; showIcon/&gt;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;Row gutter=&#123;16&#125;&gt;</span><br><span class=\"line\">                    &lt;Col span=&#123;8&#125;&gt;</span><br><span class=\"line\">                        &lt;Card title=&quot;薪水&quot;&gt;&#123;salary&#125; Ether&lt;/Card&gt;</span><br><span class=\"line\">                    &lt;/Col&gt;</span><br><span class=\"line\">                    &lt;Col span=&#123;8&#125;&gt;</span><br><span class=\"line\">                        &lt;Card title=&quot;上次支付&quot;&gt;&#123;lastPaidDate&#125;&lt;/Card&gt;</span><br><span class=\"line\">                    &lt;/Col&gt;</span><br><span class=\"line\">                    &lt;Col span=&#123;8&#125;&gt;</span><br><span class=\"line\">                        &lt;Card title=&quot;帐号金额&quot;&gt;&#123;balance&#125; Ether&lt;/Card&gt;</span><br><span class=\"line\">                    &lt;/Col&gt;</span><br><span class=\"line\">                &lt;/Row&gt;</span><br><span class=\"line\">                </span><br><span class=\"line\">                &lt;Button</span><br><span class=\"line\">                    type=&quot;primary&quot;</span><br><span class=\"line\">                    icon=&quot;bank&quot;</span><br><span class=\"line\">                    onClick=&#123;this.getPaid&#125;</span><br><span class=\"line\">                &gt;</span><br><span class=\"line\">                    获得酬劳</span><br><span class=\"line\">                &lt;/Button&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        const &#123; account, payroll, web3 &#125; = this.props;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;Layout style=&#123;&#123; padding: &#x27;0 24px&#x27;, background: &#x27;#fff&#x27; &#125;&#125;&gt;</span><br><span class=\"line\">                &lt;Common account=&#123;account&#125; payroll=&#123;payroll&#125; web3=&#123;web3&#125;/&gt;</span><br><span class=\"line\">                &lt;h2&gt;个人信息&lt;/h2&gt;</span><br><span class=\"line\">                &#123;this.renderContent()&#125;</span><br><span class=\"line\">            &lt;/Layout&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Employer</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"组件选择\"><a href=\"#组件选择\" class=\"headerlink\" title=\"组件选择\"></a>组件选择</h1><p>推荐使用[ant] ant.design</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 引入 antd 组件</span><br><span class=\"line\">import &#123; Layout, Menu, Spin, Alert &#125; from &#x27;antd&#x27;;</span><br><span class=\"line\"># 引入 antd.css 文件</span><br><span class=\"line\">import &#x27;antd/disy/antd.css&#x27;</span><br><span class=\"line\"># 提取Layout中的组件</span><br><span class=\"line\">const &#123; Header, Content, Footer &#125; = Layout;</span><br></pre></td></tr></table></figure>","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"0x07--题外篇☞ Gas Price vs Gas Limit","url":"/eth_0x07_gasprice_gaslimit/","content":"<h3 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h3><p>当我们想利用(以太坊)Ethereum区块链做交易(包括:转账,Smart Contract智能合约互动时)，我们就需要支付费用给区块链网络上的Miner矿工帮助确认交易记录。</p>\n<p>这就像我们生活之中(你需要转钱给你在日本的朋友，你需要支付手续费给银行帮你做转账。)</p>\n<p>在区块链上，每一個矿工都利用Ethereum Virtual Machine(以太虚拟机)执行相同的程式码和维护区块链网络。</p>\n<span id=\"more\"></span>\n\n<p>(以太坊)Ethereum 的 EVM(Ethereum Virtual Machine 以太虚拟机)是用Wei來作单位，而不是用Ether!<br>1 Ether &#x3D; 1,000,000,000,000,000,000 Wei 就是 1^18<br>1 Gwei &#x3D; 1,000,000,000 Wei<br>附上 Ether &lt;&gt; Wei 转换表 – <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXlldGhlcndhbGxldC5jb20vaGVscGVycy5odG1s\">https://www.myetherwallet.com/helpers.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>当我们利用(以太坊)Ethereum区块链帮我们做简单转账(转账这一個交易动作会叫所有Miner矿工在EVM执行一系列程式码）<br>每一行程式码在EVM(Ethereum Virtual Machine 虚拟机器)执行运算都会有Cost费用。Cost是利用Gas单位去计算。<br>例如：</p>\n<ul>\n<li>ADD 这一個运算（将二個数值加上)，EVM要求3 Gas费用</li>\n<li>转账是要求21,000 GAS费用 或 以上</li>\n</ul>\n<p>附上Ethereum Yellow PaperExcel表说明了每一個运算需要多少Gas.<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvMW42bVJxa0J6M2lXY09sUmVtX21PMDlHdFNLRUtyQXNmTzdGcmd4MThwTlUvZWRpdCNnaWQ9MA==\">Gas Costs from Yellow Paper — EIP-150 Revision (1e18248 – 2017-04-12)<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>大家常常利用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9teWV0aGVyd2FsbGV0LmNvbS8=\">https://myetherwallet.com<i class=\"fa fa-external-link-alt\"></i></span>应该也会留意到 Gas Limit &amp; Gas Price</p>\n<p><strong>Gas Limit</strong> – 就是说你愿意最多给多少Gas去完成这一個交易(包括:执行智能合约Execute Smart Contract，转账)。</p>\n<p><strong>Gas Price</strong> – 就是你愿意支付多少Ether给(以太坊)Ethereum区块链Miner矿工帮你执行这一笔交易。</p>\n<h3 id=\"怎样估计每一個交易所有Gas费用呢\"><a href=\"#怎样估计每一個交易所有Gas费用呢\" class=\"headerlink\" title=\"怎样估计每一個交易所有Gas费用呢?\"></a><strong>怎样估计每一個交易所有Gas费用呢?</strong></h3><p><strong>Transaction Fees交易费用 ＝ 实际用到Gas Limit * Gas Price</strong></p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-90f873ab2dde1692..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"师\"></p>\n<p>Etherscan – Tx Example</p>\n<p>从上图例子看到 ，这一個交易使用90,000 Gas Limit &amp; 20Gwei Gas Price，而整個交易手续费只需要 0.00042 Ether 。但是90,000 Gas Limit 只用了 21,000 Gas，余下的Gas就会退回。</p>\n<h3 id=\"gas消耗有可能发生情況\"><a href=\"#gas消耗有可能发生情況\" class=\"headerlink\" title=\"gas消耗有可能发生情況\"></a>gas消耗有可能发生情況</h3><ul>\n<li><strong>如果你那個交易不需要那么多Gas，Ethereum是会将余下的Gas退回给你)</strong><br>  例子: 如上图</li>\n<li><strong>相反，如果你给了Gas 是不足够去完成这一個交易</strong><br><strong>那整個交易费用全也会用掉的，而且如果你是跟Smart Contract智能合约互动(你在区块链上更改的数值也会变回原來!)</strong></li>\n</ul>\n<h3 id=\"实用小提示Tips\"><a href=\"#实用小提示Tips\" class=\"headerlink\" title=\"实用小提示Tips\"></a><strong>实用小提示Tips</strong></h3><p>去 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldGhnYXNzdGF0aW9uLmluZm8v\">https://ethgasstation.info <i class=\"fa fa-external-link-alt\"></i></span>看到现在Ethereum区块链网络狀态，參考<strong>Gas Price SafeLow (Gwei)。</strong></p>\n<h3 id=\"最便宜做法\"><a href=\"#最便宜做法\" class=\"headerlink\" title=\"最便宜做法\"></a><strong>最便宜做法</strong></h3><p>**Gas Limit – **用myetherwallet自动帮你调节(例如: 参与ICO的話200,000 Gas Limit己经足够)  &#x2F; 专家可手调</p>\n<p><strong>Gas Price</strong> – 参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldGhnYXNzdGF0aW9uLmluZm8v\">https://ethgasstation.info<i class=\"fa fa-external-link-alt\"></i></span> Gas Price SafeLow (Gwei)</p>\n<p>那就保证你的交易将会被Ethereum区块链确认。Gas Price调高会令你交易更快被区块链确认，因为你愿意支付更多给矿工。<br>*<strong>Gas Limit 不是越大就越好 ，Gas Limit 是有上限的 。以太坊Ethereum Miner矿工有一個机制能够改变Block Limit 加大&#x2F;減少 。</strong></p>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"0x08--智能合约开发之MetaMask","url":"/eth_0x08_metamask/","content":"<h1 id=\"节点分类\"><a href=\"#节点分类\" class=\"headerlink\" title=\"节点分类\"></a>节点分类</h1><ul>\n<li>light client  — 轻节点</li>\n<li>full client  — 全节点</li>\n</ul>\n<p>推荐使用：<br>MetaMask（小狐狸） <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZXRhbWFzay5pby8=\">https://metamask.io/<i class=\"fa fa-external-link-alt\"></i></span> </p>\n<ul>\n<li>可以选择不同的网络</li>\n<li>转账功能</li>\n<li>交易功能</li>\n</ul>\n<blockquote>\n<p>注意输入的密码为你所设定的密码</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h1 id=\"初始化web3\"><a href=\"#初始化web3\" class=\"headerlink\" title=\"初始化web3\"></a>初始化web3</h1><p>选择加载注入插件或者本地testrpc服务</p>\n<p>src&#x2F;utils&#x2F;getWeb3.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Web3 from &#x27;web3&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">let getWeb3 = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  // Wait for loading completion to avoid race conditions with web3 injection timing.</span><br><span class=\"line\">  window.addEventListener(&#x27;load&#x27;, function() &#123;</span><br><span class=\"line\">    var results</span><br><span class=\"line\">    var web3 = window.web3</span><br><span class=\"line\"></span><br><span class=\"line\">    // Checking if Web3 has been injected by the browser (Mist/MetaMask)</span><br><span class=\"line\">    if (typeof web3 !== &#x27;undefined&#x27;) &#123;</span><br><span class=\"line\">      // Use Mist/MetaMask&#x27;s provider.</span><br><span class=\"line\">      web3 = new Web3(web3.currentProvider)</span><br><span class=\"line\"></span><br><span class=\"line\">      results = &#123;</span><br><span class=\"line\">        web3: web3</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      console.log(&#x27;Injected web3 detected.&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">      resolve(results)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // Fallback to localhost if no web3 injection.</span><br><span class=\"line\">      var provider = new Web3.providers.HttpProvider(&#x27;http://localhost:8545&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">      web3 = new Web3(provider)</span><br><span class=\"line\"></span><br><span class=\"line\">      results = &#123;</span><br><span class=\"line\">        web3: web3</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      console.log(&#x27;No web3 instance injected, using Local web3.&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">      resolve(results)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default getWeb3</span><br></pre></td></tr></table></figure>\n\n<p>添加 event 可以增加前端的使用</p>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"0x09--智能合约开发之填坑","url":"/eth_0x09_contract_pit/","content":"<blockquote>\n<p>Error: Error: Exceeds block gas limit</p>\n</blockquote>\n<ul>\n<li><p>原因：</p>\n<p>交易的大小限制并不是一个固定数，截至到16.2.7号限制大概是 780KB（大约300w gas）<br>交易和区块的大小都没有固定的限制，它可以自动伸缩，但是这并不是意味着完全没有限制，当前单个区块最多的gas使用量为3,141,592 gas，理论上来讲，你可以创建一个可以消耗单个区块所有gas的，很大的单笔交易</p>\n<p>最下面那个错误是由于gas给的（或者消耗的）太多超出区块最大的gas限制量了，可以看下<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iaXRzaHVvLmNvbS90b3BpYy81ODU5MmRlZWU5ZGZiMjBjN2EyN2JjMzc=\">这个帖<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li>使用查看：<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">web3.eth.getBlock(&quot;latest&quot;).gasLimit</span><br></pre></td></tr></table></figure></li>\n<li>解决方法，设置gas ：<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  networks: &#123;</span><br><span class=\"line\">    development: &#123;</span><br><span class=\"line\">      host: &quot;localhost&quot;,</span><br><span class=\"line\">      port: 8001,</span><br><span class=\"line\">      network_id: 1234, // Match any network id</span><br><span class=\"line\">      gas: 500000</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>参考：<br><span class=\"exturl\" data-url=\"aHR0cDovL2V0aGVyZXVtLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8xMTA2L2lzLXRoZXJlLWEtbGltaXQtZm9yLXRyYW5zYWN0aW9uLXNpemUvMTExMA==\">stackexchange上某大牛的回答<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"0x11--智能合约开发之多方式部署","url":"/eth_0x11_mul_deployment/","content":"<h1 id=\"Remix-Metamask-MyetherWallet\"><a href=\"#Remix-Metamask-MyetherWallet\" class=\"headerlink\" title=\"Remix + Metamask + MyetherWallet\"></a>Remix + Metamask + MyetherWallet</h1><p>1.首先在测试网络通过<span class=\"exturl\" data-url=\"aHR0cDovL2ZhdWNldC5yb3BzdGVuLmJlOjMwMDEv\">水龙头1<i class=\"fa fa-external-link-alt\"></i></span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9mYXVjZXQubWV0YW1hc2suaW8v\">水龙头2<i class=\"fa fa-external-link-alt\"></i></span>获取一些代币。</p>\n<p>2.在Remix中选择不同的部署网络，并部署</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-9cbefe0c9575157a.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"发布合约remix.jpeg\"></p>\n<p>3.然后在Metamask中点击确定<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-3a7360a8f6775cfa.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"meta.jpeg\"></p>\n<p>4.获取ABI<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-302d6bd5ea5f9bce.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ABI查找方式.jpeg\"><br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-672c807bcd6ab489.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"复制ABI.jpeg\"></p>\n<p>5.在MyEtherWallet中初始化合约调用<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-811df2e9faf3678a.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"MyEtherWallet.jpeg\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Truffle-Infura\"><a href=\"#Truffle-Infura\" class=\"headerlink\" title=\"Truffle+Infura\"></a>Truffle+Infura</h1><p>1.注册Infura账户<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-3f5fe4f531a5ba2e.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"infura注册.jpeg\"><br>2.下载插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g truffle-hdwallet-provider</span><br></pre></td></tr></table></figure>\n<p>3.将truffle的网络配置换为infura的网络</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 编辑文件</span><br><span class=\"line\">vim truffle.js</span><br><span class=\"line\">var HDWalletProvider = require(&quot;truffle-hdwallet-provider&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">var infura_apikey = &quot;&quot;;</span><br><span class=\"line\">var mnemonic = &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // See &lt;http://truffleframework.com/docs/advanced/configuration&gt;</span><br><span class=\"line\">  // to customize your Truffle configuration!</span><br><span class=\"line\">  networks: &#123;</span><br><span class=\"line\">    development: &#123;</span><br><span class=\"line\">      host: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">      port: 8545,</span><br><span class=\"line\">      network_id: &quot;*&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ropsten: &#123;</span><br><span class=\"line\">      provider: function() &#123;</span><br><span class=\"line\">        return new HDWalletProvider(mnemonic, &quot;https://ropsten.infura.io/&quot;+infura_apikey)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      network_id: 3,</span><br><span class=\"line\">      gas: 3012388,</span><br><span class=\"line\">      gasPrice: 30000000000</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    main: &#123;</span><br><span class=\"line\">      provider: function() &#123;</span><br><span class=\"line\">        return new HDWalletProvider(mnemonic, &quot;https://mainnet.infura.io/&quot;+infura_apikey)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      network_id: 3,</span><br><span class=\"line\">      gas: 21000,</span><br><span class=\"line\">      gasPrice: 1000000000</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 编译</span><br><span class=\"line\">truffle compile</span><br><span class=\"line\"># 部署</span><br><span class=\"line\">truffle migrate --reset  --network ropsten</span><br></pre></td></tr></table></figure>\n<h1 id=\"Truffle-Etherum-Full-Node-Geth-Parity\"><a href=\"#Truffle-Etherum-Full-Node-Geth-Parity\" class=\"headerlink\" title=\"Truffle + Etherum Full Node (Geth,Parity)\"></a>Truffle + Etherum Full Node (Geth,Parity)</h1><p>1.本地下载以太坊的全节点。<br>2.部署时选用main的主配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim truffle.js</span><br><span class=\"line\">main: &#123;</span><br><span class=\"line\">      host: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">      port: 8545,</span><br><span class=\"line\">      network_id: &quot;*&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"0x12--智能合约web3js调用须知","url":"/eth_0x12_web3js_need_to_know/","content":"<p>我们常在开发实体项目对接过程中会使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIzanMucmVhZHRoZWRvY3MuaW8vZW4vMS4wL3dlYjMtZXRoLmh0bWw=\">web3<i class=\"fa fa-external-link-alt\"></i></span>来进行链上操作。</p>\n<p>收集了一些常见问题，以免大家重复性的造轮子。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-版本兼容\"><a href=\"#1-版本兼容\" class=\"headerlink\" title=\"1.版本兼容\"></a>1.版本兼容</h2><p>这是一个常见问题了，各个语言库都会有这个问题。推荐大家跟踪github最新版代码及文档。同时网上找到的案例进行部分接收与文档进行对应。<br>[1.0 文档] (<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIzanMucmVhZHRoZWRvY3MuaW8vZW4vMS4wL3dlYjMtZXRoLmh0bWw=\">https://web3js.readthedocs.io/en/1.0/web3-eth.html<i class=\"fa fa-external-link-alt\"></i></span>)<br>[github] (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dlYjMuanM=\">https://github.com/ethereum/web3.js<i class=\"fa fa-external-link-alt\"></i></span>)</p>\n<p>请注意，大家经常会搜寻到文档在github中的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9KYXZhU2NyaXB0LUFQSSN3ZWIzZXRoZ2V0dHJhbnNhY3Rpb24=\">wiki<i class=\"fa fa-external-link-alt\"></i></span><br>这个版本是0.2x.x！<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-f431c91366c8f87c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"0.2x.x-wiki.png\"></p>\n<h2 id=\"2-账户有余额\"><a href=\"#2-账户有余额\" class=\"headerlink\" title=\"2.账户有余额\"></a>2.账户有余额</h2><p>转账费使用GAS支付。也就是账户必须要有ETH。</p>\n<p>GAS 为以太坊网络中常用的支付单位。可以认为是“¥”的概念。</p>\n<blockquote>\n<p>PS：无论转账是成功还是失败，都需要支付计算费用。即使失败，节点也验证并执行了交易（计算），因此必须和成功执行支付一样的费用。</p>\n</blockquote>\n<p>每次转账花费的gas &#x3D; gasPrice * gasLimit。<br>gasPrice 为每份gas的价格。gasLimit 为你为这笔转账最多愿意花费多少gas。<br>其中gasPrice越高，转账就越快，因为矿工更愿意优先进行计算。</p>\n<p>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldGhnYXNzdGF0aW9uLmluZm8v\">这个网站<i class=\"fa fa-external-link-alt\"></i></span>可以查看现在网络上成功的gasPrice参数等。</p>\n<h2 id=\"3-nonce-参数\"><a href=\"#3-nonce-参数\" class=\"headerlink\" title=\"3.nonce 参数\"></a>3.nonce 参数</h2><p>关于报错交易取消等，必须了解nonce参数。<br>nonce 是指转账时，该地址进行了多少次转账。从0开始计数，每次加1。<br>每次交易时要提供本次使用的nonce值。可以使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIzanMucmVhZHRoZWRvY3MuaW8vZW4vMS4wL3dlYjMtZXRoLmh0bWwjZ2V0dHJhbnNhY3Rpb25jb3VudA==\">getTransactionCount<i class=\"fa fa-external-link-alt\"></i></span>函数来获取当前进行了多少次转账。</p>\n<p>需要注意的几个问题：</p>\n<p>1.如果本次发送请求时填写的nonce偏大（大于当前地址转账次数），则该笔交易为untrack状态，直到nonce-1被执行才会顺序执行到当次nonce。<br>2.当nonce过小（小于当前地址转账次数），报错且交易会被拒绝，转账失败。<br>3.当交易处于queue中时停止geth客户端，那么交易queue中的交易会被清除掉。<br>4.如果一笔交易在等待中，可以用此地址重新发起一笔交易，保持nonce一致。如果手续费高于原来的交易，那么第一笔交易会被覆盖，如果低于原来的交易，那么会发生异常。用这个原理我们可以用给自己发起一笔0的转账，可以取消同nonce的值。<br>5.使用getTransactionCount获取到的交易数量为已经完成的交易数量。而padding中的交易因为并未发出，所以会发出同一个nonce，往往会导致转账失败，原因同上。</p>\n<h2 id=\"4-不同网络的错误提示\"><a href=\"#4-不同网络的错误提示\" class=\"headerlink\" title=\"4.不同网络的错误提示\"></a>4.不同网络的错误提示</h2><p>ropsten和mainnet 相同接口返回的错误消息略有区别。非常重要的提示！</p>\n<h2 id=\"5-获取事务及状态\"><a href=\"#5-获取事务及状态\" class=\"headerlink\" title=\"5.获取事务及状态\"></a>5.获取事务及状态</h2><p>只要发送成功，使用<code>getTransaction</code> 会获取该<code>transactionHash</code>对应的事务，但是要获取该事务的状态要使用<code>getTransactionReceipt</code> 返回值中有<code>status</code>字段。</p>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"0x13--检测是否为合约地址","url":"/eth_0x13_is_contract/","content":"<ol>\n<li><p>使用web3</p>\n<p> web3.eth.getCode()方法返回指定地址上代码的16进制字符串，由于普通账户地址处没有代码，因此将仅返回16进制前缀<code>0x</code>。利用这个我们可以进行判断该地址是普通地址还是合约地址。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var code = await this.web3.eth.getCode(address);</span><br><span class=\"line\">if(code === &#x27;0x&#x27;) &#123;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return true;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<span id=\"more\"></span>\n\n<ol start=\"2\">\n<li>使用合约判断<br> 在合约内，可以使用EVM汇编代码来获取指定地址处的代码大小。<br> 普通账户地址因为没有代码将返回0： <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">contract EzDemo &#123;</span><br><span class=\"line\">    function isContract(address addr) returns (bool) &#123;</span><br><span class=\"line\">        uint size;</span><br><span class=\"line\">        assembly &#123; size := extcodesize(addr) &#125;</span><br><span class=\"line\">        return size &gt; 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"0x14--智能合约安全","url":"/eth_0x14_contract_safe/","content":"<blockquote>\n<p>以太坊智能合约中的安全问题持续收集中。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"外部函数调用安全性\"><a href=\"#外部函数调用安全性\" class=\"headerlink\" title=\"外部函数调用安全性\"></a>外部函数调用安全性</h2><p>转账给别的地址，使用call，send等方式小心循环攻击。尤其注意send,callvalue,split 等函数。</p>\n<p>举例：</p>\n<ul>\n<li>the DAO</li>\n</ul>\n<h2 id=\"函数可见性\"><a href=\"#函数可见性\" class=\"headerlink\" title=\"函数可见性\"></a>函数可见性</h2><h2 id=\"数学运算安全\"><a href=\"#数学运算安全\" class=\"headerlink\" title=\"数学运算安全\"></a>数学运算安全</h2><p>整型溢出</p>\n<h2 id=\"“随机数”与时间戳依赖\"><a href=\"#“随机数”与时间戳依赖\" class=\"headerlink\" title=\"“随机数”与时间戳依赖\"></a>“随机数”与时间戳依赖</h2><p>矿工预先得知。</p>\n<p>举例：</p>\n<ul>\n<li>The casino with a public RNG seed</li>\n</ul>\n<h2 id=\"合约数据可见性\"><a href=\"#合约数据可见性\" class=\"headerlink\" title=\"合约数据可见性\"></a>合约数据可见性</h2><h2 id=\"谨慎使用汇编注入\"><a href=\"#谨慎使用汇编注入\" class=\"headerlink\" title=\"谨慎使用汇编注入\"></a>谨慎使用汇编注入</h2><h2 id=\"代码逻辑错误\"><a href=\"#代码逻辑错误\" class=\"headerlink\" title=\"代码逻辑错误\"></a>代码逻辑错误</h2><p>代码拼写错误，逻辑漏洞。</p>\n<p>举例：</p>\n<ul>\n<li>FirePonzi</li>\n</ul>\n<h2 id=\"所有权失控\"><a href=\"#所有权失控\" class=\"headerlink\" title=\"所有权失控\"></a>所有权失控</h2><p>构造函数拼写错误，导致任何人可以获得控制权</p>\n<p>举例：</p>\n<ul>\n<li>Parity 钱包</li>\n<li>Rubixi </li>\n<li>MakerDAO</li>\n</ul>\n<h2 id=\"上溢-x2F-下溢\"><a href=\"#上溢-x2F-下溢\" class=\"headerlink\" title=\"上溢&#x2F;下溢\"></a>上溢&#x2F;下溢</h2><p>20种溢出情况</p>\n<h2 id=\"Dos-with-Throw\"><a href=\"#Dos-with-Throw\" class=\"headerlink\" title=\"Dos with Throw\"></a>Dos with Throw</h2><p>低成本阻塞，比如投标的合约</p>\n<h2 id=\"Dos-with-Block-Gas-Limit\"><a href=\"#Dos-with-Block-Gas-Limit\" class=\"headerlink\" title=\"Dos with Block Gas Limit\"></a>Dos with Block Gas Limit</h2><p>for 循环内的转账</p>\n<h2 id=\"call-Depth\"><a href=\"#call-Depth\" class=\"headerlink\" title=\"call Depth\"></a>call Depth</h2><p>调用超过次数限制，EIP150 已经修复</p>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"Mac配置以太坊本地开发环境","url":"/mac_eth_env/","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li><p>1.使用官方的go版本直接安装</p>\n</li>\n<li><p>2.也可以通过源码构建（<code>git clone https://github.com/ethereum/go-ethereum</code>）</p>\n</li>\n<li><p>3.mac中brew安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew tap ethereum/ethereum</span><br><span class=\"line\">brew install ethereum</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>安装好以后就可以启动了，因为是在本地开发所以启动的时候要加一些自定义启动参数，来配置一下，帮助查看命令geth -h。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定一个数据存储目前避免和公有链数据冲突，—dev 指定为开发模式这样就不用同步公有链上的区块，公有链的数据量几十个G太大了，共识速度也比较慢。</span></span><br><span class=\"line\">geth --datadir <span class=\"string\">&quot;~/ethdev&quot;</span> --dev  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进入登录\"><a href=\"#进入登录\" class=\"headerlink\" title=\"进入登录\"></a>进入登录</h3><p>以上命令启动成功之后，需要另打一个终端进入登录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">geth  --dev console 2&gt;&gt; file_to_log_output</span><br></pre></td></tr></table></figure>\n\n<p>进入开发模式的控制台，并把日志输出到一个文本文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">Last login: Sat Nov  5 09:17:42 on ttys000</span><br><span class=\"line\"></span><br><span class=\"line\">localhost:~ pro1$ geth --dev console 2&gt;&gt; file_to_log_output</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to the Geth JavaScript console!</span><br><span class=\"line\"></span><br><span class=\"line\">instance: Geth/v1.4.18-stable-c72f5459/darwin/go1.7.3</span><br><span class=\"line\"></span><br><span class=\"line\">coinbase: 0x73e8655a84a37685d98891b7a9333a7423e12cb3</span><br><span class=\"line\"></span><br><span class=\"line\">at block: 0 (Thu, 01 Jan 1970 08:00:00 CST)</span><br><span class=\"line\"></span><br><span class=\"line\"> datadir: /var/folders/8z/kp024pxd4j9194b34z_v06_c0000gn/T/ethereum_dev_mode</span><br><span class=\"line\"></span><br><span class=\"line\"> modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 shh:1.0 txpool:1.0 web3:1.0</span><br></pre></td></tr></table></figure>\n\n<p>以上是登录成功的画面。</p>\n<h3 id=\"查看帐户信息\"><a href=\"#查看帐户信息\" class=\"headerlink\" title=\"查看帐户信息\"></a>查看帐户信息</h3><p>登录成功以后可以查看当前有哪些帐户</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">eth.accounts</span><br><span class=\"line\">[<span class=\"string\">&quot;0x73e8655a84a37685d98891b7a9333a7423e12cb3&quot;</span>, <span class=\"string\">&quot;0xa9d6dfff13c1050f19a8ffc2811c68842797d01c&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>我本地创建已经创建了两个帐户。</p>\n<h3 id=\"创建新账户\"><a href=\"#创建新账户\" class=\"headerlink\" title=\"创建新账户\"></a>创建新账户</h3><p>再创建一个：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">personal.newAccount(<span class=\"string\">&#x27;11111111&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;0xe30cecc37776895389b94033ac65eb3b98294659&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上通过<code>personal.newAccount</code>传入密码参数即可创建一个新帐户并返回新的帐户地址；</p>\n<p>新打开一个终端可以查看本地创建了多少个帐户：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">localhost:~ pro1$ geth account list</span><br><span class=\"line\"></span><br><span class=\"line\">Account <span class=\"comment\">#0: &#123;73e8655a84a37685d98891b7a9333a7423e12cb3&#125; /Users/wangtao/Library/Ethereum/keystore/UTC--2016-11-04T06-48-39.698325708Z--73e8655a84a37685d98891b7a9333a7423e12cb3</span></span><br><span class=\"line\"></span><br><span class=\"line\">Account <span class=\"comment\">#1: &#123;a9d6dfff13c1050f19a8ffc2811c68842797d01c&#125; /Users/wangtao/Library/Ethereum/keystore/UTC--2016-11-04T06-49-00.457262369Z--a9d6dfff13c1050f19a8ffc2811c68842797d01c</span></span><br><span class=\"line\"></span><br><span class=\"line\">Account <span class=\"comment\">#2: &#123;e30cecc37776895389b94033ac65eb3b98294659&#125; /Users/wangtao/Library/Ethereum/keystore/UTC--2016-11-05T01-35-55.852748174Z--e30cecc37776895389b94033ac65eb3b98294659</span></span><br><span class=\"line\"></span><br><span class=\"line\">localhost:~ pro1 $ </span><br></pre></td></tr></table></figure>\n\n<p>我本地已经有三个了。然后再切回已经登录成功的控制台客户端。</p>\n<h3 id=\"查看余额\"><a href=\"#查看余额\" class=\"headerlink\" title=\"查看余额\"></a>查看余额</h3><p>在以太坊客户端可以把某个帐户赋值给一个变量</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; user1=eth.accounts[0]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;0x73e8655a84a37685d98891b7a9333a7423e12cb3&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后可以查看当前帐户的余额:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(user1)</span><br><span class=\"line\">0</span><br><span class=\"line\">&gt; eth.blockNumber</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<p>可以查看当前user1的余额为0，默认也是0个区块，因为还没有启动矿挖矿。</p>\n<h3 id=\"启动挖矿\"><a href=\"#启动挖矿\" class=\"headerlink\" title=\"启动挖矿\"></a>启动挖矿</h3><p>现在我们启动挖矿，挖矿前我们先打开实时监控日志，就是刚才控制台输出的日志文本文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">localhost:~ pro1$ geth --dev console 2&gt;&gt; file_to_log_output</span><br></pre></td></tr></table></figure>\n\n<p>这个文件我指定在了我的根目录下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tail</span> -f file_to_log_out</span><br></pre></td></tr></table></figure>\n\n<p>启动挖矿</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; miner.start()</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面打开发文件监控界面就会看到挖矿建块儿情况。</p>\n<p>再切回以太坊挖制台，查看用户余额:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(user1)</span><br><span class=\"line\">1.25890625e+21</span><br><span class=\"line\">&gt; eth.getBalance(user2)</span><br><span class=\"line\">0</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n\n<p>已经看到帐户1，已经有余额了，帐户2还是0，因为挖矿的奖励进入第一个帐户中。</p>\n<h3 id=\"停止挖矿\"><a href=\"#停止挖矿\" class=\"headerlink\" title=\"停止挖矿\"></a>停止挖矿</h3><p>现在停止挖矿：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; miner.stop()</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>已经停止成功，另外日志界面也停止输出</p>\n<p>再查看一下当前的区块高度：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.blockNumber</span><br><span class=\"line\">288</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转账\"><a href=\"#转账\" class=\"headerlink\" title=\"转账\"></a>转账</h3><p>现在帐户2中没有余额，我们从帐户1转发几个以太币到 帐户2中：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.sendTransaction(&#123;from: user1,to: user2,value: web3.toWei(3,<span class=\"string\">&quot;ether&quot;</span>)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">account is locked</span><br><span class=\"line\"></span><br><span class=\"line\">    at web3.js:3119:20</span><br><span class=\"line\"></span><br><span class=\"line\">    at web3.js:6023:15</span><br><span class=\"line\"></span><br><span class=\"line\">    at web3.js:4995:36</span><br><span class=\"line\"></span><br><span class=\"line\">    at &lt;anonymous&gt;:1:1</span><br></pre></td></tr></table></figure>\n\n<p>由于默认帐户是锁定的，首要解锁帐户，然后再 转帐,先查看 下下当前帐户，再解锁：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">&quot;0x73e8655a84a37685d98891b7a9333a7423e12cb3&quot;</span>, <span class=\"string\">&quot;0xa9d6dfff13c1050f19a8ffc2811c68842797d01c&quot;</span>, <span class=\"string\">&quot;0xe30cecc37776895389b94033ac65eb3b98294659&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; personal.unlockAccount(<span class=\"string\">&#x27;0x73e8655a84a37685d98891b7a9333a7423e12cb3&#x27;</span>,<span class=\"string\">&#x27;11111111&#x27;</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面已经提示解锁成功，然后继教转帐：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.sendTransaction(&#123;from: user1,to: user2,value: web3.toWei(3,<span class=\"string\">&quot;ether&quot;</span>)&#125;)</span><br><span class=\"line\"><span class=\"string\">&quot;0x8f164a1296b618bdd64fcc007f6d39ce022b57e257beefeb76288cdef220ad80&quot;</span></span><br><span class=\"line\">&gt; eth.getBalance(user2)</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<p>上面已经提示转帐成功了，但是user2帐户余额依然是0，是因为没有矿工来挖矿处理，我们启动一个矿工，并在另一个终端查看日志</p>\n<p>日志已经显示开始挖矿并发交易进行了处理在，区块293中，</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; miner.start()</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; miner.stop()</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; eth.getBalance(user2)</span><br><span class=\"line\">3000000000000000000</span><br></pre></td></tr></table></figure>\n\n<p>我们再次查看余额的时候user2已经 有三个以太币了，这样一个转帐的交易就完成了</p>\n","categories":["BlockChain"],"tags":["区块链","eth","mac"]},{"title":"Ubuntu下搭建一个以太坊私有区块链环境","url":"/ubuntu_eth_private/","content":"<blockquote>\n<p>这篇文章参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly95ZWFzeS5naXRib29rcy5pby9ibG9ja2NoYWluX2d1aWRlL2NvbnRlbnQvZXRoZXJldW0vaW5zdGFsbC5odG1s\">区块链技术指南<i class=\"fa fa-external-link-alt\"></i></span> 。但原文是Happy flow。这里把我安装过程中碰到的坑也都记录下来。我使用的是Ubuntu 14.10。这是以太坊推荐的版本。 最近在研究区块链。打算先搭建一个测试环境开始运行。这里记录整个搭建过程，供后来人参考。 整体上，分为三个步骤，安装相关软件，初始化系统，建立集群，以及最后一步，挖矿。 我们采用的是以太坊，相对其他区块链，这是一个成熟的环境。 虽然近期有硬分支的事件，对企业应用来说，功能上还算是比较完善的。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h2><h3 id=\"安装Go环境\"><a href=\"#安装Go环境\" class=\"headerlink\" title=\"安装Go环境\"></a>安装Go环境</h3><p>如果机器无法上外网，还得配置一下代理。 Ubuntu配置代理的方式网上很多，这里不介绍。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -O https://storage.googleapis.com/golang/go1.5.1.linux-amd64.tar.gz</span><br><span class=\"line\">tar -C /usr/local -xzf go1.5.1.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/go</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;export GOPATH=<span class=\"variable\">$HOME</span>/go&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;export PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/go/bin:/usr/local/go/bin&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-ethereum\"><a href=\"#安装-ethereum\" class=\"headerlink\" title=\"安装 ethereum\"></a>安装 ethereum</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install software-properties-common</span><br><span class=\"line\">sudo add-apt-repository -y ppa:ethereum/ethereum</span><br><span class=\"line\">sudo add-apt-repository -y ppa:ethereum/ethereum-dev</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install ethereum</span><br></pre></td></tr></table></figure>\n\n<p>在执行 <code>sudo add-apt-repository -y ppa:ethereum/ethereum</code> 的时候碰到这个问题：</p>\n<p><code>sudo add-apt-repository -y ppa:ethereum/ethereum Cannot add PPA: &#39;ppa:ethereum/ethereum&#39;. Please check that the PPA name or format is correct.</code></p>\n<p>按照 <span class=\"exturl\" data-url=\"aHR0cDovL2Fza3VidW50dS5jb20vcXVlc3Rpb25zLzQyOTgwMy9jYW5ub3QtYWRkLXBwYS1wbGVhc2UtY2hlY2stdGhhdC10aGUtcHBhLW5hbWUtb3ItZm9ybWF0LWlzLWNvcnJlY3Q=\">Ask Ubuntu<i class=\"fa fa-external-link-alt\"></i></span> 的意见，修改为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install software-properties-common</span><br><span class=\"line\">sudo -E add-apt-repository -y ppa:ethereum/ethereum</span><br><span class=\"line\">sudo -E add-apt-repository -y ppa:ethereum/ethereum-dev</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install ethereum</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-solc-编译器\"><a href=\"#安装-solc-编译器\" class=\"headerlink\" title=\"安装 solc 编译器\"></a>安装 solc 编译器</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:ethereum/ethereum-qt</span><br><span class=\"line\">sudo add-apt-repository ppa:ethereum/ethereum</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install cpp-ethereum</span><br></pre></td></tr></table></figure>\n\n<p>同样的，如果碰到PPA Name错误的警示，则执行如下操作：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo -E add-apt-repository ppa:ethereum/ethereum-qt</span><br><span class=\"line\">sudo -E add-apt-repository ppa:ethereum/ethereum</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install cpp-ethereum</span><br></pre></td></tr></table></figure>\n\n<p>这样相关软件已经安装完毕。</p>\n<h2 id=\"搭建私链\"><a href=\"#搭建私链\" class=\"headerlink\" title=\"搭建私链\"></a>搭建私链</h2><h3 id=\"启动geth服务\"><a href=\"#启动geth服务\" class=\"headerlink\" title=\"启动geth服务\"></a>启动geth服务</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">geth --datadir <span class=\"string\">&quot;/root/chain&quot;</span> console</span><br></pre></td></tr></table></figure>\n\n<p>其中 datadir用于指定数据目录。</p>\n<h3 id=\"创建账号\"><a href=\"#创建账号\" class=\"headerlink\" title=\"创建账号\"></a>创建账号</h3><p>执行之后，进入 <code>geth</code> 的交互模式。 接着建立一个账号，然后退出。 这个账号用于执行创世操作。 然后 <code>exit</code>退出。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount(<span class=\"string\">&quot;密码&quot;</span>);</span><br><span class=\"line\"><span class=\"string\">&quot;0xea5c99831c2e4a0e094facdbac1befcf6c92e543&quot;</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建创世区块\"><a href=\"#创建创世区块\" class=\"headerlink\" title=\"创建创世区块\"></a>创建创世区块</h3><p>编译创建创世区块所需要的脚本， 注意alloc下的key需要和上述的账号保持一致。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim genesis.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;alloc&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;0xea5c99831c2e4a0e094facdbac1befcf6c92e543&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;balance&quot;</span>: <span class=\"string\">&quot;1000&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;nonce&quot;</span>: <span class=\"string\">&quot;0x0000000000000042&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;difficulty&quot;</span>: <span class=\"string\">&quot;0x020000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;mixhash&quot;</span>: <span class=\"string\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;coinbase&quot;</span>: <span class=\"string\">&quot;0x0000000000000000000000000000000000000000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;timestamp&quot;</span>: <span class=\"string\">&quot;0x00&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;parentHash&quot;</span>: <span class=\"string\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;extraData&quot;</span>: <span class=\"string\">&quot;CNNMoney Jack Ma interview: Wars start when trade stops, 20160902&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;gasLimit&quot;</span>: <span class=\"string\">&quot;0xffffffff&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>各个参数的含义如下：</p>\n<ul>\n<li>mixhash：与nonce配合用于挖矿，由上一个区块的一部分生成的hash。注意他和nonce的设置需要满足以太坊的Yellow paper, 4.3.4. Block Header Validity, (44)章节所描述的条件。</li>\n<li>nonce: nonce就是一个64位随机数，用于挖矿，注意他和mixhash的设置需要满足以太坊的Yellow paper, 4.3.4. Block Header Validity, (44)章节所描述的条件。</li>\n<li>difficulty: 设置当前区块的难度，如果难度过大，cpu挖矿就很难，这里设置较小难度</li>\n<li>alloc: 用来预置账号以及账号的以太币数量，因为私有链挖矿比较容易，所以我们不需要预置有币的账号，需要的时候自己创建即可以。</li>\n<li>coinbase: 矿工的账号，随便填</li>\n<li>timestamp: 设置创世块的时间戳</li>\n<li>parentHash: 上一个区块的hash值，因为是创世块，所以这个值是0</li>\n<li>extraData: 附加信息，随便填，可以填你的个性信息</li>\n<li>gasLimit: 该值设置对GAS的消耗总量限制，用来限制区块能包含的交易信息总和，因为我们是私有链，所以填最大。</li>\n</ul>\n<p>创建数据存放地址并初始化创世块。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">geth --datadir <span class=\"string\">&quot;/root/chain&quot;</span> init genesis.json</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"启动私链\"><a href=\"#启动私链\" class=\"headerlink\" title=\"启动私链\"></a>启动私链</h3><p>执行如下脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">geth --identity <span class=\"string\">&quot;phoenix&quot;</span> --rpc --rpccorsdomain <span class=\"string\">&quot;*&quot;</span> --datadir <span class=\"string\">&quot;/root/chain&quot;</span> --port <span class=\"string\">&quot;30303&quot;</span> --rpcapi <span class=\"string\">&quot;db,eth,net,web3&quot;</span> --networkid 98888 console</span><br></pre></td></tr></table></figure>\n\n<p>各参数说明如下：</p>\n<ul>\n<li>identity：区块链的标示，随便填写，用于标示目前网络的名字</li>\n<li>init：指定创世块文件的位置，并创建初始块</li>\n<li>datadir：设置当前区块链网络数据存放的位置</li>\n<li>port：网络监听端口,默认是8080</li>\n<li>rpc：启动rpc通信，可以进行智能合约的部署和调试。它在geth中通常被默认激活。</li>\n<li>rpcapi： 设置允许连接的rpc的客户端，一般为db,eth,net,web3</li>\n<li>networkid： 设置当前区块链的网络ID，用于区分不同的网络，是一个数字</li>\n<li>console：启动命令行模式，可以在Geth中执行命令</li>\n</ul>\n<p>此外，还可以使用如下参数：</p>\n<ul>\n<li>nodiscover: 使用这个命令可以确保你的节点不会被非手动添加你的人发现。否则，你的节点可能被陌生人的区块链无意添加，如果他和你有相同的初始文件和网络ID。</li>\n<li>maxpeers: 如果你不希望其他人连接到你的测试链，可以使用maxpeers 0。反之，如果你确切知道希望多少人连接到你的节点，你也可以通过调整数字来实现。</li>\n<li>rpcapi: 这个命令可以决定允许什么API通过RPC进入。在默认情况下，geth可以在RPC激活web3界面。请注意在RPC&#x2F;IPC界面提供API，会使每个可以进入这个界面（例如dapp’s）的人都有权限访问这个API。注意你激活的是哪个API。Geth会默认激活IPC界面上所有的API，以及RPC界面上的db,eth,net和web3 API。</li>\n<li>rpccorsdomain: 这个可以指示什么URL能连接到你的节点来执行RPC定制端任务。务必谨慎，输入一个特定的URL而不是wildcard ( * )，后者会使所有的URL都能连接到你的RPC实例。<br>启动后界面如下，光标停留在最后的命令行上，可以执行以太坊命令。 可以看到 <code>Listening on [::]:30303</code> 和 <code>Welcome to the Geth JavaScript console!</code> 的提示，说明已经启动成功 注意：如果想将Ubuntu作为永久区块链节点使用，当使用 <code>nohup</code> 命令时，Geth启动参数 <code>console</code> 必须去掉，否则Geth会自动停止。</li>\n</ul>\n<h3 id=\"查看节点信息\"><a href=\"#查看节点信息\" class=\"headerlink\" title=\"查看节点信息\"></a>查看节点信息</h3><p>常用命令：</p>\n<ul>\n<li><strong>net.listening</strong> ：查看网络是否在监听；</li>\n<li><strong>admin.peers</strong> : 查看当前连接的节点。 目前还是空的。</li>\n<li><strong>admin.nodeInfo</strong> ：查看当前节点的信息。</li>\n</ul>\n<p>执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin.nodeInfo</span><br></pre></td></tr></table></figure>\n\n<p>得到当前节点信息如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  enode: <span class=\"string\">&quot;enode://dfd047d64a3d8c9d9c2834bc8c3bbf41a79e6797956fa99469b872d97a7978e4e7a6d9605ec6e77164515f6f09d979999ca3ef91eebcd2a6c91ebdfe167de094@[::]:30303&quot;</span>,</span><br><span class=\"line\">  <span class=\"built_in\">id</span>: <span class=\"string\">&quot;dfd047d64a3d8c9d9c2834bc8c3bbf41a79e6797956fa99469b872d97a7978e4e7a6d9605ec6e77164515f6f09d979999ca3ef91eebcd2a6c91ebdfe167de094&quot;</span>,</span><br><span class=\"line\">  ip: <span class=\"string\">&quot;::&quot;</span>,</span><br><span class=\"line\">  listenAddr: <span class=\"string\">&quot;[::]:30303&quot;</span>,</span><br><span class=\"line\">  name: <span class=\"string\">&quot;Geth/v1.5.0-unstable/linux/go1.5.1/phoenix&quot;</span>,</span><br><span class=\"line\">  ports: &#123;</span><br><span class=\"line\">    discovery: 30303,</span><br><span class=\"line\">    listener: 30303</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  protocols: &#123;</span><br><span class=\"line\">    eth: &#123;</span><br><span class=\"line\">      difficulty: 131072,</span><br><span class=\"line\">      genesis: <span class=\"string\">&quot;0xaab381212b8108c488c8d21c06042a9081b94bfb87665110520d3c295626e79b&quot;</span>,</span><br><span class=\"line\">      <span class=\"built_in\">head</span>: <span class=\"string\">&quot;0xaab381212b8108c488c8d21c06042a9081b94bfb87665110520d3c295626e79b&quot;</span>,</span><br><span class=\"line\">      network: 98888</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意enode节点，这是当前节点的标识。 后续会用到这个值。</p>\n<h3 id=\"查看账户信息\"><a href=\"#查看账户信息\" class=\"headerlink\" title=\"查看账户信息\"></a>查看账户信息</h3><p>在创建创世节点时，我们创建了个默认账户。可以通过如下命令查看账户余额。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts</span><br><span class=\"line\">[<span class=\"string\">&quot;0x4b691e86c622127ed8e1d49899ad8c1d19834327&quot;</span>]</span><br><span class=\"line\">&gt; primary=eth.accounts[0]</span><br><span class=\"line\"><span class=\"string\">&quot;0x4b691e86c622127ed8e1d49899ad8c1d19834327&quot;</span></span><br><span class=\"line\">&gt; balance = web3.fromWei(eth.getBalance(primary), <span class=\"string\">&quot;ether&quot;</span>);</span><br><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置第二台私链服务器\"><a href=\"#配置第二台私链服务器\" class=\"headerlink\" title=\"配置第二台私链服务器\"></a>配置第二台私链服务器</h2><p>第二台私链服务器，需要把第一台的步骤基本都要重复一遍。两台服务器配置一样才可以通讯。 需要改变的地方是：</p>\n<ol>\n<li>第三步创建genesis.json的时候，完全使用第一台服务器的配置，不要用新建的account来创建。</li>\n<li>需要将第一台服务器添加到静态节点列表中。</li>\n</ol>\n<h3 id=\"添加静态节点列表\"><a href=\"#添加静态节点列表\" class=\"headerlink\" title=\"添加静态节点列表\"></a>添加静态节点列表</h3><p>在{datadir}下添加文件 static-nodes.json,内容如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\"><span class=\"string\">&quot;enode://dfd047d64a3d8c9d9c2834bc8c3bbf41a79e6797956fa99469b872d97a7978e4e7a6d9605ec6e77164515f6f09d979999ca3ef91eebcd2a6c91ebdfe167de094@第一个节点的IP地址:30303&quot;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>执行如下脚本启动节点：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">geth --identity <span class=\"string\">&quot;phoenix&quot;</span>  --rpc  --rpccorsdomain <span class=\"string\">&quot;*&quot;</span> --datadir <span class=\"string\">&quot;/root/chain&quot;</span> --port <span class=\"string\">&quot;30303&quot;</span>  --rpcapi <span class=\"string\">&quot;db,eth,net,web3&quot;</span> --networkid 98888 console</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>--networkid</code>     value<br>指定以太坊网络id，其实就是区块链网络的身份标示，公有链为1，测试链为3，默认启动id为1。请保持和启动的第一个是一致的。</li>\n</ul>\n<p>启动成功后，查看当前连接的节点：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; admin.peers</span><br><span class=\"line\">[&#123;</span><br><span class=\"line\">    caps: [<span class=\"string\">&quot;eth/62&quot;</span>, <span class=\"string\">&quot;eth/63&quot;</span>],</span><br><span class=\"line\">    <span class=\"built_in\">id</span>: <span class=\"string\">&quot;dfd047d64a3d8c9d9c2834bc8c3bbf41a79e6797956fa99469b872d97a7978e4e7a6d9605ec6e77164515f6f09d979999ca3ef91eebcd2a6c91ebdfe167de094&quot;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&quot;Geth/v1.5.0-unstable/linux/go1.5.1/phoenix&quot;</span>,</span><br><span class=\"line\">    network: &#123;</span><br><span class=\"line\">      localAddress: <span class=\"string\">&quot;10.15.244.204:56808&quot;</span>,</span><br><span class=\"line\">      remoteAddress: <span class=\"string\">&quot;10.15.244.203:30303&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    protocols: &#123;</span><br><span class=\"line\">      eth: &#123;</span><br><span class=\"line\">        difficulty: 131072,</span><br><span class=\"line\">        <span class=\"built_in\">head</span>: <span class=\"string\">&quot;0xaab381212b8108c488c8d21c06042a9081b94bfb87665110520d3c295626e79b&quot;</span>,</span><br><span class=\"line\">        version: 63</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"挖矿\"><a href=\"#挖矿\" class=\"headerlink\" title=\"挖矿\"></a>挖矿</h2><p>激动人心的时刻到了。 作为一个伪金融圈人士，最大的梦想，古时候叫拥有一个聚宝盆，现在叫拥有一个印钞权，在数字货币时代，叫拥有一个挖矿机。 自己搭建的区块链，想怎么挖就怎么挖吧。 私链启动起来之后，挖矿其实很简单了。 首先必须保证的有一个账号：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts</span><br><span class=\"line\">[<span class=\"string\">&quot;0x1b39aa2446de648dd6928a759c542690cc32757b&quot;</span>]</span><br><span class=\"line\">&gt; eth.getBalance(eth.accounts[0]).toNumber();</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<p>账号里没钱。 那就开始挖吧。挖矿其实很简单，一个命令就开始了。默认的，挖到的钱，都放在当前账号中。如果有多个账号，默认的放到第一个账号中。 在geth环境下，运行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; miner.start();</span><br></pre></td></tr></table></figure>\n\n<p>或者运行命令行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">geth --mine --minerthreads=4</span><br></pre></td></tr></table></figure>\n\n<p>minerthreads用来指定运行的线程数。默认为当前CPU的核数。 如果有多个账号，可以指定挖矿收入放到第几个账号，注意编号是从0开始的：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh miner.setEtherbase(eth.accounts\\[0\\])</span><br></pre></td></tr></table></figure>\n\n<p>或者命令行执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">geth --etherbase 0 --mine  2&gt;&gt; geth.log // 0 is index: first account by creation order OR</span><br><span class=\"line\">geth --etherbase <span class=\"string\">&#x27;0x1b39aa2446de648dd6928a759c542690cc32757b&#x27;</span> --mine 2&gt;&gt; geth.log</span><br></pre></td></tr></table></figure>\n\n<p>半小时后，查看下账户余额：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[0]).toNumber();</span><br><span class=\"line\">1.5971875e+21</span><br></pre></td></tr></table></figure>\n\n<p>话说， e+21，那是多大的数字啊？？一辈子还没见过这么多钱。请多多支持！</p>\n","categories":["BlockChain"],"tags":["eth","linux","ubuntu"]},{"title":"以太坊mist使用记录","url":"/eth_mist/","content":"<h3 id=\"创建私有链的geth命令\"><a href=\"#创建私有链的geth命令\" class=\"headerlink\" title=\"创建私有链的geth命令\"></a>创建私有链的geth命令</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">geth --datadir <span class=\"string\">&quot;./&quot;</span> init genesis.json</span><br><span class=\"line\">geth --datadir <span class=\"string\">&quot;./&quot;</span> --nodiscover console 2&gt;&gt;geth.log</span><br></pre></td></tr></table></figure>\n\n<p>在命令行模式下, 新建账号，并且启动挖矿</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount(<span class=\"string\">&quot;123&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;0x48ad44beba68a981e103d28b2bd5777ef21ba0e3&quot;</span></span><br><span class=\"line\">&gt; miner.start()</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>如果链条已经被关闭的话，或者启动不了，或者挖矿无法产生比特币的话，可以重置以太坊私链。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"重置以太坊私有链\"><a href=\"#重置以太坊私有链\" class=\"headerlink\" title=\"重置以太坊私有链\"></a>重置以太坊私有链</h4><ul>\n<li>1.删除根目录下的隐藏文件夹<code>.ethash</code>, 在mac系统中该文件夹在 <code>~/</code>下</li>\n<li>2.删除以太坊私有链所在文件夹下的geth&#x2F;keystore两个文件夹</li>\n</ul>\n<p>打开私有链所在文件夹，注意应该有一个文件，叫geth.ipc, 记录下文件夹地址</p>\n<h3 id=\"Mist-工具\"><a href=\"#Mist-工具\" class=\"headerlink\" title=\"Mist 工具\"></a>Mist 工具</h3><p>Mist github地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL21pc3Q=\">https://github.com/ethereum/mist<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<p>The Mist browser is the tool of choice to browse and use Ðapps.</p>\n</blockquote>\n<p>Mist 是以太坊官方提供的浏览器，通过Mist我们可以很方便的连接上我们的私有网络，从而更好的开发、调试、测试我们的智能合约。</p>\n<h4 id=\"Step-1-安装依赖项\"><a href=\"#Step-1-安装依赖项\" class=\"headerlink\" title=\"Step 1 安装依赖项\"></a>Step 1 安装依赖项</h4><p>安装步骤，请参见github地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL21pc3Q=\">https://github.com/ethereum/mist<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl https://install.meteor.com/ | sh</span><br><span class=\"line\">npm install -g electron@1.3.13</span><br><span class=\"line\">npm install -g gulp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-2-安装Mist本体\"><a href=\"#Step-2-安装Mist本体\" class=\"headerlink\" title=\"Step 2 安装Mist本体\"></a>Step 2 安装Mist本体</h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ethereum/mist.git </span><br><span class=\"line\"><span class=\"built_in\">cd</span> mist</span><br><span class=\"line\">git submodule update --init $ yarn</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-3-运行Mist-x2F-interface-也就是mist的后台程序\"><a href=\"#Step-3-运行Mist-x2F-interface-也就是mist的后台程序\" class=\"headerlink\" title=\"Step 3 运行Mist&#x2F;interface 也就是mist的后台程序\"></a>Step 3 运行Mist&#x2F;interface 也就是mist的后台程序</h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> mist/interface &amp;&amp; meteor --no-release-check</span><br></pre></td></tr></table></figure>\n\n<p>这个阶段费时可能稍长，会启动mongodb, proxy等。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">[[[[[ /wwwroot/html/mist/interface ]]]]]</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; Started proxy.</span><br><span class=\"line\">=&gt; Started MongoDB.</span><br><span class=\"line\">=&gt; Started your app.</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; App running at: http://localhost:3000/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Step-4-新开一个窗口，用geth-ipc启动Mist\"><a href=\"#Step-4-新开一个窗口，用geth-ipc启动Mist\" class=\"headerlink\" title=\"Step 4 新开一个窗口，用geth.ipc启动Mist\"></a>Step 4 新开一个窗口，用geth.ipc启动Mist</h4><p>新开一个窗口，回到mist文件夹下面，输入下方的命令 </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">electron . --rpc /Users/linchen/steveproject2/tmpPrivate/geth.ipc</span><br></pre></td></tr></table></figure>\n\n<p>注意这里的地址<code>/Users/linchen/steveproject2/tmpPrivate/geth.ipc</code> 就是前面我们新建的以太坊私有连下的geth.ipc文件。</p>\n<p><strong>注:</strong><br><em>一定要先开启 <code>meteor --no-release-check</code> 然后在开启 <code>electron . --rpc http://loclahost:8545</code></em></p>\n","categories":["BlockChain"],"tags":["eth","mist"]},{"title":"以太坊合约资料收集","url":"/eth_contract/","content":"<ul>\n<li>jsapi文档 ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9KYXZhU2NyaXB0LUFQSSNjb250cmFjdC1ldmVudHM=\">wike-jsapi<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>科普流程：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzViNDU0OWM0ZmI2OA==\">区块链之以太坊初体验——以太坊平台学习总结<i class=\"fa fa-external-link-alt\"></i></span> </li>\n<li>初级流程：<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3BvcnRzaGFyay9hcnRpY2xlL2RldGFpbHMvNTIyNDk2MDc=\">csdn部署和运行第一个以太坊智能合约<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>相当全面的知识：<span class=\"exturl\" data-url=\"aHR0cDovL2dpMS5jbi90b3BpY3MvY2F0ZWdvcnkvZXRoZXJldW0vcGFnZS8y\">以太坊博客<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>官方封装好的jsonrpc接口：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dlYjMuanM=\">web3.js<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>官方文档：<span class=\"exturl\" data-url=\"aHR0cDovL2V0aGRvY3Mub3JnL2VuL2xhdGVzdC9ldGhlcmV1bS1jbGllbnRzL2Nob29zaW5nLWEtY2xpZW50Lmh0bWw=\">ethdocs.org<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>命令行api：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2dvLWV0aGVyZXVtL3dpa2kvTWFuYWdlbWVudC1BUElzI2FkbWluX25vZGVpbmZv\">GethApi<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>建立私有链：<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRERGRlIvYXJ0aWNsZS9kZXRhaWxzLzczODQ4NzYy\">在以太坊私有网络中建立节点集群,并发生交易<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>智能合约文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZXRoZXJldW0ub3JnL3Rva2VuI3RoZS1jb2lu\">solidity<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<span id=\"more\"></span>\n","categories":["BlockChain"],"tags":["eth"]},{"title":"以太坊学习笔记：私有链搭建操作指南","url":"/eth_private/","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>虽然以太坊是一个公有链系统，但是我们可以通过设置一些参数来运行自己的私有链节点，在自己的私有链上进行开发和测试不需要同步公有链数据，也不需要花钱来买以太币，节省存储空间和成本，而且很灵活很方便。本文介绍使用geth客户端搭建私有链的操作步骤，同时会解释在这个过程中用到的各个命令及选项的含义和作用，最后会介绍geth的JavaScript Console中的一些常用功能。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"系统和软件\"><a href=\"#系统和软件\" class=\"headerlink\" title=\"系统和软件\"></a>系统和软件</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">Ubuntu 16.04 64位</span><br><span class=\"line\">geth 1.5.6 =&gt;(安装教程)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"搭建私有链\"><a href=\"#搭建私有链\" class=\"headerlink\" title=\"搭建私有链\"></a>搭建私有链</h2><h3 id=\"准备创世区块配置文件\"><a href=\"#准备创世区块配置文件\" class=\"headerlink\" title=\"准备创世区块配置文件\"></a>准备创世区块配置文件</h3><p>以太坊支持自定义创世区块，要运行私有链，我们就需要定义自己的创世区块，创世区块信息写在一个json格式的配置文件中。首先将下面的内容保存到一个json文件中，例如<code>genesis.json</code>。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;config&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;chainId&quot;</span>: 0,</span><br><span class=\"line\">      <span class=\"string\">&quot;homesteadBlock&quot;</span>: 0,</span><br><span class=\"line\">      <span class=\"string\">&quot;eip155Block&quot;</span>: 0,</span><br><span class=\"line\">      <span class=\"string\">&quot;eip158Block&quot;</span>: 0</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;coinbase&quot;</span>   : <span class=\"string\">&quot;0x0000000000000000000000000000000000000000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;difficulty&quot;</span> : <span class=\"string\">&quot;0x400&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;extraData&quot;</span>  : <span class=\"string\">&quot;0x0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;gasLimit&quot;</span>   : <span class=\"string\">&quot;0x2fefd8&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;nonce&quot;</span>      : <span class=\"string\">&quot;0xdeadbeefdeadbeef&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;mixhash&quot;</span>    : <span class=\"string\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;parentHash&quot;</span> : <span class=\"string\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;timestamp&quot;</span>  : <span class=\"string\">&quot;0x00&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;alloc&quot;</span>      : &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化：写入创世区块\"><a href=\"#初始化：写入创世区块\" class=\"headerlink\" title=\"初始化：写入创世区块\"></a>初始化：写入创世区块</h3><p>准备好创世区块配置文件后，需要初始化区块链，将上面的创世区块信息写入到区块链中。首先要新建一个目录用来存放区块链数据，假设新建的数据目录为<code>~/privatechain/data0</code>，<code>genesis.json</code>保存在<code>~/privatechain</code>中，此时目录结构应该是这样的：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">privatechain</span><br><span class=\"line\">├── data0</span><br><span class=\"line\">└── genesis.json</span><br></pre></td></tr></table></figure>\n\n<p>接下来进入<code>privatechain</code>中，执行初始化命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> privatechain</span><br><span class=\"line\">geth --datadir data0 init genesis.json</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令的主体是<code>geth init</code>，表示初始化区块链，命令可以带有选项和参数，其中<code>–datadir</code>选项后面跟一个目录名，这里为<code>data0</code>，表示指定数据存放目录为<code>data0</code>，<code>genesis.json</code>是init命令的参数。</p>\n<p>运行上面的命令，会读取<code>genesis.json</code>文件，根据其中的内容，将创世区块写入到区块链中。如果看到以下的输出内容，说明初始化成功了。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">I0322 10:52:44.585282 cmd/geth/chaincmd.go:131] successfully wrote genesis block and/or chain rule <span class=\"built_in\">set</span>: b240e0678c2a8f87cf350225b528e3d97688aad6d4d84ee84e405c7fc9e37e4e</span><br></pre></td></tr></table></figure>\n\n<p>初始化成功后，会在数据目录<code>data0</code>中生成<code>geth</code>和<code>keystore</code>两个文件夹，此时目录结构如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">privatechain</span><br><span class=\"line\">├── data0</span><br><span class=\"line\">│   ├── geth</span><br><span class=\"line\">│   │   └── chaindata</span><br><span class=\"line\">│   │       ├── 000002.<span class=\"built_in\">log</span></span><br><span class=\"line\">│   │       ├── CURRENT</span><br><span class=\"line\">│   │       ├── LOCK</span><br><span class=\"line\">│   │       ├── LOG</span><br><span class=\"line\">│   │       └── MANIFEST-000003</span><br><span class=\"line\">│   └── keystore</span><br><span class=\"line\">└── genesis.json</span><br></pre></td></tr></table></figure>\n\n<p>其中g<code>eth/chaindata</code>中存放的是区块数据，<code>keystore</code>中存放的是账户数据。</p>\n<h3 id=\"启动私有链节点\"><a href=\"#启动私有链节点\" class=\"headerlink\" title=\"启动私有链节点\"></a>启动私有链节点</h3><p>初始化完成后，就有了一条自己的私有链，之后就可以启动自己的私有链节点并做一些操作，在终端中输入以下命令即可启动节点：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">geth –datadir data0 –networkid 1108 console</span><br></pre></td></tr></table></figure>\n\n<p>上面命令的主体是<code>geth console</code>，表示启动节点并进入交互式控制台，<code>–datadir</code>选项指定使用<code>data0</code>作为数据目录，<code>–networkid</code>选项后面跟一个数字，这里是1108，表示指定这个私有链的网络id为1108。网络id在连接到其他节点的时候会用到，以太坊公网的网络id是1，为了不与公有链网络冲突，运行私有链节点的时候要指定自己的网络id。</p>\n<p>运行上面的命令后，就启动了区块链节点并进入了javascript Console：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">Welcome to the Geth JavaScript console!</span><br><span class=\"line\"></span><br><span class=\"line\">instance: Geth/v1.5.6-stable/linux/go1.7.3</span><br><span class=\"line\">modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0</span><br></pre></td></tr></table></figure>\n\n<p>这是一个交互式的Javascript执行环境，在这里面可以执行Javascript代码，其中&gt;是命令提示符。在这个环境里也内置了一些用来操作以太坊的Javascript对象，可以直接使用这些对象。这些对象主要包括：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">eth：包含一些跟操作区块链相关的方法</span><br><span class=\"line\">net：包含以下查看p2p网络状态的方法</span><br><span class=\"line\">admin：包含一些与管理节点相关的方法</span><br><span class=\"line\">miner：包含启动&amp;停止挖矿的一些方法</span><br><span class=\"line\">personal：主要包含一些管理账户的方法</span><br><span class=\"line\">txpool：包含一些查看交易内存池的方法</span><br><span class=\"line\">web3：包含了以上对象，还包含一些单位换算的方法</span><br></pre></td></tr></table></figure>\n\n<p>探索Javascript Console<br>进入以太坊Javascript Console后，就可以使用里面的内置对象做一些操作，这些内置对象提供的功能很丰富，比如查看区块和交易、创建账户、挖矿、发送交易、部署智能合约等。 接下来介绍几个常用功能，下面的操作中，前面带&gt;的表示在Javascript Console中执行的命令。</p>\n<h3 id=\"创建账户\"><a href=\"#创建账户\" class=\"headerlink\" title=\"创建账户\"></a>创建账户</h3><p>前面只是搭建了私有链，并没有自己的账户，可以在js console中输入<code>eth.accounts</code>来验证：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts</span><br><span class=\"line\">[]</span><br><span class=\"line\">接下来使用personal对象来创建一个账户：</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; personal.newAccount()</span><br><span class=\"line\">Passphrase:</span><br><span class=\"line\">Repeat passphrase:</span><br><span class=\"line\"><span class=\"string\">&quot;0xc232e2add308136571bb8f9197ba4ae4e5ba9836&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>会提示输入密码和确认密码，输入密码不会有显示，只要输入就可以了，之后就会显示新创建的账户地址。</p>\n<p>可以创建多个账户，我们再来创建一个账户：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount()</span><br><span class=\"line\">Passphrase: </span><br><span class=\"line\">Repeat passphrase: </span><br><span class=\"line\"><span class=\"string\">&quot;0x814d39aa21f3eed069f2b21da7b5f857f7343afa&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来就可以查看到刚才创建的两个账户了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts</span><br><span class=\"line\">[<span class=\"string\">&quot;0xc232e2add308136571bb8f9197ba4ae4e5ba9836&quot;</span>, <span class=\"string\">&quot;0x814d39aa21f3eed069f2b21da7b5f857f7343afa&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>账户默认会保存在数据目录的keystore文件夹中。查看目录结构，发现<code>data0/keystore</code>中多了两个文件，这两个文件就对应刚才创建的两个账户，这是json格式的文本文件，可以打开查看，里面存的是私钥经过密码加密后的信息。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">data0</span><br><span class=\"line\">├── geth</span><br><span class=\"line\">│   ├── chaindata</span><br><span class=\"line\">│   ├── LOCK</span><br><span class=\"line\">│   ├── nodekey</span><br><span class=\"line\">│   └── nodes</span><br><span class=\"line\">├── geth.ipc</span><br><span class=\"line\">├── <span class=\"built_in\">history</span></span><br><span class=\"line\">└── keystore</span><br><span class=\"line\">    ├── UTC--2017-03-22T09-06-47.766993033Z--c232e2add308136571bb8f9197ba4ae4e5ba9836</span><br><span class=\"line\">    └── UTC--2017-03-22T09-09-42.041015656Z--814d39aa21f3eed069f2b21da7b5f857f7343afa</span><br></pre></td></tr></table></figure>\n\n<p>小提示：命令都可以按Tab键自动补全。</p>\n<h3 id=\"查看账户余额\"><a href=\"#查看账户余额\" class=\"headerlink\" title=\"查看账户余额\"></a>查看账户余额</h3><p>eth对象提供了查看账户余额的方法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[0])</span><br><span class=\"line\">0</span><br><span class=\"line\">&gt; eth.getBalance(eth.accounts[1])</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<p>目前两个账户的以太币余额都是0，要使账户有余额，可以从其他账户转账过来，或者通过挖矿来获得以太币奖励。</p>\n<h3 id=\"启动-amp-停止挖矿\"><a href=\"#启动-amp-停止挖矿\" class=\"headerlink\" title=\"启动&amp;停止挖矿\"></a>启动&amp;停止挖矿</h3><p>通过<code>miner.start()</code>来启动挖矿：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; miner.start(1)</span><br></pre></td></tr></table></figure>\n\n<p>其中start的参数表示挖矿使用的线程数。第一次启动挖矿会先生成挖矿所需的DAG文件，这个过程有点慢，等进度达到100%后，就会开始挖矿，此时屏幕会被挖矿信息刷屏。</p>\n<p>如果想停止挖矿，在js console中输入<code>miner.stop()</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; miner.stop()</span><br></pre></td></tr></table></figure>\n\n<p>注意：输入的字符会被挖矿刷屏信息冲掉，没有关系，只要输入完整的<code>miner.stop()</code>之后回车，即可停止挖矿。</p>\n<p>挖到一个区块会奖励5个以太币，挖矿所得的奖励会进入矿工的账户，这个账户叫做coinbase，默认情况下coinbase是本地账户中的第一个账户：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.coinbase</span><br><span class=\"line\"><span class=\"string\">&quot;0xc232e2add308136571bb8f9197ba4ae4e5ba9836&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>现在的coinbase是账户0，要想使挖矿奖励进入其他账户，通过<code>miner.setEtherbase()</code>将其他账户设置成coinbase即可：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; miner.setEtherbase(eth.accounts[1])</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; eth.coinbase</span><br><span class=\"line\"><span class=\"string\">&quot;0x814d39aa21f3eed069f2b21da7b5f857f7343afa&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们还是以账户0作为coinbase，挖到区块以后，账户0里面应该就有余额了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[0])</span><br><span class=\"line\">160000000000000000000</span><br></pre></td></tr></table></figure>\n\n<p><code>getBalance()</code>返回值的单位是wei，wei是以太币的最小单位，1个以太币&#x3D;10的18次方个wei。要查看有多少个以太币，可以用<code>web3.fromWei()</code>将返回值换算成以太币：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; web3.fromWei(eth.getBalance(eth.accounts[0]),<span class=\"string\">&#x27;ether&#x27;</span>)</span><br><span class=\"line\">160</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送交易\"><a href=\"#发送交易\" class=\"headerlink\" title=\"发送交易\"></a>发送交易</h3><p>目前，账户一的余额还是0：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[1])</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<p>可以通过发送一笔交易，从账户0转移5个以太币到账户1：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; amount = web3.toWei(5,<span class=\"string\">&#x27;ether&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;5000000000000000000&quot;</span></span><br><span class=\"line\">&gt; eth.sendTransaction(&#123;from:eth.accounts[0],to:eth.accounts[1],value:amount&#125;)</span><br><span class=\"line\">Error: account is locked</span><br><span class=\"line\">    at web3.js:3119:20</span><br><span class=\"line\">    at web3.js:6023:15</span><br><span class=\"line\">    at web3.js:4995:36</span><br><span class=\"line\">    at &lt;anonymous&gt;:1:1</span><br></pre></td></tr></table></figure>\n\n<p>这里报错了，原因是账户每隔一段时间就会被锁住，要发送交易，必须先解锁账户，由于我们要从账户0发送交易，所以要解锁账户0：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; personal.unlockAccount(eth.accounts[0])</span><br><span class=\"line\">Unlock account 0xc232e2add308136571bb8f9197ba4ae4e5ba9836</span><br><span class=\"line\">Passphrase: </span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>输入创建账户时设置的密码，就可以成功解锁账户。然后再发送交易：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; amount = web3.toWei(5,<span class=\"string\">&#x27;ether&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;5000000000000000000&quot;</span></span><br><span class=\"line\">&gt; eth.sendTransaction(&#123;from:eth.accounts[0],to:eth.accounts[1],value:amount&#125;)</span><br><span class=\"line\">I0322 19:39:36.300675 internal/ethapi/api.go:1047] Tx(0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825) to: 0x814d39aa21f3eed069f2b21da7b5f857f7343afa</span><br><span class=\"line\"><span class=\"string\">&quot;0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>此时交易已经提交到区块链，返回了交易的hash，但还未被处理，这可以通过查看txpool来验证：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; txpool.status</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  pending: 1,</span><br><span class=\"line\">  queued: 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中有一条pending的交易，pending表示已提交但还未被处理的交易。</p>\n<p>要使交易被处理，必须要挖矿。这里我们启动挖矿，然后等待挖到一个区块之后就停止挖矿：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; miner.start(1);admin.sleepBlocks(1);miner.stop();</span><br></pre></td></tr></table></figure>\n\n<p>当<code>miner.stop()</code>返回true后，txpool中pending的交易数量应该为0了，说明交易已经被处理了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; txpool.status</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  pending: 0,</span><br><span class=\"line\">  queued: 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时，交易已经生效，账户一应该已经收到了5个以太币了：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; web3.fromWei(eth.getBalance(eth.accounts[1]),<span class=\"string\">&#x27;ether&#x27;</span>)</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看交易和区块\"><a href=\"#查看交易和区块\" class=\"headerlink\" title=\"查看交易和区块\"></a>查看交易和区块</h3><p>eth对象封装了查看交易和区块信息的方法。</p>\n<p>查看当前区块总数：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.blockNumber</span><br><span class=\"line\">33</span><br></pre></td></tr></table></figure>\n\n<p>通过交易hash查看交易：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">eth.getTransaction(“0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825”)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  blockHash: “0xf5d3da50065ce5793c9571a031ad6fe5f1af326a3c4fb7ce16458f4d909c1613”,</span><br><span class=\"line\">  blockNumber: 33,</span><br><span class=\"line\">  from: “0xc232e2add308136571bb8f9197ba4ae4e5ba9836”,</span><br><span class=\"line\">  gas: 90000,</span><br><span class=\"line\">  gasPrice: 20000000000,</span><br><span class=\"line\">  <span class=\"built_in\">hash</span>: “0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825”,</span><br><span class=\"line\">  input: “0x”,</span><br><span class=\"line\">  nonce: 0,</span><br><span class=\"line\">  r: “0x433fe5845391b6da3d8aa0d2b53674e09fb6126f0070a600686809b57e4ef77d”,</span><br><span class=\"line\">  s: “0x6b0086fb76c46024f849141074a5bc79c49d5f9a658fd0fedbbe354889c34d8d”,</span><br><span class=\"line\">  to: “0x814d39aa21f3eed069f2b21da7b5f857f7343afa”,</span><br><span class=\"line\">  transactionIndex: 0,</span><br><span class=\"line\">  v: “0x1b”,</span><br><span class=\"line\">  value: 5000000000000000000</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过区块号查看区块：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">eth.getBlock(33)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  difficulty: 132928,</span><br><span class=\"line\">  extraData: “0xd783010506846765746887676f312e372e33856c696e7578”,</span><br><span class=\"line\">  gasLimit: 3244382,</span><br><span class=\"line\">  gasUsed: 21000,</span><br><span class=\"line\">  <span class=\"built_in\">hash</span>: “0xf5d3da50065ce5793c9571a031ad6fe5f1af326a3c4fb7ce16458f4d909c1613”,</span><br><span class=\"line\">  logsBloom: “0x”,</span><br><span class=\"line\">  miner: “0xc232e2add308136571bb8f9197ba4ae4e5ba9836”,</span><br><span class=\"line\">  mixHash: “0x09849dff7c8b8467812fa80d1fa2a27bc61f1cf16d5b2c05a6ce1b77ee18f3f1”,</span><br><span class=\"line\">  nonce: “0x5b3939449dbdbea0”,</span><br><span class=\"line\">  number: 33,</span><br><span class=\"line\">  parentHash: “0xeca34637642f56f7cfe5b699031c7ddbc43aee00fb10c7f054e0a9719cf226da”,</span><br><span class=\"line\">  receiptsRoot: “0xd5f5b7ee944e57cbff496f7bdda7ceffd5eedffe6d5be5320008190502adc07a”,</span><br><span class=\"line\">  sha3Uncles: “0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347”,</span><br><span class=\"line\">  size: 649,</span><br><span class=\"line\">  stateRoot: “0xc7add6b756980ab9e482766e455597ef1583e747ad62e2924a8e66c6f9170112”,</span><br><span class=\"line\">  timestamp: 1490183209,</span><br><span class=\"line\">  totalDifficulty: 4358016,</span><br><span class=\"line\">  transactions: [“0x0c59f431068937cbe9e230483bc79f59bd7146edc8ff5ec37fea6710adcab825”],</span><br><span class=\"line\">  transactionsRoot: “0x7335a362b2c3925e7ba1b41bf7772aa9645a13d4f9c12edd5892b87887264232”,</span><br><span class=\"line\">  uncles: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>还有更多的功能请自行探索…</p>\n<h3 id=\"连接到其他节点\"><a href=\"#连接到其他节点\" class=\"headerlink\" title=\"连接到其他节点\"></a>连接到其他节点</h3><p>可以通过<code>admin.addPeer()</code>方法连接到其他节点，两个节点要想联通，必须保证网络是相通的，并且要指定相同的networkid。</p>\n<p>假设有两个节点：节点一和节点二，networkid都是1108，通过下面的步骤就可以从节点一连接到节点二。</p>\n<p>首先要知道节点二的enode信息，在节点二的js console中执行下面的命令查看enode信息：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin.nodeInfo.enode</span><br><span class=\"line\">“enode://9e86289ea859ca041f235aed87a091d0cd594b377cbe13e1c5f5a08a8a280e62d4019ac54063ed6a1d0e3c3eaedad0b73c40b99a16a176993f0373ffe92be672@[::]:30304”</span><br></pre></td></tr></table></figure>\n\n<p>然后在节点一的js console中执行<code>admin.addPeer()</code>，就可以连接到节点二：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin.addPeer(“enode://9e86289ea859ca041f235aed87a091d0cd594b377cbe13e1c5f5a08a8a280e62d4019ac54063ed6a1d0e3c3eaedad0b73c40b99a16a176993f0373ffe92be672@127.0.0.1:30304”)</span><br></pre></td></tr></table></figure>\n\n<p><code>addPeer()</code>的参数就是节点二的enode信息，注意要把enode中的[::]替换成节点二的IP地址。连接成功后，节点二就会开始同步节点一的区块，同步完成后，任意一个节点开始挖矿，另一个节点会自动同步区块，向任意一个节点发送交易，另一个节点也会收到该笔交易。</p>\n<p>通过<code>admin.peers</code>可以查看连接到的其他节点信息，通过<code>net.peerCount</code>可以查看已连接到的节点数量。</p>\n<p>除了上面的方法，也可以在启动节点的时候指定<code>–bootnodes</code>选项连接到其他节点。</p>\n","categories":["BlockChain"],"tags":["eth","geth","web3"]},{"title":"以太坊客户端命令行选项汇总","url":"/eth_geth_order/","content":"<p>本篇博客的内容可通过以下命令在客户端中进行查看：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">geth --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以访问github上的wiki文档查看，地址为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2dvLWV0aGVyZXVtL3dpa2kvQ29tbWFuZC1MaW5lLU9wdGlvbnM=\">wiki<i class=\"fa fa-external-link-alt\"></i></span></p>\n<span id=\"more\"></span>\n\n<p>具体内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">NAME:</span><br><span class=\"line\">   geth - go-ethereum命令行接口</span><br><span class=\"line\"></span><br><span class=\"line\">USAGE:</span><br><span class=\"line\">   geth [options] <span class=\"built_in\">command</span> [<span class=\"built_in\">command</span> options] [arguments...]</span><br><span class=\"line\"></span><br><span class=\"line\">VERSION:</span><br><span class=\"line\">   1.4.11-stable</span><br><span class=\"line\"></span><br><span class=\"line\">COMMANDS:</span><br><span class=\"line\">   import   引入一个区块链文件</span><br><span class=\"line\">   <span class=\"built_in\">export</span>   导出区块链到文件</span><br><span class=\"line\">   upgradedb    更新区块链数据库</span><br><span class=\"line\">   removedb 移除区块链和正式数据库</span><br><span class=\"line\">   dump     dump a specific block from storage</span><br><span class=\"line\">   monitor  Geth Monitor: node metrics monitoring and visualization</span><br><span class=\"line\">   account  管理账户</span><br><span class=\"line\">   wallet   ethereum presale wallet</span><br><span class=\"line\">   console  Geth控制台: JavaScript交互环境</span><br><span class=\"line\">   attach   Geth控制台: JavaScript交互环境(连接node)</span><br><span class=\"line\">   js       在Geth JavaScript VM执行JavaScript文件</span><br><span class=\"line\">   makedag  generate ethash dag (<span class=\"keyword\">for</span> testing)</span><br><span class=\"line\">   gpuinfo  gpuinfo</span><br><span class=\"line\">   gpubench benchmark GPU</span><br><span class=\"line\">   version  打印ethereum版本号</span><br><span class=\"line\">   init     引导初始化一个创世块(JSON)</span><br><span class=\"line\">   <span class=\"built_in\">help</span>, h  显示命令列表或一个命令的帮助</span><br><span class=\"line\"></span><br><span class=\"line\">ETHEREUM OPTIONS:</span><br><span class=\"line\">  --datadir <span class=\"string\">&quot;/home/karalabe/.ethereum&quot;</span>  数据库和keystore的文件目录</span><br><span class=\"line\">  --keystore        keystore的文件目录 (default = inside the datadir)</span><br><span class=\"line\">  --networkid value         Network identifier (<span class=\"built_in\">integer</span>, 0=Olympic, 1=Frontier, 2=Morden) (default: 1)</span><br><span class=\"line\">  --olympic             Olympic network: pre-configured pre-release <span class=\"built_in\">test</span> network</span><br><span class=\"line\">  --testnet             Morden network: pre-configured <span class=\"built_in\">test</span> network with modified starting nonces (replay protection)</span><br><span class=\"line\">  --dev                 Developer mode: pre-configured private network with several debugging flags</span><br><span class=\"line\">  --identity value          Custom node name</span><br><span class=\"line\">  --fast                Enable fast syncing through state downloads</span><br><span class=\"line\">  --lightkdf                Reduce key-derivation RAM &amp; CPU usage at some expense of KDF strength</span><br><span class=\"line\">  --cache value             Megabytes of memory allocated to internal caching (min 16MB / database forced) (default: 128)</span><br><span class=\"line\">  --blockchainversion value     Blockchain version (<span class=\"built_in\">integer</span>) (default: 3)</span><br><span class=\"line\"></span><br><span class=\"line\">账户选项:</span><br><span class=\"line\">  --unlock value    通过逗号分隔一个列表账户来进行解锁</span><br><span class=\"line\">  --password value  Password file to use <span class=\"keyword\">for</span> non-inteactive password input</span><br><span class=\"line\"></span><br><span class=\"line\">API AND CONSOLE OPTIONS:</span><br><span class=\"line\">  --rpc             支持HTTP-RPC服务</span><br><span class=\"line\">  --rpcaddr value   HTTP-RPC服务监听地址(默认: <span class=\"string\">&quot;localhost&quot;</span>)</span><br><span class=\"line\">  --rpcport value   HTTP-RPC服务监听端口(默认: 8545)</span><br><span class=\"line\">  --rpcapi value    HTTP-RPC提供的API支持(默认: <span class=\"string\">&quot;eth,net,web3&quot;</span>)</span><br><span class=\"line\">  --ws          Enable the WS-RPC server</span><br><span class=\"line\">  --wsaddr value    WS-RPC server listening interface (default: <span class=\"string\">&quot;localhost&quot;</span>)</span><br><span class=\"line\">  --wsport value    WS-RPC server listening port (default: 8546)</span><br><span class=\"line\">  --wsapi value     API<span class=\"string\">&#x27;s offered over the WS-RPC interface (default: &quot;eth,net,web3&quot;)</span></span><br><span class=\"line\"><span class=\"string\">  --wsorigins value Origins from which to accept websockets requests</span></span><br><span class=\"line\"><span class=\"string\">  --ipcdisable      Disable the IPC-RPC server</span></span><br><span class=\"line\"><span class=\"string\">  --ipcapi value    API&#x27;</span>s offered over the IPC-RPC interface (default: <span class=\"string\">&quot;admin,debug,eth,miner,net,personal,shh,txpool,web3&quot;</span>)</span><br><span class=\"line\">  --ipcpath <span class=\"string\">&quot;geth.ipc&quot;</span>  Filename <span class=\"keyword\">for</span> IPC socket/pipe within the datadir (explicit paths escape it)</span><br><span class=\"line\">  --rpccorsdomain value Comma separated list of domains from <span class=\"built_in\">which</span> to accept cross origin requests (browser enforced)</span><br><span class=\"line\">  --jspath loadScript   JavaScript root path <span class=\"keyword\">for</span> loadScript and document root <span class=\"keyword\">for</span> `admin.httpGet` (default: <span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">  --<span class=\"built_in\">exec</span> value      Execute JavaScript statement (only <span class=\"keyword\">in</span> combination with console/attach)</span><br><span class=\"line\">  --preload value   Comma separated list of JavaScript files to preload into the console</span><br><span class=\"line\"></span><br><span class=\"line\">NETWORKING OPTIONS:</span><br><span class=\"line\">  --bootnodes value Comma separated enode URLs <span class=\"keyword\">for</span> P2P discovery bootstrap</span><br><span class=\"line\">  --port value      Network listening port (default: 30303)</span><br><span class=\"line\">  --maxpeers value  Maximum number of network peers (network disabled <span class=\"keyword\">if</span> <span class=\"built_in\">set</span> to 0) (default: 25)</span><br><span class=\"line\">  --maxpendpeers value  Maximum number of pending connection attempts (defaults used <span class=\"keyword\">if</span> <span class=\"built_in\">set</span> to 0) (default: 0)</span><br><span class=\"line\">  --nat value       NAT port mapping mechanism (any|none|upnp|pmp|extip:&lt;IP&gt;) (default: <span class=\"string\">&quot;any&quot;</span>)</span><br><span class=\"line\">  --nodiscover      Disables the peer discovery mechanism (manual peer addition)</span><br><span class=\"line\">  --nodekey value   P2P node key file</span><br><span class=\"line\">  --nodekeyhex value    P2P node key as hex (<span class=\"keyword\">for</span> testing)</span><br><span class=\"line\"></span><br><span class=\"line\">MINER OPTIONS:</span><br><span class=\"line\">  --mine            Enable mining</span><br><span class=\"line\">  --minerthreads value      Number of CPU threads to use <span class=\"keyword\">for</span> mining (default: 8)</span><br><span class=\"line\">  --minergpus value     List of GPUs to use <span class=\"keyword\">for</span> mining (e.g. <span class=\"string\">&#x27;0,1&#x27;</span> will use the first two GPUs found)</span><br><span class=\"line\">  --autodag         Enable automatic DAG pregeneration</span><br><span class=\"line\">  --etherbase value     Public address <span class=\"keyword\">for</span> block mining rewards (default = first account created) (default: <span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">  --targetgaslimit value    Target gas <span class=\"built_in\">limit</span> sets the artificial target gas floor <span class=\"keyword\">for</span> the blocks to mine (default: <span class=\"string\">&quot;4712388&quot;</span>)</span><br><span class=\"line\">  --gasprice value      Minimal gas price to accept <span class=\"keyword\">for</span> mining a transactions (default: <span class=\"string\">&quot;20000000000&quot;</span>)</span><br><span class=\"line\">  --extradata value     Block extra data <span class=\"built_in\">set</span> by the miner (default = client version)</span><br><span class=\"line\"></span><br><span class=\"line\">GAS PRICE ORACLE OPTIONS:</span><br><span class=\"line\">  --gpomin value    Minimum suggested gas price (default: <span class=\"string\">&quot;20000000000&quot;</span>)</span><br><span class=\"line\">  --gpomax value    Maximum suggested gas price (default: <span class=\"string\">&quot;500000000000&quot;</span>)</span><br><span class=\"line\">  --gpofull value   Full block threshold <span class=\"keyword\">for</span> gas price calculation (%) (default: 80)</span><br><span class=\"line\">  --gpobasedown value   Suggested gas price base step down ratio (1/1000) (default: 10)</span><br><span class=\"line\">  --gpobaseup value Suggested gas price base step up ratio (1/1000) (default: 100)</span><br><span class=\"line\">  --gpobasecf value Suggested gas price base correction <span class=\"built_in\">factor</span> (%) (default: 110)</span><br><span class=\"line\"></span><br><span class=\"line\">VIRTUAL MACHINE OPTIONS:</span><br><span class=\"line\">  --jitvm       Enable the JIT VM</span><br><span class=\"line\">  --forcejit        Force the JIT VM to take precedence</span><br><span class=\"line\">  --jitcache value  Amount of cached JIT VM programs (default: 64)</span><br><span class=\"line\"></span><br><span class=\"line\">LOGGING AND DEBUGGING OPTIONS:</span><br><span class=\"line\">  --metrics         Enable metrics collection and reporting</span><br><span class=\"line\">  --fakepow         Disables proof-of-work verification</span><br><span class=\"line\">  --verbosity value     Logging verbosity: 0=silent, 1=error, 2=warn, 3=info, 4=core, 5=debug, 6=detail (default: 3)</span><br><span class=\"line\">  --vmodule value       Per-module verbosity: comma-separated list of &lt;pattern&gt;=&lt;level&gt; (e.g. eth/*=6,p2p=5)</span><br><span class=\"line\">  --backtrace value     Request a stack trace at a specific logging statement (e.g. <span class=\"string\">&quot;block.go:271&quot;</span>) (default: :0)</span><br><span class=\"line\">  --pprof           Enable the pprof HTTP server</span><br><span class=\"line\">  --pprofport value     pprof HTTP server listening port (default: 6060)</span><br><span class=\"line\">  --memprofilerate value    Turn on memory profiling with the given rate (default: 524288)</span><br><span class=\"line\">  --blockprofilerate value  Turn on block profiling with the given rate (default: 0)</span><br><span class=\"line\">  --cpuprofile value        Write CPU profile to the given file</span><br><span class=\"line\">  --trace value         Write execution trace to the given file</span><br><span class=\"line\"></span><br><span class=\"line\">EXPERIMENTAL OPTIONS:</span><br><span class=\"line\">  --shh     Enable Whisper</span><br><span class=\"line\">  --natspec Enable NatSpec confirmation notice</span><br><span class=\"line\"></span><br><span class=\"line\">MISCELLANEOUS OPTIONS:</span><br><span class=\"line\">  --solc value      Solidity compiler <span class=\"built_in\">command</span> to be used (default: <span class=\"string\">&quot;solc&quot;</span>)</span><br><span class=\"line\">  --support-dao-fork    Updates the chain rules to support the DAO hard-fork</span><br><span class=\"line\">  --oppose-dao-fork Updates the chain rules to oppose the DAO hard-fork</span><br><span class=\"line\">  --<span class=\"built_in\">help</span>, -h        显示帮助</span><br></pre></td></tr></table></figure>","categories":["BlockChain"],"tags":["eth","geth"]},{"title":"以太坊私有网络建立节点集群，并发生交易","url":"/eth_private_cluster_transfer/","content":"<blockquote>\n<p>在私有网络中建立多个node组成的集群，并互相发现，产生交易</p>\n</blockquote>\n<p>为了在本地网络运行多个以太坊节点的实例，必须确保一下几点:</p>\n<ol>\n<li>每个实例都有独立的数据目录(–datadir)</li>\n<li>每个实例运行都有独立的端口.(eth和rpc两者都是)(–port 和 –rpcprot)</li>\n<li>在集群的情况下，实例之间都必须要知道彼此</li>\n<li>唯一的ipc通信端点，或者禁用ipc</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"启动第一个节点\"><a href=\"#启动第一个节点\" class=\"headerlink\" title=\"启动第一个节点\"></a>启动第一个节点</h2><p>启动第一个节点(指定端口，并禁用ipc)，运行命令和结果如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/Documents/private-geth  geth --datadir ./data/00 --networkid 314590 --ipcdisable --port 61910 --rpcport 8200 console</span><br><span class=\"line\">INFO [05-29|16:18:59] Starting peer-to-peer node               instance=Geth/v1.6.1-stable-021c3c28/linux-amd64/go1.8.1</span><br><span class=\"line\">INFO [05-29|16:18:59] Allocated cache and file handles         database=/home/zl/Documents/private-geth/data/00/geth/chaindata cache=128 handles=1024</span><br><span class=\"line\">INFO [05-29|16:18:59] Initialised chain configuration          config=<span class=\"string\">&quot;&#123;ChainID: 15 Homestead: 0 DAO: &lt;nil&gt; DAOSupport: false EIP150: &lt;nil&gt; EIP155: 0 EIP158: 0 Engine: unknown&#125;&quot;</span></span><br><span class=\"line\">INFO [05-29|16:18:59] Disk storage enabled <span class=\"keyword\">for</span> ethash caches   <span class=\"built_in\">dir</span>=/home/zl/Documents/private-geth/data/00/geth/ethash count=3</span><br><span class=\"line\">INFO [05-29|16:18:59] Disk storage enabled <span class=\"keyword\">for</span> ethash DAGs     <span class=\"built_in\">dir</span>=/home/zl/.ethash                                    count=2</span><br><span class=\"line\">INFO [05-29|16:18:59] Initialising Ethereum protocol           versions=<span class=\"string\">&quot;[63 62]&quot;</span> network=314590</span><br><span class=\"line\">INFO [05-29|16:18:59] Loaded most recent <span class=\"built_in\">local</span> header          number=29 <span class=\"built_in\">hash</span>=8ff3ff…dac4a2 td=7372364</span><br><span class=\"line\">INFO [05-29|16:18:59] Loaded most recent <span class=\"built_in\">local</span> full block      number=29 <span class=\"built_in\">hash</span>=8ff3ff…dac4a2 td=7372364</span><br><span class=\"line\">INFO [05-29|16:18:59] Loaded most recent <span class=\"built_in\">local</span> fast block      number=29 <span class=\"built_in\">hash</span>=8ff3ff…dac4a2 td=7372364</span><br><span class=\"line\">WARN [05-29|16:18:59] Blockchain not empty, fast <span class=\"built_in\">sync</span> disabled</span><br><span class=\"line\">INFO [05-29|16:18:59] Starting P2P networking</span><br><span class=\"line\">INFO [05-29|16:19:01] Mapped network port                      proto=udp extport=61910 intport=61910 interface=<span class=\"string\">&quot;UPNP IGDv1-IP1&quot;</span></span><br><span class=\"line\">INFO [05-29|16:19:02] RLPx listener up                         self=enode://ad307e052d0e04af519b8999fa870800df8a7a0cc2a91e6aea30e879b75c344dfa12c773a63a71677c2a3ea1254cf982815817f7ff58bd79e5837ea44d791a2d@192.168.1.2:61910</span><br><span class=\"line\">INFO [05-29|16:19:02] Mapped network port                      proto=tcp extport=61910 intport=61910 interface=<span class=\"string\">&quot;UPNP IGDv1-IP1&quot;</span></span><br><span class=\"line\">Welcome to the Geth JavaScript console!</span><br><span class=\"line\"></span><br><span class=\"line\">instance: Geth/v1.6.1-stable-021c3c28/linux-amd64/go1.8.1</span><br><span class=\"line\">coinbase: 0x5fba50fce50baf0b8a7314200ba46336958ac97e</span><br><span class=\"line\">at block: 29 (Mon, 29 May 2017 13:13:46 CST)</span><br><span class=\"line\"> datadir: /home/zl/Documents/private-geth/data/00</span><br><span class=\"line\"> modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面的命令以命令行的(console)的方式启动了节点，所以我们可以通过继续输入下面的命令获取节点实例的enode url:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;admin.nodeInfo.enode</span><br><span class=\"line\"><span class=\"string\">&quot;enode://ad307e052d0e04af519b8999fa870800df8a7a0cc2a91e6aea30e879b75c344dfa12c773a63a71677c2a3ea1254cf982815817f7ff58bd79e5837ea44d791a2d@192.168.1.2:61910&quot;</span></span><br><span class=\"line\">&gt;</span><br><span class=\"line\"><span class=\"comment\">###########################获取本机IP地址###########################</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ ifconfig|grep netmask|awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span></span><br><span class=\"line\">127.0.0.1</span><br><span class=\"line\">192.168.1.102</span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二个节点\"><a href=\"#第二个节点\" class=\"headerlink\" title=\"第二个节点\"></a>第二个节点</h2><p>再打开一个终端，初始化第二个节点:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">geth --datadir ./data/01 init ./genesis.json</span><br></pre></td></tr></table></figure>\n\n<p>启动第二个节点:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/Documents/private-geth geth --datadir ./data/01 --networkid 314590 --ipcdisable --port 61911 --rpcport 8101 --bootnodes <span class=\"string\">&quot;enode://ad307e052d0e04af519b8999fa870800df8a7a0cc2a91e6aea30e879b75c344dfa12c773a63a71677c2a3ea1254cf982815817f7ff58bd79e5837ea44d791a2d@192.168.1.2:61910&quot;</span> console</span><br><span class=\"line\">INFO [05-29|18:42:15] Starting peer-to-peer node               instance=Geth/v1.6.1-stable-021c3c28/linux-amd64/go1.8.1</span><br><span class=\"line\">INFO [05-29|18:42:15] Allocated cache and file handles         database=/home/zl/Documents/private-geth/data/01/geth/chaindata cache=128 handles=1024</span><br><span class=\"line\">INFO [05-29|18:42:15] Initialised chain configuration          config=<span class=\"string\">&quot;&#123;ChainID: 15 Homestead: 0 DAO:  DAOSupport: false EIP150:  EIP155: 0 EIP158: 0 Engine: unknown&#125;&quot;</span></span><br><span class=\"line\">INFO [05-29|18:42:15] Disk storage enabled <span class=\"keyword\">for</span> ethash caches   <span class=\"built_in\">dir</span>=/home/zl/Documents/private-geth/data/01/geth/ethash count=3</span><br><span class=\"line\">INFO [05-29|18:42:15] Disk storage enabled <span class=\"keyword\">for</span> ethash DAGs     <span class=\"built_in\">dir</span>=/home/zl/.ethash                                    count=2</span><br><span class=\"line\">INFO [05-29|18:42:15] Initialising Ethereum protocol           versions=<span class=\"string\">&quot;[63 62]&quot;</span> network=314590</span><br><span class=\"line\">INFO [05-29|18:42:15] Loaded most recent <span class=\"built_in\">local</span> header          number=36 <span class=\"built_in\">hash</span>=e1541c…418ce3 td=8938686</span><br><span class=\"line\">INFO [05-29|18:42:15] Loaded most recent <span class=\"built_in\">local</span> full block      number=36 <span class=\"built_in\">hash</span>=e1541c…418ce3 td=8938686</span><br><span class=\"line\">INFO [05-29|18:42:15] Loaded most recent <span class=\"built_in\">local</span> fast block      number=36 <span class=\"built_in\">hash</span>=e1541c…418ce3 td=8938686</span><br><span class=\"line\">WARN [05-29|18:42:15] Blockchain not empty, fast <span class=\"built_in\">sync</span> disabled</span><br><span class=\"line\">INFO [05-29|18:42:15] Starting P2P networking</span><br><span class=\"line\">INFO [05-29|18:42:17] Mapped network port                      proto=udp extport=61911 intport=61911 interface=<span class=\"string\">&quot;UPNP IGDv1-IP1&quot;</span></span><br><span class=\"line\">INFO [05-29|18:42:17] RLPx listener up                         self=enode://2261c433ed5d12924f727b61bf4084f22f4199b430115827c8eae3bb210c0dd5b3dd7df8dc13d8ca80c80f4a36e25c7bc7737737001d0b09324ee43ca6b9d7f8@192.168.1.2:61911</span><br><span class=\"line\">INFO [05-29|18:42:17] Mapped network port                      proto=tcp extport=61911 intport=61911 interface=<span class=\"string\">&quot;UPNP IGDv1-IP1&quot;</span></span><br><span class=\"line\">Welcome to the Geth JavaScript console!</span><br><span class=\"line\"></span><br><span class=\"line\">instance: Geth/v1.6.1-stable-021c3c28/linux-amd64/go1.8.1</span><br><span class=\"line\">coinbase: 0x0a8c35653d8b229c16f0c9ce6f63cffb877cfdcf</span><br><span class=\"line\">at block: 36 (Mon, 29 May 2017 18:30:22 CST)</span><br><span class=\"line\"> datadir: /home/zl/Documents/private-geth/data/01</span><br><span class=\"line\"> modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面的命令中，<code>–bootndoes</code>是设置当前节点启动后，直接通过设置<code>–bootndoes</code>的值来链接第一个节点， <code>–bootnoedes</code>的值可以通过在第一个节的命令行中，输入<code>:admin.nodeInfo.enode</code>命令打印出来.<br>也可以不设置<code>–bootnodes</code>， 直接启动，启动后进入命令行， 通过命令<code>admin.addPeer(enodeUrlOfFirst Instance)</code>把它作为一个peer添加进来.</p>\n<h2 id=\"验证节点\"><a href=\"#验证节点\" class=\"headerlink\" title=\"验证节点\"></a>验证节点</h2><p>为了确认链接成功，第二个节点输入:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; admin.nodeInfo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  enode: <span class=\"string\">&quot;enode://2261c433ed5d12924f727b61bf4084f22f4199b430115827c8eae3bb210c0dd5b3dd7df8dc13d8ca80c80f4a36e25c7bc7737737001d0b09324ee43ca6b9d7f8@192.168.1.2:61911&quot;</span>,</span><br><span class=\"line\">  <span class=\"built_in\">id</span>: <span class=\"string\">&quot;2261c433ed5d12924f727b61bf4084f22f4199b430115827c8eae3bb210c0dd5b3dd7df8dc13d8ca80c80f4a36e25c7bc7737737001d0b09324ee43ca6b9d7f8&quot;</span>,</span><br><span class=\"line\">  ip: <span class=\"string\">&quot;192.168.1.2&quot;</span>,</span><br><span class=\"line\">  listenAddr: <span class=\"string\">&quot;[::]:61911&quot;</span>,</span><br><span class=\"line\">  name: <span class=\"string\">&quot;Geth/v1.6.1-stable-021c3c28/linux-amd64/go1.8.1&quot;</span>,</span><br><span class=\"line\">  ports: &#123;</span><br><span class=\"line\">    discovery: 61911,</span><br><span class=\"line\">    listener: 61911</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  protocols: &#123;</span><br><span class=\"line\">    eth: &#123;</span><br><span class=\"line\">      difficulty: 8938686,</span><br><span class=\"line\">      genesis: <span class=\"string\">&quot;0xa0e580c6769ac3dd80894b2a256164a76b796839d2eb7f799ef6b9850ea5e82e&quot;</span>,</span><br><span class=\"line\">      <span class=\"built_in\">head</span>: <span class=\"string\">&quot;0xe1541cc54dbcade54fb61053ffa71391c44bb6655cf9619635263960bc418ce3&quot;</span>,</span><br><span class=\"line\">      network: 314590</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n\n<p>第一个节点输入:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; net.peerCount</span><br><span class=\"line\">1</span><br><span class=\"line\">&gt; admin.peers</span><br><span class=\"line\">[&#123;</span><br><span class=\"line\">    caps: [<span class=\"string\">&quot;eth/62&quot;</span>, <span class=\"string\">&quot;eth/63&quot;</span>],</span><br><span class=\"line\">    <span class=\"built_in\">id</span>: <span class=\"string\">&quot;2261c433ed5d12924f727b61bf4084f22f4199b430115827c8eae3bb210c0dd5b3dd7df8dc13d8ca80c80f4a36e25c7bc7737737001d0b09324ee43ca6b9d7f8&quot;</span>,</span><br><span class=\"line\">    name: <span class=\"string\">&quot;Geth/v1.6.1-stable-021c3c28/linux-amd64/go1.8.1&quot;</span>,</span><br><span class=\"line\">    network: &#123;</span><br><span class=\"line\">      localAddress: <span class=\"string\">&quot;192.168.0.103:61910&quot;</span>,</span><br><span class=\"line\">      remoteAddress: <span class=\"string\">&quot;192.168.1.2:41912&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    protocols: &#123;</span><br><span class=\"line\">      eth: &#123;</span><br><span class=\"line\">        difficulty: 8938686,</span><br><span class=\"line\">        <span class=\"built_in\">head</span>: <span class=\"string\">&quot;0xe1541cc54dbcade54fb61053ffa71391c44bb6655cf9619635263960bc418ce3&quot;</span>,</span><br><span class=\"line\">        version: 63</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>从得到的结果可以看出，第一个节点有1个peer链接， 链接的node id为:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">“2261c433ed5d12924f727b61bf4084f22f4199b430115827c8eae3bb210c0dd5b3dd7df8dc13d8ca80c80f4a36e25c7bc7737737001d0b09324ee43ca6b9d7f8”</span><br></pre></td></tr></table></figure>\n\n<p>这个id，正好就是第二个节点的id。</p>\n<p>按照这样的方式继续扩展，可以非常容易就可以建立本地节点集群.这些工作都可以写成脚本代码来完成，里面还可以包含创建账户，挖矿等。<br>请参考脚本:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyc3BoZXJlL2V0aC11dGlscw==\">https://github.com/ethersphere/eth-utils<i class=\"fa fa-external-link-alt\"></i></span> 下的gethcluster.sh ，以及README中的使用方法和示例。</p>\n<h2 id=\"转账\"><a href=\"#转账\" class=\"headerlink\" title=\"转账\"></a>转账</h2><p>链接成功后，使用我们在上一篇文章中挖矿的账户，向第二个节点发送 “ether”(以太币的货币单位，还有一种叫”Wei”，基本上这些货币单位都是用一些牛逼的人的名字来命名的).<br>首先查看第二个节点的Wei数量和整个网络的区块号，还有接收货币的账号id:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[0])</span><br><span class=\"line\">0000000000000000000</span><br><span class=\"line\">&gt; eth.blockNumber</span><br><span class=\"line\">30</span><br><span class=\"line\">&gt; eth.accounts[0]</span><br><span class=\"line\"><span class=\"string\">&quot;0x0a8c35653d8b229c16f0c9ce6f63cffb877cfdcf&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在第一个节点命令行中,执行下面的操作:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; personal.unlockAccount(eth.accounts[0], <span class=\"string\">&quot;ko2005&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; eth.sendTransaction(&#123;from: <span class=\"string\">&quot;0x5fba50fce50baf0b8a7314200ba46336958ac97e&quot;</span>, to: <span class=\"string\">&quot;0x0a8c35653d8b229c16f0c9ce6f63cffb877cfdcf&quot;</span>, value: web3.toWei(1, <span class=\"string\">&quot;ether&quot;</span>)&#125;)</span><br><span class=\"line\">INFO [05-29|17:33:42] Submitted transaction                    fullhash=0x51a75422f79fa96e70a0c1481851bc9f827868c44203b68d74f9815ffb367d5f recipient=0x0a8c35653d8b229c16f0c9ce6f63cffb877cfdcf</span><br><span class=\"line\"><span class=\"string\">&quot;0x51a75422f79fa96e70a0c1481851bc9f827868c44203b68d74f9815ffb367d5f&quot;</span></span><br><span class=\"line\">&gt; eth.pendingTransactions</span><br><span class=\"line\">[&#123;</span><br><span class=\"line\">    blockHash: null,</span><br><span class=\"line\">    blockNumber: null,</span><br><span class=\"line\">    from: <span class=\"string\">&quot;0x5fba50fce50baf0b8a7314200ba46336958ac97e&quot;</span>,</span><br><span class=\"line\">    gas: 90000,</span><br><span class=\"line\">    gasPrice: 20000000000,</span><br><span class=\"line\">    <span class=\"built_in\">hash</span>: <span class=\"string\">&quot;0x51a75422f79fa96e70a0c1481851bc9f827868c44203b68d74f9815ffb367d5f&quot;</span>,</span><br><span class=\"line\">    input: <span class=\"string\">&quot;0x&quot;</span>,</span><br><span class=\"line\">    nonce: 0,</span><br><span class=\"line\">    r: <span class=\"string\">&quot;0x5632a8ade4a767dbd949ba1042cb33f98dd0722ab999ba18e1454d19d8bd1f6d&quot;</span>,</span><br><span class=\"line\">    s: <span class=\"string\">&quot;0x515dcfa3de297f0c956ad9a061a5561f47cc9ccbb0a547cda59193c77fcbe3f7&quot;</span>,</span><br><span class=\"line\">    to: <span class=\"string\">&quot;0x0a8c35653d8b229c16f0c9ce6f63cffb877cfdcf&quot;</span>,</span><br><span class=\"line\">    transactionIndex: 0,</span><br><span class=\"line\">    v: <span class=\"string\">&quot;0x42&quot;</span>,</span><br><span class=\"line\">    value: 1000000000000000000</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n<p><code>eth.sendTransaction</code>就是执行发送以太币的操作， 参数from， to分别是发送账户和接收账户， <code>web3.toWei(1, “ether”)</code>是将1单位”ether”转换为相应的”Wei”数量.</p>\n<p>然后执行挖矿</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; miner.start()</span><br><span class=\"line\">INFO [05-29|18:26:47] Updated mining threads                   threads=0</span><br><span class=\"line\">INFO [05-29|18:26:47] Starting mining operation</span><br><span class=\"line\">null</span><br><span class=\"line\">&gt; INFO [05-29|18:26:47] Commit new mining work                   number=31 txs=1 uncles=0 elapsed=1.094ms</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; INFO [05-29|18:30:14] Successfully sealed new block            number=31 <span class=\"built_in\">hash</span>=19e3d7…a6ecd5</span><br><span class=\"line\">INFO [05-29|18:30:14] �� mined potential block                  number=31 <span class=\"built_in\">hash</span>=19e3d7…a6ecd5</span><br><span class=\"line\">INFO [05-29|18:30:14] Commit new mining work                   number=32 txs=0 uncles=0 elapsed=2.314ms</span><br><span class=\"line\">INFO [05-29|18:30:17] Successfully sealed new block            number=32 <span class=\"built_in\">hash</span>=94748a…cdbc17</span><br><span class=\"line\">INFO [05-29|18:30:17] �� mined potential block                  number=32 <span class=\"built_in\">hash</span>=94748a…cdbc17</span><br><span class=\"line\">INFO [05-29|18:30:17] Commit new mining work                   number=33 txs=0 uncles=0 elapsed=156.295µs</span><br><span class=\"line\">INFO [05-29|18:30:19] Successfully sealed new block            number=33 <span class=\"built_in\">hash</span>=b8e037…cd50ff</span><br><span class=\"line\">INFO [05-29|18:30:19] �� mined potential block                  number=33 <span class=\"built_in\">hash</span>=b8e037…cd50ff</span><br><span class=\"line\">INFO [05-29|18:30:19] Commit new mining work                   number=34 txs=0 uncles=0 elapsed=131.676µs</span><br><span class=\"line\">&gt; mINFO [05-29|18:30:20] Successfully sealed new block            number=34 <span class=\"built_in\">hash</span>=7ad61a…f63067</span><br><span class=\"line\">INFO [05-29|18:30:20] �� mined potential block                  number=34 <span class=\"built_in\">hash</span>=7ad61a…f63067</span><br><span class=\"line\">INFO [05-29|18:30:20] Commit new mining work                   number=35 txs=0 uncles=0 elapsed=138.957µs</span><br><span class=\"line\">&gt; miner.stINFO [05-29|18:30:22] Successfully sealed new block            number=35 <span class=\"built_in\">hash</span>=eb9652…a1a9e3</span><br><span class=\"line\">INFO [05-29|18:30:22] �� mined potential block                  number=35 <span class=\"built_in\">hash</span>=eb9652…a1a9e3</span><br><span class=\"line\">INFO [05-29|18:30:22] Commit new mining work                   number=36 txs=0 uncles=0 elapsed=334.318µs</span><br><span class=\"line\">&gt; miner.stopINFO [05-29|18:30:22] Successfully sealed new block            number=36 <span class=\"built_in\">hash</span>=e1541c…418ce3</span><br><span class=\"line\">INFO [05-29|18:30:22] �� block reached canonical chain          number=31 <span class=\"built_in\">hash</span>=19e3d7…a6ecd5</span><br><span class=\"line\">INFO [05-29|18:30:22] �� mined potential block                  number=36 <span class=\"built_in\">hash</span>=e1541c…418ce3</span><br><span class=\"line\">INFO [05-29|18:30:22] Commit new mining work                   number=37 txs=0 uncles=0 elapsed=117.185µs</span><br><span class=\"line\">&gt; miner.stop()</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>从上面的日志可以看到，执行挖矿之后，一共有6个区块产生.<br>再在第二个节点的命令行输入:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; eth.blockNumber</span><br><span class=\"line\">36</span><br><span class=\"line\">&gt; eth.getBalance(eth.accounts[0])</span><br><span class=\"line\">1000000000000000000</span><br></pre></td></tr></table></figure>\n\n<p>可以看到第二个节点中的账户，已经得有了1个ether， 并且可以看出，以太坊中，1ether&#x3D;1000000000000000000Wei。<br>之前输入eth.blockNumber，得到的值为30，其实只要挖出第一个区块的时候，就可以停止，发送到第二个node账户中的一个ether，就已经生效。</p>\n<h2 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h2><p>这次以我们完成了以下内容:<br>1)创建区块链私有网络，并在网络中，建立自己的节点集群。<br>2)在接点集群中，通过一个节点的账户向网络中的另外一个节点的账户转了1个以太坊币，交易成功。</p>\n","categories":["BlockChain"],"tags":["eth","geth","web3"]},{"title":"定投eos脚本，看懂的自然懂","url":"/automatic_investment_eos/","content":"<p>已经失效，这是当时eos在众筹的时候进行定投和套利的脚本。</p>\n<span id=\"more\"></span>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> decimal</span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime,timezone,timedelta</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            resp = requests.get(url=<span class=\"string\">&#x27;http://eos.io/eos-sale-statistic.php&#x27;</span>,timeout=<span class=\"number\">10</span>)</span><br><span class=\"line\">            result = json.loads(resp.text)</span><br><span class=\"line\"></span><br><span class=\"line\">            period = <span class=\"number\">13</span></span><br><span class=\"line\">            today_sale = result[period]</span><br><span class=\"line\">            today_ico_eth = <span class=\"built_in\">round</span>(today_sale[<span class=\"string\">&#x27;dailyToday&#x27;</span>],<span class=\"number\">2</span>)</span><br><span class=\"line\">            today_ico_end_utc_str = today_sale[<span class=\"string\">&#x27;ends&#x27;</span>]</span><br><span class=\"line\">            today_ico_end_utc = datetime.strptime(today_ico_end_utc_str,<span class=\"string\">&quot;%Y-%m-%dT%H:%M:S.000Z&quot;</span>)</span><br><span class=\"line\">            tz_utc_8 = timezone(timedelta(hours=<span class=\"number\">8</span>))</span><br><span class=\"line\">            today_ico_end_bj = today_ico_end_utc.replace(tzinfo=tz_utc_8)</span><br><span class=\"line\">            <span class=\"built_in\">print</span> (today_ico_end_bj)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># t = parser.parse(today_ico_end)</span></span><br><span class=\"line\">            <span class=\"comment\"># print(t)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            resq = requests.get(url=<span class=\"string\">&#x27;https://yunbi.com//api/v2/tickers/ethcny,json&#x27;</span>,timeout=<span class=\"number\">10</span>)</span><br><span class=\"line\">            result=json.loads(resq.text)</span><br><span class=\"line\">            eth_price = <span class=\"built_in\">float</span>(result[<span class=\"string\">&#x27;ticker&#x27;</span>][<span class=\"string\">&#x27;last&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">            all_num = <span class=\"number\">2000000.0</span></span><br><span class=\"line\">            eos_sale_price = <span class=\"built_in\">round</span>(eth_price * today_ico_eth / all_num,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            eos_per_eth = <span class=\"built_in\">round</span>(all_num/today_ico_eth,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            resq = requests.get(url=<span class=\"string\">&#x27;https://yunbi.com//api/v2/tickers/eoscny,json&#x27;</span>, timeout=<span class=\"number\">10</span>)</span><br><span class=\"line\">            result = json.loads(resq.text)</span><br><span class=\"line\"></span><br><span class=\"line\">            eos_price = <span class=\"built_in\">round</span>(<span class=\"built_in\">float</span>(result[<span class=\"string\">&#x27;ticker&#x27;</span>][<span class=\"string\">&#x27;last&#x27;</span>]),<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            now = datetime.now()</span><br><span class=\"line\">            <span class=\"built_in\">print</span> (now)</span><br><span class=\"line\">            <span class=\"comment\"># print(&quot;投入ETH:%s ETH兑EOS:%s EOS价格:%s EOS 云币价格:%s&quot; % (today_ico_eth，eos_per_eth,eos_sale_price,eos_price))</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">print</span> (<span class=\"string\">&quot;hedgeL today_ico_eth,eos_per_eth,eos_sale_proce,eos_yunbi_price:&quot;</span>,today_ico_eth,eos_per_eth,eos_sale_price,eos_price)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># print &#x27;main running&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> identifier:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> (identifier)</span><br><span class=\"line\"></span><br><span class=\"line\">            time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["BlockChain"],"tags":["区块链","eos","量化","python"]},{"title":"比特币Bitcoin源代码安装编译","url":"/bitcoin_source_make/","content":"<blockquote>\n<p>比特币 (货币符号: ฿;英文名：Bitcoin;英文缩写: BTC)，是一种用于开源的P2P软件而产生的电子货币。</p>\n</blockquote>\n<p>在这儿主要介绍Linux下的比特币Bitcoin安装，我们选择ubuntu 12.04的环境，安装相对容易得多。Windows下并不推荐，因为基于mingW配置相以繁琐。</p>\n<p>同时也可以参考官方build文档。</p>\n<p>先拉下源代码：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/bitcoin/bitcoin.git</span><br></pre></td></tr></table></figure>\n\n<p>安装Berkeley DB 4.8以上版本：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libdb5.1++-dev</span><br></pre></td></tr></table></figure>\n\n<p>然后进入到相关目录：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> bitcoin</span><br><span class=\"line\"></span><br><span class=\"line\">./autogen.sh./configure</span><br></pre></td></tr></table></figure>\n\n<p>如果你遇到这样的提示：<code>configure: error: Found Berkeley DB other than 4.8, required for portable wallets</code> 那就可以这样：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">./configure –with-incompatible-bdb</span><br></pre></td></tr></table></figure>\n\n<p>如查遇到到这样的提示：<code>checking for boostlib &gt;= 1.20.0… configure: We could not detect the boost libraries (version 1.20 or higher).</code> 那这样：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libboost-all-dev</span><br></pre></td></tr></table></figure>\n\n<p>然后再次configure，如果你需要bitcoin-qt前端，那需要安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libqt4-core libqt4-gui libqt4-dev</span><br></pre></td></tr></table></figure>\n\n<p>再次configure，这次可以了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>开始编译，大约5分钟，然后安装编译好的二进制文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<p>想运行前端那执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">bitcoin-qt</span><br></pre></td></tr></table></figure>\n\n<p>服务端是</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">bitcoind  -server –printtoconcole</span><br></pre></td></tr></table></figure>\n<p>接到下，是否挖矿就看您自己了。以当前时间为起点，连接testnet有9G的blockchain数据需要下载，livesite有35G的数据需要下载。<br>也可以从这里下载文件，以加快速度。后续会介绍关于比特币的更多内容。有兴趣可以阅读它的源代码。</p>\n<p><strong>资料LINK：</strong></p>\n<ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5iaXRjb2luLml0L3dpa2kvTWFpbl9QYWdl\">BitCoin比特币 wiki<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYudmlzdWNvcmUuY29tL2JpdGNvaW4vZG94eWdlbi9maWxlcy5odG1s\">Bitcoin比特币 源代码文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYml0Y29pbi9ibG9iL21hc3Rlci9kb2MvYnVpbGQtdW5peC5tZA==\">Bitcoin比特币 源代码git地址<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n","categories":["BlockChain"],"tags":["区块链","btc"]},{"title":"比特币多重签名机制使用篇","url":"/bitcoin_signature/","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a><strong>概述</strong></h2><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53YW5iaXp1LmNvbS8=\">比特币<i class=\"fa fa-external-link-alt\"></i></span>的多重签名机制可以实现多方共同管理资产，也可以用于第三方交易担保。 多重签名最多支持三方共同管理一个地址的资产。按照比特币wiki上的表述方式，称之为：M of N模式。</p>\n<p>1 &lt;&#x3D; N &lt;&#x3D; 3<br>1 &lt;&#x3D; M &lt;&#x3D; N<br>N: 持有私钥的管理者数量<br>M: 解锁地址需要的私钥数量</p>\n<p>一般有 1 of 1, 1 of 2, 1 of 3, 2 of 3, 3 of 3几种模式。</p>\n<p>通常情况下，多应用于N &#x3D; 3 的情形。</p>\n<ul>\n<li>1 of 3: 三个管理者中，任何一方都可以单独的处理该地址的资产。</li>\n<li>2 of 3: 三个管理者中，必须有两方共同签署才能处理该地址的资产。</li>\n<li>3 of 3: 三个管理者必须都签署才能处理该地址的资产。</li>\n</ul>\n<p>本文就以 2 of 3的情形来介绍一下使用多重签名的方法。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"制作多重签名地址\"><a href=\"#制作多重签名地址\" class=\"headerlink\" title=\"制作多重签名地址\"></a><strong>制作多重签名地址</strong></h2><p>首先，制作多重签名地址用到比特币钱包的API. 熟悉命令行的读者可以直接在“命令提示符”窗口里运行<code>bitcoind</code>调用相应的命令。可能大部分读者对“命令提示符”并不熟悉，所以本文用“比特币核心”钱包的调试窗口来演示。 要制作多重签名地址，首先需要参与管理的三方提供各自的公钥。</p>\n<p>管理者1：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003332314-1.png\"></p>\n<p>管理者2：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003335K8-2.png\"></p>\n<p>管理者3：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/00033334P-3.png\"></p>\n<p>那么，这些公钥是如何获取的呢? 首先，打开“比特币核心”钱包。点击“帮助”-&gt;”调试窗口”,在弹出的“Debug window”窗口点击“控制台”。进入图1控制台的界面：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/00033334A-4.jpg\"></p>\n<p>在该界面下面的输入框里，输入：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003331153-5.png\"></p>\n<p>钱包会为我们生成一个新的地址。</p>\n<p>获取新地址</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003336213-7.jpg\"></p>\n<p>这便是上面管理者1的地址。但制作多重签名，只有地址还不够，还需要对应的公钥。公钥可以通过地址来查询出来。使用命令</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/00033325K-9.png\"></p>\n<p>得到如图三(图3获取公钥)的公钥界面：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003333344-10.jpg\"></p>\n<p>其中，“pubkey”后面的数据便是该地址的公钥。</p>\n<p>取得三个管理者的公钥之后，就可以用 createmultisig命令来生成多重签名地址。首先，看一下该命令的基本格式：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/00033340B-13.png\"></p>\n<p>我们要创建的是2 of 3的模式，所以命令里n&#x3D;2。输入命令如下：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003333W9-15.png\"></p>\n<p>得到如图4(生成多重签名地址)的地址界面：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003331601-16.jpg\"></p>\n<p>上图中的3M8voDot82tBrQE7QWGy9WUWxp7gDU7owx，就是我们生成的多重签名地址。然后将这个地址增加到钱包里，只有这样，当收到比特币时，钱包才会有显示。用命令</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003332008-17.png\"></p>\n<p>如果忘记了输入这条命令，钱包便无法显示这个地址上的金额。而且，在这条命令运行前汇款到地址上的币也不会显示出来。遇到这样的情况，需要重新从头开始同步区块链。 我们可以向该地址中汇两笔钱，用于测试。如图5(收款成功)</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003336461-18.jpg\"></p>\n<h2 id=\"从多重签名地址付款\"><a href=\"#从多重签名地址付款\" class=\"headerlink\" title=\"从多重签名地址付款\"></a><strong>从多重签名地址付款</strong></h2><p>接下来，我们要演示从多重签名地址付款。我们设置的是2 of 3的模式，就是说，三个管理者中，持有任意两人的私钥便可付款。我们假设现在持有的是管理者1和管理者3的私钥。 管理者1</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003332C5-19.png\"></p>\n<p>管理者3</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003336232-20.png\"></p>\n<p>获取私钥的方法也很简单，只要使用如下命令即可：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003333596-21.png\"></p>\n<p>第一步：获取地址上的交易信息 使用listunspent,结果如图(图6地址上的交易信息)：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/000333C54-22.jpg\"></p>\n<p>我们一共向这个地址进行了两次汇款，因为要手动构建交易单，所以，就只能针对具体的每一笔交易进行设置。如果那笔交易上的钱比要花费的多，就要自己设置找零操作。我们用第一笔交易做示例。从0.01个比特币里，付款0.005到一个新地址 1KfqXpdhdtSqhACSeMvNoFSeXFGV5j8PkT,找零地址为：18eHb5P7N4ZAKURetN6pjF1jTGdD3HThrj 首先，我们需要记录第一笔交易的如下几个参数： 第二步：构建交易单：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/00033324F-23.png\"></p>\n<p>输出如下(图7构建交易单)：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/000333G27-24.png\"></p>\n<p>第三步：用第一个私钥对交易单签名</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/000333E52-25.jpg\"></p>\n<p>命令的第一个参数，就是createrawtransaction的输出。第二个关于txid的参数，与上面的相同。最后一个参数，是私钥，我们用的是管理者1的私钥。</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003335G0-26.png\"></p>\n<p>输出如图：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003335P2-27.jpg\"></p>\n<p>可以注意到complete字段是false，因为我们只用了一个私钥签名。然后，将输出的hex字段取出，用第二个私钥再次签名。 第四步：用第二个私钥签名：输入命令：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003334313-28.png\"></p>\n<p>输出如图(图8第二次签名)：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003333a3-29.jpg\"></p>\n<p>可以看到，第二次签名后，complete字段是true，说明签名成功。我们可以使用该地址的币了。 第五步：发送交易单 将上一步的输出hex部分，用sendrawtransaction命令发送到网络上：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003335116-30.png\"></p>\n<p>输入命令：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/00033314T-31.jpg\"></p>\n<p>查询交易ID cd2494071876f91e1f9505f5c5421088c7df2e6f939c17f742d3638bc7df789a即可看到这笔钱的花费情况。</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/000333IA-32.jpg\"></p>\n<h2 id=\"使用脚本\"><a href=\"#使用脚本\" class=\"headerlink\" title=\"使用脚本\"></a><strong>使用脚本</strong></h2><p>如果您读到了这里，首先感谢您的耐心。上面的命令确实让人抓狂。再加上windows下各种符号的兼容问题，笔者测试时几乎吐血了。幸运的是在开源社区，已经有了很多方便的脚本工具。这里，笔者修改了一个开源代码，可以方便大家进行多重签名地址的创建和消费。代码地址在：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2pvaG5zb25kaWFvL2JsYWNrYm9hcmQxMDE=\">https://github.com/johnsondiao/blackboard101<i class=\"fa fa-external-link-alt\"></i></span>  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2pvaG5zb25kaWFvL3B5dGhvbi1iaXRjb2lucnBj\">https://github.com/johnsondiao/python-bitcoinrpc<i class=\"fa fa-external-link-alt\"></i></span> 脚本是用python写的。首先需要安装python2.7.6。安装方法这里不再赘述。python-bitcoinrpc是一个bitcoin的库文件，需要对其中的setup.py文件运行</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003333595-33.png\"></p>\n<p>命令将库安装到python里。 然后，在比特币钱包的路径(wallet.dat所在的目录)里添加bitcoin.conf文件。 文件内容如下：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003333229-34.png\"></p>\n<p><code>wbn\\_multisigs\\_pt1\\_create-address.py</code>脚本用来生成多重签名地址。<br><code>wbn\\_multisigs\\_pt2\\_spend-funds.py</code>脚本用来发送多重签名地址的币。<br>具体的使用方法，就不再说明了，可以用python的IDLE来运行调试。构建多重签名地址的运行截图如下：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003335016-35.jpg\"></p>\n<p>花费多重签名地址的程序运行如下：</p>\n<p><img data-src=\"http://www.wanbizu.com/uploads/allimg/140819/0003332J3-37.jpg\"></p>\n<p>原地址 ：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53YW5iaXp1LmNvbS9iYWlrZS8yMDE0MDgxOTE3MTAuaHRtbA==\">http://www.wanbizu.com/baike/201408191710.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["BlockChain"],"tags":["区块链","btc"]},{"title":"比特币客户端bitcoind的高级用法","url":"/bitcoin_bitcoind/","content":"<blockquote>\n<p>Bitcoin 比特币官方客户端有两个版本：一个是图形界面的版本，通常被称为 Bitcoin（首字母大写），以及一个简洁命令行的版本（称为 bitcoind）。它们相互间是兼容的，有着同样的命令行参数，读取相同的配置文件，也读写相同的数据文件。您可以在一台电脑中运行 Bitcoin 客户端或是 bitcoind 客户端的其中一个（如果您不小心尝试同时运行另外一个客户端，它会提示您已经有一个客户端在运行并且自动退出）。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a><strong>命令行参数</strong></h2><p>使用 -? 或 –help 参数运行 Bitcoin 或 bitcoind，它会提示常用的命令行参数并退出。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">  bitcoind \\[选项\\]</span><br><span class=\"line\"></span><br><span class=\"line\">  bitcoind \\[选项\\] &lt;命令&gt; \\[参数\\]  将命令发送到 -server 或 bitcoind</span><br><span class=\"line\"></span><br><span class=\"line\">  bitcoind \\[选项\\] <span class=\"built_in\">help</span>   列出命令</span><br><span class=\"line\"></span><br><span class=\"line\">  bitcoind \\[选项\\] <span class=\"built_in\">help</span> &lt;命令&gt;    获取该命令的帮助</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">  -conf = &lt;文件名&gt;     指定配置文件（默认：bitcoin.conf）</span><br><span class=\"line\"></span><br><span class=\"line\">  -pid = &lt;文件名&gt;       指定 pid （进程 ID）文件（默认：bitcoind.pid）</span><br><span class=\"line\"></span><br><span class=\"line\">  -gen                             生成比特币</span><br><span class=\"line\"></span><br><span class=\"line\">  -gen=0                       不生成比特币</span><br><span class=\"line\"></span><br><span class=\"line\">  -min                           启动时最小化</span><br><span class=\"line\"></span><br><span class=\"line\">  -splash                       启动时显示启动屏幕（默认：1）</span><br><span class=\"line\"></span><br><span class=\"line\">  -datadir=&lt;目录名&gt;  指定数据目录</span><br><span class=\"line\"></span><br><span class=\"line\">  -dbcache=                  设置数据库缓存大小，单位为兆字节（MB）（默认：25）</span><br><span class=\"line\"></span><br><span class=\"line\">  -dblogsize=                设置数据库磁盘日志大小，单位为兆字节（MB）（默认：100）</span><br><span class=\"line\"></span><br><span class=\"line\">  -<span class=\"built_in\">timeout</span>=                  设置连接超时，单位为毫秒</span><br><span class=\"line\"></span><br><span class=\"line\">  -proxy= 通过 Socks4 代理链接</span><br><span class=\"line\"></span><br><span class=\"line\">  -dns                             addnode 允许查询 DNS 并连接</span><br><span class=\"line\"></span><br><span class=\"line\">  -port=&lt;端口&gt;            监听 &lt;端口&gt; 上的连接（默认：8333，测试网络 testnet：18333）</span><br><span class=\"line\"></span><br><span class=\"line\">  -maxconnections=   最多维护 个节点连接（默认：125）</span><br><span class=\"line\"></span><br><span class=\"line\">  -addnode=                 添加一个节点以供连接，并尝试保持与该节点的连接</span><br><span class=\"line\"></span><br><span class=\"line\">  -connect=                  仅连接到这里指定的节点</span><br><span class=\"line\"></span><br><span class=\"line\">  -irc                       使用 IRC（因特网中继聊天）查找节点（默认：0）</span><br><span class=\"line\"></span><br><span class=\"line\">  -listen                    接受来自外部的连接（默认：1）</span><br><span class=\"line\"></span><br><span class=\"line\">  -dnsseed                   使用 DNS 查找节点（默认：1）</span><br><span class=\"line\"></span><br><span class=\"line\">  -banscore=                 与行为异常节点断开连接的临界值（默认：100）</span><br><span class=\"line\"></span><br><span class=\"line\">  -bantime=                  重新允许行为异常节点连接所间隔的秒数（默认：86400）</span><br><span class=\"line\"></span><br><span class=\"line\">  -maxreceivebuffer=   最大每连接接收缓存，*1000 字节（默认：10000）</span><br><span class=\"line\"></span><br><span class=\"line\">  -maxsendbuffer=       最大每连接发送缓存，*1000 字节（默认：10000）</span><br><span class=\"line\"></span><br><span class=\"line\">  -upnp                      使用全局即插即用（UPNP）映射监听端口（默认：0）</span><br><span class=\"line\"></span><br><span class=\"line\">  -detachdb                  分离货币块和地址数据库。会增加客户端关闭时间（默认：0）</span><br><span class=\"line\"></span><br><span class=\"line\">  -paytxfee=                 您发送的交易每 KB 字节的手续费</span><br><span class=\"line\"></span><br><span class=\"line\">  -testnet                   使用测试网络</span><br><span class=\"line\"></span><br><span class=\"line\">  -debug                     输出额外的调试信息</span><br><span class=\"line\"></span><br><span class=\"line\">  -logtimestamps           调试信息前添加[时间戳](http://8btc.com/article-165-1.html)</span><br><span class=\"line\"></span><br><span class=\"line\">  -printtoconsole           发送跟踪/调试信息到控制台而不是 debug.log 文件</span><br><span class=\"line\"></span><br><span class=\"line\">  -printtodebugger       发送跟踪/调试信息到调试器</span><br><span class=\"line\"></span><br><span class=\"line\">  -rpcuser=&lt;用户名&gt;   JSON-RPC 连接使用的用户名</span><br><span class=\"line\"></span><br><span class=\"line\">  -rpcpassword=&lt;密码&gt;   JSON-RPC 连接使用的密码</span><br><span class=\"line\"></span><br><span class=\"line\">  -rpcport=                 JSON-RPC 连接所监听的 &lt;端口&gt;（默认：8332）</span><br><span class=\"line\"></span><br><span class=\"line\">  -rpcallowip=               允许来自指定 地址的 JSON-RPC 连接</span><br><span class=\"line\"></span><br><span class=\"line\">  -rpcconnect=               发送命令到运行在 地址的节点（默认：127.0.0.1）</span><br><span class=\"line\"></span><br><span class=\"line\">  -blocknotify=&lt;命令&gt; 当最好的货币块改变时执行命令（命令中的 %s 会被替换为货币块哈希值）</span><br><span class=\"line\"></span><br><span class=\"line\">  -upgradewallet             将钱包升级到最新的格式</span><br><span class=\"line\"></span><br><span class=\"line\">  -keypool=                 将密匙池的尺寸设置为 （默认：100）</span><br><span class=\"line\"></span><br><span class=\"line\">  -rescan                    重新扫描货币块链以查找钱包丢失的交易</span><br><span class=\"line\"></span><br><span class=\"line\">  -checkblocks=             启动时检查多少货币块（默认：2500，0 表示全部）</span><br><span class=\"line\"></span><br><span class=\"line\">  -checklevel=               货币块验证的级别（0-6，默认：1）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SSL-选项\"><a href=\"#SSL-选项\" class=\"headerlink\" title=\"SSL 选项\"></a>SSL 选项</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">  -rpcssl                                        使用 OpenSSL（https）JSON-RPC 连接</span><br><span class=\"line\"></span><br><span class=\"line\">  -rpcsslcertificatechainfile=&lt;文件.cert&gt;   服务器证书文件（默认：server.cert）</span><br><span class=\"line\"></span><br><span class=\"line\">  -rpcsslprivatekeyfile=&lt;文件.pem&gt;          服务器私匙文件（默认：server.pem）</span><br><span class=\"line\"></span><br><span class=\"line\">  -rpcsslciphers=&lt;密码&gt;                   可接受的密码（默认： ）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bitcoin-conf-配置文件\"><a href=\"#bitcoin-conf-配置文件\" class=\"headerlink\" title=\"bitcoin.conf 配置文件\"></a>bitcoin.conf 配置文件</h3><p>除了 <code>-datadir</code> 和 <code>-conf</code> 以外的所有命令行参数都可以通过一个配置文件来设置，而所有配置文件中的选项也都可以在命令行中设置。命令行参数设置的值会覆盖配置文件中的设置。</p>\n<p>配置文件是“设置&#x3D;值”格式的一个列表，每行一个。您还可以使用 # 符号来编写注释。</p>\n<p>配置文件不会自动创建；您可以使用您喜爱的纯文本编辑器来创建它。默认情况下，Bitcoin（或 bitcoind）会在比特币数据文件夹下查找一个名为“bitcoin.conf”的文件，但是数据文件夹和配置文件的路径都可以分别通过 -datadir 和 -conf 命令行参数分别指定。</p>\n<h3 id=\"默认配置文件路径\"><a href=\"#默认配置文件路径\" class=\"headerlink\" title=\"默认配置文件路径\"></a>默认配置文件路径</h3><h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">%APPDATA%\\\\Bitcoin\\</span><br><span class=\"line\"></span><br><span class=\"line\">(XP) C:\\\\Documents and Settings\\\\username\\\\Application Data\\\\Bitcoin\\\\bitcoin.conf</span><br><span class=\"line\"></span><br><span class=\"line\">(Vista, 7) C:\\\\Users\\\\username\\\\AppData\\\\Roaming\\\\Bitcoin\\\\bitcoin.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$HOME</span>/.bitcoin/</span><br><span class=\"line\"></span><br><span class=\"line\">/home/username/.bitcoin/bitcoin.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Mac-OSX\"><a href=\"#Mac-OSX\" class=\"headerlink\" title=\"Mac OSX\"></a>Mac OSX</h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$HOME</span>/Library/Application Support/Bitcoin/</span><br><span class=\"line\"></span><br><span class=\"line\">/Users/username/Library/Application Support/Bitcoin/bitcoin.conf</span><br></pre></td></tr></table></figure>\n\n<p>注意：如果 Bitcoin 比特币客户端测试网模式运行，在数据文件夹下客户端会自动创建名为“testnet”的子文件夹。</p>\n<h3 id=\"bitcoin-conf-示例\"><a href=\"#bitcoin-conf-示例\" class=\"headerlink\" title=\"bitcoin.conf 示例\"></a>bitcoin.conf 示例</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bitcoin.conf 配置文件。以 # 开头的行是注释。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 网络相关的设置：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在测试网络中运行，而不是在真正的比特币网络</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#testnet=0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过一个 Socks4 代理服务器连接</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#proxy=127.0.0.1:9050</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##############################################################</span></span><br><span class=\"line\"><span class=\"comment\">##            addnode 与 connect 的区别                      ##</span></span><br><span class=\"line\"><span class=\"comment\">##                                                         ##</span></span><br><span class=\"line\"><span class=\"comment\">##                                                         ##</span></span><br><span class=\"line\"><span class=\"comment\">##  假设您使用了 addnode=4.2.2.4 参数，那么 addnode 便会与      ##</span></span><br><span class=\"line\"><span class=\"comment\">##  您的节点连接，并且告知您的节点所有与它相连接的其它节点。         ##</span></span><br><span class=\"line\"><span class=\"comment\">##  另外它还会将您的节点信息告知与其相连接的其它节点，这样它         ##</span></span><br><span class=\"line\"><span class=\"comment\">##  们也可以连接到您的节点。                                    ##</span></span><br><span class=\"line\"><span class=\"comment\">##                                                          ##</span></span><br><span class=\"line\"><span class=\"comment\">##  connect 在您的节点“连接”到它的时候并不会做上述工作。仅         ##</span></span><br><span class=\"line\"><span class=\"comment\">##  它会与您连接，而其它节点不会。                              ##</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">##  因此如果您位于防火墙后，或者因为其它原因无法找到节点，则        ##</span></span><br><span class=\"line\"><span class=\"comment\">##  使用“addnode”添加一些节点。                               ##</span></span><br><span class=\"line\"><span class=\"comment\">##                                                         ##</span></span><br><span class=\"line\"><span class=\"comment\">##  如果您想保证隐私，使用“connect”连接到那些您可以“信任”          ##</span></span><br><span class=\"line\"><span class=\"comment\">##  的节点。                                                 ##</span></span><br><span class=\"line\"><span class=\"comment\">##                                                         ##</span></span><br><span class=\"line\"><span class=\"comment\">##  如果您在一个局域网内运行了多个节点，您不需要让它们建立许多       ##</span></span><br><span class=\"line\"><span class=\"comment\">##  连接。您只需要使用“connect”让它们统一连接到一个已端口转        ##</span></span><br><span class=\"line\"><span class=\"comment\">##  发并拥有多个连接的节点。                                   ##</span></span><br><span class=\"line\"><span class=\"comment\">##############################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 您可以在下面使用多个 addnode= 设置来连接到指定的节点</span></span><br><span class=\"line\"><span class=\"comment\">#addnode=69.164.218.197</span></span><br><span class=\"line\"><span class=\"comment\">#addnode=10.0.0.2:8333</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或使用多个 connect= 设置来仅连接到指定的节点</span></span><br><span class=\"line\"><span class=\"comment\">#connect=69.164.218.197</span></span><br><span class=\"line\"><span class=\"comment\">#connect=10.0.0.1:8333</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不使用因特网中继聊天（IRC）（irc.lfnet.org #bitcoin 频道）来查找其它节点</span></span><br><span class=\"line\"><span class=\"comment\">#noirc=0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 入站+出站的最大连接数</span></span><br><span class=\"line\"><span class=\"comment\">#maxconnections=</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># JSON-RPC 选项（用于控制运行中的 Bitcoin/bitcoind 进程）：</span></span><br><span class=\"line\"><span class=\"comment\"># server=1 告知 Bitcoin-QT 接受 JSON-RPC 命令</span></span><br><span class=\"line\"><span class=\"comment\">#server=0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 您必须设置 rpcuser 和 rpcpassword 以确保 JSON-RPC 的安全</span></span><br><span class=\"line\"><span class=\"comment\">#rpcuser=Ulysseys</span></span><br><span class=\"line\"><span class=\"comment\">#rpcpassword=YourSuperGreatPasswordNumber\\_DO\\_NOT\\_USE\\_THIS\\_OR\\_YOU\\_WILL\\_GET\\_ROBBED\\_385593</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端在 HTTP 连接建立后，等待多少秒以完成一个 RPC HTTP 请求</span></span><br><span class=\"line\"><span class=\"comment\">#rpctimeout=30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认仅允许来自本机的 RPC 连接。在这里您可以指定多个 rpcallowip=，来设置您想允许连接的其它主机 IP 地址。</span></span><br><span class=\"line\"><span class=\"comment\"># 您可以使用 * 作为通配符。</span></span><br><span class=\"line\"><span class=\"comment\">#rpcallowip=10.1.1.34</span></span><br><span class=\"line\"><span class=\"comment\">#rpcallowip=192.168.1.*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在如下端口监听 RPC 连接</span></span><br><span class=\"line\"><span class=\"comment\">#rpcport=8332</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 您可以通过如下设置使用 Bitcoin 或 bitcoind 来发送命令到一个在其它主机远程运行的 Bitcoin/bitcoind 客户端</span></span><br><span class=\"line\"><span class=\"comment\">#rpcconnect=127.0.0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用安全套接层（也称为 TLS 或 HTTPS）来连接到 Bitcoin -server 或 bitcoind</span></span><br><span class=\"line\"><span class=\"comment\">#rpcssl=1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当 rpcssl=1 时使用的 OpenSSL 设置</span></span><br><span class=\"line\"><span class=\"comment\">#rpcsslciphers=TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH</span></span><br><span class=\"line\"><span class=\"comment\">#rpcsslcertificatechainfile=server.cert</span></span><br><span class=\"line\"><span class=\"comment\">#rpcsslprivatekeyfile=server.pem</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其它选项：</span></span><br><span class=\"line\"><span class=\"comment\"># 设置 gen=1 以尝试生成比特币（采矿）</span></span><br><span class=\"line\"><span class=\"comment\">#gen=0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 预生成如下数目的公匙和私匙，这样钱包备份便可以对已有的交易以及未来多笔交易有效</span></span><br><span class=\"line\"><span class=\"comment\">#keypool=100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每次您发送比特币的时候支付一个可选的额外的交易手续费。包含手续费的交易会更快的被包含在新生成的货币块中，因此会更快生效</span></span><br><span class=\"line\"><span class=\"comment\">#paytxfee=0.00</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 允许直接连接，实现“通过 IP 地址支付”功能</span></span><br><span class=\"line\"><span class=\"comment\">#allowreceivebyip=1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用户界面选项：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最小化启动比特币客户端</span></span><br><span class=\"line\"><span class=\"comment\">#min=1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最小化到系统托盘</span></span><br><span class=\"line\"><span class=\"comment\">#minimizetotray=1</span></span><br></pre></td></tr></table></figure>","categories":["BlockChain"],"tags":["区块链","btc"]},{"title":"C3-Linearization--线性化python","url":"/eth_c3_linearization/","content":"<h1 id=\"为什么采用C3算法\"><a href=\"#为什么采用C3算法\" class=\"headerlink\" title=\"为什么采用C3算法\"></a>为什么采用C3算法</h1><p>C3算法最早被提出是用于Lisp的，应用在Python中是为了解决原来基于深度优先搜索算法不满足本地优先级，和单调性的问题。</p>\n<ul>\n<li>本地优先级：<br> 指声明时父类的顺序，比如C(A,B)，如果访问C类对象属性时，该根据声明顺序，优先查找A类，然后再查找B类。</li>\n<li>单调性：<br>如果在C的解析顺序中，A排在B的前面，那么在C的所有子类里，也必须满足这个顺序。<span id=\"more\"></span></li>\n</ul>\n<p>线性化关系为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">L(7) = &#123;&#x27;object&#x27;&#125;</span><br><span class=\"line\">L(4) = &#123;&#x27;4&#x27;,&#x27;7&#x27;&#125;</span><br><span class=\"line\">L(5) = &#123;&#x27;5&#x27;,&#x27;7&#x27;&#125;</span><br><span class=\"line\">L(6) = &#123;&#x27;6&#x27;,&#x27;7&#x27;&#125;</span><br><span class=\"line\">L(2) = &#123;&#x27;2&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;7&#x27;,&#x27;object&#x27;&#125;</span><br><span class=\"line\">L(3) = &#123;&#x27;3&#x27;,&#x27;4&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;object&#x27;&#125;</span><br><span class=\"line\">L(1) = &#123;&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;object&#x27;&#125;</span><br></pre></td></tr></table></figure>\n<p>python 代码如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#! /usr/bin/env python</span><br><span class=\"line\"># </span><br><span class=\"line\"># multi inheritance view</span><br><span class=\"line\"># /------ 7-------\\ </span><br><span class=\"line\"># / | \\</span><br><span class=\"line\"># 4 - 5 6</span><br><span class=\"line\"># \\\\ / /</span><br><span class=\"line\"># 2-/\\--- 3------/</span><br><span class=\"line\"># \\ / </span><br><span class=\"line\"># 0,1 </span><br><span class=\"line\">#</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\">class C7(object):</span><br><span class=\"line\">    def test(self):</span><br><span class=\"line\">        print &#x27;test in C7&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">class C4(C7):</span><br><span class=\"line\">    def test(self):</span><br><span class=\"line\">        print &#x27;test in C4&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">class C5(C7):</span><br><span class=\"line\">    def test(self):</span><br><span class=\"line\">        print &#x27;test in C5&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">class C6(C7):</span><br><span class=\"line\">    def test(self):</span><br><span class=\"line\">        print &#x27;test in C6&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">class C2(C4,C5):</span><br><span class=\"line\">    def test(self):</span><br><span class=\"line\">        print &#x27;test in C2&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">class C3(C4,C6):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">class C1(C2,C3):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">class C0(C2,C3):</span><br><span class=\"line\">    def test(self):</span><br><span class=\"line\">        print &#x27;test in C0&#x27;</span><br><span class=\"line\">        super(C3,self).test()</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    </span><br><span class=\"line\">    c1 = C1()</span><br><span class=\"line\">    c1.test()</span><br><span class=\"line\">    c0 = C0()</span><br><span class=\"line\">    c0.test()</span><br><span class=\"line\">    print C7.__mro__</span><br><span class=\"line\">    print C6.__mro__</span><br><span class=\"line\">    print C5.__mro__</span><br><span class=\"line\">    print C4.__mro__</span><br><span class=\"line\">    print C3.__mro__</span><br><span class=\"line\">    print C2.__mro__</span><br><span class=\"line\">    print C1.__mro__</span><br><span class=\"line\">    print C0.__mro__</span><br></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">test in C2</span><br><span class=\"line\">test in C0</span><br><span class=\"line\">test in C4</span><br><span class=\"line\">(&lt;class &#x27;__main__.C7&#x27;&gt;, &lt;type &#x27;object&#x27;&gt;)</span><br><span class=\"line\">(&lt;class &#x27;__main__.C6&#x27;&gt;, &lt;class &#x27;__main__.C7&#x27;&gt;, &lt;type &#x27;object&#x27;&gt;)</span><br><span class=\"line\">(&lt;class &#x27;__main__.C5&#x27;&gt;, &lt;class &#x27;__main__.C7&#x27;&gt;, &lt;type &#x27;object&#x27;&gt;)</span><br><span class=\"line\">(&lt;class &#x27;__main__.C4&#x27;&gt;, &lt;class &#x27;__main__.C7&#x27;&gt;, &lt;type &#x27;object&#x27;&gt;)</span><br><span class=\"line\">(&lt;class &#x27;__main__.C3&#x27;&gt;, &lt;class &#x27;__main__.C4&#x27;&gt;, &lt;class &#x27;__main__.C6&#x27;&gt;, &lt;class &#x27;__main__.C7&#x27;&gt;, &lt;type &#x27;object&#x27;&gt;)</span><br><span class=\"line\">(&lt;class &#x27;__main__.C2&#x27;&gt;, &lt;class &#x27;__main__.C4&#x27;&gt;, &lt;class &#x27;__main__.C5&#x27;&gt;, &lt;class &#x27;__main__.C7&#x27;&gt;, &lt;type &#x27;object&#x27;&gt;)</span><br><span class=\"line\">(&lt;class &#x27;__main__.C1&#x27;&gt;, &lt;class &#x27;__main__.C2&#x27;&gt;, &lt;class &#x27;__main__.C3&#x27;&gt;, &lt;class &#x27;__main__.C4&#x27;&gt;, &lt;class &#x27;__main__.C5&#x27;&gt;, &lt;class &#x27;__main__.C6&#x27;&gt;, &lt;class &#x27;__main__.C7&#x27;&gt;, &lt;type &#x27;object&#x27;&gt;)</span><br><span class=\"line\">(&lt;class &#x27;__main__.C0&#x27;&gt;, &lt;class &#x27;__main__.C2&#x27;&gt;, &lt;class &#x27;__main__.C3&#x27;&gt;, &lt;class &#x27;__main__.C4&#x27;&gt;, &lt;class &#x27;__main__.C5&#x27;&gt;, &lt;class &#x27;__main__.C6&#x27;&gt;, &lt;class &#x27;__main__.C7&#x27;&gt;, &lt;type &#x27;object&#x27;&gt;)</span><br></pre></td></tr></table></figure>\n<p>更多可以查看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQzNfbGluZWFyaXphdGlvbg==\">wiki<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"EOS合约基础教程--踩坑集合（持续更新）","url":"/eos_error_collect/","content":"<h2 id=\"编译失败\"><a href=\"#编译失败\" class=\"headerlink\" title=\"编译失败\"></a>编译失败</h2><span id=\"more\"></span>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">eosio-cpp -o hello.wasm hello.cpp --abigen</span><br><span class=\"line\">hello.cpp:11:16: error: unknown <span class=\"built_in\">type</span> name <span class=\"string\">&#x27;account_name&#x27;</span></span><br><span class=\"line\">      void hi( account_name user ) &#123;</span><br><span class=\"line\">               ^</span><br><span class=\"line\">hello.cpp:16:20: error: C++ requires a <span class=\"built_in\">type</span> specifier <span class=\"keyword\">for</span> all declarations</span><br><span class=\"line\">EOSIO_ABI( hello, (hi) )</span><br><span class=\"line\">                   ^</span><br><span class=\"line\">hello.cpp:16:25: error: expected <span class=\"keyword\">function</span> body after <span class=\"keyword\">function</span> declarator</span><br><span class=\"line\">EOSIO_ABI( hello, (hi) )</span><br><span class=\"line\">                        ^</span><br><span class=\"line\">3 errors generated.</span><br></pre></td></tr></table></figure>\n\n<p><code>account_name</code> 官方定义在 <code>eosiolib/types.hpp</code> 中，尝试在<code>build</code>目录下执行<code>sudo make install</code>命令。或者将eos的inclue加入环境变量b吧！<br><strong>请注意以下内容：</strong><br>官方语法更新！！！网络上找到的教程都是老版本！！！最新的应该是<code>name</code>！！！见官方链接 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VPU0lPL2Vvc2lvLmNkdC9ibG9iL21hc3Rlci9leGFtcGxlcy9oZWxsby9oZWxsby5jcHA=\">helllo.cpp<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"EOS-CPU资源用尽\"><a href=\"#EOS-CPU资源用尽\" class=\"headerlink\" title=\"EOS CPU资源用尽\"></a>EOS CPU资源用尽</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error 3080004: Transaction exceeded the current CPU usage <span class=\"built_in\">limit</span> imposed on the transaction</span><br></pre></td></tr></table></figure>\n\n<p>抵押EOS换取cpu就是了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">system delegatebw itleakstoken tokenitleaks <span class=\"string\">&quot;2.0000 EOS&quot;</span> <span class=\"string\">&quot;2.000 EOS&quot;</span> -p 121adsas</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"错误码汇总\"><a href=\"#错误码汇总\" class=\"headerlink\" title=\"错误码汇总\"></a>错误码汇总</h2><table>\n<thead>\n<tr>\n<th>错误代码</th>\n<th>错误信息</th>\n<th>中文含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>3000000</td>\n<td>blockchain exception</td>\n<td>区块链异常</td>\n</tr>\n<tr>\n<td>3010000</td>\n<td>chain type exception</td>\n<td>链类型异常</td>\n</tr>\n<tr>\n<td>3010001</td>\n<td>Invalid name</td>\n<td>无效的名称</td>\n</tr>\n<tr>\n<td>3010002</td>\n<td>Invalid public key</td>\n<td>无效的公钥</td>\n</tr>\n<tr>\n<td>3010003</td>\n<td>Invalid private key</td>\n<td>无效的私钥</td>\n</tr>\n<tr>\n<td>3010004</td>\n<td>Invalid authority</td>\n<td>无效的授权</td>\n</tr>\n<tr>\n<td>3010005</td>\n<td>Invalid action</td>\n<td>无效的动作</td>\n</tr>\n<tr>\n<td>3010006</td>\n<td>Invalid transaction</td>\n<td>无效的交易</td>\n</tr>\n<tr>\n<td>3010007</td>\n<td>Invalid ABI</td>\n<td>无效的ABI</td>\n</tr>\n<tr>\n<td>3010008</td>\n<td>Invalid block ID</td>\n<td>无效的区块ID</td>\n</tr>\n<tr>\n<td>3010009</td>\n<td>Invalid transaction ID</td>\n<td>无效的交易ID</td>\n</tr>\n<tr>\n<td>3010010</td>\n<td>Invalid packed transaction</td>\n<td>无效的打包交易</td>\n</tr>\n<tr>\n<td>3010011</td>\n<td>Invalid asset</td>\n<td>无效的资产</td>\n</tr>\n<tr>\n<td>3010012</td>\n<td>Invalid chain ID</td>\n<td>无效的链ID</td>\n</tr>\n<tr>\n<td>3010013</td>\n<td>Invalid fixed key</td>\n<td>无效的固定密钥</td>\n</tr>\n<tr>\n<td>3010014</td>\n<td>Invalid symbol</td>\n<td>无效的代币符号</td>\n</tr>\n<tr>\n<td>3015000</td>\n<td>ABI exception</td>\n<td>ABI异常</td>\n</tr>\n<tr>\n<td>3015001</td>\n<td>No ABI found</td>\n<td>没有找到ABI</td>\n</tr>\n<tr>\n<td>3015002</td>\n<td>Invalid Ricardian Clause</td>\n<td>无效的李嘉图语句</td>\n</tr>\n<tr>\n<td>3015003</td>\n<td>Invalid Ricardian Action</td>\n<td>无效的李嘉图动作</td>\n</tr>\n<tr>\n<td>3015004</td>\n<td>The type defined in the ABI is invalid</td>\n<td>ABI中定义的类型无效</td>\n</tr>\n<tr>\n<td>3015005</td>\n<td>Duplicate type definition in the ABI</td>\n<td>ABI中存在重复定义的类型</td>\n</tr>\n<tr>\n<td>3015006</td>\n<td>Duplicate struct definition in the ABI</td>\n<td>ABI中存在重复定义的结构</td>\n</tr>\n<tr>\n<td>3015007</td>\n<td>Duplicate action definition in the ABI</td>\n<td>ABI中存在重复定义的动作</td>\n</tr>\n<tr>\n<td>3015008</td>\n<td>Duplicate table definition in the ABI</td>\n<td>ABI中存在重复定义的数据表</td>\n</tr>\n<tr>\n<td>3015009</td>\n<td>Duplicate error message definition in the ABI</td>\n<td>ABI中存在重复定义的错误信息</td>\n</tr>\n<tr>\n<td>3015010</td>\n<td>ABI serialization time has exceeded the deadline</td>\n<td>ABI序列化时间超过截止值</td>\n</tr>\n<tr>\n<td>3015011</td>\n<td>ABI recursive definition has exceeded the max recursion depth</td>\n<td>ABI中的递归定义超过最大允许深度</td>\n</tr>\n<tr>\n<td>3015012</td>\n<td>Circular definition is detected in the ABI</td>\n<td>ABI中检测到循环定义</td>\n</tr>\n<tr>\n<td>3015013</td>\n<td>Unpack data exception</td>\n<td>解包数据发生异常</td>\n</tr>\n<tr>\n<td>3015014</td>\n<td>Pack data exception</td>\n<td>打包数据发生异常</td>\n</tr>\n<tr>\n<td>3015015</td>\n<td>Duplicate variant definition in the ABI</td>\n<td>ABI中存在重复定义的变量</td>\n</tr>\n<tr>\n<td>3015016</td>\n<td>ABI has an unsupported version</td>\n<td>不支持的ABI版本</td>\n</tr>\n<tr>\n<td>3020000</td>\n<td>Fork database exception</td>\n<td>分叉数据库异常</td>\n</tr>\n<tr>\n<td>3020001</td>\n<td>Block can not be found</td>\n<td>找不到区块</td>\n</tr>\n<tr>\n<td>3030000</td>\n<td>Block exception</td>\n<td>区块异常</td>\n</tr>\n<tr>\n<td>3030001</td>\n<td>Unlinkable block</td>\n<td>无法链接的区块</td>\n</tr>\n<tr>\n<td>3030002</td>\n<td>Transaction outputs in block do not match transaction outputs from applying block</td>\n<td>指定区块与待应用区块中的交易输出不匹配</td>\n</tr>\n<tr>\n<td>3030003</td>\n<td>Block does not guarantee concurrent execution without conflicts</td>\n<td>区块不能保证无冲突并发执行</td>\n</tr>\n<tr>\n<td>3030004</td>\n<td>Shard locks in block are incorrect or mal-formed</td>\n<td>区块的分片锁不正确或格式错误</td>\n</tr>\n<tr>\n<td>3030005</td>\n<td>Block exhausted allowed resources</td>\n<td>区块已耗尽许可的资源</td>\n</tr>\n<tr>\n<td>3030006</td>\n<td>Block is too old to push</td>\n<td>区块太陈旧，无法提交</td>\n</tr>\n<tr>\n<td>3030007</td>\n<td>Block is from the future</td>\n<td>区块时间过早</td>\n</tr>\n<tr>\n<td>3030008</td>\n<td>Block is not signed with expected key</td>\n<td>区块签名与密钥不一致</td>\n</tr>\n<tr>\n<td>3030009</td>\n<td>Block is not signed by expected producer</td>\n<td>区块签名与出块人不一致</td>\n</tr>\n<tr>\n<td>3040000</td>\n<td>Transaction exception</td>\n<td>交易异常</td>\n</tr>\n<tr>\n<td>3040001</td>\n<td>Error decompressing transaction</td>\n<td>解压交易失败</td>\n</tr>\n<tr>\n<td>3040002</td>\n<td>Transaction should have at least one normal action</td>\n<td>交易至少应当包含一个常规动作</td>\n</tr>\n<tr>\n<td>3040003</td>\n<td>Transaction should have at least one required authority</td>\n<td>交易至少应当包含一个授权</td>\n</tr>\n<tr>\n<td>3040004</td>\n<td>Context-free action should have no required authority</td>\n<td>上下文无关动作不应当包含授权</td>\n</tr>\n<tr>\n<td>3040005</td>\n<td>Expired Transaction</td>\n<td>超时的交易</td>\n</tr>\n<tr>\n<td>3040006</td>\n<td>Transaction Expiration Too Far</td>\n<td>交易超时过久</td>\n</tr>\n<tr>\n<td>3040007</td>\n<td>Invalid Reference Block</td>\n<td>无效的参考块</td>\n</tr>\n<tr>\n<td>3040008</td>\n<td>Duplicate transaction</td>\n<td>重复的交易</td>\n</tr>\n<tr>\n<td>3040009</td>\n<td>Duplicate deferred transaction</td>\n<td>重复的延迟交易</td>\n</tr>\n<tr>\n<td>3040010</td>\n<td>Context free action is not allowed inside generated transaction</td>\n<td>在生成的交易中不允许出现上下文无关动作</td>\n</tr>\n<tr>\n<td>3040011</td>\n<td>The transaction can not be found</td>\n<td>交易找不到</td>\n</tr>\n<tr>\n<td>3040012</td>\n<td>Pushing too many transactions at once</td>\n<td>同时提交过多的交易</td>\n</tr>\n<tr>\n<td>3040013</td>\n<td>Transaction is too big</td>\n<td>交易过大</td>\n</tr>\n<tr>\n<td>3040014</td>\n<td>Unknown transaction compression</td>\n<td>未知的交易压缩方式</td>\n</tr>\n<tr>\n<td>3050000</td>\n<td>Action validate exception</td>\n<td>动作验证异常</td>\n</tr>\n<tr>\n<td>3050001</td>\n<td>Account name already exists</td>\n<td>账号名已经存在</td>\n</tr>\n<tr>\n<td>3050002</td>\n<td>Invalid Action Arguments</td>\n<td>无效的动作参数</td>\n</tr>\n<tr>\n<td>3050003</td>\n<td>eosio_assert_message assertion failure</td>\n<td>消息条件验证失败</td>\n</tr>\n<tr>\n<td>3050004</td>\n<td>eosio_assert_code assertion failure</td>\n<td>代码条件验证失败</td>\n</tr>\n<tr>\n<td>3050005</td>\n<td>Action can not be found</td>\n<td>找不到动作</td>\n</tr>\n<tr>\n<td>3050006</td>\n<td>Mismatch between action data and its struct</td>\n<td>动作数据和结构定义不匹配</td>\n</tr>\n<tr>\n<td>3050007</td>\n<td>Attempt to use unaccessible API</td>\n<td>试图访问不许可的API</td>\n</tr>\n<tr>\n<td>3050008</td>\n<td>Abort Called</td>\n<td>中止被调用</td>\n</tr>\n<tr>\n<td>3050009</td>\n<td>Inline Action exceeds maximum size limit</td>\n<td>内联动作超过允许的最大尺寸</td>\n</tr>\n<tr>\n<td>3060000</td>\n<td>Database exception</td>\n<td>数据库异常</td>\n</tr>\n<tr>\n<td>3060001</td>\n<td>Permission Query Exception</td>\n<td>许可查询异常</td>\n</tr>\n<tr>\n<td>3060002</td>\n<td>Account Query Exception</td>\n<td>账号查询异常</td>\n</tr>\n<tr>\n<td>3060003</td>\n<td>Contract Table Query Exception</td>\n<td>合约数据表查询异常</td>\n</tr>\n<tr>\n<td>3060004</td>\n<td>Contract Query Exception</td>\n<td>合约查询异常</td>\n</tr>\n<tr>\n<td>3060100</td>\n<td>Guard Exception</td>\n<td>保护性异常</td>\n</tr>\n<tr>\n<td>3060101</td>\n<td>Database usage is at unsafe levels</td>\n<td>数据库利用处于不安全等级</td>\n</tr>\n<tr>\n<td>3060102</td>\n<td>Reversible block log usage is at unsafe levels</td>\n<td>可逆块日志利用处于不安全等级</td>\n</tr>\n<tr>\n<td>3070000</td>\n<td>WASM Exception</td>\n<td>WASM异常</td>\n</tr>\n<tr>\n<td>3070001</td>\n<td>Error in WASM page memory</td>\n<td>WASM内存页错误</td>\n</tr>\n<tr>\n<td>3070002</td>\n<td>Runtime Error Processing WASM</td>\n<td>处理WASM时发生运行时错误</td>\n</tr>\n<tr>\n<td>3070003</td>\n<td>Serialization Error Processing WASM</td>\n<td>处理WASM时发生序列化错误</td>\n</tr>\n<tr>\n<td>3070004</td>\n<td>memcpy with overlapping memory</td>\n<td>内存拷贝时发生地址重叠</td>\n</tr>\n<tr>\n<td>3070005</td>\n<td>binaryen exception</td>\n<td>binaryen异常</td>\n</tr>\n<tr>\n<td>3080000</td>\n<td>Resource exhausted exception</td>\n<td>资源耗尽异常</td>\n</tr>\n<tr>\n<td>3080001</td>\n<td>Account using more than allotted RAM usage</td>\n<td>账号使用的内存超限</td>\n</tr>\n<tr>\n<td>3080002</td>\n<td>Transaction exceeded the current network usage limit imposed on the transaction</td>\n<td>交易网络占用超限</td>\n</tr>\n<tr>\n<td>3080003</td>\n<td>Transaction network usage is too much for the remaining allowable usage of the current block</td>\n<td>交易网络占用过高</td>\n</tr>\n<tr>\n<td>3080004</td>\n<td>Transaction exceeded the current CPU usage limit imposed on the transaction</td>\n<td>交易CPU占用超限</td>\n</tr>\n<tr>\n<td>3080005</td>\n<td>Transaction CPU usage is too much for the remaining allowable usage of the current block</td>\n<td>交易CPU占用过高</td>\n</tr>\n<tr>\n<td>3080006</td>\n<td>Transaction took too long</td>\n<td>交易用时过长</td>\n</tr>\n<tr>\n<td>3080007</td>\n<td>Transaction exceeded the current greylisted account network usage limit</td>\n<td>交易超过当前灰名单账号的网络用量上限</td>\n</tr>\n<tr>\n<td>3080008</td>\n<td>Transaction exceeded the current greylisted account CPU usage limit</td>\n<td>交易超过当前灰名单账号的CPU用量上限</td>\n</tr>\n<tr>\n<td>3081001</td>\n<td>Transaction reached the deadline set due to leeway on account CPU limits</td>\n<td>由于账号CPU限制，交易已经达到截止区</td>\n</tr>\n<tr>\n<td>3090000</td>\n<td>Authorization exception</td>\n<td>授权异常</td>\n</tr>\n<tr>\n<td>3090001</td>\n<td>Duplicate signature included</td>\n<td>包含重复的签名</td>\n</tr>\n<tr>\n<td>3090002</td>\n<td>Irrelevant signature included</td>\n<td>包含不相关的签名</td>\n</tr>\n<tr>\n<td>3090003</td>\n<td>Provided keys, permissions, and delays do not satisfy declared authorizations</td>\n<td>提供的密钥、许可和延时不能满足声称的授权</td>\n</tr>\n<tr>\n<td>3090004</td>\n<td>Missing required authority</td>\n<td>授权丢失</td>\n</tr>\n<tr>\n<td>3090005</td>\n<td>Irrelevant authority included</td>\n<td>包含不相关的授权</td>\n</tr>\n<tr>\n<td>3090006</td>\n<td>Insufficient delay</td>\n<td>延时不足</td>\n</tr>\n<tr>\n<td>3090007</td>\n<td>Invalid Permission</td>\n<td>许可无效</td>\n</tr>\n<tr>\n<td>3090008</td>\n<td>The action is not allowed to be linked with minimum permission</td>\n<td>不允许该动作链接到最小许可</td>\n</tr>\n<tr>\n<td>3090009</td>\n<td>The parent permission is invalid</td>\n<td>父级许可无效</td>\n</tr>\n<tr>\n<td>3100000</td>\n<td>Miscellaneous exception</td>\n<td>其他异常</td>\n</tr>\n<tr>\n<td>3100001</td>\n<td>Internal state is no longer consistent</td>\n<td>内部状态不一致</td>\n</tr>\n<tr>\n<td>3100002</td>\n<td>Unknown block</td>\n<td>未知区块</td>\n</tr>\n<tr>\n<td>3100003</td>\n<td>Unknown transaction</td>\n<td>未知交易</td>\n</tr>\n<tr>\n<td>3100004</td>\n<td>Corrupted reversible block database was fixed</td>\n<td>被破坏的可逆区块数据库已修复</td>\n</tr>\n<tr>\n<td>3100005</td>\n<td>Extracted genesis state from blocks.log</td>\n<td>从区块日志中提取的创世状态</td>\n</tr>\n<tr>\n<td>3100006</td>\n<td>Subjective exception thrown during block production</td>\n<td>出块时抛出异常</td>\n</tr>\n<tr>\n<td>3100007</td>\n<td>Multiple voter info detected</td>\n<td>检测到多个投票人信息</td>\n</tr>\n<tr>\n<td>3100008</td>\n<td>Feature is currently unsupported</td>\n<td>当前不支持的特性</td>\n</tr>\n<tr>\n<td>3100009</td>\n<td>Node management operation successfully executed</td>\n<td>结果管理操作执行成功</td>\n</tr>\n<tr>\n<td>3110000</td>\n<td>Plugin exception</td>\n<td>插件异常</td>\n</tr>\n<tr>\n<td>3110001</td>\n<td>Missing Chain API Plugin</td>\n<td>Chain API插件丢失</td>\n</tr>\n<tr>\n<td>3110002</td>\n<td>Missing Wallet API Plugin</td>\n<td>Wallet API插件丢失</td>\n</tr>\n<tr>\n<td>3110003</td>\n<td>Missing History API Plugin</td>\n<td>History API插件丢失</td>\n</tr>\n<tr>\n<td>3110004</td>\n<td>Missing Net API Plugin</td>\n<td>Net API插件丢失</td>\n</tr>\n<tr>\n<td>3110005</td>\n<td>Missing Chain Plugin</td>\n<td>Chain插件丢失</td>\n</tr>\n<tr>\n<td>3110006</td>\n<td>Incorrect plugin configuration</td>\n<td>插件配置不正确</td>\n</tr>\n<tr>\n<td>3120000</td>\n<td>Wallet exception</td>\n<td>钱包异常</td>\n</tr>\n<tr>\n<td>3120001</td>\n<td>Wallet already exists</td>\n<td>钱包已经存在</td>\n</tr>\n<tr>\n<td>3120002</td>\n<td>Nonexistent wallet</td>\n<td>钱包不存在</td>\n</tr>\n<tr>\n<td>3120003</td>\n<td>Locked wallet</td>\n<td>已锁定的钱包</td>\n</tr>\n<tr>\n<td>3120004</td>\n<td>Missing public key</td>\n<td>公钥丢失</td>\n</tr>\n<tr>\n<td>3120005</td>\n<td>Invalid wallet password</td>\n<td>无效的钱包密码</td>\n</tr>\n<tr>\n<td>3120006</td>\n<td>No available wallet</td>\n<td>没有有效的钱包</td>\n</tr>\n<tr>\n<td>3120007</td>\n<td>Already unlocked</td>\n<td>已经解锁</td>\n</tr>\n<tr>\n<td>3120008</td>\n<td>Key already exists</td>\n<td>密钥已经存在</td>\n</tr>\n<tr>\n<td>3120009</td>\n<td>Nonexistent key</td>\n<td>不存在的密钥</td>\n</tr>\n<tr>\n<td>3120010</td>\n<td>Unsupported key type</td>\n<td>不支持的密钥类型</td>\n</tr>\n<tr>\n<td>3120011</td>\n<td>Wallet lock timeout is invalid</td>\n<td>钱包锁定超时无效</td>\n</tr>\n<tr>\n<td>3120012</td>\n<td>Secure Enclave Exception</td>\n<td>安全专区异常</td>\n</tr>\n<tr>\n<td>3130000</td>\n<td>Actor or contract whitelist&#x2F;blacklist exception</td>\n<td>执行人或合约白名单&#x2F;黑名单异常</td>\n</tr>\n<tr>\n<td>3130001</td>\n<td>Authorizing actor of transaction is not on the whitelist</td>\n<td>交易的授权执行人不在白名单中</td>\n</tr>\n<tr>\n<td>3130002</td>\n<td>Authorizing actor of transaction is on the blacklist</td>\n<td>交易的授权执行人在黑名单中</td>\n</tr>\n<tr>\n<td>3130003</td>\n<td>Contract to execute is not on the whitelist</td>\n<td>要执行的合约不在白名单中</td>\n</tr>\n<tr>\n<td>3130004</td>\n<td>Contract to execute is on the blacklist</td>\n<td>要执行的合约在黑名单中</td>\n</tr>\n<tr>\n<td>3130005</td>\n<td>Action to execute is on the blacklist</td>\n<td>要执行的动作在黑名单中</td>\n</tr>\n<tr>\n<td>3130006</td>\n<td>Public key in authority is on the blacklist</td>\n<td>授权中的公钥在黑名单中</td>\n</tr>\n<tr>\n<td>3140000</td>\n<td>Exceptions that are allowed to bubble out of emit calls in controller</td>\n<td>控制器异常</td>\n</tr>\n<tr>\n<td>3140001</td>\n<td>Block does not match checkpoint</td>\n<td>区块与检查点不匹配</td>\n</tr>\n<tr>\n<td>3160000</td>\n<td>Contract exception</td>\n<td>合约异常</td>\n</tr>\n<tr>\n<td>3160001</td>\n<td>The payer of the table data is invalid</td>\n<td>表数据支付账号无效</td>\n</tr>\n<tr>\n<td>3160002</td>\n<td>Table access violation</td>\n<td>数据表访问违规</td>\n</tr>\n<tr>\n<td>3160003</td>\n<td>Invalid table iterator</td>\n<td>无效的数据表迭代器</td>\n</tr>\n<tr>\n<td>3160004</td>\n<td>Table can not be found inside the cache</td>\n<td>缓存中找不到指定的数据表</td>\n</tr>\n<tr>\n<td>3160005</td>\n<td>The table operation is not allowed</td>\n<td>不允许数据表操作</td>\n</tr>\n<tr>\n<td>3160006</td>\n<td>Invalid contract vm type</td>\n<td>无效的合约虚拟机类型</td>\n</tr>\n<tr>\n<td>3160007</td>\n<td>Invalid contract vm version</td>\n<td>无效的合约虚拟机版本</td>\n</tr>\n<tr>\n<td>3160008</td>\n<td>Contract is already running this version of code</td>\n<td>合约已经在运行这个版本的代码</td>\n</tr>\n<tr>\n<td>3160009</td>\n<td>No wast file found</td>\n<td>，没有找到wast文件</td>\n</tr>\n<tr>\n<td>3160010</td>\n<td>No abi file found</td>\n<td>没有找到abi文件</td>\n</tr>\n<tr>\n<td>3170000</td>\n<td>Producer exception</td>\n<td>出块人异常</td>\n</tr>\n<tr>\n<td>3170001</td>\n<td>Producer private key is not available</td>\n<td>出块人私钥无效</td>\n</tr>\n<tr>\n<td>3170002</td>\n<td>Pending block state is missing</td>\n<td>待定区块状态丢失</td>\n</tr>\n<tr>\n<td>3170003</td>\n<td>Producer is double confirming known range</td>\n<td>出块人双重确认</td>\n</tr>\n<tr>\n<td>3170004</td>\n<td>Producer schedule exception</td>\n<td>出块人调度计划异常</td>\n</tr>\n<tr>\n<td>3170006</td>\n<td>The producer is not part of current schedule</td>\n<td>出块人不属于当前安排计划</td>\n</tr>\n<tr>\n<td>3170007</td>\n<td>The configured snapshot directory does not exist</td>\n<td>配置的快照目录不存在</td>\n</tr>\n<tr>\n<td>3170008</td>\n<td>The requested snapshot already exists</td>\n<td>请求的快照已经存在</td>\n</tr>\n<tr>\n<td>3180000</td>\n<td>Reversible Blocks exception</td>\n<td>可逆区块异常</td>\n</tr>\n<tr>\n<td>3180001</td>\n<td>Invalid reversible blocks directory</td>\n<td>无效的可逆区块目录</td>\n</tr>\n<tr>\n<td>3180002</td>\n<td>Backup directory for reversible blocks already existg</td>\n<td>可逆块的备份目录已存在</td>\n</tr>\n<tr>\n<td>3180003</td>\n<td>Gap in the reversible blocks database</td>\n<td>不连续的可逆区块数据库</td>\n</tr>\n<tr>\n<td>3190000</td>\n<td>Block log exception</td>\n<td>区块日志异常</td>\n</tr>\n<tr>\n<td>3190001</td>\n<td>unsupported version of block log</td>\n<td>不支持的区块日志版本</td>\n</tr>\n<tr>\n<td>3190002</td>\n<td>fail to append block to the block log</td>\n<td>向区块日志添加区块时失败</td>\n</tr>\n<tr>\n<td>3190003</td>\n<td>block log can not be found</td>\n<td>找不到区块日志</td>\n</tr>\n<tr>\n<td>3190004</td>\n<td>block log backup dir already exists</td>\n<td>区块日志备份目录已存在</td>\n</tr>\n<tr>\n<td>3200000</td>\n<td>http exception</td>\n<td>http异常</td>\n</tr>\n<tr>\n<td>3200001</td>\n<td>invalid http client root certificate</td>\n<td>无效的http客户端证书</td>\n</tr>\n<tr>\n<td>3200002</td>\n<td>invalid http response</td>\n<td>无效的http请求</td>\n</tr>\n<tr>\n<td>3200003</td>\n<td>service resolved to multiple ports</td>\n<td>服务对应多个端口</td>\n</tr>\n<tr>\n<td>3200004</td>\n<td>fail to resolve host</td>\n<td>解析主机名失败</td>\n</tr>\n<tr>\n<td>3200005</td>\n<td>http request fail</td>\n<td>http请求失败</td>\n</tr>\n<tr>\n<td>3200006</td>\n<td>invalid http request</td>\n<td>无效的http请求</td>\n</tr>\n<tr>\n<td>3210000</td>\n<td>Resource limit exception</td>\n<td>资源限制异常</td>\n</tr>\n<tr>\n<td>3220000</td>\n<td>Mongo DB exception</td>\n<td>MongoDB异常</td>\n</tr>\n<tr>\n<td>3220001</td>\n<td>Fail to insert new data to Mongo DB</td>\n<td>MongoDB插入数据失败</td>\n</tr>\n<tr>\n<td>3220002</td>\n<td>Fail to update existing data in Mongo DB</td>\n<td>MongoDB更新数据失败</td>\n</tr>\n<tr>\n<td>3230000</td>\n<td>Contract API exception</td>\n<td>合约API异常</td>\n</tr>\n<tr>\n<td>3230001</td>\n<td>Crypto API Exception</td>\n<td>密码学API异常</td>\n</tr>\n<tr>\n<td>3230002</td>\n<td>Database API Exception</td>\n<td>数据库API异常</td>\n</tr>\n<tr>\n<td>3230003</td>\n<td>Arithmetic Exception</td>\n<td>算术异常</td>\n</tr>\n<tr>\n<td>3240000</td>\n<td>Snapshot exception</td>\n<td>快照异常</td>\n</tr>\n<tr>\n<td>3240001</td>\n<td>Snapshot Validation Exception</td>\n<td>快照验证异常</td>\n</tr>\n</tbody></table>\n","categories":["BlockChain"],"tags":["区块链","eos"]},{"title":"EOS智能合约基础教程--EOS简介","url":"/eos_basic_desc/","content":"<p>EOS 是 Enterprise Operation System 的缩写，是为商用分布式应用设计的一款区块链操作系统。</p>\n<p>EOS 是引入的一种新的区块链架构，旨在实现分布式应用的性能扩展。</p>\n<p>EOS 它并不是像比特币和以太坊那样的货币，而是基于 EOS 软件项目之上发布的代币，被称为 「 区块链 3.0 」</p>\n<span id=\"more\"></span>\n\n<h3 id=\"EOS-的特点\"><a href=\"#EOS-的特点\" class=\"headerlink\" title=\"EOS 的特点\"></a>EOS 的特点</h3><ul>\n<li><p>EOS 的出块速度快，平均 0.5秒出一个块。通过并行链和DPOS的方式解决了延迟和数据吞吐量的难题，EOS是每秒可以上千级别的处理量，而比特币每秒7笔左右，以太坊是每秒30-40笔。</p>\n</li>\n<li><p>EOS 转账是没有手续费的！相对于其他币，在币价上涨后要承担的巨额转账费用，更受到普通用户的接受。</p>\n</li>\n<li><p>EOS 是天生的合约系统。EOS 是 EOS 软件系统上的通过合约发布的代币。EOS 目前有五个基础合约</p>\n<ul>\n<li><p>eosio.bios</p>\n<p>合约用于管理链上的堆栈和非堆栈资源，通过确认用户持有的 token 控制资源分配，包括带宽、CPU 以及内存资源</p>\n</li>\n<li><p>eosio.token</p>\n<p>代币合约，只要加载这个合约，就可以轻松的发行一个代币</p>\n</li>\n<li><p>exchange</p>\n<p>交易所合约，模拟的是交易所的功能，支持充值提现 eos 和 currency，支持 eos 和 currency 之间的买卖，别有一番玩味</p>\n</li>\n<li><p>eosio.msig</p>\n<p>多用户签名和用户权限管理合约</p>\n</li>\n<li><p>eosio.system</p>\n<p>系统智能合约，可以进行很多系统级别的操作，比如用户投票、将用户注册成为生产者</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"适合谁学\"><a href=\"#适合谁学\" class=\"headerlink\" title=\"适合谁学\"></a>适合谁学</h3><p>本教程是专门为 EOS 合约初学者打造的，帮助他们理解与 EOS 合约编程语言相关的基础知识，和一些高级的概念。当然如需编写合约最好有一定的编程基础才容易理解。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li><p>推荐使用c++写合约<br>基于 EOSIO 的区块链使用 WebAssembly（ WASM ）执行用户生成的应用程序和代码。WASM 是一种新兴的 Web 标准，得到了 Google，Microsoft，Apple 和行业领先公司的广泛支持。<br>目前用于构建编译为 WASM 的应用程序的最成熟工具链是 clang&#x2F;llvm 及其 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHdsZS5jbi9sL3l1ZmVpL2NwbHVzcGx1cy9jcGx1c3BsdXMtYmFzaWMtaW5kZXguaHRtbA==\">C&#x2F;C++<i class=\"fa fa-external-link-alt\"></i></span> 编译器。为获得最佳兼容性，建议您使用 EOSIO C++ 工具链。<br>所以说EOS 的合约开发语言是 C++，所以需要一点 C++的基础，不用太多。如果有开发经验，推荐迅速《C++语言导学》即可。</p>\n</li>\n<li><p>第三方开发合约的工具链<br>第三方开发的其他工具链包括：Rust，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHdsZS5jbi9sL3l1ZmVpL3B5dGhvbjMwL3B5dGhvbi0zMC1pbmRleC5odG1s\">Python<i class=\"fa fa-external-link-alt\"></i></span> 和 Solidity。</p>\n</li>\n<li><p>操作系统和环境（推荐mac或者ubuntu）</p>\n<ul>\n<li>Amazon 2017.09 及更高的系统</li>\n<li>Centos 7</li>\n<li>Fedora 25 及更高版本（ 推荐 Fedora 27 ）</li>\n<li>Mint 18</li>\n<li>Ubuntu 16.04 ( 推荐 Ubuntu 16.10)</li>\n<li>Ubuntu 18.04</li>\n<li>MacOS Darwin 10.12 及更高版本（推荐 MacOS 10.13.x ）<blockquote>\n<p>ps:推荐mac或者ubuntu,如果 Windows 上进行开发，可以用VM 虚拟机或者 mingw&#x2F;cygwin + docker</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>推荐的编辑器和 IDE</p>\n<ul>\n<li><ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3VibGltZXRleHQuY29tLw==\">Sublime Text<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdG9tLmlvLw==\">Atom Editor<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9jbGlvbi8=\">CLion<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5lY2xpcHNlLm9yZy9kb3dubG9hZHMvcGFja2FnZXMvcmVsZWFzZS9veHlnZW4vMWEvZWNsaXBzZS1pZGUtY2MtZGV2ZWxvcGVycw==\">Eclipse<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v\">Visual studio code<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"一些基础概念\"><a href=\"#一些基础概念\" class=\"headerlink\" title=\"一些基础概念\"></a>一些基础概念</h3><h4 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h4><p>一个智能合约可以定义多个Action，每个Action代表一次单独的操作，例如：转账、掷骰子、比较点数大小。</p>\n<p>映射到代码中，可以将Action理解成类中的函数，函数中定义了调用Action时需要执行的操作。</p>\n<p>智能合约与账户通过Action的方式进行通信。Action可以单独执行，也可以和其他Action一起作为一个整体执行。</p>\n<p>例如：账户小王执行了【还钱】Action，【还钱】Action通知账户工商银行，执行【转账】Action，【转账】Action又通知账户【小李】，执行【短信通知】Action。</p>\n<h4 id=\"Transaction\"><a href=\"#Transaction\" class=\"headerlink\" title=\"Transaction\"></a>Transaction</h4><p>Transaction是一个或多个Action的集合，一个Transaction中的Action要么全部成功，要么全部失败，从这个角度来看，Transaction与数据库中的“事务”非常像。</p>\n<p>在前面Action的例子中，【还钱】Action、【转账】Action、【短信通知】Action可以都被包含在一个事务中。<br>下面是包含了多个Action的Transaction例子（关键字：actions）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;expiration&quot;: &quot;2018-04-01T15:20:44&quot;,</span><br><span class=\"line\">\t&quot;region&quot;: 0,</span><br><span class=\"line\">\t&quot;ref_block_num&quot;: 42580,</span><br><span class=\"line\">\t&quot;ref_block_prefix&quot;: 3987474256,</span><br><span class=\"line\">\t&quot;net_usage_words&quot;: 21,</span><br><span class=\"line\">\t&quot;kcpu_usage&quot;: 1000,</span><br><span class=\"line\">\t&quot;delay_sec&quot;: 0,</span><br><span class=\"line\">\t&quot;context_free_actions&quot;: [],</span><br><span class=\"line\">\t&quot;actions&quot;: [&#123;</span><br><span class=\"line\">\t\t&quot;account&quot;: &quot;eosio.token&quot;,</span><br><span class=\"line\">\t\t&quot;name&quot;: &quot;issue&quot;,</span><br><span class=\"line\">\t\t&quot;authorization&quot;: [&#123;</span><br><span class=\"line\">\t\t\t&quot;actor&quot;: &quot;eosio&quot;,</span><br><span class=\"line\">\t\t\t&quot;permission&quot;: &quot;active&quot;</span><br><span class=\"line\">\t\t&#125;],</span><br><span class=\"line\">\t\t&quot;data&quot;: &quot;00000000007015d640420f000000000004454f5300000000046d656d6f&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;account&quot;: &quot;...&quot;,</span><br><span class=\"line\">\t\t&quot;name&quot;: &quot;...&quot;,</span><br><span class=\"line\">\t\t&quot;authorization&quot;: [&#123;</span><br><span class=\"line\">\t\t\t&quot;actor&quot;: &quot;...&quot;,</span><br><span class=\"line\">\t\t\t&quot;permission&quot;: &quot;...&quot;</span><br><span class=\"line\">\t\t&#125;],</span><br><span class=\"line\">\t\t&quot;data&quot;: &quot;...&quot;</span><br><span class=\"line\">\t&#125;],</span><br><span class=\"line\">\t&quot;signatures&quot;: [&quot;&quot;],</span><br><span class=\"line\">\t&quot;context_free_data&quot;: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"合约交互模式\"><a href=\"#合约交互模式\" class=\"headerlink\" title=\"合约交互模式\"></a>合约交互模式</h4><p>EOSIO中提供了两种智能合约的交互模式，Inline（内联）和 Deferred（延迟）。</p>\n<p>EOSIO中提供了两种智能合约的交互模式，Inline（内联）和 Deferred（延迟）。</p>\n<p>Inline可以被理解为实时交互模式，在一个Transaction中所有的Action，实时调用顺序执行。</p>\n<p>Deferred可以被理解为延时交互模式，TransactionA中的部分Action没有被立即执行，而是延迟一段时间后，由TransactionB来执行。</p>\n<p>下面用一个具体的示例来说明两种模式。</p>\n<p>假设有一个Employer（雇主）账户，希望通过它的payroll Action将工资发放给Employees（雇员）账户。</p>\n<h4 id=\"Inline模式\"><a href=\"#Inline模式\" class=\"headerlink\" title=\"Inline模式\"></a>Inline模式</h4><p>在Inline模式下，所有的Action是被实时顺序调用的，整个执行过程的时序图如下所示。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-52cb3a98c45f315c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>图中<code>employer::runpayroll</code>发起了发工资的请求，<br>而<code>employer::dootherstuff</code>是雇主执行的其它操作，我们可以不用理会它。</p>\n<p>第一步，<code>employer::runpayroll</code>执行<code>inline action eosio::token::transfer</code>，从Employer账户发送给Bank账户，并将需要收到工资的Employee账户信息保存在memo字段中。</p>\n<p>第二步，<code>eosio::token::transferaction</code>修改了token的转账状态，并将<code>memo</code>字段的信息通知给Bank账户。</p>\n<p>第三步，Bank账户部署了一个合约，用来监听<code>eosio::token::transferaction</code>的通知。当收到通知后，根据<code>memo</code>字段的内容通知对应的Employee账户。</p>\n<p>第四步，Employee账户同样部署了合约监听<code>eosio::token::transferaction</code>的听通知。当收到通知后，执行<code>inline action bank::doacctpolicy</code>。</p>\n<p>第五步，Bank账户执行<code>bank::doacctpolicyaction</code>。</p>\n<h4 id=\"Deferred模式\"><a href=\"#Deferred模式\" class=\"headerlink\" title=\"Deferred模式\"></a>Deferred模式</h4><p>还是同样的场景，假设<code>bank::doacctpolicy</code>不是以inline模式调用，而是以deferred模式调用，时序图会改成下面这个样子。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-85413d85330a1cd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>从时序图来看，主要的区别：</p>\n<p>bank::doacctpolicyaction并没有立即被执行，而是放到了一个队列（queue）中。<br>bank::doacctpolicyaction是在延迟一段时间以后，放在Defered Transaction执行的。<br>通过前面的描述，我们可以总结出inline模式与deferred模式的主要区别：</p>\n<p>inline模式是实时执行action，而deferred模式是延时执行。<br>deferred模式下的action会被放到一个队列中，后续执行时再从队列中拿出来。<br>inline模式中的action是在同一个Transaction里，而deferred模式下action被分散到不同的Transaction里。</p>\n<h4 id=\"交易确认及限制\"><a href=\"#交易确认及限制\" class=\"headerlink\" title=\"交易确认及限制\"></a>交易确认及限制</h4><p>交易完成后，将生成交易收据，此收据采用散列形式。 接收交易散列并不意味着交易已被确认，它只意味着节点接受它而没有错误，这也意味着其他生产者很可能会接受它。通过确认，在交易历史记录中可以看到包含它的块编号的交易。</p>\n<p>每个交易必须在<em>30ms</em>或更短时间内执行。 如果交易包含多个操作，并且这些操作的总和大于30毫秒，则整个交易将失败。 在没有对其操作进行并发性要求的情况下，可以通过在单独的交易中包含CPU消费动作来规避这种情况。</p>\n<h3 id=\"EOS-的工具结构\"><a href=\"#EOS-的工具结构\" class=\"headerlink\" title=\"EOS 的工具结构\b\"></a>EOS 的工具结构\b</h3><p>对于 EOS 项目，提供了三个主要的命令行工具，<code>nodeos</code> 、<code>cleos</code> 和 <code>keosd</code>，而对于 <code>eosio.cdt</code>则主要提供了 <code>eosio-cpp</code> 这个工具。</p>\n<ul>\n<li><p><code>nodeos</code></p>\n<p>( node + eos &#x3D; nodeos )，EOS 节点工具。是核心 EOSIO 节点守护程序，可以配置插件来运行节点。</p>\n<p>在测试环境中，主要用途是生产块，提供了专用 RPC API 接口，大大方便了本地开发和部署 EOS 合约.</p>\n</li>\n<li><p><code>cleos</code></p>\n<p>(cli + eos &#x3D; cleos)， EOS 客户端。一个命令行工具，可以用来快速的与 EOS 区块链交互，还可以用来管理钱包。</p>\n</li>\n<li><p><code>keosd</code></p>\n<p>(key + eos &#x3D; keosd)，EOS 钱包管理工具。是一个将 EOSIO 密钥安全存储在钱包中的组件。</p>\n</li>\n<li><p><code>eosio-cpp</code></p>\n<p>合约编译工具 <code>eosio.cdt</code> 中最重要的工具，也是合约开发最常用的工具，用来将 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHdsZS5jbi9sL3l1ZmVpL2NwbHVzcGx1cy9jcGx1c3BsdXMtYmFzaWMtaW5kZXguaHRtbA==\">C++<i class=\"fa fa-external-link-alt\"></i></span> 代码编译为 WASM 并可以生成 ABI</p>\n</li>\n</ul>\n<p>这几个工具之前的关系如下图<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-89527dd335e9c1e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<hr>\n<p>相关资源：</p>\n<ul>\n<li><p>官网: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lb3MuaW8v\">https://eos.io/<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>EOS 开发资源 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLmVvcy5pby9lb3Npby1ob21lL2RvY3MvaW50cm9kdWN0aW9u\">https://developers.eos.io/eosio-home/docs/introduction<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>eosio.cdt 工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VPU0lPL2Vvc2lvLmNkdA==\">https://github.com/EOSIO/eosio.cdt<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<p><strong>部分资料引自网络，如有需要可联系我修改</strong></p>\n","categories":["BlockChain"]},{"title":"EOS合约基础教程-创建钱包私钥及账户","url":"/eos_contract_basic_wallet_account/","content":"<p>可以将钱包想象为支付宝。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"一-钱包\"><a href=\"#一-钱包\" class=\"headerlink\" title=\"一.钱包\"></a>一.钱包</h1><h2 id=\"1-创建钱包\"><a href=\"#1-创建钱包\" class=\"headerlink\" title=\"1. 创建钱包\"></a>1. 创建钱包</h2><p>使用 EOS 的第一步就是创建一个钱包，我们可以使用 <code>cleos wallet create</code> 命令来创建钱包。例如，下面的命令创建了一个 <code>default</code> 钱包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet create --to-console</span><br></pre></td></tr></table></figure>\n\n<p>命令执行结果如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Creating wallet: default</span><br><span class=\"line\">Save password to use in the future to unlock this wallet.</span><br><span class=\"line\">Without password imported keys will not be retrievable.</span><br><span class=\"line\">&quot;PW5JQG1aKezEipheSq4yC3MrC6H5S127tbNGZCzXmhbxVWgXgEutz&quot;</span><br></pre></td></tr></table></figure>\n\n<p>上面的提示语句告诉我们，刚刚我们创建了一个钱包 <code>default</code> ，密码是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PW5JQG1aKezEipheSq4yC3MrC6H5S127tbNGZCzXmhbxVWgXgEutz</span><br></pre></td></tr></table></figure>\n\n<p><code>--to-console</code> 的意思是把创建的钱包的所有信息输出到命令行(控制台)，包括钱包的密码</p>\n<p>如果是生产环境，我们建议你使用 <code>--to-file</code> 代替 <code>--to-console</code>，这样钱包的密码就不会保留在钱包的历史记录中。</p>\n<blockquote>\n<p>注意：命令行的执行历史可以通过 <code>history</code> 命令查看</p>\n</blockquote>\n<p>对于开发来说，<code>--to-console</code> 是比较简单快捷，而且方便接下来复制，因为下面的章节有很多地方需要用到这个密码。</p>\n<h3 id=\"关于钱包-wallet\"><a href=\"#关于钱包-wallet\" class=\"headerlink\" title=\"关于钱包 ( wallet )\"></a>关于钱包 ( wallet )</h3><p>对于加密货币中的钱包，常见的误解就是钱包是用来存储令牌 ( token ) 的。</p>\n<p>而实际上呢，钱包并不存储令牌。</p>\n<p>钱包的作用是将私钥存储在加密文件中并 <strong>签署</strong> 交易。</p>\n<p>用户通常通过接口构建事务 （ transaction ） 对象，将该对象发送到要签名的钱包，然后钱包返回具有签名的该事务对象，然后该签名被广播到网络。 如果网络确认交易有效，则将其包含在区块链的块中。</p>\n<h2 id=\"2-打开钱包\"><a href=\"#2-打开钱包\" class=\"headerlink\" title=\"2. 打开钱包\"></a>2. 打开钱包</h2><p>默认情况下，启动 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHdsZS5jbi9jL3l1ZmVpL2Vvc2lvL2Vvc2lvLWJhc2ljLXN0YXJ0LW5vZGVvcy5odG1s\">keosd<i class=\"fa fa-external-link-alt\"></i></span> 时钱包默认是关闭的。要打开钱包，可以使用下面的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet open</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Opened: default</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"列出钱包\"><a href=\"#列出钱包\" class=\"headerlink\" title=\"列出钱包\"></a>列出钱包</h3><p>钱包打开之后，我们才能查看有哪些钱包。我们可以使用下面的命令查看当前打开的所有钱包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet list</span><br></pre></td></tr></table></figure>\n\n<p>返回信息如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Wallets:</span><br><span class=\"line\">[</span><br><span class=\"line\">  &quot;default&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"解锁钱包\"><a href=\"#解锁钱包\" class=\"headerlink\" title=\"解锁钱包\"></a>解锁钱包</h3><p>我们已经使用 <code>cleos wallet open</code> 命令打开了钱包，但钱包还是锁着的。如果要打开锁，那么就要使用刚刚创建钱包时提供的密码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet unlock</span><br></pre></td></tr></table></figure>\n\n<p>运行上面的命令，会被提示需要输入密码，输入刚刚创建钱包时的密码，比如我的是 <code>PW5JQG1aKezEipheSq4yC3MrC6H5S127tbNGZCzXmhbxVWgXgEutz</code>，完成后回车，显式结果如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">password: </span><br><span class=\"line\">Unlocked: default</span><br></pre></td></tr></table></figure>\n\n<p>这时候，我们再使用 <code>cleos wallet list</code> 命令列出钱包，就会发现 <code>default</code> 后面有一个星号 ( <code>*</code> )</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Wallets:</span><br><span class=\"line\">[</span><br><span class=\"line\">  &quot;default *&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>星号 <code>*</code> 的意思是钱包的状态是已解锁的。</p>\n<h1 id=\"二-私钥和公钥\"><a href=\"#二-私钥和公钥\" class=\"headerlink\" title=\"二.私钥和公钥\"></a>二.私钥和公钥</h1><p>数字货币中的密钥分为公钥和私钥两部分。一个账号可以对应多个密钥，一个密钥也可以对应多个账号。</p>\n<p>EOS <code>cleos</code> 提供了 <code>cleos wallet create_key</code> 命令用来创建密钥。</p>\n<p>运行该命令，显式结果如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Created new private key with a public key of: &quot;EOS6osBZxznyq9oSvCPQEiV35SfCS25E3kEzwp9GwTU5rAdbJ3kUE&quot;</span><br></pre></td></tr></table></figure>\n<p>如果命令的运行结果为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error 3120003: Locked wallet</span><br><span class=\"line\">Ensure that your wallet is unlocked before using it!</span><br></pre></td></tr></table></figure>\n<p>则首先需要使用解锁的命令解锁钱包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet unlock</span><br></pre></td></tr></table></figure>\n<p>系统会把私钥直接放入钱包，所以只显示了公钥。</p>\n<h2 id=\"导入开发密钥\"><a href=\"#导入开发密钥\" class=\"headerlink\" title=\"导入开发密钥\"></a>导入开发密钥</h2><p>每个新的 EOSIO 链都有一个名为 <code>eosio</code> 的默认 <code>系统</code> 用户。所有其它用户都从该用户派生，也就是该用户是所有其它用户的祖先用户。</p>\n<p><code>eosio</code> 系统用户的一个重要作用就是用于加载系统合约来设置链，这些合约规定了 EOSIO 链的治理和共识。</p>\n<p><code>eosio</code> 系统用户的另一个重要作用就是创建其它用户。</p>\n<p>每个新的 EOSIO 链都带有一个开发密钥，而且不管是哪个新链，这个密钥都是相同的。</p>\n<p>不过，在生产环境上，一旦设置 EOSIO 链完毕，<code>eosio</code> 用户就会被没收，也就是用户再也没法使用 <code>eosio</code> 用户了。</p>\n<p>在开发环境上，我们可以通过给 eosio 用户导入这个开发密钥来签名事务( transactions )。</p>\n<p>导入密钥到钱包的命令如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet import</span><br></pre></td></tr></table></figure>\n<p>然后复制粘贴下面的密钥，按下回车以完成导入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>千万要注意，不要在生产环境上使用该开发密钥。因为该密钥是公开的，人人都知道，可能会给你带来意想不到的损失</p>\n</blockquote>\n<h1 id=\"三-账户\"><a href=\"#三-账户\" class=\"headerlink\" title=\"三.账户\"></a>三.账户</h1><p>EOS 中，帐户(账户)是存储在区块链上的授权集合，用于标识发送者 &#x2F; 接受者。<br>对于EOS的权限和许可，分得非常细。一个授权，既可以由一个人拥有，也可以由一组个人拥有，具体取决于如何配置权限。</p>\n<p>「Permission」我没有翻译成权限，我这里觉得它更像一种叫做「许可」，它是一个操作允许的权限，可以建立很多permission。比如允许你转账，允许你发微博或者允许你做其他事。它是通过permission来控制你的操作，可能不同的用户有不同的permission。</p>\n<p>Threshold是某个许可需要的阈值。比如你要做一件事儿，它可能有个阈值，这个阈值是一个量化，你必须要达到这个阈值才可以进行相应的操作。</p>\n<p>Weight表示权重。账号必须对应某个许可拥有的权重，就是你的权重要大于你的阈值，然后这件事儿你就可以做。</p>\n<p>在permission许可里面有两种许可：</p>\n<ul>\n<li>-owner许可；</li>\n<li>-active许可。</li>\n</ul>\n<p>这两个叫native（原生）的permission，另外还有public的permission。<br>下面通过两个例子来解释他们之间的关系与区别：</p>\n<table>\n<thead>\n<tr>\n<th>permission</th>\n<th align=\"right\">account</th>\n<th align=\"center\">weight</th>\n<th align=\"center\">threshold</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>owner</td>\n<td align=\"right\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\">EOS5EzTZZQQxdrDaJAPD9pDzGJZ5bj34HaAb8yuvjFHGWzqV25Dch</td>\n<td align=\"center\">1</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>active</td>\n<td align=\"right\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\">EOS61chK8GbH4ukWcbom8HgK95AeUfP8MBPn7XRq8FeMBYYTgwmcX</td>\n<td align=\"center\">1</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<p>第一个例子， owner许可的阈值是1，它里面有一个账号，这个账号是用它的公钥来代表的，然后这个账号的权重是1，这样你的权重是大于等于阈值的，所以可以用owner的账号和权限。 </p>\n<p>active许可里面有一个账号，它的权重也是等于这个阈值，所以可以用active的账号和权限。</p>\n<p>这两个账号，一个是有owner权限，一个是有active权限，因为它们的权重和阈值是大于等于这个值的，对应的账号与权限都是可以使用的。</p>\n<table>\n<thead>\n<tr>\n<th>permission</th>\n<th align=\"right\">account</th>\n<th align=\"center\">weight</th>\n<th align=\"center\">threshold</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>owner</td>\n<td align=\"right\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\">@bob</td>\n<td align=\"center\">1</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\">@stracy</td>\n<td align=\"center\">1</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>active</td>\n<td align=\"right\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\">@bob</td>\n<td align=\"center\">1</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\">@stracy</td>\n<td align=\"center\">1</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>publish</td>\n<td align=\"right\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\">@bob</td>\n<td align=\"center\">2</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\">@stracy</td>\n<td align=\"center\">2</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<p>第二个例子，除了owner的permission之外，你还可以有一个publish permission。它们之间有什么区别呢？</p>\n<p>当你创建任何一个账号，这个账号都有owner的许可和active的许可。其他的许可就是你可以自己定义，来让不同的用户，拥有不同的许可组合，这样就可以很灵活的去管理不同的账号。</p>\n<p>所以这一点，EOS考虑的比较比较细致一点，但是以太坊或者比特币没有做到这么细致，以太坊或者比特币拥有一个账号就可以做任何事情。</p>\n<p>这里面再细一点来讲，这里面的owner的阈值是R，bob账号的权重只有1，stracy账号的权重也只有1，如果它俩单独的去获得owner许可相关的操作，它们是获得不了的。但是，如果bob和stracy加起来大于等于2，就是这两个账号联合起来大于等于2的，这两个账号就可以做这个操作的，其实这有点像投票。</p>\n<p>我觉得这个权限或许可的限制，和我们传统的操作系统是不太一样的。我们传统的操作系统好像没有这种联合签名可以达到两个权重来执行owner的相关操作。</p>\n<p>active这也是一样的，如果bob账号是1，stracy账号是1，如果active需要的阈值是1的话， bob账号和stracy账号是单独都可以做active许可相关的操作，就是转移资金。</p>\n<p>另外，publish就是一个定制化许可。我们每个用户也可以定义自己某些允许的一些操作。publish这里面的阈值是2，bob账号是2，stracy账号是2，这两个账号也可以单独做publish许可相关的操作。而publish的权限可能是比如发布一些消息、发布一些微博的操作。</p>\n<h2 id=\"列出当前钱包下的所有密钥对\"><a href=\"#列出当前钱包下的所有密钥对\" class=\"headerlink\" title=\"列出当前钱包下的所有密钥对\"></a>列出当前钱包下的所有密钥对</h2><p>我们可以使用 <code>cleos wallet private_keys</code> 列出当前钱包下的所有密钥对</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cleos wallet private_keys</span><br><span class=\"line\"></span><br><span class=\"line\">password: [[</span><br><span class=\"line\">    &quot;EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;,</span><br><span class=\"line\">    &quot;5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3&quot;</span><br><span class=\"line\">  ],[</span><br><span class=\"line\">    &quot;EOS6osBZxznyq9oSvCPQEiV35SfCS25E3kEzwp9GwTU5rAdbJ3kUE&quot;,</span><br><span class=\"line\">    &quot;5JPW9xZHiQ1tGWbMn7mnaWndscJ6p2tsWjjLtLLguyoeeaqbDAj&quot;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意： 你的钱包下的密钥可能和我不一样，不过没关系</p>\n</blockquote>\n<p>在我上面的钱包中，总共有三个密钥对，所有以 EOS 开头的都是公钥，而第二个则都是私钥。</p>\n<blockquote>\n<p>注意，私钥很重要，千万不要轻易告诉别人</p>\n</blockquote>\n<h2 id=\"创建账户\"><a href=\"#创建账户\" class=\"headerlink\" title=\"创建账户\"></a>创建账户</h2><p>在前面的章节中，我们已经创建了一个钱包和一个密钥对。接下来我们创建的账户会用到上一章节中创建的密钥对。</p>\n<p>然后我们就可以使用 <code>cleos wallet create account</code> 来创建账号了，该命令语法如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos create account [OPTIONS] creator name OwnerKey [ActiveKey]</span><br><span class=\"line\">                               ──┬─── ──┬──  ───┬───   ──┬──  </span><br><span class=\"line\">                                 │      │       │        └ active 权限公钥，可选</span><br><span class=\"line\">                                 │      │       └─ owner 权限公钥 </span><br><span class=\"line\">                                 │      └ 要创建的账号，只能是 [0-5a-z.]&#123;1,12&#125;</span><br><span class=\"line\">                                 └──创建者，必须是已经存在的账号</span><br></pre></td></tr></table></figure>\n<p>下面的命令使用 eosio 作为创建者，使用 <code>EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV</code> 作为公钥，创建 <code>a </code>账户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos create account eosio a EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV</span><br></pre></td></tr></table></figure>\n<p>该命令执行后，会输出创建账号的事务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">executed transaction: ab4152fa1d85a1b01339f3e7b8bdc2b4a162b5ab28ee952880426020d8a4ff73  200 bytes  3954 us</span><br><span class=\"line\">#         eosio &lt;= eosio::newaccount            &#123;&quot;creator&quot;:&quot;eosio&quot;,&quot;name&quot;:&quot;a&quot;,&quot;owner&quot;:&#123;&quot;threshold&quot;:1,&quot;keys&quot;:[&#123;&quot;key&quot;:&quot;EOS6MRyAjQq8ud7hVNYcfnVPJqcVpsc...</span><br><span class=\"line\">warning: transaction executed locally, but may not be confirmed by the network yet         ]</span><br></pre></td></tr></table></figure>\n<p>类似的，我们可以使用相同的密钥对创建多个其它账号</p>\n<blockquote>\n<p>注意： 开发环境可以使用一个密钥对创建多个账号，这样更方便，但是，生产环境，请不要这么做</p>\n</blockquote>\n<h2 id=\"创建-b-账户\"><a href=\"#创建-b-账户\" class=\"headerlink\" title=\"创建 b 账户\"></a>创建 <code>b</code> 账户</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos create account eosio b EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建-c-账户\"><a href=\"#创建-c-账户\" class=\"headerlink\" title=\"创建 c 账户\"></a>创建 <code>c</code> 账户</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos create account eosio c EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV</span><br></pre></td></tr></table></figure>\n<h2 id=\"ower-权限和-active-权限的区别？\"><a href=\"#ower-权限和-active-权限的区别？\" class=\"headerlink\" title=\"ower 权限和 active 权限的区别？\"></a>ower 权限和 active 权限的区别？</h2><p>EOSIO 具有独特的授权结构，为我们的帐户增加了安全性。<br>一般的交易使用 <code>active</code> 权限即可，该权限可以执行大部分的操作，除了更改账户本身。<br>而 <code>owner</code> 权限，可以修改账户，添加或者删除权限，更改密钥等等操作。<br>在日常生产环境中，我们应该保持 <code>ower</code> 权限和 <code>active</code> 权限使用不同的密钥对。这样可以最小化账户的风险。<br>这样，一旦我们的 <code>active</code> 权限泄露，我们可以使用 <code>ower</code> 权限来重置它</p>\n<h2 id=\"故障排除\"><a href=\"#故障排除\" class=\"headerlink\" title=\"故障排除\"></a>故障排除</h2><p>如果你在创建账号时触发了钱包已经锁定的错误。可以使用下面的命令来解锁</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet unlock --password PW5Jz2M3EoVA1uhnSHAGTN6WpvrE7Eef62LU85LsbFxeQDSfQhgRq</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意： <code>PW5Jz2M3EoVA1uhnSHAGTN6WpvrE7Eef62LU85LsbFxeQDSfQhgRq</code> 要替换成你自己的钱包密钥</p>\n</blockquote>\n","categories":["BlockChain"],"tags":["区块链","eos"]},{"title":"EOS合约基础教程:十分钟学会EOS智能合约开发","url":"/btc_eos_learn_contract_in_ten_minutes/","content":"<h1 id=\"1-创建开发目录\"><a href=\"#1-创建开发目录\" class=\"headerlink\" title=\"1 创建开发目录\"></a>1 创建开发目录</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir contracts</span><br><span class=\"line\">cd contracts</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"2-安装相关工具\"><a href=\"#2-安装相关工具\" class=\"headerlink\" title=\"2 安装相关工具\"></a>2 安装相关工具</h1><h2 id=\"2-1-mac-下安装-brew\"><a href=\"#2-1-mac-下安装-brew\" class=\"headerlink\" title=\"2.1 mac 下安装 brew\"></a>2.1 mac 下安装 brew</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-使用-brew-安装-eos-工具\"><a href=\"#2-2-使用-brew-安装-eos-工具\" class=\"headerlink\" title=\"2.2 使用 brew 安装 eos 工具\"></a>2.2 使用 brew 安装 eos 工具</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew tap eosio/eosio</span><br><span class=\"line\">brew install eosio</span><br><span class=\"line\">nodeos --version</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-使用-brew-安装-eos-开发合约工具\"><a href=\"#2-3-使用-brew-安装-eos-开发合约工具\" class=\"headerlink\" title=\"2.3 使用 brew 安装 eos 开发合约工具\"></a>2.3 使用 brew 安装 eos 开发合约工具</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew tap eosio/eosio.cdt</span><br><span class=\"line\">brew install eosio.cdt</span><br><span class=\"line\">eosio-cpp --version</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-节点\"><a href=\"#3-节点\" class=\"headerlink\" title=\"3 节点\"></a>3 节点</h1><h2 id=\"3-1-添加节点配置文件\"><a href=\"#3-1-添加节点配置文件\" class=\"headerlink\" title=\"3.1 添加节点配置文件\"></a>3.1 添加节点配置文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">blocks-dir = &quot;blocks&quot;</span><br><span class=\"line\">bnet-endpoint = 0.0.0.0:4321</span><br><span class=\"line\">http-server-address = 0.0.0.0:8888</span><br><span class=\"line\">p2p-listen-endpoint = 0.0.0.0:9876</span><br><span class=\"line\">p2p-server-address = localhost:9876</span><br><span class=\"line\">allowed-connection = any</span><br><span class=\"line\">signature-provider = EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV=KEY:5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3</span><br><span class=\"line\">producer-name = eosio</span><br><span class=\"line\">plugin = eosio::producer_plugin</span><br><span class=\"line\">plugin = eosio::chain_api_plugin</span><br><span class=\"line\">plugin = eosio::history_api_plugin</span><br><span class=\"line\">plugin = eosio::http_plugin</span><br><span class=\"line\">enable-stale-production = true</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-启动节点\"><a href=\"#3-2-启动节点\" class=\"headerlink\" title=\"3.2 启动节点\"></a>3.2 启动节点</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">nodeos --data-dir ./ --config-dir ./  --contracts-console</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-创建钱包\"><a href=\"#4-创建钱包\" class=\"headerlink\" title=\"4 创建钱包\"></a>4 创建钱包</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet create --to-console</span><br></pre></td></tr></table></figure>\n<p>如果以下流程中遇到如下错误</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error 3120003: Locked wallet</span><br><span class=\"line\">Ensure that your wallet is unlocked before using it!</span><br></pre></td></tr></table></figure>\n<p>请执行解锁钱包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet unlock --password PW5Jz2M3EoVA1uhnSHAGTN6WpvrE7Eef62LU85LsbFxeQDSfQhgRq</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-创建私钥\"><a href=\"#5-创建私钥\" class=\"headerlink\" title=\"5 创建私钥\"></a>5 创建私钥</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet create_key</span><br></pre></td></tr></table></figure>\n<p>记录输出的公钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Created new private key with a public key of: &quot;EOS5wbpduFSWAMGEgPiCayKZDVorM7r3xPoGcjJUU8JHnfmVEiTXD&quot;</span><br></pre></td></tr></table></figure>\n<p>启动的私有区块链是使用默认初始密钥创建的，必须将其加载到钱包中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet import --private-key 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-创建账号\"><a href=\"#6-创建账号\" class=\"headerlink\" title=\"6 创建账号\"></a>6 创建账号</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos create account eosio hello.code EOS5wbpduFSWAMGEgPiCayKZDVorM7r3xPoGcjJUU8JHnfmVEiTXD</span><br></pre></td></tr></table></figure>\n<p>输出以下代表成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">executed transaction: 0d6af1d2734c5410fd46a1018723996bbad3d9e5361f5e57bb32b4959794534d  200 bytes  3106 us</span><br><span class=\"line\">#         eosio &lt;= eosio::newaccount            &#123;&quot;creator&quot;:&quot;eosio&quot;,&quot;name&quot;:&quot;hello.code&quot;,&quot;owner&quot;:&#123;&quot;threshold&quot;:1,&quot;keys&quot;:[&#123;&quot;key&quot;:&quot;EOS5wbpduFSWAMGEgPiCay...</span><br><span class=\"line\">warning: transaction executed locally, but may not be confirmed by the network yet         ]</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-编写EOS智能合约\"><a href=\"#7-编写EOS智能合约\" class=\"headerlink\" title=\"7 编写EOS智能合约\"></a>7 编写EOS智能合约</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir hello</span><br><span class=\"line\">cd hello</span><br><span class=\"line\">vim hello.cpp</span><br></pre></td></tr></table></figure>\n<p>hello.cpp源代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &quot;hello.hpp&quot;</span><br><span class=\"line\">using namespace eosio;</span><br><span class=\"line\"></span><br><span class=\"line\">ACTION hello::hi( name user ) &#123;</span><br><span class=\"line\">   print_f( &quot;Hello % from hello&quot;, user );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">EOSIO_DISPATCH( hello, (hi) )</span><br></pre></td></tr></table></figure>\n<p>hello.hpp</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;eosiolib/eosio.hpp&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace eosio;</span><br><span class=\"line\"></span><br><span class=\"line\">CONTRACT hello : public eosio::contract &#123;</span><br><span class=\"line\">  public:</span><br><span class=\"line\">      using contract::contract;</span><br><span class=\"line\"></span><br><span class=\"line\">      ACTION hi( name user );</span><br><span class=\"line\"></span><br><span class=\"line\">      // accessor for external contracts to easily send inline actions to your contract</span><br><span class=\"line\">      using hi_action = action_wrapper&lt;&quot;hi&quot;_n, &amp;hello::hi&gt;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-编译hello文件\"><a href=\"#8-编译hello文件\" class=\"headerlink\" title=\"8 编译hello文件\"></a>8 编译hello文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eosio-cpp -o hello.wasm hello.cpp --abigen</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>在老版本中，生成ABI</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eosio-cpp -g hello.abi hello.hpp</span><br></pre></td></tr></table></figure>\n<p>新的CDT工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eosio-abigen hello.cpp --output=hello.abi -contract hello</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-部署合约\"><a href=\"#10-部署合约\" class=\"headerlink\" title=\"10 部署合约\"></a>10 部署合约</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos set contract hello.code ../hello -p hello.code@active</span><br></pre></td></tr></table></figure>\n<p>部署成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Reading WASM from /wwwroot/block_chain/contracts/hello/hello.wasm...</span><br><span class=\"line\">Publishing contract...</span><br><span class=\"line\">executed transaction: 511b47b0ede6b4b0a00c5ca44b972c1e17c7d091b05ea0be1bfd4228d96fd645  1392 bytes  6870 us</span><br><span class=\"line\">#         eosio &lt;= eosio::setcode               &#123;&quot;account&quot;:&quot;hello.code&quot;,&quot;vmtype&quot;:0,&quot;vmversion&quot;:0,&quot;code&quot;:&quot;0061736d0100000001300960017f006000017f60027...</span><br><span class=\"line\">#         eosio &lt;= eosio::setabi                &#123;&quot;account&quot;:&quot;hello.code&quot;,&quot;abi&quot;:&quot;0e656f73696f3a3a6162692f312e310001026869000001000000000000806b0268690...</span><br><span class=\"line\">warning: transaction executed locally, but may not be confirmed by the network yet         ]</span><br></pre></td></tr></table></figure>\n<h1 id=\"11-调用合约\"><a href=\"#11-调用合约\" class=\"headerlink\" title=\"11 调用合约\"></a>11 调用合约</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos push action hello.code hi &#x27;[&quot;user&quot;]&#x27; -p hello.code@active</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-加入对输出hello的权限认证\"><a href=\"#12-加入对输出hello的权限认证\" class=\"headerlink\" title=\"12 加入对输出hello的权限认证\"></a>12 加入对输出hello的权限认证</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ACTION hello::hi( name user ) &#123;</span><br><span class=\"line\">   require_auth( user );</span><br><span class=\"line\">   print_f( &quot;Hello % from hello&quot;, user );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"13-运行\"><a href=\"#13-运行\" class=\"headerlink\" title=\"13 运行\"></a>13 运行</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 没有tester允许输出hello，报错</span><br><span class=\"line\">cleos push action hello.code hi &#x27;[&quot;test&quot;]&#x27; -p hello.code@active</span><br><span class=\"line\">Error 3090004: missing required authority</span><br><span class=\"line\"></span><br><span class=\"line\">// 加入验证</span><br><span class=\"line\">cleos push action hello.code hi &#x27;[&quot;hello.code&quot;]&#x27; -p hello.code@active</span><br><span class=\"line\">executed transaction: 85b2420f1a9f1017462ec6d4682b8e9a85c9263e89b79e78d55412ccaefa7e0b  104 bytes  371 us</span><br><span class=\"line\">#    hello.code &lt;= hello.code::hi               &#123;&quot;user&quot;:&quot;hello.code&quot;&#125;</span><br><span class=\"line\">&gt;&gt; Hello hello.code from hello</span><br></pre></td></tr></table></figure>","categories":["BlockChain"],"tags":["区块链","eos"]},{"title":"EOS合约基础教程--启动节点","url":"/eos_contract_basic_start_node/","content":"<p>根据前一章编译的方式不同，选择不同的启动方式：</p>\n<ul>\n<li>命令行方式</li>\n<li>Docker 方式</li>\n</ul>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-95ed2c9e1c151689.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于网络.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"命令行方式\"><a href=\"#命令行方式\" class=\"headerlink\" title=\"命令行方式\"></a>命令行方式</h1><h2 id=\"启动钱包节点-keosd\"><a href=\"#启动钱包节点-keosd\" class=\"headerlink\" title=\"启动钱包节点 keosd\"></a>启动钱包节点 keosd</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">keosd --http-server-address=0.0.0.0:5555 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>会看到如下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">info  2019-01-09T07:51:39.306 thread-0  http_plugin.cpp:554           add_handler          ] add api url: /v1/keosd/stop</span><br><span class=\"line\">info  2019-01-09T07:51:39.309 thread-0  wallet_api_plugin.cpp:73      plugin_startup       ] starting wallet_api_plugin</span><br><span class=\"line\">info  2019-01-09T07:51:39.309 thread-0  http_plugin.cpp:554           add_handler          ] add api url: /v1/wallet/create</span><br><span class=\"line\">info  2019-01-09T07:51:39.309 thread-0  http_plugin.cpp:554           add_handler          ] add api url: /v1/wallet/create_key</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动-nodeos-节点\"><a href=\"#启动-nodeos-节点\" class=\"headerlink\" title=\"启动 nodeos 节点\"></a>启动 nodeos 节点</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">nodeos -e -p eosio \\</span><br><span class=\"line\">--plugin eosio::producer_plugin \\</span><br><span class=\"line\">--plugin eosio::chain_api_plugin \\</span><br><span class=\"line\">--plugin eosio::http_plugin \\</span><br><span class=\"line\">--plugin eosio::history_plugin \\</span><br><span class=\"line\">--plugin eosio::history_api_plugin \\</span><br><span class=\"line\">--data-dir CONTRACTS_DIR/eosio/data \\</span><br><span class=\"line\">--config-dir CONTRACTS_DIR/eosio/config \\</span><br><span class=\"line\">--access-control-allow-origin=<span class=\"string\">&#x27;*&#x27;</span> \\</span><br><span class=\"line\">--contracts-console \\</span><br><span class=\"line\">--http-validate-host=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">--verbose-http-errors \\</span><br><span class=\"line\">--filter-on=<span class=\"string\">&#x27;*&#x27;</span> &gt;&gt; nodeos.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>上面这个命令用于启动测试节点，我们添加了以下配置项来方便调试合约</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">配置项</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-e</td>\n<td align=\"left\">开启挖矿程序，无论链是否过时</td>\n</tr>\n<tr>\n<td align=\"left\">-p</td>\n<td align=\"left\">挖矿的用户名</td>\n</tr>\n<tr>\n<td align=\"left\">—access-control-allow-origin</td>\n<td align=\"left\">设置跨域访问</td>\n</tr>\n<tr>\n<td align=\"left\">–contracts-console</td>\n<td align=\"left\">记录合约输出，所有 print() 方法的输出都会被记录</td>\n</tr>\n<tr>\n<td align=\"left\">–http-validate-host</td>\n<td align=\"left\">不开启域名校验</td>\n</tr>\n<tr>\n<td align=\"left\">–filter-on&#x3D;’*’</td>\n<td align=\"left\">显式所有的数据</td>\n</tr>\n<tr>\n<td align=\"left\">–plugin eosio::producer_plugin</td>\n<td align=\"left\">开启挖矿插件</td>\n</tr>\n<tr>\n<td align=\"left\">–plugin eosio::history_plugin</td>\n<td align=\"left\">开启历史记录插件</td>\n</tr>\n<tr>\n<td align=\"left\">–plugin eosio::chain_api_plugin</td>\n<td align=\"left\">开启区块链链条信息查询插件</td>\n</tr>\n<tr>\n<td align=\"left\">–plugin eosio::history_api_plugin</td>\n<td align=\"left\">开启历史记录查询 RPC 接口插件</td>\n</tr>\n<tr>\n<td align=\"left\">–plugin eosio::http_plugin</td>\n<td align=\"left\">开启所有 rpc 接口插件</td>\n</tr>\n<tr>\n<td align=\"left\">-d ~&#x2F;Downloads&#x2F;eosio</td>\n<td align=\"left\">设置数据保存目录</td>\n</tr>\n<tr>\n<td align=\"left\">–config-dir ~&#x2F;Downloads&#x2F;eosio&#x2F;config</td>\n<td align=\"left\">设置配置文件保存目录</td>\n</tr>\n<tr>\n<td align=\"left\">–config-dir ~&#x2F;Downloads&#x2F;eosio&#x2F;config</td>\n<td align=\"left\">设置 RPC 接口地址</td>\n</tr>\n</tbody></table>\n<h2 id=\"检测钱包\"><a href=\"#检测钱包\" class=\"headerlink\" title=\"检测钱包\"></a>检测钱包</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet list</span><br></pre></td></tr></table></figure>\n\n<p>应该返回：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Wallets:</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"检测-Nodeos端点\"><a href=\"#检测-Nodeos端点\" class=\"headerlink\" title=\"检测 Nodeos端点\"></a>检测 Nodeos端点</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl http://localhost:8888/v1/chain/get_info</span><br></pre></td></tr></table></figure>\n\n<p>返回信息为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  server_version: <span class=\"string\">&quot;d4ffb4eb&quot;</span>, </span><br><span class=\"line\">  chain_id: <span class=\"string\">&quot;cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f&quot;</span>,</span><br><span class=\"line\">  head_block_num: 8,</span><br><span class=\"line\">  last_irreversible_block_num: 7,</span><br><span class=\"line\">  last_irreversible_block_id: <span class=\"string\">&quot;000000079e57720e56a4f82237ad3d2ed51e89332ed27dcf17d478cf72ae763e&quot;</span>,</span><br><span class=\"line\">  head_block_id: <span class=\"string\">&quot;0000000838040a503de2876c1c63af31489e06e06bd7e6f46b7aa40d4a52ef56&quot;</span>,</span><br><span class=\"line\">  head_block_time: <span class=\"string\">&quot;2019-01-09T08:10:55.000&quot;</span>,</span><br><span class=\"line\">  head_block_producer: <span class=\"string\">&quot;eosio&quot;</span>,</span><br><span class=\"line\">  virtual_block_cpu_limit: 201403,</span><br><span class=\"line\">  virtual_block_net_limit: 1055940,</span><br><span class=\"line\">  block_cpu_limit: 199900,</span><br><span class=\"line\">  block_net_limit: 1048576,</span><br><span class=\"line\">  server_version_string: <span class=\"string\">&quot;v1.5.1&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Docker-方式\"><a href=\"#Docker-方式\" class=\"headerlink\" title=\"Docker 方式\"></a>Docker 方式</h1><h2 id=\"1-获取-Docker-EOS-最新镜像\"><a href=\"#1-获取-Docker-EOS-最新镜像\" class=\"headerlink\" title=\"1. 获取 Docker EOS 最新镜像\"></a>1. 获取 Docker EOS 最新镜像</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull eosio/eos:v1.5.2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-启动-EOS-节点和钱包节点\"><a href=\"#2-启动-EOS-节点和钱包节点\" class=\"headerlink\" title=\"2. 启动 EOS 节点和钱包节点\"></a>2. 启动 EOS 节点和钱包节点</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --name eosio \\</span><br><span class=\"line\">  --publish 7777:7777 \\</span><br><span class=\"line\">  --publish 127.0.0.1:5555:5555 \\</span><br><span class=\"line\">  --volume sddd:sddd \\</span><br><span class=\"line\">  --detach \\</span><br><span class=\"line\">  eosio/eos \\</span><br><span class=\"line\">  /bin/bash -c \\</span><br><span class=\"line\">  &quot;keosd --http-server-address=0.0.0.0:5555 &amp; exec nodeos -e -p eosio --plugin eosio::producer_plugin --plugin eosio::history_plugin --plugin eosio::chain_api_plugin --plugin eosio::history_plugin --plugin eosio::history_api_plugin --plugin eosio::http_plugin -d /mnt/dev/data --config-dir /mnt/dev/config --http-server-address=0.0.0.0:7777 --access-control-allow-origin=&#x27;*&#x27; --contracts-console --http-validate-host=false --filter-on=&#x27;*&#x27;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在上面这条语句中</p>\n<ul>\n<li>将端口 7777 和 5555 转发到主机。</li>\n<li>将本地驱动器上的工作卷别名为 docker 容器。</li>\n<li>在 bash 中运行和启动钱包和 Nodeos。此命令加载所有基本插件，设置服务器地址，启用 CORS 并添加一些合同调试配置项</li>\n<li>开启 CORS 并设置为不限制（ <code>*</code> ）</li>\n</ul>\n<blockquote>\n<p>注意：上面这个配置仅用于开发目的。 正式环境中，CORS 最好不要设置为 <code>*</code>。记住，永远不要在可公开访问的节点将 CORS 设置为 <code>*</code></p>\n</blockquote>\n<h2 id=\"3-1-检查-Nodeos-是否在挖矿\"><a href=\"#3-1-检查-Nodeos-是否在挖矿\" class=\"headerlink\" title=\"3.1 检查 Nodeos 是否在挖矿\"></a>3.1 检查 Nodeos 是否在挖矿</h2><p>在 Shell运行下面的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker logs --tail 10 eosio</span><br></pre></td></tr></table></figure>\n<p>运行上面的命令后，你应该在命令行窗口中看到类似下面的信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1929001ms thread-0   producer_plugin.cpp:585       block_production_loo ] Produced block 0000366974ce4e2a... #13929 @ 2018-05-23T16:32:09.000 signed by eosio [trxs: 0, lib: 13928, confirmed: 0]</span><br><span class=\"line\">1929502ms thread-0   producer_plugin.cpp:585       block_production_loo ] Produced block 0000366aea085023... #13930 @ 2018-05-23T16:32:09.500 signed by eosio [trxs: 0, lib: 13929, confirmed: 0]</span><br><span class=\"line\">1930002ms thread-0   producer_plugin.cpp:585       block_production_loo ] Produced block 0000366b7f074fdd... #13931 @ 2018-05-23T16:32:10.000 signed by eosio [trxs: 0, lib: 13930, confirmed: 0]</span><br><span class=\"line\">1930501ms thread-0   producer_plugin.cpp:585       block_production_loo ] Produced block 0000366cd8222adb... #13932 @ 2018-05-23T16:32:10.500 signed by eosio [trxs: 0, lib: 13931, confirmed: 0]</span><br><span class=\"line\">1931002ms thread-0   producer_plugin.cpp:585       block_production_loo ] Produced block 0000366d5c1ec38d... #13933 @ 2018-05-23T16:32:11.000 signed by eosio [trxs: 0, lib: 13932, confirmed: 0]</span><br><span class=\"line\">1931501ms thread-0   producer_plugin.cpp:585       block_production_loo ] Produced block 0000366e45c1f235... #13934 @ 2018-05-23T16:32:11.500 signed by eosio [trxs: 0, lib: 13933, confirmed: 0]</span><br><span class=\"line\">1932001ms thread-0   producer_plugin.cpp:585       block_production_loo ] Produced block 0000366f98adb324... #13935 @ 2018-05-23T16:32:12.000 signed by eosio [trxs: 0, lib: 13934, confirmed: 0]</span><br><span class=\"line\">1932501ms thread-0   producer_plugin.cpp:585       block_production_loo ] Produced block 00003670a0f01daa... #13936 @ 2018-05-23T16:32:12.500 signed by eosio [trxs: 0, lib: 13935, confirmed: 0]</span><br><span class=\"line\">1933001ms thread-0   producer_plugin.cpp:585       block_production_loo ] Produced block 00003671e8b36e1e... #13937 @ 2018-05-23T16:32:13.000 signed by eosio [trxs: 0, lib: 13936, confirmed: 0]</span><br><span class=\"line\">1933501ms thread-0   producer_plugin.cpp:585       block_production_loo ] Produced block 0000367257fe1623... #13938 @ 2018-05-23T16:32:13.500 signed by eosio [trxs: 0, lib: 13937, confirmed: 0]</span><br></pre></td></tr></table></figure>\n<p>成功后，你可以按下组合键 <code>CTRL + C</code> 退出该终端机或键入 exit 并按回车键退出</p>\n<h3 id=\"3-2-检查钱包是否启动\"><a href=\"#3-2-检查钱包是否启动\" class=\"headerlink\" title=\"3.2 检查钱包是否启动\"></a>3.2 检查钱包是否启动</h3><p>新打开一个命令行或终端，输入以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker exec -it eosio bash</span><br></pre></td></tr></table></figure>\n<p>然后再输入以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos --wallet-url http://127.0.0.1:5555 wallet list keys</span><br></pre></td></tr></table></figure>\n<p>如果输出结果类似于下面则表示钱包运行正常</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Wallets:</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure>\n<p>最后，输出 <code>exit</code> 退出</p>\n<p>现在 <code>keosd</code> 正常运行，键入 <code>exit</code> 然后按 <code>Enter</code> 键离开 <code>keosd shell</code>。</p>\n<p>从现在开始，我们不需要使用 <code>bash</code> 输入容器，我们只需要在本地系统（ Linux 或 Mac ）执行命令</p>\n<h3 id=\"3-3-检查-Nodeos-RPC-服务是否正常\"><a href=\"#3-3-检查-Nodeos-RPC-服务是否正常\" class=\"headerlink\" title=\"3.3 检查 Nodeos RPC 服务是否正常\"></a>3.3 检查 Nodeos RPC 服务是否正常</h3><p>你可以从下面的方法中选择一个来检查 Nodeos API RPC 服务是否正常</p>\n<ol>\n<li><p>在浏览器中访问以下 URL，来检查 <code>chain_api_plugin</code> 提供的 <code>get_info</code> API</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo3Nzc3L3YxL2NoYWluL2dldF9pbmZv\">http://localhost:7777/v1/chain/get_info<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>在命令行中使用 curl 命令来检查</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl http://localhost:7777/v1/chain/get_info</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"4-别名-cleos-命令\"><a href=\"#4-别名-cleos-命令\" class=\"headerlink\" title=\"4. 别名 cleos 命令\"></a>4. 别名 cleos 命令</h2><p>每次需要与 <code>nodeos</code> 或 <code>keosd</code> 交互时，我们都不想一次次的 Docker 容器的 bash。解决方案是给命令创建一个别名。</p>\n<p>你可以在终端中执行以下操作以获取临时别名 ( alias )，或者如果你希望别名无限期地保留，将其添加到 <code>.bash_rc</code> 文件中（如果在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHdsZS5jbi9sL3l1ZmVpL2xpbnV4L2xpbnV4LWJhc2ljLWluZGV4Lmh0bWw=\">Linux<i class=\"fa fa-external-link-alt\"></i></span> 上）或 <code>.profile</code> 文件 ( Mac OS )</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">alias cleos=&#x27;docker exec -it eosio /opt/eosio/bin/cleos --url http://127.0.0.1:7777 --wallet-url http://127.0.0.1:5555&#x27;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：如果你将命令添加到 <code>.bash_rc</code> 或 <code>.profile</code> ，你需要使用 <code>source ~/.bash_rc</code>或 <code>source ~/.profile</code> 重新加载文件</p>\n</blockquote>\n<h2 id=\"5-Docker-EOS-一些有用的命令\"><a href=\"#5-Docker-EOS-一些有用的命令\" class=\"headerlink\" title=\"5. Docker EOS 一些有用的命令\"></a>5. Docker EOS 一些有用的命令</h2><h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker start eosio</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker stop eosio</span><br></pre></td></tr></table></figure>\n<h3 id=\"进入-Docker-bash\"><a href=\"#进入-Docker-bash\" class=\"headerlink\" title=\"进入 Docker bash\"></a>进入 Docker bash</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker exec -it eosio bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rm eosio</span><br></pre></td></tr></table></figure>","categories":["BlockChain"]},{"title":"EOS合约基础教程--开发智能合约`Hello World`","url":"/eos_contract_basic_hello/","content":"<h2 id=\"1-开发工具\"><a href=\"#1-开发工具\" class=\"headerlink\" title=\"1 开发工具\"></a>1 开发工具</h2><p>使用<code>eosio-cpp</code>工具来进行开发</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew tap eosio/eosio.cdt</span><br><span class=\"line\">brew install eosio.cdt</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"2-创建合约目录-hello\"><a href=\"#2-创建合约目录-hello\" class=\"headerlink\" title=\"2 创建合约目录 hello\"></a>2 创建合约目录 <code>hello</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir hello</span><br><span class=\"line\">cd    hello</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意： 合约目录非常重要，因为 EOS 的合约部署是以目录来进行的。</p>\n</blockquote>\n<h2 id=\"3-创建一个合约文件-hello-cpp\"><a href=\"#3-创建一个合约文件-hello-cpp\" class=\"headerlink\" title=\"3 创建一个合约文件 hello.cpp\"></a>3 创建一个合约文件 <code>hello.cpp</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch hello.cpp</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>文件名无所谓，惯例是合约名 + <code>.cpp</code></p>\n</blockquote>\n<h2 id=\"4-Hello-World-合约\"><a href=\"#4-Hello-World-合约\" class=\"headerlink\" title=\"4 Hello World 合约\"></a>4 Hello World 合约</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim hello.cpp</span><br></pre></td></tr></table></figure>\n<p>合约内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;eosiolib/eosio.hpp&gt;</span><br><span class=\"line\">#include &lt;eosiolib/print.hpp&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace eosio;</span><br><span class=\"line\"></span><br><span class=\"line\">class hello : public contract &#123;</span><br><span class=\"line\">  public:</span><br><span class=\"line\">      using contract::contract;</span><br><span class=\"line\"></span><br><span class=\"line\">      [[eosio::action]]</span><br><span class=\"line\">      void hi() &#123;</span><br><span class=\"line\">         print(&quot;Hello World&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">EOSIO_DISPATCH( hello, (hi))</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-合约详解\"><a href=\"#5-合约详解\" class=\"headerlink\" title=\"5 合约详解\"></a>5 合约详解</h2><h3 id=\"5-1-引入头文件\"><a href=\"#5-1-引入头文件\" class=\"headerlink\" title=\"5.1 引入头文件\"></a>5.1 引入头文件</h3><p>最重要的头文件是 <code>&lt;eosiolib/eosio.hpp&gt;</code> ，该头文件包含了大量的其它头文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#pragma once</span><br><span class=\"line\">#include &lt;eosiolib/action.hpp&gt;</span><br><span class=\"line\">#include &lt;eosiolib/print.hpp&gt;</span><br><span class=\"line\">#include &lt;eosiolib/multi_index.hpp&gt;</span><br><span class=\"line\">#include &lt;eosiolib/dispatcher.hpp&gt;</span><br><span class=\"line\">#include &lt;eosiolib/contract.hpp&gt;</span><br></pre></td></tr></table></figure>\n<p>源代码在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VPU0lPL2Vvc2lvLmNkdC9ibG9iL21hc3Rlci9saWJyYXJpZXMvZW9zaW9saWIvZW9zaW8uaHBw\">https://github.com/EOSIO/eosio.cdt/blob/master/libraries/eosiolib/eosio.hpp<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"5-2-宏定义\"><a href=\"#5-2-宏定义\" class=\"headerlink\" title=\"5.2 宏定义\"></a>5.2 宏定义</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#define CONTRACT class [[eosio::contract]]</span><br><span class=\"line\">#define ACTION   [[eosio::action]] void</span><br><span class=\"line\">#define TABLE struct [[eosio::table]]</span><br></pre></td></tr></table></figure>\n<pre><code>这三个宏定义分别用来修饰一个 **合约** 、**动作** 、**表**\n</code></pre>\n<h3 id=\"5-3-命名空间\"><a href=\"#5-3-命名空间\" class=\"headerlink\" title=\"5.3 命名空间\"></a>5.3 命名空间</h3><p>引入命名空间 <code>eosio</code> 。EOS 把所有的类和函数都放在 <code>eosio</code> 命名空间下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;eosiolib/eosio.hpp&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> using namespace eosio;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-4-继承\"><a href=\"#5-4-继承\" class=\"headerlink\" title=\"5.4 继承\"></a>5.4 继承</h3><p>EOS 中所有的合约都必须继承自一个基础合约 <code>eosio::contract</code> 。 该基础合约在 <code>&lt;eosiolib/contract.hpp&gt;</code> 头文件中定义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;eosiolib/eosio.hpp&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace eosio;</span><br><span class=\"line\"></span><br><span class=\"line\">class hello : public contract &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-5-动作-action\"><a href=\"#5-5-动作-action\" class=\"headerlink\" title=\"5.5 动作 action\"></a>5.5 动作 action</h3><p>EOS 合约可以包含一些动作 ( <code>action</code> ) 和一些用于存储数据的表 <code>table</code>，这些表都是一个结构体 <code>struct</code>。 如果不用存储数据，那么表是可以忽略的。</p>\n<p>EOS 合约中的动作都需要 <code>[[eosio::action]]</code> 属性来修饰。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;eosiolib/eosio.hpp&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace eosio;</span><br><span class=\"line\"></span><br><span class=\"line\">class hello : public contract &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    using contract::contract;</span><br><span class=\"line\"></span><br><span class=\"line\">    [[eosio::action]]</span><br><span class=\"line\">    void hi( name user ) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-6-输出\"><a href=\"#5-6-输出\" class=\"headerlink\" title=\"5.6 输出\"></a>5.6 输出</h3><p>需要输出信息，比如一些字符串等，可以使用 <code>eosio::print()</code> 方法。</p>\n<p><code>eosio::print()</code> 方法在 <code>&lt;eosiolib/print.hpp&gt;</code> 头文件中定义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;eosiolib/eosio.hpp&gt;</span><br><span class=\"line\">#include &lt;eosiolib/print.hpp&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace eosio;</span><br><span class=\"line\"></span><br><span class=\"line\">class hello : public contract &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    using contract::contract;</span><br><span class=\"line\"></span><br><span class=\"line\">    [[eosio::action]]</span><br><span class=\"line\">    void hi() &#123;</span><br><span class=\"line\">        print(&quot;Hello World&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-7-定义动作\"><a href=\"#5-7-定义动作\" class=\"headerlink\" title=\"5.7 定义动作\"></a>5.7 定义动作</h3><p>一个 EOS 合约中可以有多个动作 action ，当 EOS 接收到一个事务后，会将该事务分发给相应的合约，或者说，调用相应的合约的动作。</p>\n<p>为了确保合约的哪个动作可以调用，需要使用 <code>EOSIO_DISPATCH</code> 宏来告诉 EOS。</p>\n<p><code>EOSIO_DISPATCH</code> 宏在 <code>&lt;eosiolib/dispatcher.hpp&gt;</code> 头文件中定义，该宏的第一个参数是合约的名字，第二个参数，是多个小括号 <code>()</code> 扩起来的多个动作的方法名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;eosiolib/eosio.hpp&gt;</span><br><span class=\"line\">#include &lt;eosiolib/print.hpp&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace eosio;</span><br><span class=\"line\"></span><br><span class=\"line\">class hello : public contract &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    using contract::contract;</span><br><span class=\"line\"></span><br><span class=\"line\">    [[eosio::action]]</span><br><span class=\"line\">    void hi() &#123;</span><br><span class=\"line\">        print(&quot;Hello World&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">EOSIO_DISPATCH( hello, (hi))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-编译合约\"><a href=\"#6-编译合约\" class=\"headerlink\" title=\"6 编译合约\"></a>6 编译合约</h2><p>使用 <code>eosio-cpp</code> 命令来编译合约</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eosio-cpp -o hello.wasm hello.cpp --abigen</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-1-选项说明\"><a href=\"#6-1-选项说明\" class=\"headerlink\" title=\"6.1 选项说明\"></a>6.1 选项说明</h3><table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-o hello.wasm</td>\n<td align=\"left\">该选项用于指定合约编译后的输出文件。必须是以 <code>.wasm</code> 作为文件扩展名</td>\n</tr>\n<tr>\n<td align=\"left\">hello.cpp</td>\n<td align=\"left\">合约源文件</td>\n</tr>\n<tr>\n<td align=\"left\">–abigen</td>\n<td align=\"left\">该选项用户指定合约编译时同时生成 abi 文件</td>\n</tr>\n</tbody></table>\n<p>运行该命令输出结果如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ eosio-cpp -o hello.wasm hello.cpp --abigen</span><br><span class=\"line\">Warning, empty ricardian clause file</span><br><span class=\"line\">Warning, empty ricardian clause file</span><br><span class=\"line\">Warning, action &lt;hi&gt; does not have a ricardian contract</span><br></pre></td></tr></table></figure>\n\n<p>编译完成后，当前 <code>hello</code> 目录就会多出两个文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ls </span><br><span class=\"line\">hello.abi  hello.cpp hello.wasm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-部署合约\"><a href=\"#7-部署合约\" class=\"headerlink\" title=\"7 部署合约\"></a>7 部署合约</h2><p>部署合约的前提就是需要存在一个账户。在前面的章节中，我们创建了一个 <code>hello</code> 账户，接下来我们就使用在这个账户上部署合约</p>\n<p>部署合约需要使用到 <code>cleos set contract</code> 命令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos set contract hello ../hello -p hello@active</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-1-选项说明\"><a href=\"#7-1-选项说明\" class=\"headerlink\" title=\"7.1 选项说明\"></a>7.1 选项说明</h3><table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">cleos set contract</td>\n<td align=\"left\">部署合约的命令</td>\n</tr>\n<tr>\n<td align=\"left\">hello</td>\n<td align=\"left\">部署合约的账户，必须已经存在</td>\n</tr>\n<tr>\n<td align=\"left\">..&#x2F;hello</td>\n<td align=\"left\">合约所在的目录名，该目录下必须包含和目录相同的 <code>.wasm</code> 和 <code>.abi</code> 文件</td>\n</tr>\n<tr>\n<td align=\"left\">-p hello@active</td>\n<td align=\"left\">该选项用于指定权限，该权限必须包含 <code>hello</code> 账户的 <code>active</code> 权限</td>\n</tr>\n</tbody></table>\n<p>该命令的运行结果如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Reading WASM from ../hello/hello.wasm...</span><br><span class=\"line\">Skipping set abi because the new abi is the same as the existing abi</span><br><span class=\"line\">Publishing contract...</span><br><span class=\"line\">executed transaction: e3863e68840c354c67b4955e14bed8792fb37f7b7166e1df4b5a30e0a7f714f2  1344 bytes  518 us</span><br><span class=\"line\">#         eosio &lt;= eosio::setcode               &#123;&quot;account&quot;:&quot;hello&quot;,&quot;vmtype&quot;:0,&quot;vmversion&quot;:0,&quot;code&quot;:&quot;0061736d0100000001300960017f006000017f60027f7f01...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-运行合约下的动作\"><a href=\"#8-运行合约下的动作\" class=\"headerlink\" title=\"8 运行合约下的动作\"></a>8 运行合约下的动作</h2><p>只能说是 <code>hello</code> 账户下部署了一个合约，该合约下有一个动作 <code>hi</code> 。</p>\n<p>如果我们要执行这个账户下的合约的 <code>hi</code> 动作，需要使用到 <code>cleos push action</code> 命令。该命令的语法如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos push action hello hi &#x27;[]&#x27; -p hello@active</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-1-参数说明\"><a href=\"#8-1-参数说明\" class=\"headerlink\" title=\"8.1 参数说明\"></a>8.1 参数说明</h3><table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">cleos push action</td>\n<td align=\"left\">执行合约动作的命令</td>\n</tr>\n<tr>\n<td align=\"left\">hello</td>\n<td align=\"left\">合约所在的账户名</td>\n</tr>\n<tr>\n<td align=\"left\">hi</td>\n<td align=\"left\">要执行的合约的动作，必须是已经导出的，也就是 <code>EOSIO_DISPATCH( hello, (hi))</code> 中定义的</td>\n</tr>\n<tr>\n<td align=\"left\">-p hello@active</td>\n<td align=\"left\">用于执行合约的权限，可以是任意权限，只要该合约运行</td>\n</tr>\n</tbody></table>\n<p>运行上面的命令，输出结果如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">executed transaction: 843a65cd56420c6f749a10cf221fdf36716067cd1718c8348c38a304ba752ab0  96 bytes  270 us</span><br><span class=\"line\">#         hello &lt;= hello::hi                    &quot;&quot;</span><br><span class=\"line\">&gt;&gt; Hello World</span><br></pre></td></tr></table></figure>\n<p>看到最后的那个 <code>&gt;&gt; Hello World</code> 吗？ 这个就是 <code>print(&quot;Hello World&quot;);</code> 的输出结果</p>\n","categories":["BlockChain"],"tags":["区块链","eos"]},{"title":"EOS合约基础教程--开发环境配置","url":"/eos_contract_basic_dev_config/","content":"<p>EOS 合约的不同操作系统下开发环境配置：</p>\n<ul>\n<li>Docker 方式安装</li>\n<li>Ubuntu 18.04 安装</li>\n<li>Ubuntu 16.04 安装</li>\n<li>Mac 中 brew 安装</li>\n<li>源码安装</li>\n</ul>\n<p>Ubuntu 18.04 和 Ubuntu 16.04 提供了 <code>.deb</code> 安装包，为 CentOS 系统提供了 <code>.rpm</code> 安装包。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"设置开发目录\"><a href=\"#设置开发目录\" class=\"headerlink\" title=\"设置开发目录\"></a>设置开发目录</h2><p>建议在此目录下开发。合约源代码，合约编译后的的文件，安装包等放到这个目录下便于管理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir contracts</span><br><span class=\"line\">cd contracts</span><br></pre></td></tr></table></figure>\n<p>获取合约目录绝对路径，在 Linux&#x2F;Ubuntu 系统上你可以使用以下命令获取绝对路径。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-方式安装\"><a href=\"#Docker-方式安装\" class=\"headerlink\" title=\"Docker 方式安装\"></a>Docker 方式安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull eosio/eos</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ubuntu-18-04-安装\"><a href=\"#Ubuntu-18-04-安装\" class=\"headerlink\" title=\"Ubuntu 18.04 安装\"></a>Ubuntu 18.04 安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 首先下载安装包</span><br><span class=\"line\">wget https://github.com/EOSIO/eos/releases/download/v1.5.1/eosio_1.5.1-1-ubuntu-18.04_amd64.deb</span><br><span class=\"line\">// 然后使用 `apt` 命令安装下载好的离线包</span><br><span class=\"line\">sudo apt install ./eosio_1.5.1-1-ubuntu-18.04_amd64.deb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ubuntu-16-04-安装\"><a href=\"#Ubuntu-16-04-安装\" class=\"headerlink\" title=\"Ubuntu 16.04 安装\"></a>Ubuntu 16.04 安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 首先下载安装包</span><br><span class=\"line\">wget https://github.com/EOSIO/eos/releases/download/v1.5.1/eosio_1.5.1-1-ubuntu-16.04_amd64.deb</span><br><span class=\"line\">// 然后使用 `apt`命令安装下载好的离线包</span><br><span class=\"line\">sudo apt install ./eosio_1.5.1-1-ubuntu-16.04_amd64.deb</span><br></pre></td></tr></table></figure>\n\n<p>Ubuntu 系统删除 EOS 安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt remove eosio</span><br></pre></td></tr></table></figure>\n\n<p>下载 eosio.cdt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ wget https://github.com/eosio/eosio.cdt/releases/download/v1.4.1/eosio.cdt-1.4.1.x86_64.deb</span><br><span class=\"line\">$ sudo apt install ./eosio.cdt-1.4.1.x86_64.deb</span><br></pre></td></tr></table></figure>\n\n<p>卸载eosio.cdt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt remove eosio.cdt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CeotOS-系统安装\"><a href=\"#CeotOS-系统安装\" class=\"headerlink\" title=\"CeotOS 系统安装\"></a>CeotOS 系统安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 首先下载安装包</span><br><span class=\"line\">wget https://github.com/EOSIO/eos/releases/download/v1.5.1/eosio-1.5.1-1.el7.x86_64.rpm</span><br><span class=\"line\">// 然后使用 apt 命令安装下载好的离线包</span><br><span class=\"line\">sudo yum install ./eosio-1.5.1-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>CentOS 下如果 EOS 使用的是 rpm 安装，那么如果不想用了也可以使用 rpm 来卸载，命令如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum remove eosio</span><br></pre></td></tr></table></figure>\n<p>安装 eosio.cdt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/EOSIO/eosio.cdt/releases/download/v1.4.1/eosio.cdt-centos-1.4.1.x86_64-0.x86_64.rpm</span><br><span class=\"line\">sudo yum install ./eosio.cdt-centos-1.4.1.x86_64-0.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>卸载 eosio.cdt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum remove eosio.cdt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mac下安装\"><a href=\"#Mac下安装\" class=\"headerlink\" title=\"Mac下安装\"></a>Mac下安装</h2><h3 id=\"安装-brew-工具\"><a href=\"#安装-brew-工具\" class=\"headerlink\" title=\"安装 brew 工具\"></a>安装 <code>brew</code> 工具</h3><p><code>brew</code> 是 Mac OS 下的软件管理工具，使用它可以方便快捷的安装一些复杂的软件。<br><code>brew</code> 工具的全称是 <code>Homebrew</code> ，<code>brew</code> 只是安装完成后的一个命令。<br>HomeBrew 的官方网址为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9icmV3LnNoL2luZGV4X3poLWNu\">https://brew.sh/<i class=\"fa fa-external-link-alt\"></i></span>，在官网上也有介绍，安装的最快捷的方式就是打开终端( <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHdsZS5jbi9sL3l1ZmVpL3NoZWxsL3NoZWxsLWJhc2ljLWluZGV4Lmh0bWw=\">Shell<i class=\"fa fa-external-link-alt\"></i></span> 然后运行下面的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n<p>稍等片刻，安装完成后，我们就可以使用 brew 命令来安装一些软件包了</p>\n<h3 id=\"使用-brew-安装-EOS-节点和钱包工具\"><a href=\"#使用-brew-安装-EOS-节点和钱包工具\" class=\"headerlink\" title=\"使用 brew 安装 EOS 节点和钱包工具\"></a>使用 brew 安装 EOS 节点和钱包工具</h3><p>我们首先要运行下面的命令 tap EOS 的信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew tap eosio/eosio</span><br></pre></td></tr></table></figure>\n<p>然后运行下面的命令开始安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install eosio</span><br></pre></td></tr></table></figure>\n<p>安装成功后，我们可以使用下面的命令来检查安装的是否正确</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">nodeos --version</span><br><span class=\"line\"></span><br><span class=\"line\">v1.5.1</span><br></pre></td></tr></table></figure>\n<p>如果不想使用 EOS 节点和钱包工具了，可以运行下面的命令删除</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew remove eosio</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-brew-安装-eosio-cdt-合约编译工具\"><a href=\"#使用-brew-安装-eosio-cdt-合约编译工具\" class=\"headerlink\" title=\"使用 brew 安装 eosio.cdt 合约编译工具\"></a>使用 brew 安装 eosio.cdt 合约编译工具</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 使用 tap eosio.cdt 包地址</span><br><span class=\"line\">brew tap eosio/eosio.cdt</span><br><span class=\"line\">// 安装</span><br><span class=\"line\">brew install eosio.cdt</span><br></pre></td></tr></table></figure>\n<p>安装成功后，我们可以使用下面的命令来检查安装的是否正确</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eosio-cpp --version</span><br><span class=\"line\"></span><br><span class=\"line\">eosio-cpp version 1.5.1</span><br></pre></td></tr></table></figure>\n<p>如果不想使用 eosio.cdt 合约编译工具了，可以运行下面的命令删除</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew remove eosio.cdt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h2><p>下载源码时间会比较长，大概1-3小时。<code>--recursive</code> 参数必须带上，用来安装子模块。下载完成后进行编译，内存要求最少要有8GB。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/EOSIO/eos --recursive </span><br><span class=\"line\">cd eos</span><br><span class=\"line\">./build.sh</span><br><span class=\"line\">./eosio_install.sh</span><br></pre></td></tr></table></figure>\n<p>安装 eosio.cdt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git clone --recursive https://github.com/eosio/eosio.cdt</span><br><span class=\"line\">$ cd eosio.cdt</span><br><span class=\"line\">$ ./build.sh</span><br><span class=\"line\">$ sudo ./install.sh</span><br></pre></td></tr></table></figure>","categories":["BlockChain"]},{"title":"EOS合约基础教程--智能合约简介","url":"/eos_contract_basic_desc/","content":"<h1 id=\"1-EOS智能合约和以太坊合约的区别\"><a href=\"#1-EOS智能合约和以太坊合约的区别\" class=\"headerlink\" title=\"1 EOS智能合约和以太坊合约的区别\"></a>1 EOS智能合约和以太坊合约的区别</h1><p>EOS的智能合约里面有一个action（动作）和transaction（交易）的概念。<br>在以太坊中，基本上只有transaction的概念，如果我只要执行一种操作，而且是只读操作，就不需要签名。如果需要划资金，有一些写的操作，那就需要用户用公钥对这个操作去签名，然后pos的一个transaction，这是以太坊的概念。</p>\n<p>对于EOS，它多了一个action的概念，action其实它也是对一个智能合约中的某个函数的调用。transaction是由一个或者多个action组合而成的关系，就是在一个transaction里，可以包含多个action，这样你可以在一个transaction里签一次名，就可以调多个函数，做一组操作。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"2-EOS-合约\"><a href=\"#2-EOS-合约\" class=\"headerlink\" title=\"2 EOS 合约\"></a>2 EOS 合约</h1><h2 id=\"2-1-基础知识\"><a href=\"#2-1-基础知识\" class=\"headerlink\" title=\"2.1 基础知识\"></a>2.1 基础知识</h2><p>EOS智能合约通过messages 及 共享内存数据库（比如只要一个合约被包含在transaction的读取域中with an async vibe，它就可以读取另一个合约的数据库）相互通信。异步通信导致的spam问题将由资源限制算法来解决。下面是两个在合约里可定义的通信模型：</p>\n<ul>\n<li>Inline 内联通信模型，采用请求其他操作的形式，需要作为调用操作的一部分执行。Inline保证执行当前的transaction或unwind；无论成功或失败都不会有通知。Inline 操作的scopes和authorities和原来的transaction一样。</li>\n<li>Deferred 延迟通信模型，采用发送到对等交易的动作通知的形式， 根据生产者的判断，延迟的操作最多可以安排在稍后的时间运行由区块生产者来安排。无法保证将执行延期操作，结果可能是传递通信结果或者只是超时。延期交易具有发送合约的权限，交易可以取消延期交易。</li>\n</ul>\n<h2 id=\"2-2-目录结构\"><a href=\"#2-2-目录结构\" class=\"headerlink\" title=\"2.2 目录结构\"></a>2.2 目录结构</h2><h3 id=\"2-2-1-创建智能合约文件\"><a href=\"#2-2-1-创建智能合约文件\" class=\"headerlink\" title=\"2.2.1 创建智能合约文件\"></a>2.2.1 创建智能合约文件</h3><p>eoscpp将创造三个智能合约文件，他们是你起步开发的框架。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eoscpp -n $&#123;contract&#125;</span><br></pre></td></tr></table></figure>\n<p>以上将在’.&#x2F;${project}’文件夹下创建一个新项目，包含三个文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&#123;contract&#125;.abi $&#123;contract&#125;.hpp $&#123;contract&#125;.cpp</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-2-HPP\"><a href=\"#2-2-2-HPP\" class=\"headerlink\" title=\"2.2.2 HPP\"></a>2.2.2 HPP</h4><p>HPP是包含CPP文件所引用的变量、常量、函数的头文件。</p>\n<h4 id=\"2-2-3-CPP\"><a href=\"#2-2-3-CPP\" class=\"headerlink\" title=\"2.2.3 CPP\"></a>2.2.3 CPP</h4><p>CPP文件是包含合约功能的源文件。</p>\n<h4 id=\"2-2-4-WAST\"><a href=\"#2-2-4-WAST\" class=\"headerlink\" title=\"2.2.4 WAST\"></a>2.2.4 WAST</h4><p>想要部署到EOS.IO区块链上的任何程序都需要先编译成WASM格式。这是区块链接受的唯一格式。<br>一旦您完成了CPP文件的开发，您可以用eoscpp工具将它编译成一个文本版本的WASM (.wast) 文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ eoscpp -o $&#123;contract&#125;.wast $&#123;contract&#125;.cpp</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-5-ABI\"><a href=\"#2-2-5-ABI\" class=\"headerlink\" title=\"2.2.5 ABI\"></a>2.2.5 ABI</h4><p>Application Binary Interface (ABI)是一个基于JSON的描述文件，是关于转换JSON和二进制格式的用户actions的。ABI还描述了如何将数据库状态和JSON的互相转换。一旦您通过ABI描述了您的合约，开发者和用户就能够用JSON和您的合约无缝交互了。<br>ABI文件可通过eoscpp工具从HPP文件生成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ eoscpp -g $&#123;contract&#125;.abi $&#123;contract&#125;.hpp</span><br></pre></td></tr></table></figure>\n<p>这里是一个合约的骨架ABI的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;types&quot;: [&#123;</span><br><span class=\"line\">      &quot;new_type_name&quot;: &quot;account_name&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;name&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;structs&quot;: [&#123;</span><br><span class=\"line\">      &quot;name&quot;: &quot;transfer&quot;,</span><br><span class=\"line\">      &quot;base&quot;: &quot;&quot;,</span><br><span class=\"line\">      &quot;fields&quot;: &#123;</span><br><span class=\"line\">        &quot;from&quot;: &quot;account_name&quot;,</span><br><span class=\"line\">        &quot;to&quot;: &quot;account_name&quot;,</span><br><span class=\"line\">        &quot;quantity&quot;: &quot;uint64&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">      &quot;name&quot;: &quot;account&quot;,</span><br><span class=\"line\">      &quot;base&quot;: &quot;&quot;,</span><br><span class=\"line\">      &quot;fields&quot;: &#123;</span><br><span class=\"line\">        &quot;account&quot;: &quot;name&quot;,</span><br><span class=\"line\">        &quot;balance&quot;: &quot;uint64&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;actions&quot;: [&#123;</span><br><span class=\"line\">      &quot;action&quot;: &quot;transfer&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;transfer&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;tables&quot;: [&#123;</span><br><span class=\"line\">      &quot;table&quot;: &quot;account&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;account&quot;,</span><br><span class=\"line\">      &quot;index_type&quot;: &quot;i64&quot;,</span><br><span class=\"line\">      &quot;key_names&quot; : [&quot;account&quot;],</span><br><span class=\"line\">      &quot;key_types&quot; : [&quot;name&quot;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>您肯定注意到了这个ABI 定义了一个叫transfer的action，它的类型也是transfer。这就告诉EOS.IO当${account}-&gt;transfer的message发生时，它的payload是transfer类型的。 transfer类型是在structs的列表中定义的，其中有个对象，name属性是transfer。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  &quot;structs&quot;: [&#123;</span><br><span class=\"line\">      &quot;name&quot;: &quot;transfer&quot;,</span><br><span class=\"line\">      &quot;base&quot;: &quot;&quot;,</span><br><span class=\"line\">      &quot;fields&quot;: &#123;</span><br><span class=\"line\">        &quot;from&quot;: &quot;account_name&quot;,</span><br><span class=\"line\">        &quot;to&quot;: &quot;account_name&quot;,</span><br><span class=\"line\">        &quot;quantity&quot;: &quot;uint64&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>这部分包括<code>from</code>, <code>to</code> 和 <code>quantity</code>等字段。这些字段都有对应的类型：<code>account_name</code>和<code>uint64</code>。<code>account_name</code> 是一个用base32编码来表示uint64的内置类型。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;types&quot;: [&#123;</span><br><span class=\"line\">      &quot;new_type_name&quot;: &quot;account_name&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;name&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上述types列表内，我们定义了一系列现有类型的别名。这里，我们把account_name定义为name的别名。</p>\n<h2 id=\"2-3-合约内容结构\"><a href=\"#2-3-合约内容结构\" class=\"headerlink\" title=\"2.3 合约内容结构\"></a>2.3 合约内容结构</h2><p>虽然 EOS 合约是一个 C++ 类，但，一个 EOS 合约又不仅仅是一个普通的 C++ 类，它必须符合一定的条件才能成为合约：</p>\n<h3 id=\"2-3-1-类的构造方法必须接受且只能接受三个参数\"><a href=\"#2-3-1-类的构造方法必须接受且只能接受三个参数\" class=\"headerlink\" title=\"2.3.1  类的构造方法必须接受且只能接受三个参数\"></a>2.3.1  类的构造方法必须接受且只能接受三个参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">contractName( name receiver, name code, datastream&lt;const char*&gt; ds );</span><br></pre></td></tr></table></figure>\n<p>参数说明</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">receiver</td>\n<td align=\"left\">eosio::name</td>\n<td align=\"left\">合约的名字，准确的说，是部署当前合约的账号</td>\n</tr>\n<tr>\n<td align=\"left\">code</td>\n<td align=\"left\">eosio::name</td>\n<td align=\"left\">调用合约 <strong>动作</strong>的账号，一般是当前合约所在的账号</td>\n</tr>\n<tr>\n<td align=\"left\">ds</td>\n<td align=\"left\">datastream&lt;const char*&gt;</td>\n<td align=\"left\">保存了那些使用 <code>eosio::ignore</code> 忽略的字段</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>注意： ds 参数目前没啥大的作用，但是，如果合约想要对未由调度程序处理的操作字段进行进一步反序列化（例如，要重新使用 <code>ignore</code> 忽略的字段），这会派上用场。</p>\n</blockquote>\n<h3 id=\"2-3-2-导出合约中的动作\"><a href=\"#2-3-2-导出合约中的动作\" class=\"headerlink\" title=\"2.3.2  导出合约中的动作\"></a>2.3.2  导出合约中的动作</h3><p>任何一个合约，都必须定义一个 <code>EOSIO_DISPATCH( hello, (hi))</code> 用于导出合约中的动作，这样，EOS 执行环境才知道该合约可以接受哪些动作</p>\n<p><code>EOSIO_DISPATCH()</code> 是一个宏定义，它的原型如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#define EOSIO_DISPATCH( TYPE, MEMBERS ) ...</span><br></pre></td></tr></table></figure>\n<p>参数说明</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">TYPE</td>\n<td align=\"left\">合约的名字，注意，是合约的名字，而不是合约所在的账号的名字</td>\n</tr>\n<tr>\n<td align=\"left\">MEMBERS</td>\n<td align=\"left\">由小括号扩起来的 0 个或多个动作名，比如 <code>(hi)</code> ，每个动作都是一个 C++ <code>public</code> 方法</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3-3-范例\"><a href=\"#2-3-3-范例\" class=\"headerlink\" title=\"2.3.3 范例\"></a>2.3.3 范例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;eosiolib/eosio.hpp&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace eosio;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class hello</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    hello( name receiver, name code, datastream&lt;const char*&gt; ds )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        print(&quot;receiver:&quot;);</span><br><span class=\"line\">        print(receiver);</span><br><span class=\"line\">        print(&quot;    code:&quot;);</span><br><span class=\"line\">        print(code);</span><br><span class=\"line\">        print(&quot;    ds length:&quot;);</span><br><span class=\"line\">        print(ds.remaining());</span><br><span class=\"line\"></span><br><span class=\"line\">        if( ds.remaining() &gt; 0 )&#123;</span><br><span class=\"line\">            std::string data;</span><br><span class=\"line\">            ds &gt;&gt; data;</span><br><span class=\"line\">            print(&quot;    ds:&quot;);</span><br><span class=\"line\">            print(std::string(data));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [[eosio::action]]</span><br><span class=\"line\">    void hi()&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">EOSIO_DISPATCH(hello,(hi))</span><br></pre></td></tr></table></figure>\n<p>然后使用下面的命令来编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eosio-cpp -o hello.wasm hello.cpp --abigen</span><br></pre></td></tr></table></figure>\n<p>编译结果如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Warning, empty ricardian clause file</span><br><span class=\"line\">Warning, empty ricardian clause file</span><br><span class=\"line\">Warning, action &lt;hi&gt; does not have a ricardian contract</span><br></pre></td></tr></table></figure>\n<p>上面这几个警告是可以忽略的，因为我们没有给合约和方法添加 <strong>李嘉图</strong> (Ricardian) 说明文件</p>\n<blockquote>\n<p><strong>李嘉图</strong> (Ricardian) 说明文件如何编写，我们会在以后的章节中讲解</p>\n</blockquote>\n<p>接着使用下面的命令来部署合约</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos set contract hello ../hello -p hello</span><br></pre></td></tr></table></figure>\n<p>运行结果如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Reading WASM from ../hello/hello.wasm...</span><br><span class=\"line\">Skipping set abi because the new abi is the same as the existing abi</span><br><span class=\"line\">Publishing contract...</span><br><span class=\"line\">executed transaction: 683503d8936d27ffc6fdd1b604782757c8bedcae899c327b34475272ade24b00  2808 bytes  588 us</span><br><span class=\"line\">#         eosio &lt;= eosio::setcode               &#123;&quot;account&quot;:&quot;hello&quot;,&quot;vmtype&quot;:0,&quot;vmversion&quot;:0,&quot;code&quot;:&quot;0061736d0100000001681260017f006000006000017f6002...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-4-合约调用\"><a href=\"#2-3-4-合约调用\" class=\"headerlink\" title=\"2.3.4 合约调用\"></a>2.3.4 合约调用</h3><h4 id=\"2-3-4-1-使用当前合约账号来执行合约-且不传递任何参数\"><a href=\"#2-3-4-1-使用当前合约账号来执行合约-且不传递任何参数\" class=\"headerlink\" title=\"2.3.4.1 使用当前合约账号来执行合约,且不传递任何参数\"></a>2.3.4.1 使用当前合约账号来执行合约,且不传递任何参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos push action hello hi &#x27;[]&#x27; -p hello</span><br><span class=\"line\">executed transaction: 41ad0f8d064a6980151d979666df4103fe0364033fdfee6945cd40b7f39df70b  96 bytes  212 us</span><br><span class=\"line\">#         hello &lt;= hello::hi                    &quot;&quot;</span><br><span class=\"line\">&gt;&gt; receiver:hello    code:hello    ds length:0</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-4-2-使用当前合约账号来执行合约-且一些参数\"><a href=\"#2-3-4-2-使用当前合约账号来执行合约-且一些参数\" class=\"headerlink\" title=\"2.3.4.2 使用当前合约账号来执行合约,且一些参数\"></a>2.3.4.2 使用当前合约账号来执行合约,且一些参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos push action hello hi &#x27;[&quot;hello&quot;,&quot;ni&quot;,&quot;hao&quot;]&#x27; -p hello</span><br><span class=\"line\">executed transaction: 4723aa8ec187e47ead46580d415ebe5b17fd0849b234fd54e092e08f088c6534  96 bytes  220 us</span><br><span class=\"line\">#         hello &lt;= hello::hi                    &quot;&quot;</span><br><span class=\"line\">&gt;&gt; receiver:hello    code:hello    ds length:0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-4-3-使用其它账号来执行合约，不传递任何参数\"><a href=\"#2-3-4-3-使用其它账号来执行合约，不传递任何参数\" class=\"headerlink\" title=\"2.3.4.3 使用其它账号来执行合约，不传递任何参数\"></a>2.3.4.3 使用其它账号来执行合约，不传递任何参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos push action hello hi &#x27;[]&#x27; -p hi</span><br><span class=\"line\">executed transaction: c0c15799a02387078e7e9c9f0ba09f5987cc7b949b6d44ca4be78a606e58afa2  96 bytes  226 us</span><br><span class=\"line\">#         hello &lt;= hello::hi                    &quot;&quot;</span><br><span class=\"line\">&gt;&gt; receiver:hello    code:hello    ds length:0</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-4-4-使用其它账号执行合约，传递一些参数\"><a href=\"#2-3-4-4-使用其它账号执行合约，传递一些参数\" class=\"headerlink\" title=\"2.3.4.4 使用其它账号执行合约，传递一些参数\"></a>2.3.4.4 使用其它账号执行合约，传递一些参数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos push action hello hi &#x27;[&quot;hello&quot;,&quot;ni&quot;,&quot;hao&quot;]&#x27; -p hi</span><br><span class=\"line\">executed transaction: 27a9ade415ecb2f49cb82e2fc44e2c36116d4b5a6fa5fc5c1dfed30a5eab698f  96 bytes  242 us</span><br><span class=\"line\">#         hello &lt;= hello::hi                    &quot;&quot;</span><br><span class=\"line\">&gt;&gt; receiver:hello    code:hello    ds length:0</span><br></pre></td></tr></table></figure>\n\n<p>从上面的执行结果中可以看出，</p>\n<ul>\n<li>如果直接执行合约中的方法，那么 <code>code</code> 和 <code>receiver</code> 都是一样的，都是当前合约所在的账号</li>\n<li><code>datastream&lt;const char*&gt;</code> 一般情况下都是空的，也就是说，没有任何数据</li>\n</ul>\n<h3 id=\"2-3-5-合约基础类-eosio-contract\"><a href=\"#2-3-5-合约基础类-eosio-contract\" class=\"headerlink\" title=\"2.3.5 合约基础类 eosio::contract\"></a>2.3.5 合约基础类 <code>eosio::contract</code></h3><p>如果我们每写一个合约就要自己动手写一个长长的构造函数，肯定是不开心的，作为程序员，能偷懒就偷懒才是我们的理想。</p>\n<p>为此，我们可能希望把包含了三个参数的构造方法写在一个基础的合约里，比如，我们定义一个名为 <code>contract</code> 的基础合约</p>\n<h4 id=\"2-3-5-1-basic-cpp\"><a href=\"#2-3-5-1-basic-cpp\" class=\"headerlink\" title=\"2.3.5.1 basic.cpp\"></a>2.3.5.1 basic.cpp</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;eosiolib/eosio.hpp&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace eosio;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class basic</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    basic( name receiver, name code, datastream&lt;const char*&gt; ds ):</span><br><span class=\"line\">    _self(receiver),_code(code),_ds(ds) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    name _self;</span><br><span class=\"line\">    name _code;</span><br><span class=\"line\">    datastream&lt;const char*&gt; _ds;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然后其它合约在扩展自这个合约，并使用 <code>using</code> 关键字来引用基础类的构造方法</p>\n<h4 id=\"2-3-5-2-hello-cpp\"><a href=\"#2-3-5-2-hello-cpp\" class=\"headerlink\" title=\"2.3.5.2 hello.cpp\"></a>2.3.5.2 hello.cpp</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;eosiolib/eosio.hpp&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#include &quot;basic.cpp&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace eosio;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class hello:public basic &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    using basic::basic;</span><br><span class=\"line\"></span><br><span class=\"line\">    [[eosio::action]]</span><br><span class=\"line\">    void hi()&#123;</span><br><span class=\"line\">        print(&quot;receiver:&quot;);</span><br><span class=\"line\">        print(_self);</span><br><span class=\"line\">        print(&quot;    code:&quot;);</span><br><span class=\"line\">        print(_code);</span><br><span class=\"line\">        print(&quot;    ds length:&quot;);</span><br><span class=\"line\">        print(_ds.remaining());</span><br><span class=\"line\"></span><br><span class=\"line\">        if( _ds.remaining() &gt; 0 )&#123;</span><br><span class=\"line\">            std::string data;</span><br><span class=\"line\">            _ds &gt;&gt; data;</span><br><span class=\"line\">            print(&quot;    ds:&quot;);</span><br><span class=\"line\">            print(std::string(data));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">EOSIO_DISPATCH(hello,(hi))</span><br></pre></td></tr></table></figure>\n<p>然后编译、部署、执行合约，会得到相同的结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos push action hello hi &#x27;[&quot;hello&quot;,&quot;ni&quot;,&quot;hao&quot;]&#x27; -p hi</span><br><span class=\"line\">executed transaction: 040514a09eb7fe268d5ce7d23a38080505ab73cdf72e3bdf47eff7228f2e1747  96 bytes  225 us</span><br><span class=\"line\">#         hello &lt;= hello::hi                    &quot;&quot;</span><br><span class=\"line\">&gt;&gt; receiver:hello    code:hello    ds length:0</span><br></pre></td></tr></table></figure>\n\n<p>EOS 官方也考虑到了这一点，创建了一个合约基础类 <code>contract</code>，并放在命名空间 <code>eosio</code> 下，头文件为 <code>&lt;eosiolib/contract.hpp&gt;</code></p>\n<p>该文件在 Github 上的地址为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VPU0lPL2Vvc2lvLmNkdC9ibG9iL21hc3Rlci9saWJyYXJpZXMvZW9zaW9saWIvY29udHJhY3QuaHBw\">https://github.com/EOSIO/eosio.cdt/blob/master/libraries/eosiolib/contract.hpp<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>同时，<code>#include &lt;eosiolib/eosio.hpp&gt;</code> 头文件也默认包含了该头文件，因此，只要包含了 <code>#include &lt;eosiolib/eosio.hpp&gt;</code> 就可以了</p>\n<p>我们把上面的范例改改，改成官方的合约基础类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;eosiolib/eosio.hpp&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace eosio;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class hello:public eosio::contract &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    using eosio::contract::contract;</span><br><span class=\"line\"></span><br><span class=\"line\">    [[eosio::action]]</span><br><span class=\"line\">    void hi()&#123;</span><br><span class=\"line\">        print(&quot;receiver:&quot;);</span><br><span class=\"line\">        print(_self);</span><br><span class=\"line\">        print(&quot;    code:&quot;);</span><br><span class=\"line\">        print(_code);</span><br><span class=\"line\">        print(&quot;    ds length:&quot;);</span><br><span class=\"line\">        print(_ds.remaining());</span><br><span class=\"line\"></span><br><span class=\"line\">        if( _ds.remaining() &gt; 0 )&#123;</span><br><span class=\"line\">            std::string data;</span><br><span class=\"line\">            _ds &gt;&gt; data;</span><br><span class=\"line\">            print(&quot;    ds:&quot;);</span><br><span class=\"line\">            print(std::string(data));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">EOSIO_DISPATCH(hello,(hi))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-EOS-动作action\"><a href=\"#3-EOS-动作action\" class=\"headerlink\" title=\"3 EOS 动作action\"></a>3 EOS 动作action</h1><p>动作 ( action ) 是 EOS 合约基础组成单位。一个动作，在 C++ 合约类中，表示如下</p>\n<ul>\n<li>一个动作必须是 C++ 合约类的成员方法</li>\n<li>成为动作的成员方法，必须使用 [[eosio::action]] C++11 特性修饰，否则就是一个普通的类成员函数</li>\n<li>成为动作的成员方法，访问级别必须是公开的 public</li>\n<li>成为动作的成员方法，必须没有任何返回值，也不能返回任何值，也就是说，必须使用 void 作为返回值</li>\n<li>成为动作的成员方法，可以接受任意数量的参数</li>\n<li>成为动作的成员方法，必须在 EOSIO_DISPATCH 中导出</li>\n</ul>\n<p>一个 EOS 链是由多个块 ( block ) 组成的：<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-cc8b36cf85d5f08c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>每个块中包含多笔交易：<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-4ed48adc27461349.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>交易由action组成：<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-7ed70756073d4e36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h1 id=\"4-调试智能合约\"><a href=\"#4-调试智能合约\" class=\"headerlink\" title=\"4 调试智能合约\"></a>4 调试智能合约</h1><p>现在user官方网站推荐的一个调试方法就是print，把信息打印出来。这个必须要我们搭建本地节点，因为如果没有本地节点，相当于你print打印在别人的节点上，你根本看不到这个打印信息是什么，所以说你必须要搭建一个本地节点。搭建本地节点后，你运行智能合约，就会看到print出来的输出结果。</p>\n<h2 id=\"4-1-debug-hpp\"><a href=\"#4-1-debug-hpp\" class=\"headerlink\" title=\"4.1 debug.hpp\"></a>4.1 debug.hpp</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;eoslib/eos.hpp&gt;</span><br><span class=\"line\">#include &lt;eoslib/db.hpp&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace debug &#123;</span><br><span class=\"line\">    struct foo &#123;</span><br><span class=\"line\">        account_name from;</span><br><span class=\"line\">        account_name to;</span><br><span class=\"line\">        uint64_t amount;</span><br><span class=\"line\">        void print() const &#123;</span><br><span class=\"line\">            eosio::print(&quot;Foo from &quot;, eosio::name(from), &quot; to &quot;,eosio::name(to), &quot; with amount &quot;, amount, &quot;\\n&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-debug-cpp\"><a href=\"#4-2-debug-cpp\" class=\"headerlink\" title=\"4.2 debug.cpp\"></a>4.2 debug.cpp</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;debug.hpp&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">extern &quot;C&quot; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    void apply( uint64_t receiver, uint64_t code, uint64_t action ) &#123;</span><br><span class=\"line\">        if (code == N(debug)) &#123;</span><br><span class=\"line\">            eosio::print(&quot;Code is debug\\n&quot;);</span><br><span class=\"line\">            if (action == N(foo)) &#123;</span><br><span class=\"line\">                 eosio::print(&quot;Action is foo\\n&quot;);</span><br><span class=\"line\">                debug::foo f = eosio::unpack_action_data&lt;debug::foo&gt;();</span><br><span class=\"line\">               if (f.amount &gt;= 100) &#123;</span><br><span class=\"line\">                    eosio::print(&quot;Amount is larger or equal than 100\\n&quot;);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    eosio::print(&quot;Amount is smaller than 100\\n&quot;);</span><br><span class=\"line\">                    eosio::print(&quot;Increase amount by 10\\n&quot;);</span><br><span class=\"line\">                    f.amount += 10;</span><br><span class=\"line\">                    eosio::print(f);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; // extern &quot;C&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-编译运行\"><a href=\"#4-3-编译运行\" class=\"headerlink\" title=\"4.3 编译运行\"></a>4.3 编译运行</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ eosiocpp -o debug.wast debug.cpp</span><br><span class=\"line\">$ cleos set contract debug debug.wast debug.abi</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h1><p>部署智能合约</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cleos set contract eosio build/contracts/eosio.bios -p eosio</span><br></pre></td></tr></table></figure>\n<ul>\n<li>eosio是要部署的账号，就是你用哪个账号去部署智能合约；</li>\n<li>build&#x2F;contracts&#x2F;eosio.bios表示的是路径；</li>\n<li>eos.bios是生成一个智能合约的目录。</li>\n</ul>\n<p>运行Token合约</p>\n","categories":["BlockChain"],"tags":["区块链","eos"]},{"title":"EOS本地部署多节点私链","url":"/eos_multi_node/","content":"<p>本文将介绍在本地部署EOS的多节点私链的方案。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-创建三个数据文件夹\"><a href=\"#1-创建三个数据文件夹\" class=\"headerlink\" title=\"1.创建三个数据文件夹\"></a>1.创建三个数据文件夹</h2><p>用来存储相关的数据，每个文件夹下包括创世文件<code>genesis.json</code>和配置文件<code>config.ini</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p eostest1 eostest2 eostest3</span><br></pre></td></tr></table></figure>\n<p>三个节点的genesis.json都相同，内容为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim eostest1/genesis.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;initial_timestamp&quot;: &quot;2018-03-01T12:00:00.000&quot;,</span><br><span class=\"line\">  &quot;initial_key&quot;: &quot;EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;,</span><br><span class=\"line\">  &quot;initial_configuration&quot;: &#123;</span><br><span class=\"line\">    &quot;base_per_transaction_net_usage&quot;: 100,</span><br><span class=\"line\">    &quot;base_per_transaction_cpu_usage&quot;: 500,</span><br><span class=\"line\">    &quot;base_per_action_cpu_usage&quot;: 1000,</span><br><span class=\"line\">    &quot;base_setcode_cpu_usage&quot;: 2097152,</span><br><span class=\"line\">    &quot;per_signature_cpu_usage&quot;: 100000,</span><br><span class=\"line\">    &quot;per_lock_net_usage&quot;: 32,</span><br><span class=\"line\">    &quot;context_free_discount_cpu_usage_num&quot;: 20,</span><br><span class=\"line\">    &quot;context_free_discount_cpu_usage_den&quot;: 100,</span><br><span class=\"line\">    &quot;max_transaction_cpu_usage&quot;: 10485760,</span><br><span class=\"line\">    &quot;max_transaction_net_usage&quot;: 104857,</span><br><span class=\"line\">    &quot;max_block_cpu_usage&quot;: 104857600,</span><br><span class=\"line\">    &quot;target_block_cpu_usage_pct&quot;: 1000,</span><br><span class=\"line\">    &quot;max_block_net_usage&quot;: 1048576,</span><br><span class=\"line\">    &quot;target_block_net_usage_pct&quot;: 1000,</span><br><span class=\"line\">    &quot;max_transaction_lifetime&quot;: 3600,</span><br><span class=\"line\">    &quot;max_transaction_exec_time&quot;: 0,</span><br><span class=\"line\">    &quot;max_authority_depth&quot;: 6,</span><br><span class=\"line\">    &quot;max_inline_depth&quot;: 4,</span><br><span class=\"line\">    &quot;max_inline_action_size&quot;: 4096,</span><br><span class=\"line\">    &quot;max_generated_transaction_count&quot;: 16</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &quot;initial_chain_id&quot;: &quot;0000000000000000000000000000000000000000000000000000000000000000&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-启动节点-1\"><a href=\"#2-启动节点-1\" class=\"headerlink\" title=\"2.启动节点(1)\"></a>2.启动节点(1)</h2><p>节点1的config.ini文件内容为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">blocks-dir = &quot;blocks&quot;</span><br><span class=\"line\">bnet-endpoint = 0.0.0.0:4321</span><br><span class=\"line\">http-server-address = 0.0.0.0:8888</span><br><span class=\"line\">p2p-listen-endpoint = 0.0.0.0:9876</span><br><span class=\"line\">p2p-server-address = localhost:9876</span><br><span class=\"line\">allowed-connection = any</span><br><span class=\"line\">signature-provider = EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV=KEY:5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3</span><br><span class=\"line\">producer-name = eosio</span><br><span class=\"line\">plugin = eosio::producer_plugin</span><br><span class=\"line\">plugin = eosio::chain_api_plugin</span><br><span class=\"line\">plugin = eosio::history_api_plugin</span><br><span class=\"line\">plugin = eosio::http_plugin</span><br><span class=\"line\">enable-stale-production = true</span><br></pre></td></tr></table></figure>\n<p>配置选项如下：</p>\n<ul>\n<li>http-server-address &#x3D; 0.0.0.0:8888，这里设置四个0代表本地可以通过localhost或者127.0.0.1调用http接口，同时外部可以通过本机固定ip访问。</li>\n<li>p2p-listen-endpoint &#x3D; 0.0.0.0:9876，p2p网络本机监听端口，监听外部接入的p2p节点，这里的四个0的ip配置意义同上。</li>\n<li>bnet-endpoint &#x3D; 0.0.0.0:4321，bnet是使用一个非常简单的算法来同步两条区块链。主要工作是两条链上的确权，共识，广播，同步区块，保持默认配置即可。</li>\n<li>p2p-peer-address &#x3D; ip:port，对端p2p节点地址，可以设置多个。</li>\n<li>producer-name &#x3D; eosio，配置出块的账户采用eosio</li>\n<li>enable-stale-production &#x3D; true，意思是可以不经过确权直接出块，单节点时要配置为true，多节点出块由于需要各方确权共识，要配置为false。</li>\n<li>signature-provider &#x3D; EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&#x3D;KEY:5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3 ，密钥对，公钥加私钥，对应eosio账户，这对秘钥是写死的，不可改变。</li>\n</ul>\n<p>然后启动节点(1)并让它出块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd eostest1</span><br><span class=\"line\">nodeos --data-dir ./ --config-dir ./</span><br><span class=\"line\"></span><br><span class=\"line\">info  2019-01-10T07:03:41.501 thread-0  producer_plugin.cpp:1494      produce_block        ] Produced block 000019a5cf1b561c... #6565 @ 2019-01-10T07:03:41.500 signed by eosio [trxs: 0, lib: 6541, confirmed: 0]</span><br><span class=\"line\">info  2019-01-10T07:03:42.006 thread-0  producer_plugin.cpp:341       on_incoming_block    ] Received block d7cee8be773b4185... #6566 @ 2019-01-10T07:03:42.000 signed by eosio [trxs: 0, lib: 6553, conf: 12, latency: 6 ms]</span><br><span class=\"line\">info  2019-01-10T07:03:42.502 thread-0  producer_plugin.cpp:341       on_incoming_block    ] Received block 25b680065172a2af... #6567 @ 2019-01-10T07:03:42.500 signed by eosio [trxs: 0, lib: 6553, conf: 0, latency: 2 ms]</span><br><span class=\"line\">info  2019-01-10T07:03:43.003 thread-0  producer_plugin.cpp:341       on_incoming_block    ] Received block 1e5a1ab3b45cb800... #6568 @ 2019-01-10T07:03:43.000 signed by eosio [trxs: 0, lib: 6553, conf: 0, latency: 3 ms]</span><br><span class=\"line\">info  2019-01-10T07:03:43.507 thread-0  producer_plugin.cpp:341       on_incoming_block    ] Received block 3d71245b32785815... #6569 @ 2019-01-10T07:03:43.500 signed by eosio [trxs: 0, lib: 6553, conf: 0, latency: 7 ms]</span><br><span class=\"line\">info  2019-01-10T07:03:44.005 thread-0  producer_plugin.cpp:341       on_incoming_block    ] Received block 31df4883ad685708... #6570 @ 2019-01-10T07:03:44.000 signed by eosio [trxs: 0, lib: 6553, conf: 0, latency: 5 ms]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-创建账户用来启动节点-2-和-3\"><a href=\"#3-创建账户用来启动节点-2-和-3\" class=\"headerlink\" title=\"3.创建账户用来启动节点(2)和(3)\"></a>3.创建账户用来启动节点(2)和(3)</h2><p>创建默认钱包default</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">👍 cleos wallet create  --to-console</span><br><span class=\"line\">Error 3120001: Wallet already exists</span><br><span class=\"line\">Try to use different wallet name.</span><br></pre></td></tr></table></figure>\n<p>如果创建过，进行解锁：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet unlock</span><br><span class=\"line\">password: Unlocked: default</span><br></pre></td></tr></table></figure>\n<p>将创建节点1的私钥密钥导入钱包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet import --private-key 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3</span><br><span class=\"line\">imported private key for: EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV</span><br></pre></td></tr></table></figure>\n<p>然后发布eosio.bios合约：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos set contract eosio build/contracts/eosio.bios/</span><br><span class=\"line\">Reading WASM from /wwwroot/block_chain/eos/build/contracts/eosio.bios/eosio.bios.wasm...</span><br><span class=\"line\">Publishing contract...</span><br><span class=\"line\">executed transaction: 9eca4b74c8608974da726a1d96f972537e9bf7359d41442b6a083c2410a65847  4352 bytes  12020 us</span><br><span class=\"line\">#         eosio &lt;= eosio::setcode               &#123;&quot;account&quot;:&quot;eosio&quot;,&quot;vmtype&quot;:0,&quot;vmversion&quot;:0,&quot;code&quot;:&quot;0061736d0100000001621260037f7e7f0060057f7e7e7e7e...</span><br><span class=\"line\">#         eosio &lt;= eosio::setabi                &#123;&quot;account&quot;:&quot;eosio&quot;,&quot;abi&quot;:&quot;0e656f73696f3a3a6162692f312e30050c6163636f756e745f6e616d65046e616d650f7065...</span><br><span class=\"line\">warning: transaction executed locally, but may not be confirmed by the network yet         ]</span><br></pre></td></tr></table></figure>\n<p>然后再创建inita、initb两个账户：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cleos create account eosio inita EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV</span><br><span class=\"line\">executed transaction: c9d76cd299a701c516c46406cd9054b07b8dacfb5dd1cd682c5c8f248577f2ad  200 bytes  4800 us</span><br><span class=\"line\">#         eosio &lt;= eosio::newaccount            &#123;&quot;creator&quot;:&quot;eosio&quot;,&quot;name&quot;:&quot;inita&quot;,&quot;owner&quot;:&#123;&quot;threshold&quot;:1,&quot;keys&quot;:[&#123;&quot;key&quot;:&quot;EOS6MRyAjQq8ud7hVNYcfnVPJqc...</span><br><span class=\"line\">warning: transaction executed locally, but may not be confirmed by the network yet         ]</span><br><span class=\"line\"></span><br><span class=\"line\">$ cleos create account eosio initb EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV</span><br><span class=\"line\">executed transaction: e5492b4d415345bff1bc66adf636b6854231aa78977c447c86b6953101d6f42d  200 bytes  194 us</span><br><span class=\"line\">#         eosio &lt;= eosio::newaccount            &#123;&quot;creator&quot;:&quot;eosio&quot;,&quot;name&quot;:&quot;initb&quot;,&quot;owner&quot;:&#123;&quot;threshold&quot;:1,&quot;keys&quot;:[&#123;&quot;key&quot;:&quot;EOS6MRyAjQq8ud7hVNYcfnVPJqc...</span><br><span class=\"line\">warning: transaction executed locally, but may not be confirmed by the network yet         ]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-启动节点-2\"><a href=\"#4-启动节点-2\" class=\"headerlink\" title=\"4.启动节点(2)\"></a>4.启动节点(2)</h2><p>节点2的config.ini文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">blocks-dir = &quot;blocks&quot;</span><br><span class=\"line\">bnet-endpoint = 0.0.0.0:4321</span><br><span class=\"line\">http-server-address = 0.0.0.0:8889</span><br><span class=\"line\">p2p-listen-endpoint = 0.0.0.0:9877</span><br><span class=\"line\">p2p-server-address = localhost:9877</span><br><span class=\"line\">allowed-connection = any</span><br><span class=\"line\">p2p-peer-address = localhost:9876</span><br><span class=\"line\">signature-provider = EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV=KEY:5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3</span><br><span class=\"line\">producer-name = inita</span><br><span class=\"line\">plugin = eosio::producer_plugin</span><br><span class=\"line\">plugin = eosio::chain_api_plugin</span><br><span class=\"line\">plugin = eosio::history_api_plugin</span><br><span class=\"line\">plugin = eosio::http_plugin</span><br></pre></td></tr></table></figure>\n<p>注意修改以下几项代表了该节点的信息：</p>\n<ul>\n<li>p2p-peer-address &#x3D; localhost:9876  节点(1)的p2p服务地址，通过该配置项使节点(2)链接上节点(1) </li>\n<li>producer-name &#x3D; inita，节点2的出块账户设置为inita</li>\n<li>enable-stale-production &#x3D; false  不允许节点2在不经确认直接出块的功能</li>\n<li>http-server-address &#x3D; 0.0.0.0:8889 该节点的server 端口</li>\n<li>p2p-listen-endpoint &#x3D; 0.0.0.0:9877 p2p网络本机监听端口，监听外部接入的p2p节点</li>\n<li>p2p-server-address &#x3D;  0.0.0.0:9877 p2p网络服务节点端口</li>\n</ul>\n<p>启动节点2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd eostest2</span><br><span class=\"line\">nodeos --data-dir ./ --config-dir ./</span><br></pre></td></tr></table></figure>\n<p>可以看到节点2连上了节点1并进行了同步，此时节点2还不能出块。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">info  2019-01-10T07:20:22.004 thread-0  producer_plugin.cpp:341       on_incoming_block    ] Received block c8ae236b27e648d3... #8533 @ 2019-01-10T07:20:22.000 signed by inita [trxs: 0, lib: 8464, conf: 0, latency: 4 ms]</span><br><span class=\"line\">info  2019-01-10T07:20:22.505 thread-0  producer_plugin.cpp:341       on_incoming_block    ] Received block 76331985072c44a1... #8534 @ 2019-01-10T07:20:22.500 signed by inita [trxs: 0, lib: 8464, conf: 0, latency: 5 ms]</span><br><span class=\"line\">info  2019-01-10T07:20:23.003 thread-0  producer_plugin.cpp:341       on_incoming_block    ] Received block 4efe78f29187c469... #8535 @ 2019-01-10T07:20:23.000 signed by inita [trxs: 0, lib: 8464, conf: 0, latency: 3 ms]</span><br></pre></td></tr></table></figure>\n<p>配置节点(2)可以出块，在节点(1)上执行命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cleos push action eosio setprods &#x27;&#123;&quot;schedule&quot;:[&#123;&quot;producer_name&quot;:&quot;inita&quot;,&quot;block_signing_key&quot;:&quot;EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;&#125;]&#125;&#x27; -p eosio</span><br><span class=\"line\"></span><br><span class=\"line\">info  2019-01-10T07:20:52.005 thread-0  producer_plugin.cpp:1494      produce_block        ] Produced block 000021919d63255e... #8593 @ 2019-01-10T07:20:52.000 signed by inita [trxs: 0, lib: 8572, confirmed: 0]</span><br><span class=\"line\">info  2019-01-10T07:20:52.502 thread-0  producer_plugin.cpp:1494      produce_block        ] Produced block 00002192f489e43e... #8594 @ 2019-01-10T07:20:52.500 signed by inita [trxs: 0, lib: 8572, confirmed: 0]</span><br><span class=\"line\">info  2019-01-10T07:20:53.003 thread-0  producer_plugin.cpp:1494      produce_block        ] Produced block 000021934874223f... #8595 @ 2019-01-10T07:20:53.000 signed by inita [trxs: 0, lib: 8572, confirmed: 0]</span><br></pre></td></tr></table></figure>\n<p>而节点1由出块者变成了同步者：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">info  2019-01-10T07:26:55.004 thread-0  producer_plugin.cpp:341       on_incoming_block    ] Received block c6c6536853f2ee5c... #9319 @ 2019-01-10T07:26:55.000 signed by initb [trxs: 0, lib: 9304, conf: 0, latency: 4 ms]</span><br><span class=\"line\">info  2019-01-10T07:26:55.506 thread-0  producer_plugin.cpp:341       on_incoming_block    ] Received block 8676c0cdc18d2d55... #9320 @ 2019-01-10T07:26:55.500 signed by initb [trxs: 0, lib: 9304, conf: 0, latency: 6 ms]</span><br><span class=\"line\">info  2019-01-10T07:26:56.005 thread-0  producer_plugin.cpp:341       on_incoming_block    ] Received block 2c795666435af362... #9321 @ 2019-01-10T07:26:56.000 signed by initb [trxs: 0, lib: 9304, conf: 0, latency: 5 ms]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-启动节点-3\"><a href=\"#5-启动节点-3\" class=\"headerlink\" title=\"5.启动节点(3)\"></a>5.启动节点(3)</h2><p>节点3的config.ini文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">blocks-dir = &quot;blocks&quot;</span><br><span class=\"line\">bnet-endpoint = 0.0.0.0:4321</span><br><span class=\"line\">http-server-address = 0.0.0.0:8890</span><br><span class=\"line\">p2p-listen-endpoint = 0.0.0.0:9878</span><br><span class=\"line\">p2p-server-address = localhost:9878</span><br><span class=\"line\">allowed-connection = any</span><br><span class=\"line\">p2p-peer-address = localhost:9877</span><br><span class=\"line\">signature-provider = EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV=KEY:5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3</span><br><span class=\"line\">producer-name = initb</span><br><span class=\"line\">plugin = eosio::producer_plugin</span><br><span class=\"line\">plugin = eosio::chain_api_plugin</span><br><span class=\"line\">plugin = eosio::history_api_plugin</span><br><span class=\"line\">plugin = eosio::http_plugin</span><br></pre></td></tr></table></figure>\n<p>节点(3)的出块账户设置为initb，另外要注意的是节点(3)的p2p连接节点不能设置为节点(1)，因为此时节点(1)已经不是生产者了。节点(3)的连接节点应该设置为节点(2)的地址<code>p2p-peer-address = localhost:9877</code>。</p>\n<p>启动节点3：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cd eostest3</span><br><span class=\"line\">$ nodeos --data-dir ./ --config-dir ./</span><br><span class=\"line\"></span><br><span class=\"line\">info  2019-01-10T07:30:49.003 thread-0  producer_plugin.cpp:341       on_incoming_block    ] Received block e745e7582cef727e... #9787 @ 2019-01-10T07:30:49.000 signed by inita [trxs: 0, lib: 9772, conf: 0, latency: 3 ms]</span><br><span class=\"line\">info  2019-01-10T07:30:49.502 thread-0  producer_plugin.cpp:341       on_incoming_block    ] Received block 9fae21e7f5376742... #9788 @ 2019-01-10T07:30:49.500 signed by inita [trxs: 0, lib: 9772, conf: 0, latency: 2 ms]</span><br><span class=\"line\">info  2019-01-10T07:30:50.007 thread-0  producer_plugin.cpp:341       on_incoming_block    ] Received block 0e4320dbc2ac5f73... #9789 @ 2019-01-10T07:30:50.000 signed by inita [trxs: 0, lib: 9772, conf: 0, latency: 7 ms]</span><br></pre></td></tr></table></figure>\n<p>为了让节点3成为出块者，需要执行命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cleos push action eosio setprods &#x27;&#123;&quot;schedule&quot;:[&#123;&quot;producer_name&quot;:&quot;inita&quot;,&quot;block_signing_key&quot;:&quot;EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;&#125;,&#123;&quot;producer_name&quot;:&quot;initb&quot;,&quot;block_signing_key&quot;:&quot;EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;&#125;]&#125;&#x27; -p eosio</span><br><span class=\"line\"></span><br><span class=\"line\">info  2019-01-10T07:34:42.501 thread-0  producer_plugin.cpp:1494      produce_block        ] Produced block 0000280e93eaf396... #10254 @ 2019-01-10T07:34:42.500 signed by initb [trxs: 0, lib: 10240, confirmed: 0]</span><br><span class=\"line\">info  2019-01-10T07:34:43.003 thread-0  producer_plugin.cpp:1494      produce_block        ] Produced block 0000280f2c03ef11... #10255 @ 2019-01-10T07:34:43.000 signed by initb [trxs: 0, lib: 10240, confirmed: 0]</span><br><span class=\"line\">info  2019-01-10T07:34:43.504 thread-0  producer_plugin.cpp:1494      produce_block        ] Produced block 0000281013ed3c65... #10256 @ 2019-01-10T07:34:43.500 signed by initb [trxs: 0, lib: 10240, confirmed: 0]</span><br></pre></td></tr></table></figure>\n<p>可以看到此时节点1和节点2交替出块了，每个节点在轮到它出块时连续生产了12个块。</p>\n","categories":["BlockChain"],"tags":["区块链","eos"]},{"title":"EOS生成账户","url":"/eos_contract_basic_eos_desc/","content":"<blockquote>\n<p>请注意在eos主网上线后，imtoken中的eos已经失效必须转移到主网。将当时映射的私钥保留，现在还需要用到。无比吐槽EOS对小白这么不友好的账户创建系统。</p>\n</blockquote>\n<ul>\n<li>我们可以下载命令行工具，但是无需部署节点，可以连接远程节点。</li>\n<li>-u 选择的节点可以在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lb3NwYXJrLmNvbemAieaLqSzov5nph4znlKjogIHnjKvnmoTkuL7kvosuLw==\">https://eospark.com选择，这里用老猫的举例。<i class=\"fa fa-external-link-alt\"></i></span> -u <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcGkuZW9zbGFvbWFvLmNvbS8=\">https://api.eoslaomao.com/<i class=\"fa fa-external-link-alt\"></i></span> </li>\n<li>nodeos：节点，用来管理账号，上传数据到区块链。</li>\n<li>keosd：钱包管理客户端，用来保存钱包信息。</li>\n<li>cleos：用户（主要是开发人员）与keosd&#x2F;nodeos交互的命令行工具。</li>\n<li>命令行带文字的话都是要替换</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"（一）自己DIV-方式\"><a href=\"#（一）自己DIV-方式\" class=\"headerlink\" title=\"（一）自己DIV 方式\"></a>（一）自己DIV 方式</h2><h3 id=\"1-安装相关服务\"><a href=\"#1-安装相关服务\" class=\"headerlink\" title=\"1.安装相关服务\"></a>1.安装相关服务</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew tap eosio/eosio</span><br><span class=\"line\">brew install eosio</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-创建本地的存储目录\"><a href=\"#2-创建本地的存储目录\" class=\"headerlink\" title=\"2.创建本地的存储目录\"></a>2.创建本地的存储目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir /wwwroot/contracts </span><br><span class=\"line\">cd /wwwroot/contracts </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-开启客户端\"><a href=\"#3-开启客户端\" class=\"headerlink\" title=\"3.开启客户端\"></a>3.开启客户端</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">keosd &amp; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-创建钱包\"><a href=\"#4-创建钱包\" class=\"headerlink\" title=\"4.创建钱包\"></a>4.创建钱包</h3><p>记录钱包密码以备将来使用，创建成功后记得复制备份密钥，解锁的时候需要用到。-n 是钱包名称，–to-console 输出到命令行，-f key.txt 存储到文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos  wallet create -n mywallet --to-console</span><br></pre></td></tr></table></figure>\n<p>或者可以将密码放置到文件，避免遗忘</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos  wallet create -n mywallet  -f key.txt</span><br></pre></td></tr></table></figure>\n<p>查看钱包状态，带*号的说明这个钱包是解锁的状态。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet list</span><br></pre></td></tr></table></figure>\n<p>或者需要解锁命令。钱包锁定的时候需要用到。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet unlock -n mywallet --password 刚创建出来的密钥</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-导入EOS账号的私钥\"><a href=\"#5-导入EOS账号的私钥\" class=\"headerlink\" title=\"5.导入EOS账号的私钥\"></a>5.导入EOS账号的私钥</h3><ul>\n<li>1.公钥的作用：申请EOS主网账户时，必须要用到公钥</li>\n<li>2.私钥的作用：导入钱包，有了钱包才能进行转账等操作。</li>\n</ul>\n<p>如果没有私钥可以进行生成<br><strong>创建时最好断网创建。创建完成后把公钥和私钥抄写到纸上，或者存到U盘等。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos create key --to-console</span><br><span class=\"line\">or</span><br><span class=\"line\">cleos create key -f key.txt</span><br></pre></td></tr></table></figure>\n<p>私钥导入后，可以查看钱包的公钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet keys</span><br></pre></td></tr></table></figure>\n\n<p>有了公钥和私钥后，就可以找个钱包的APP或者网站，注册自己的EOS主网账户了，是需要花钱的。或者找已经有EOS主网账户的朋友，给你创建一个账户。也可以用下述命令行生成。</p>\n<p>导入私钥，请注意导入钱包必须是解锁状态，如果是锁定的，需要用解锁命令解锁。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos wallet import -n mywallet --private-key  EOS映射好的私钥</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-注册新账户，账户名为12个字符。\"><a href=\"#6-注册新账户，账户名为12个字符。\" class=\"headerlink\" title=\"6.注册新账户，账户名为12个字符。\"></a>6.注册新账户，账户名为12个字符。</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos create account eosio &#123;YOUR_ACCOUNT_NAME&#125;   &#123;OWNER_PUBLICKEY&#125; &#123;ACTIVE_PUBLICKEY&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos system newaccount --stake-net &#x27;0.1 EOS&#x27; --stake-cpu &#x27;0.1 EOS&#x27; --buy-ram &#x27;0.1 EOS&#x27; 自动分配的账户名 新注册账户名 EOS映射好的公钥</span><br></pre></td></tr></table></figure>\n\n<p>查询主网自动分配的账户名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cleos get accounts EOS映射好的公钥</span><br></pre></td></tr></table></figure>\n\n<p>帐号名称查看：<span class=\"exturl\" data-url=\"aHR0cDovL2Vvc2ZsYXJlLmlvLw==\">http://eosflare.io/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>如果是映射过，但是忘记了私钥，可以使用这个工具，只需要把以太坊的私钥放进去就能自动计算出来。：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lb3NrZXkuaW8vIy8=\">https://eoskey.io/#/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"（二）可以通过APP免费注册\"><a href=\"#（二）可以通过APP免费注册\" class=\"headerlink\" title=\"（二）可以通过APP免费注册\"></a>（二）可以通过APP免费注册</h2><p>我通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly95bS53aGFsZWV4LmNvbS93aGFsZUV4L2Rhc2gvbG9naW4/aW52aXRlQ29kZT1DTi1JaGQxMUI=\">巨鲸交易所<i class=\"fa fa-external-link-alt\"></i></span>注册了一个，计算后基本上是免费，同时还赠送了一些代币。亲测有效。</p>\n<ul>\n<li>1.注册</li>\n<li>2.约5块钱购买优惠邀请码（基本上开户需要抵押的代币等价）</li>\n<li>3.到手机app上使用邀请码生成账户</li>\n<li>4.绑定账户</li>\n<li>5.每日登陆可领取赠送的代币</li>\n</ul>\n<h2 id=\"（三）通过智能合约转账来生成帐号\"><a href=\"#（三）通过智能合约转账来生成帐号\" class=\"headerlink\" title=\"（三）通过智能合约转账来生成帐号\"></a>（三）通过智能合约转账来生成帐号</h2><p>对这个方式感兴趣的请参考这个博主的合约吧：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zZGFjNDU4Y2ZmOGY=\">https://www.jianshu.com/p/3dac458cff8f<i class=\"fa fa-external-link-alt\"></i></span></p>\n<hr>\n<p>推荐资源：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lb3NmbGFyZS5pby8=\">区块链浏览器<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lb3NwYXJrLmNvbS8=\">区块链浏览器，购买内存也很方便<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lb3NrZXkuaW8v\">如果主网上线前映射过，但是忘记私钥，推荐好用的小工具<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly95bS53aGFsZWV4LmNvbS93aGFsZUV4L2Rhc2gvbG9naW4/aW52aXRlQ29kZT1DTi1JaGQxMUI=\">巨鲸交易所<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lb3MuaW8v\">官方文档<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["BlockChain"],"tags":["区块链","eos"]},{"title":"ERC20转账demo","url":"/erc20_transfer_demo/","content":"<p>这是一个使用 web3 进行转账的demo。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> web3 <span class=\"keyword\">import</span> <span class=\"title class_\">Web3</span>, <span class=\"title class_\">HTTPProvider</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> web3.<span class=\"property\">contract</span> <span class=\"keyword\">import</span> <span class=\"title class_\">ConciseContract</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">web3 = <span class=\"title class_\">Web3</span>(<span class=\"title class_\">HTTPProvider</span>(<span class=\"string\">&#x27;http://localhost:8545&#x27;</span>))</span><br><span class=\"line\"><span class=\"title function_\">print</span>(web3.<span class=\"property\">eth</span>.<span class=\"property\">blockNumber</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">tx=<span class=\"string\">&#x27;0xb1ea3885a25efa295837c287560fe4c137c1bcd3718720330eb68d7f96a5479e&#x27;</span></span><br><span class=\"line\">web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getTransaction</span>(tx)</span><br><span class=\"line\">web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getTransactionReceipt</span>(tx)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">exit</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">web3.<span class=\"property\">eth</span>.<span class=\"property\">defaultAccount</span> = <span class=\"string\">&#x27;0x00B113795f1aA12EE361adC6D281392802d0e025&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">EIP20</span>_ABI_str = <span class=\"string\">&#x27;[&#123;&quot;constant&quot;:true,&quot;inputs&quot;:[],&quot;name&quot;:&quot;mintingFinished&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;bool&quot;&#125;],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:true,&quot;inputs&quot;:[],&quot;name&quot;:&quot;name&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;string&quot;&#125;],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:false,&quot;inputs&quot;:[&#123;&quot;name&quot;:&quot;_spender&quot;,&quot;type&quot;:&quot;address&quot;&#125;,&#123;&quot;name&quot;:&quot;_value&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;name&quot;:&quot;approve&quot;,&quot;outputs&quot;:[],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:true,&quot;inputs&quot;:[],&quot;name&quot;:&quot;totalSupply&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:false,&quot;inputs&quot;:[&#123;&quot;name&quot;:&quot;_from&quot;,&quot;type&quot;:&quot;address&quot;&#125;,&#123;&quot;name&quot;:&quot;_to&quot;,&quot;type&quot;:&quot;address&quot;&#125;,&#123;&quot;name&quot;:&quot;_value&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;name&quot;:&quot;transferFrom&quot;,&quot;outputs&quot;:[],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:true,&quot;inputs&quot;:[],&quot;name&quot;:&quot;decimals&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:false,&quot;inputs&quot;:[],&quot;name&quot;:&quot;unpause&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;bool&quot;&#125;],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:false,&quot;inputs&quot;:[&#123;&quot;name&quot;:&quot;_to&quot;,&quot;type&quot;:&quot;address&quot;&#125;,&#123;&quot;name&quot;:&quot;_amount&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;name&quot;:&quot;mint&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;bool&quot;&#125;],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:true,&quot;inputs&quot;:[],&quot;name&quot;:&quot;paused&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;bool&quot;&#125;],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:true,&quot;inputs&quot;:[&#123;&quot;name&quot;:&quot;_owner&quot;,&quot;type&quot;:&quot;address&quot;&#125;],&quot;name&quot;:&quot;balanceOf&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;balance&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:false,&quot;inputs&quot;:[],&quot;name&quot;:&quot;finishMinting&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;bool&quot;&#125;],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:false,&quot;inputs&quot;:[],&quot;name&quot;:&quot;pause&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;bool&quot;&#125;],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:true,&quot;inputs&quot;:[],&quot;name&quot;:&quot;owner&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;address&quot;&#125;],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:true,&quot;inputs&quot;:[],&quot;name&quot;:&quot;symbol&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;string&quot;&#125;],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:false,&quot;inputs&quot;:[&#123;&quot;name&quot;:&quot;_to&quot;,&quot;type&quot;:&quot;address&quot;&#125;,&#123;&quot;name&quot;:&quot;_value&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;name&quot;:&quot;transfer&quot;,&quot;outputs&quot;:[],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:false,&quot;inputs&quot;:[&#123;&quot;name&quot;:&quot;_to&quot;,&quot;type&quot;:&quot;address&quot;&#125;,&#123;&quot;name&quot;:&quot;_amount&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;,&#123;&quot;name&quot;:&quot;_releaseTime&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;name&quot;:&quot;mintTimelocked&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;address&quot;&#125;],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:true,&quot;inputs&quot;:[&#123;&quot;name&quot;:&quot;_owner&quot;,&quot;type&quot;:&quot;address&quot;&#125;,&#123;&quot;name&quot;:&quot;_spender&quot;,&quot;type&quot;:&quot;address&quot;&#125;],&quot;name&quot;:&quot;allowance&quot;,&quot;outputs&quot;:[&#123;&quot;name&quot;:&quot;remaining&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;constant&quot;:false,&quot;inputs&quot;:[&#123;&quot;name&quot;:&quot;newOwner&quot;,&quot;type&quot;:&quot;address&quot;&#125;],&quot;name&quot;:&quot;transferOwnership&quot;,&quot;outputs&quot;:[],&quot;payable&quot;:false,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;anonymous&quot;:false,&quot;inputs&quot;:[&#123;&quot;indexed&quot;:true,&quot;name&quot;:&quot;to&quot;,&quot;type&quot;:&quot;address&quot;&#125;,&#123;&quot;indexed&quot;:false,&quot;name&quot;:&quot;value&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;name&quot;:&quot;Mint&quot;,&quot;type&quot;:&quot;event&quot;&#125;,&#123;&quot;anonymous&quot;:false,&quot;inputs&quot;:[],&quot;name&quot;:&quot;MintFinished&quot;,&quot;type&quot;:&quot;event&quot;&#125;,&#123;&quot;anonymous&quot;:false,&quot;inputs&quot;:[],&quot;name&quot;:&quot;Pause&quot;,&quot;type&quot;:&quot;event&quot;&#125;,&#123;&quot;anonymous&quot;:false,&quot;inputs&quot;:[],&quot;name&quot;:&quot;Unpause&quot;,&quot;type&quot;:&quot;event&quot;&#125;,&#123;&quot;anonymous&quot;:false,&quot;inputs&quot;:[&#123;&quot;indexed&quot;:true,&quot;name&quot;:&quot;owner&quot;,&quot;type&quot;:&quot;address&quot;&#125;,&#123;&quot;indexed&quot;:true,&quot;name&quot;:&quot;spender&quot;,&quot;type&quot;:&quot;address&quot;&#125;,&#123;&quot;indexed&quot;:false,&quot;name&quot;:&quot;value&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;name&quot;:&quot;Approval&quot;,&quot;type&quot;:&quot;event&quot;&#125;,&#123;&quot;anonymous&quot;:false,&quot;inputs&quot;:[&#123;&quot;indexed&quot;:true,&quot;name&quot;:&quot;from&quot;,&quot;type&quot;:&quot;address&quot;&#125;,&#123;&quot;indexed&quot;:true,&quot;name&quot;:&quot;to&quot;,&quot;type&quot;:&quot;address&quot;&#125;,&#123;&quot;indexed&quot;:false,&quot;name&quot;:&quot;value&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;name&quot;:&quot;Transfer&quot;,&quot;type&quot;:&quot;event&quot;&#125;]&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">EIP20</span>_ABI = json.<span class=\"title function_\">loads</span>(<span class=\"title class_\">EIP20</span>_ABI_str)</span><br><span class=\"line\"></span><br><span class=\"line\">token_contract_address = <span class=\"string\">&#x27;0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">token = web3.<span class=\"property\">eth</span>.<span class=\"title function_\">contract</span>(</span><br><span class=\"line\">token_contract_address,</span><br><span class=\"line\">abi=<span class=\"title class_\">EIP20</span>_ABI,</span><br><span class=\"line\"><span class=\"title class_\">ContractFactoryClass</span>=<span class=\"title class_\">ConciseContract</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">totalSupply = token.<span class=\"title function_\">totalSupply</span>()</span><br><span class=\"line\">balance = token.<span class=\"title function_\">balanceOf</span>(<span class=\"string\">&#x27;0x00B113795f1aA12EE361adC6D281392802d0e025&#x27;</span>)</span><br><span class=\"line\">tx = token.<span class=\"title function_\">transfer</span>(</span><br><span class=\"line\"><span class=\"string\">&#x27;0x00845daA689b1374ecAf4CfEcfBfc86D41ec7735&#x27;</span>,</span><br><span class=\"line\">web3.<span class=\"title function_\">toWei</span>(<span class=\"number\">2</span>,<span class=\"string\">&quot;ether&quot;</span>),</span><br><span class=\"line\">transact=&#123;<span class=\"string\">&#x27;from&#x27;</span>:<span class=\"string\">&#x27;0x00B113795f1aA12EE361adC6D281392802d0e025&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">tx = <span class=\"string\">&#x27;0xb3b82923d8d9b5d28fbab7f7281704f033362ac9f293e6638227efb44ff85499&#x27;</span></span><br><span class=\"line\">web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getTransaction</span>(tx)</span><br><span class=\"line\">web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getTransactionReceipt</span>(tx)</span><br><span class=\"line\"></span><br><span class=\"line\">web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getTransactionCount</span>(web3.<span class=\"property\">eth</span>.<span class=\"property\">coinbase</span>)</span><br><span class=\"line\">web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getTransactionCount</span>(<span class=\"string\">&#x27;0x00B113795f1aA12EE361adC6D281392802d0e025&#x27;</span>)</span><br></pre></td></tr></table></figure>","categories":["BlockChain"],"tags":["eth","web3"]},{"title":"Ethereum私有链和web3.js使用及pm2管理","url":"/ethereum_private_web3_pm2/","content":"<h3 id=\"安装以太坊客户端-Geth\"><a href=\"#安装以太坊客户端-Geth\" class=\"headerlink\" title=\"安装以太坊客户端(Geth)\"></a>安装以太坊客户端(Geth)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install software-properties-common</span><br><span class=\"line\">sudo add-apt-repository -y ppa:ethereum/ethereum</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install ethereum</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h3 id=\"安装进程管理工具\"><a href=\"#安装进程管理工具\" class=\"headerlink\" title=\"安装进程管理工具\"></a>安装进程管理工具</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1VuaXRlY2gvcG0y\">pm2<i class=\"fa fa-external-link-alt\"></i></span> 需要 node 环境 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//nvm install node</span><br><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</span><br><span class=\"line\">export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</span><br><span class=\"line\">source ~/git/nvm/nvm.sh</span><br><span class=\"line\">nvm install 7</span><br><span class=\"line\"></span><br><span class=\"line\">//npm install -g pm2</span><br><span class=\"line\">source ~/.bashrc</span><br><span class=\"line\">export npm_config_registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-geth-配置文件\"><a href=\"#启动-geth-配置文件\" class=\"headerlink\" title=\"启动 geth 配置文件\"></a>启动 geth 配置文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/geth.json</span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;name&quot;              : &quot;geth&quot;,</span><br><span class=\"line\">    &quot;cwd&quot;               : &quot;/usr/bin/&quot;,</span><br><span class=\"line\">    &quot;script&quot;            : &quot;geth&quot;,</span><br><span class=\"line\">    &quot;args&quot;              : &quot;--rpcapi eth,web3 --rpc --dev --datadir /home/username/geth_private_data&quot;,</span><br><span class=\"line\">    &quot;log_date_format&quot;   : &quot;YYYY-MM-DD HH:mm Z&quot;,</span><br><span class=\"line\">    &quot;out_file&quot;        : &quot;/home/username/geth_private_data/log/geth_out.log&quot;,</span><br><span class=\"line\">    &quot;error_file&quot;    : &quot;/home/username/geth_private_data/log/geth_err.log&quot;,</span><br><span class=\"line\">    &quot;log_file&quot;        : &quot;/home/username/geth_private_data/log/geth_log.log&quot;,</span><br><span class=\"line\">    &quot;merge_logs&quot;        : false,</span><br><span class=\"line\">    &quot;watch&quot;             : false,</span><br><span class=\"line\">    &quot;max_restarts&quot;      : 10,</span><br><span class=\"line\">    &quot;exec_interpreter&quot;  : &quot;none&quot;,</span><br><span class=\"line\">    &quot;exec_mode&quot;         : &quot;fork_mode&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>pm2 start geth.json</code> 即可启动 geth 另外如果不想使用 pm2 ,直接启动私有链请查看下面这种方式：</p>\n<h4 id=\"1-新建一个-shell-脚本文件\"><a href=\"#1-新建一个-shell-脚本文件\" class=\"headerlink\" title=\"1.  新建一个 shell 脚本文件\"></a>1.  新建一个 shell 脚本文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/geth_private.sh</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">geth=<span class=\"variable\">$&#123;GETH:-geth&#125;</span></span><br><span class=\"line\"><span class=\"variable\">$geth</span> --datadir data --networkid 31415926 --rpc --rpcapi <span class=\"string\">&quot;admin,debug,eth,miner,net,personal,shh,txpool,web3&quot;</span> rpcaddr <span class=\"string\">&quot;0.0.0.0&quot;</span> --rpccorsdomain <span class=\"string\">&quot;*&quot;</span> --nodiscover console</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-更改文件属性问可执行\"><a href=\"#2-更改文件属性问可执行\" class=\"headerlink\" title=\"2.  更改文件属性问可执行\"></a>2.  更改文件属性问可执行</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x geth_private.sh</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-三种方式执行-shell-启动脚本\"><a href=\"#3-三种方式执行-shell-启动脚本\" class=\"headerlink\" title=\"3.  三种方式执行 shell 启动脚本\"></a>3.  三种方式执行 shell 启动脚本</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">nohup ./geth_private.sh 0&lt;&amp;- &amp;&gt;/dev/null &amp; // 守护进程启动私有链节点</span><br><span class=\"line\">nohup ./geth_private.sh 0&lt;&amp;- &amp;&gt; /tmp/geth.log  &amp; // 守护进程启动私有链节点且把日志打印到 /tmp/geth.log 文件</span><br><span class=\"line\">./geth_private.sh //启动私有链节点并进入交互控制台</span><br></pre></td></tr></table></figure>\n\n<p>第二种打印日志的方式非常有用。其一是如果 geth 启动不成功，可以在日志中看到具体错误体制。其二是在测试链中部署智能合约(切记要确保 geth 中有一个账户处于解锁状态且有一定量的 ether,一般这个账户是 coinbase)被确认时会输出合约地址到日志文件中。在私有测试链中，进入 js 交互控制台，输入 <strong>miner.start(1)</strong> 挖矿，控制台输出类似 <code>Mined block (#72 / 517dcfd1). Wait 5 blocks for confirmation</code> 则表示合约部署成功。</p>\n<h3 id=\"Ethereum-JavaScript-API\"><a href=\"#Ethereum-JavaScript-API\" class=\"headerlink\" title=\"Ethereum JavaScript API\"></a>Ethereum JavaScript API</h3><p>Ethereum 实现了<strong>javascript runtime environment</strong> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2dvLWV0aGVyZXVtL3dpa2kvSmF2YVNjcmlwdC1Db25zb2xl\">JavaScript Console<i class=\"fa fa-external-link-alt\"></i></span>。 Ethereum’s Javascript console exposes the full <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9KYXZhU2NyaXB0LUFQSQ==\">web3 JavaScript Dapp API<i class=\"fa fa-external-link-alt\"></i></span> and the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2dvLWV0aGVyZXVtL3dpa2kvSmF2YVNjcmlwdC1Db25zb2xlI2phdmFzY3JpcHQtY29uc29sZS1hcGk=\">admin API<i class=\"fa fa-external-link-alt\"></i></span>. 当你安装好 geth 并启动服务之后，通过<strong>Non-interactive use: JSRE script mode</strong> 命令(例如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2dvLWV0aGVyZXVtL3dpa2kvTWFuYWdpbmcteW91ci1hY2NvdW50cyNleGFtcGxlcw==\">Managing accounts<i class=\"fa fa-external-link-alt\"></i></span>) 或者 <strong>Interactive use: the JSRE REPL Console</strong> 进入控制台操作 geth </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ geth attach ipc:/some/custom/path</span><br><span class=\"line\">$ geth attach http://191.168.1.1:8545</span><br><span class=\"line\">$ geth attach ws://191.168.1.1:8546</span><br></pre></td></tr></table></figure>\n\n<p>如果你想单独在 node 服务中写代码操作 geth ，添加 web3.js 即可。 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dlYjMuanM=\">web3.js<i class=\"fa fa-external-link-alt\"></i></span> 实现了使用 node 操作 geth 。使用的前提要求启动 geth 启动时 rpcapi 包含了 <code>web3</code>,在上面的配置文件中 <code>&quot;args&quot; : &quot;--rpcapi eth,web3 --rpc --dev --datadir /home/username/geth_private_data&quot;</code>已经设置好了。 同时可以看看参考连接详细了解：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2dvLWV0aGVyZXVtL3dpa2kvTWFuYWdlbWVudC1BUElz\">Management APIs<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9KYXZhU2NyaXB0LUFQSQ==\">Web3 JavaScript Ðapp API<i class=\"fa fa-external-link-alt\"></i></span> 编译智能合约用到</li>\n</ul>\n<p>安装:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//install web3.js</span><br><span class=\"line\">npm install web3</span><br><span class=\"line\">//install solidity for smart contract develope</span><br><span class=\"line\">sudo add-apt-repository ppa:ethereum/ethereum</span><br><span class=\"line\">sudo add-apt-repository ppa:ethereum/ethereum-dev</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install solc</span><br></pre></td></tr></table></figure>\n\n<p>web.js 是一个 node 库，实现了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9KYXZhU2NyaXB0LUFQSSN3ZWIzanMtYXBpLXJlZmVyZW5jZQ==\">Web3.js API Reference<i class=\"fa fa-external-link-alt\"></i></span> 另外有一点需要注意的是：当你都写好并且编译好智能合约之后，接下来的新建和部署智能合约到区块链上需要确保有一个解锁的账号（EOA）及账户有一定的资金</p>\n<blockquote>\n<p>Create and deploy a contract Before you begin this section, make sure you have both an unlocked account as well as some funds. <span class=\"exturl\" data-url=\"aHR0cDovL2V0aGRvY3Mub3JnL2VuL2xhdGVzdC9jb250cmFjdHMtYW5kLXRyYW5zYWN0aW9ucy9jb250cmFjdHMuaHRtbCNjcmVhdGUtYW5kLWRlcGxveS1hLWNvbnRyYWN0\">Create and deploy a contract<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n<p>推荐阅读：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2V0aGVyZXVtLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8xMjUvaG93LWRvLWktc2V0LXVwLWEtcHJpdmF0ZS1ldGhlcmV1bS1uZXR3b3Jr\">How do I set up a private ethereum network?<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["BlockChain"],"tags":["eth","geth","web3","pm2"]},{"title":"Geth命令选项介绍","url":"/geth_order/","content":"<h2 id=\"基础选项\"><a href=\"#基础选项\" class=\"headerlink\" title=\"基础选项\"></a>基础选项</h2><p><code>--datadir “/your/database/path”</code><br>指定以太坊数据和密钥目录，在开启私有链时需指定私有链目录，默认为公有链目录。</p>\n<p><code>--keystore  “/your/keystore/path”</code><br>指定keystore文件（账户密钥文件）目录，默认值在datadir目录下</p>\n<p><code>--networkid value</code><br>指定以太坊网络id，其实就是区块链网络的身份标示，公有链为1，测试链为3，默认启动id为1</p>\n<p><code>--testnet</code><br>启动以太坊测试链</p>\n<p><code>--dev</code><br>启动以太坊开发测试链，只有自身一个节点</p>\n<p><code>--identity value</code><br>自定义节点名称，便于节点之间识别 以“myEthNodeName”为名称启动私有链</p>\n<span id=\"more\"></span>\n\n<h2 id=\"查看本地节点信息\"><a href=\"#查看本地节点信息\" class=\"headerlink\" title=\"查看本地节点信息\"></a>查看本地节点信息</h2><p><code>--fast</code><br>启动快速区块同步模式，在同步到最新区块后，转化为正常区块同步模式。注意：在已经进行过正常区块同步的链上，不要使用该命令，也就是说，使用该选项必须从区块同步最初开始，当同步到最新区块后，可以正常同步区块，下次启动时就可以不用输入次选项，区块高度也会达到快速同步高度。</p>\n<p><code>--light</code><br>轻节点模式，只会同步区块头信息，可以完成基本的命令操作 Enable light client mode</p>\n<p><code>--lightserv value</code><br>设置轻节点模式的请求时间最大占比，由于轻节点不会同步区块内部信息，当查询区块信息时（交易信息，特定区块高度信息等）会向全节点其他节点请求数据，设置最大请求时间占比。范围为：0-90，默认为0</p>\n<p><code>--lightpeers value</code><br>设置轻节点模式下，允许连接的最大节点数，默认为20</p>\n<p><code>--lightkdf</code><br>降低轻节CPU和RAM占有率</p>\n<h2 id=\"性能调节选项\"><a href=\"#性能调节选项\" class=\"headerlink\" title=\"性能调节选项\"></a>性能调节选项</h2><p><code>–cache value</code><br>调整内存分配 最小16MB，默认128MB</p>\n<p><code>–trie-cache-gens value</code><br>内存中存储节点数，默认为120</p>\n<h2 id=\"与账户相关选项\"><a href=\"#与账户相关选项\" class=\"headerlink\" title=\"与账户相关选项\"></a>与账户相关选项</h2><p><code>--unlock</code> value<br>指定要解锁的账户地址，不指定密码文件则为交互模式</p>\n<p><code>--password</code> &#x2F;your&#x2F;password&#x2F;file&#x2F;path<br>通过密码文件解锁相应账户，非交互模式</p>\n<h2 id=\"API和命令行相关选项\"><a href=\"#API和命令行相关选项\" class=\"headerlink\" title=\"API和命令行相关选项\"></a>API和命令行相关选项</h2><p>默认情况下，geth节点不会启动http和weboscket服务，并且由于安全原因，并不是所有功能都通过这些接口提供</p>\n<p><code>--rpc</code><br>开启 HTTP-RPC 服务</p>\n<p><code>--rpcaddr value</code><br>指定HTTP-RPC 服务监听地址，默认为“localhost”</p>\n<p><code>--rpcport value</code><br>指定HTTP-RPC 服务监听端口，默认为8545</p>\n<p><code>--rpcapi value</code><br>指定HTTP-RPC 开启API，默认为 “eth,net,web3”</p>\n<p><code>--ws</code><br>开启 WS-RPC 服务</p>\n<p><code>--wsaddr value</code><br>指定WS-RPC 服务监听地址，默认为 “localhost”</p>\n<p><code>--wsport value</code><br>指定 WS-RPC 服务监听端口，默认值：8546</p>\n<p><code>--wsapi value</code><br>指定WS-RPC 开启API，默认为 “eth,net,web3”</p>\n<p><code>--wsorigins value</code><br>指定允许“websockets”请求的地址</p>\n<p><code>--ipcdisable</code><br>关闭 IPC-RPC 服务</p>\n<p><code>--ipcapi value</code><br>指定WS-RPC 开启API，默认为”admin,debug,eth,miner,net,personal,shh,txpool,web3″</p>\n<p><code>--ipcpath &quot;geth.ipc&quot;</code><br>指定IPC接口</p>\n<p><code>--rpccorsdomain value</code><br>指定可以访问APi的domain地址，设置为“*”则任何地址都可以访问，这样做不安全。</p>\n<p><code>--jspath /loadScript/path</code><br>指定loadScript路径,默认为”.”</p>\n<p><code>--exec value</code><br>JavaScript解释器，解释Js 语句,只能与console／attach同时使用<br>e.g：<br><code>geth --jspath &quot;/tmp&quot; --exec &#39;loadScript(&quot;checkbalances.js&quot;)&#39; attach</code></p>\n<p><code>--preload value</code><br>自定义JavaScript文件加载到控制台中，这可以用于加载常用的功能，如设置web3等。<br>e.g:<br><code>geth --preload &quot;/my/scripts/folder/utils.js,/my/scripts/folder/contracts.js&quot;console</code></p>\n<h2 id=\"网络相关选项\"><a href=\"#网络相关选项\" class=\"headerlink\" title=\"网络相关选项\"></a>网络相关选项</h2><p><code>--bootnodes value</code><br>手动添加连接节点,对私有链不起作用。</p>\n<p>e.g：<br><code>geth --bootnodes enode://pubkey1@ip1:port1,enode://pubkey2@ip2:port2,enode://pubkey3@ip3:port3</code></p>\n<p><code>--port value</code><br>指定以太坊网络监听端口，默认为: 30303。</p>\n<p><code>--maxpeers value</code><br>设置允许最大连接节点数目，默认为25</p>\n<p><code>--maxpendpeers value</code><br>设置最大待定连接节点数目，默认为0</p>\n<p><code>--nat value</code><br>提供对通用网络端口映射协议的访问<br>(any|none|upnp|pmp|extip:)，默认: “any”</p>\n<p><code>--nodiscover</code><br>关闭自动连接节点，但是可以手动添加节点，在搭建私有链时，为避免其他节点连入私有链，可使用该命令。</p>\n<p><code>--v5disc</code><br>启动实验性RLPx V5 机制（没研究过）</p>\n<p><code>--nodekey value</code><br>引入P2P节点密钥文件</p>\n<p><code>--nodekeyhex value</code><br>十六进制的P2P节点密钥，为用于测试</p>\n<h2 id=\"挖矿相关选项\"><a href=\"#挖矿相关选项\" class=\"headerlink\" title=\"挖矿相关选项\"></a>挖矿相关选项</h2><p><code>--mine</code><br>开启挖矿，默认为CPU挖矿</p>\n<p><code>--minerthreads value</code><br>挖矿占用CPU线程数，默认为4</p>\n<p><code>--autodag</code><br>自动生成DAG</p>\n<p><code>--etherbase value</code><br>指定矿工账号，默认为keystore中首个账号</p>\n<p><code>--targetgaslimit value</code><br>设置矿工挖矿预期GAS值，默认为“4712388”</p>\n<p><code>--gasprice value</code><br>接受的交易最少GAS值，默认为 “20000000000”</p>\n<p><code>--extradata value</code><br>给矿工设置附加信息，默认值为节点客户端的版本</p>\n","categories":["BlockChain"],"tags":["区块链","eth","geth"]},{"title":"从技术角度解读EOS到底做了什么？","url":"/eos_technology_explain/","content":"<p>– 一杯白水，不知淡味。</p>\n<p>来看看白皮书中描述的功能：EOS 提供帐户，身份验证，数据库，异步通信以及在数以百计的CPU或群集上的程序调度。</p>\n<p>那么又如何理解这些功能，这些功能又有什么用处呢？</p>\n<h2 id=\"1-系统之我理解\"><a href=\"#1-系统之我理解\" class=\"headerlink\" title=\"1.系统之我理解\"></a>1.系统之我理解</h2><p>我们知道一个管理系统，一般有用户系统，权限管理系统，日志系统，ORM，数据库操作等，这些是可以进行通用的模块。所以大家在开发过程中，为了避免重复造轮子，那么将这些模块提炼出来，写成通用的脚手架，下次有人想做一个包括这些功能的后台系统的时候，就不用自己在开发这些贡呢，直接使用即可。</p>\n<p>那么看看EOS来做的基础性封装，帐户，身份验证，数据库，异步通信等等。。。看起来是不是稍微有些眼熟，那么基于这些共同模块之上，脑补一下在开发一个相关系统是不是很简单？</p>\n<p>再来看看在EOS上开发DAPP，一个小的应用程序，开发者只需要关心自己想要开发的功能，是不是很有意思。比如你想做个《EOS猫咪》，那么你就只需要关心猫咪怎么出生，怎么养成，怎么配偶，怎么生产下一代，是不是减少了很多很多工作量。而且也不需要将自己的应用去放到各大应用市场，即可直接拥有用户资源，是不是很奇妙，全世界范围的通讯，节约了极大的成本。以太猫的出现，让我们知道原有的技术架构体系，传统区块链技术已经不能满足高TPS的应用场景。这个节点EOS出现了，意不意外，惊不惊喜？</p>\n<span id=\"more\"></span>\n\n<h2 id=\"2-token之我理解\"><a href=\"#2-token之我理解\" class=\"headerlink\" title=\"2.token之我理解\"></a>2.token之我理解</h2><p>大家总问持有token的好处是什么？<br>很简单，做一个包租婆啊。<br>有很多及其聪明的开发者，需要token来分享带宽，怎么办呢？去买吗，但是买很多带宽很贵的，创业者没有那么多钱啊，那么怎么办呢？租啊，从我们小散手中来租赁带宽不是更好吗？节约成本，享受高效性能。</p>\n<p>当然，还可以分糖果啊。天然的分叉机制。想想比特分叉就知道这个是如何操作了。</p>\n<p>然后当大家都在出租，没有卖出，市场流通不足，会如何呢？你在等什么？</p>\n<h3 id=\"建仓技巧：\"><a href=\"#建仓技巧：\" class=\"headerlink\" title=\"建仓技巧：\"></a>建仓技巧：</h3><p>1.极看好，直接All In。<br>2.不懂，大家都说好：直接入手三分之一，剩下的资金择时或者择价格进行买入。</p>\n<p>重点，闲钱投资！</p>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"以太坊智能合约标准解释","url":"/eth_contract_standard_explain/","content":"<blockquote>\n<p>大家都在用最近比较火的以太猫举例。本文也来使用进行进行解释。以太坊代币合约 ERC-20和ERC-721的区别。</p>\n</blockquote>\n<h1 id=\"以太猫-Cryptokitties\"><a href=\"#以太猫-Cryptokitties\" class=\"headerlink\" title=\"以太猫 Cryptokitties\"></a>以太猫 Cryptokitties</h1><p>以太猫 Cryptokitties 带火了ERC-721 token合约。<br>12月流行的 以太猫 （Cryptokitties）, 竟然造成了以太坊的拥堵，现在讲解以太猫带火的ERC-721 token合约是什么？</p>\n<p>在github 里cryptokitties-bounty程序代码提到，用 ERC-721 token 合约来定义每只以太猫：<code>“CryptoKitties are non-fungible tokens (see ERC #721) that are indivisible and unique.”</code></p>\n<p>以太猫是非同质代币，不可分割且独一无二。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"ERC-721-token合约\"><a href=\"#ERC-721-token合约\" class=\"headerlink\" title=\"ERC-721 token合约\"></a>ERC-721 token合约</h1><h2 id=\"简要\"><a href=\"#简要\" class=\"headerlink\" title=\"简要\"></a>简要</h2><p>一种针对非同质代币的标准接口。</p>\n<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>本标准提出的用于智能合约内非同质代币（non-fungible tokens,以下简称 “NFTs”），操作标准API的实现方法。另外，本标准还提供了用于跟踪和所有权转移的基本功能。</p>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>一个标准的接口允许任何非功能性测试Ethereum由通用的应用程序。 特别是，它将允许非功能性测试跟踪在标准化的钱包和交易所交易。</p>\n<h1 id=\"ERC20-token合约\"><a href=\"#ERC20-token合约\" class=\"headerlink\" title=\"ERC20 token合约\"></a>ERC20 token合约</h1><h2 id=\"简要-1\"><a href=\"#简要-1\" class=\"headerlink\" title=\"简要\"></a>简要</h2><p>标准接口的代币。</p>\n<h2 id=\"摘要-1\"><a href=\"#摘要-1\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>以下的标准允许在智能合约内实现标准的代币接口。这个标准提供了代币的基本功能，以及允许代币被批准，这样它们就可以由另一个链第三方使用。（这个标准相当于定义了一个接口，当你的智能合约实现了这个接口以后，钱包软件就能通过调用这些接口，监听事件等操作你的代币。）</p>\n<h2 id=\"动机-1\"><a href=\"#动机-1\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>一个标准的接口，允许任何基于以太坊上的代币被其他应用程序使用，从钱包到第三方交易所。</p>\n<h1 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h1><p>ERC721代币的核心是“Non-Fungible Tokens”，非同质代币。怎么理解“非同质”？</p>\n<p>“以太猫”为例，每只以太猫拥有独一无二的基因，每只小猫和繁衍的后代也都是独一无二的。从原理上来看，每只以太猫在区块链平台上都是一条独一无二的代码，因此没有两只外表和特性完全相同的小猫。而且，ERC721每个代币都有一个独立唯一的tokenid，例如在cryptokitties里就是猫的id，独一无二。</p>\n<p>简单理解就是： ERC-721 是用来定义 Non-fungible token (非同质代币，不可替代的代币)。每个代币是 unique (唯一的)，而ERC-20 每个 token 都相同，看看Imtoken钱包。</p>\n<hr>\n<p>本文概念引自：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzcyMQ==\">erc721<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvYmxvYi9tYXN0ZXIvRUlQUy9laXAtMjAubWQ=\">erc20<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>名词：</p>\n<ul>\n<li><p>EIPstands for Ethereum Improvement Proposals : 以太坊改进建议</p>\n</li>\n<li><p>ERC: 是以太坊代币标准的缩写</p>\n</li>\n<li><p>Non-fungible tokens: 非同质代币</p>\n</li>\n<li><p>Token：一个token合约就是包含了一个对账户地址及其余额的映射的智能合约（SmartContract）。</p>\n</li>\n</ul>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"以太坊相关资源","url":"/eth_resources/","content":"<ol>\n<li>以太坊官方网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldGhlcmV1bS5vcmcv\">https://ethereum.org/<i class=\"fa fa-external-link-alt\"></i></span><br>  该网站为以太坊的官方网站，有详细的以太坊介绍和各种连接地址，推荐详细看一看</li>\n<li>以太坊所有源码地址（官方）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtLw==\">https://github.com/ethereum/<i class=\"fa fa-external-link-alt\"></i></span><br>  该github为以太坊所有项目的源码地址，以及更新和发布。</li>\n<li>以太坊Homestead文档地址（官方）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ldGhkb2NzLm9yZy9lbi9sYXRlc3QvaW5kZXguaHRtbA==\">http://www.ethdocs.org/en/latest/index.html<i class=\"fa fa-external-link-alt\"></i></span><br>  该网站为以太坊的详细介绍文档，基本包括了以太坊的方方面面，如果有什么不清楚的原理和应用，基本都可以在这里找到答案和线索。</li>\n<li>以太坊网络状态地址（官方）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldGhzdGF0cy5uZXQv\">https://ethstats.net/<i class=\"fa fa-external-link-alt\"></i></span><br>  该网站能全面的显示网络状态，包括节点、难度、算力等等，非常直观</li>\n<li>以太坊资源网站（官方）：<span class=\"exturl\" data-url=\"aHR0cDovL2V0aGVyLmZ1bmQv\">http://ether.fund/<i class=\"fa fa-external-link-alt\"></i></span><br>  该网站提供了以太坊很多应用资源，比如市场情况、合约辅助工具、已发布的智能合约、以太坊网络、DAAP等，方便开发和发布。</li>\n<li>Solidity编程文档（官方）：<span class=\"exturl\" data-url=\"aHR0cDovL3NvbGlkaXR5LnJlYWR0aGVkb2NzLmlvL2VuL2xhdGVzdC8=\">http://solidity.readthedocs.io/en/latest/<i class=\"fa fa-external-link-alt\"></i></span><br>  该网站提供了以太坊Solidity语言的全面参考手册，学习Solidity语言必备。</li>\n<li>以太坊网络扫描（官方）：<span class=\"exturl\" data-url=\"aHR0cDovL2V0aGVyc2Nhbi5pby8=\">http://etherscan.io/<i class=\"fa fa-external-link-alt\"></i></span><br>  该网站提供了以太坊网络的各种状态，比如帐号的详情、TOKEN详情，难度详情、区块详情，非常方便和直观。</li>\n<li>以太坊官方博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmV0aGVyZXVtLm9yZy8=\">https://blog.ethereum.org/<i class=\"fa fa-external-link-alt\"></i></span> </li>\n<li>以太坊wiki百科地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraQ==\">https://github.com/ethereum/wiki/wiki<i class=\"fa fa-external-link-alt\"></i></span><br>  在这里有白皮书、黄皮书以及开发指南，比较全面。 </li>\n<li>以太坊中文爱好者网站：<span class=\"exturl\" data-url=\"aHR0cDovL2V0aGZhbnMub3JnLw==\">http://ethfans.org/<i class=\"fa fa-external-link-alt\"></i></span><br>  该网站为国内以太坊爱好者自发建立的网站，内容比较全，信息更新很快。 </li>\n<li>以太坊的gitter的实时交流网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXR0ZXIuaW0vb3Jncy9ldGhlcmV1bS9yb29tcw==\">https://gitter.im/orgs/ethereum/rooms<i class=\"fa fa-external-link-alt\"></i></span><br>  该网站是以太坊的gitter chart的网站，根据项目分了很多房间，只要你提问题，大部分有人回答，很不错，不过只能英语交流。 </li>\n<li>以太坊的官方论坛：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bS5ldGhlcmV1bS5vcmcv\">https://forum.ethereum.org/<i class=\"fa fa-external-link-alt\"></i></span><br>  官方论坛，没什么好说的，我遇到的几个问题，都是在这里找到的答案 </li>\n<li>以太坊第三方强大的IDE：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saXZlLmV0aGVyLmNhbXAv\">https://live.ether.camp/<i class=\"fa fa-external-link-alt\"></i></span><br>  这个是第三方发布的Solidity IDE，我看了一下，很强大，强大到还不太会用，他的目标是企业级IDE，老外用的较多。 </li>\n<li>以太坊开发框架Truffle说明书：<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGUucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0Lw==\">http://truffle.readthedocs.io/en/latest/<i class=\"fa fa-external-link-alt\"></i></span><br>  以太坊目前很流行的开发框架Truffle的说明书，这个框架比较流行。 </li>\n<li>以太坊开发框架dapple说明书：<span class=\"exturl\" data-url=\"aHR0cDovL2RhcHBsZS5yZWFkdGhlZG9jcy5pby9lbi9tYXN0ZXIv\">http://dapple.readthedocs.io/en/master/<i class=\"fa fa-external-link-alt\"></i></span><br>  这个开发框架是在gitter chart上看到的，感觉用的人不多，先观察 </li>\n<li>以太坊官方推荐开发框架Meteor说明书：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9EYXBwLXVzaW5nLU1ldGVvcg==\">https://github.com/ethereum/wiki/wiki/Dapp-using-Meteor<i class=\"fa fa-external-link-alt\"></i></span><br>  这个开发框架是以太坊官方推荐的，写进了以太坊的官方wiki，值得学习，当然，以太坊官方经常转换方向，以后换别的也没准</li>\n</ol>\n<span id=\"more\"></span>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"区块链元年的认知升级之路","url":"/way_of_metacognitive_upgrade/","content":"<p>2017年区块链爆发元年。不谈虚拟货币的增幅，虽然毫无疑问是很高的，相当多的小伙伴踏上了财富自由之路。来站在从业者的角度简单谈一谈认知升级之路。</p>\n<h1 id=\"V1-0-什么是比特币\"><a href=\"#V1-0-什么是比特币\" class=\"headerlink\" title=\"V1.0 什么是比特币\"></a>V1.0 什么是比特币</h1><p>2009年的一天，神秘人”中本聪”横空出世，发了一篇白皮书写到，我们应该实现一种点对点的电子现金系统，也就是比特币。它使得在线支付能够直接由一方发起并支付给另外一方，中间不需要通过任何金融机构。</p>\n<p>比特币横跨多个专业如：密码学，金融，互联网，利用一系列的机制如时间戳服务器、匿名、工作量证明（POW ），完成一个点对点的电子现金系统。它是去中心化，在全世界流通，专属所有权的。匿名，免税，免监管，无国界跨境方便，极大的提升了资金的转动速度。</p>\n<p>比特币彻底打开了潘多拉魔盒，从此数字货币正式踏上舞台，距互联网之后，一个新的革命，世界范围内的金融革命！区块链技术进入了1.0时代。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"V2-0-什么是ETH\"><a href=\"#V2-0-什么是ETH\" class=\"headerlink\" title=\"V2.0 什么是ETH\"></a>V2.0 什么是ETH</h1><p>比特币开创了去中心化密码货币的先河，五年多的时间充分检验了区块链技术的可行性和安全性。比特币的区块链事实上是一套分布式的数据库，如果再在其中加进一个符号——比特币，并规定一套协议使得这个符号可以在数据库上安全地转移，并且无需信任第三方，这些特征的组合完美地构造了一个货币传输体系——比特币网络。</p>\n<p>然而比特币并不完美，其中协议的扩展性是一项不足，例如比特币网络里只有一种符号——比特币，用户无法自定义另外的符号，这些符号可以是代表公司的股票，或者是债务凭证等，这就损失了一些功能。另外，比特币协议里使用了一套基于堆栈的脚本语言，这语言虽然具有一定灵活性，使得像多重签名这样的功能得以实现，然而却不足以构建更高级的应用，例如去中心化交易所等。以太坊从设计上就是为了解决比特币扩展性不足的问题。</p>\n<p>比特币网络事实上是一套分布式的数据库，而以太坊则更进一步，她可以看作是一台分布式的计算机：区块链是计算机的ROM，合约是程序，而以太坊的矿工们则负责计算，担任CPU的角色。这台计算机不是、也不可能是免费使用的，不然任何人都可以往里面存储各种垃圾信息和执行各种鸡毛蒜皮的计算，使用它至少需要支付计算费和存储费，当然还有其它一些费用。</p>\n<p>解释一下以太坊的运行原理，也就是以太坊自身是一套图灵完备的脚本，我们每个人可以在上边发行一个智能合约，合约独立运行在整个网络中，任何人都可以查看并依据合约的约定去完成一些功能。</p>\n<p>从此发布一个不可更改的合约，一个新的token 门槛降到了极低，每个人都可以在这个网络中留下自己的合约，在巨大的赚钱效应下直接引燃了今年整个市场！区块链技术也进入了2.0时代。</p>\n<h1 id=\"V3-0-什么是EOS\"><a href=\"#V3-0-什么是EOS\" class=\"headerlink\" title=\"V3.0 什么是EOS\"></a>V3.0 什么是EOS</h1><p>以太坊的火爆，同时暴露了一系列的问题。最受大家吐槽的转账速度问题，当时一个非常火热的项目snt进行融资的时候，直接导致了整个以太坊网络的堵塞，大量交易等待状态，好久才得以恢复正常。</p>\n<p>区块链应用没有广泛传播，其主要的原因是现有的区块链平台使用费用高昂，性能有限。比特币处理交易速度为3比&#x2F;秒，以太坊虽然可以达到25笔&#x2F;秒，但是这个速度依然远远不够。从“云养猫”开始，以太坊的网络拥堵问题变得越来越严重，拥堵的网络导致我们在使用以太坊转账的过程中不得不提高旷工费来加快转账速度。我们有理由怀疑——应用还未全面落地，以太坊的处理速度和处理费用已经难以满足未来的需求，以太坊真的能够承担起未来作为区块链世界主流基础链的能力吗？</p>\n<p>当然不能。</p>\n<p>所以，我们需要一个基于智能合约的速度更快。扩展性更强，生态更稳定的底层设施，如果有一条基础链诞生，并且能承担这项使命，它完全有资格改变区块链世界的格局——成为区块链3.0。</p>\n<p>在这个背景下，人们的信仰迅速转移到一个币种身上——EOS，我们亲切的叫它柚子。共识算法DPOS解决这个问题，它的中文名叫做股份授权证明机制（又称受托人机制）</p>\n<p>简述优点：</p>\n<p>1、支持百万级别用户</p>\n<p>2、免费使用</p>\n<p>3、轻松升级和Bug恢复</p>\n<p>4、低延迟</p>\n<p>5、串行性能</p>\n<p>6、并行性能</p>\n<p>自带光环的EOS从天而降，从项目白皮书的可行性方案，到发起人BM的辉煌战绩，再到充沛的资金支持，让我们不得不充满信心，迎接区块链3.0的到来！</p>\n<p>如果你得到了一点点认知的成长，欢迎打赏☺</p>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"数字货币的特点以及价值","url":"/value_of_digital_currency/","content":"<h2 id=\"首先明确数字货币与电子货币、虚拟货币的区别。\"><a href=\"#首先明确数字货币与电子货币、虚拟货币的区别。\" class=\"headerlink\" title=\"首先明确数字货币与电子货币、虚拟货币的区别。\"></a>首先明确数字货币与电子货币、虚拟货币的区别。</h2><p>我们在互联网中长长采用类似积分的形态来进行一定程度的兑换，比如游戏币，qq币，移动积分等此类我们称之为虚拟货币。而支付宝，微信，银行网上客户端中用数字代表我们存储的法币，此类称之为电子货币。那么什么是数字货币呢？数字货币是依靠密码技术和校验技术来创建，分发和维持的数字货币，比如比特币、莱特币、以太坊、EOS等。密码货币分为开放式采矿型密码数字货币（以比特币为代表）和发行式密码数字货币（点点币为代表）。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"数字货币的几大特点：\"><a href=\"#数字货币的几大特点：\" class=\"headerlink\" title=\"数字货币的几大特点：\"></a>数字货币的几大特点：</h2><ul>\n<li>数字货币是去中心化货币</li>\n<li>数字货币是加密的、 匿名的货币</li>\n<li>数字货币是不可篡改，公开透明的货币</li>\n<li>数字货币可以传递价值</li>\n<li>数字货币总量恒定有稀缺性</li>\n<li>数字货币转账成本低，全球流通便捷</li>\n</ul>\n<h2 id=\"而价值又如何定义和体现呢？\"><a href=\"#而价值又如何定义和体现呢？\" class=\"headerlink\" title=\"而价值又如何定义和体现呢？\"></a>而价值又如何定义和体现呢？</h2><p>自然科学对价值的定义：价值是存在于宇宙运动中的共同规律，从各种事物的相互关系中发现，任何运动（事物）都存在“向外界吸收能量”和“向外界输出能量”的两极，各个事物之间的能量供求关系就反应了价值。</p>\n<p>能量守恒定律是自然界中存在的亘古不变的道理。比特币是一场伟大的社会革命，初期并没有定价，在不断尝试和变化当中。最终有人提出用比特币的产生成本–挖矿所需的电费，也就是劳动价值来进行定价。</p>\n<p>比特币采用了POW（工作量证明），只有通过工作CPU GPU耗费的工作量满足该工作量证明机制，新的区块才会打包，新的比特币就会发行出来。而CPU和GPU要完成这样的工作量，需要消耗一定的电能，以及硬件成本和维护成本。</p>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"智能合约学习目录","url":"/eth_contract_list/","content":"<blockquote>\n<p>最近收集了一下以太坊智能合约的相关资料。有兴趣的同学，按照这个体系完成，基本上也算是入门了吧！欢迎各位指点，<code>持续更新</code>中。</p>\n</blockquote>\n<ul>\n<li><a href=\"https://yaozihao.com/eth_0x01_dev_tool\">0x01 智能合约开发之工具</a></li>\n<li><a href=\"https://yaozihao.com/eth_0x02_debugging\">0x02 智能合约开发之调试</a></li>\n<li><a href=\"https://yaozihao.com/eth_0x03_contract_solidity\">0x03 智能合约之Solidity基础知识</a></li>\n<li><a href=\"https://yaozihao.com/eth_0x04_truffle\">0x04 智能合约之truffle</a></li>\n<li><a href=\"https://yaozihao.com/eth_c3_linearization\">C3 Linearization 线性化python</a></li>\n<li><a href=\"https://yaozihao.com/eth_0x05_contract_process\">0x05 智能合约开发流程详解</a></li>\n<li><a href=\"https://yaozihao.com/eth_0x06_contract_front\">0x06 智能合约开发之前端开发</a></li>\n<li><a href=\"https://yaozihao.com/eth_0x07_gasprice_gaslimit\">0x07 题外篇☞ Gas Price vs Gas Limit</a></li>\n<li><a href=\"https://yaozihao.com/eth_0x08_metamask\">0x08 智能合约开发之MetaMask</a></li>\n<li><a href=\"https://yaozihao.com/eth_0x09_contract_pit\">0x09 智能合约开发之填坑</a></li>\n<li><a href=\"https://yaozihao.com/eth_0x10_ten_minute_learn_contract\">0x10 智能合约开发之全流程</a></li>\n<li><a href=\"https://yaozihao.com/eth_0x11_mul_deployment\">0x11 智能合约开发之多方式部署</a></li>\n<li><a href=\"https://yaozihao.com/eth_0x12_web3js_need_to_know\">0x12 智能合约开发之web3js调用须知</a></li>\n<li><a href=\"https://yaozihao.com/eth_0x13_is_contract\">0x13 检测是否为合约地址</a></li>\n<li><a href=\"https://yaozihao.com/eth_0x14_contract_safe\">0x14 智能合约开发之安全</a></li>\n</ul>\n<span id=\"more\"></span>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"比特币地址生成与验证Nodejs版","url":"/btc_nodejs_new_address/","content":"<blockquote>\n<p>本篇文章主要讲了比特币地址是如何生成的，然后使用nodejs 进行了验证。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"一、-地址生成流程\"><a href=\"#一、-地址生成流程\" class=\"headerlink\" title=\"一、 地址生成流程\"></a>一、 地址生成流程</h2><ol>\n<li><p>获取一个随机的32字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5iaXRjb2luLml0L3dpa2kvRUNEU0E=\">ECDSA<i class=\"fa fa-external-link-alt\"></i></span>密钥<br><code>9a9a6539856be209b8ea2adbd155c0919646d108515b60b7b13d6a79f1ae5174</code></p>\n</li>\n<li><p>使用椭圆曲线加密算法（ECDSA-secp256k1）计算上述私钥所对应的非压缩公钥：<br><code>0340A609475AFA1F9A784CAD0DB5D5BA7DBAAB2147A5D7B9BBDE4D1334A0E40A5E</code></p>\n</li>\n<li><p>对（压缩）公钥进行<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5iaXRjb2luLml0L3dpa2kvU0hBLTI1Ng==\">SHA-256<i class=\"fa fa-external-link-alt\"></i></span>哈希计算：<br><code>2b0995c0703c96d694f03a8987f89d387459fc359694737547a75764989c5e16</code></p>\n</li>\n<li><p>对步骤2的哈希值进行<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5iaXRjb2luLml0L3dpa2kvUklQRU1ELTE2MA==\">RIPEMD-160<i class=\"fa fa-external-link-alt\"></i></span>哈希计算<br><code>154de7cabbb5822075e92c57a27ca3ef3e8be50c</code></p>\n</li>\n<li><p>在步骤3的哈希值前添加地址版本号（主网为0x00，测试网为0xef)<br><code>00154de7cabbb5822075e92c57a27ca3ef3e8be50c</code></p>\n</li>\n<li><p>对步骤4的扩展RIPEMD-160哈希值进行SHA256哈希计算<br><code>ab7d579d497d75ab7e337212345635a4c071c249c6e8ec07532d2ea4d82290e6</code></p>\n</li>\n<li><p>对步骤5的哈希值再次进行SHA256哈希计算<br><code>fc897c2001ef5e99b2e37853e84dd041bebe6f831f462729de2af27e4ab9ea7e</code></p>\n</li>\n<li><p>取步骤6结果值的前4个字节作为校验码 <code>fc897c20</code></p>\n</li>\n<li><p>将校验码添加到步骤4的扩展RIPEMD-160哈希值末尾：<br><code>00154de7cabbb5822075e92c57a27ca3ef3e8be50cfc897c20</code></p>\n</li>\n<li><p>使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5iaXRjb2luLml0L3dpa2kvQmFzZTU4Q2hlY2tfZW5jb2Rpbmc=\">Base58Check编码<i class=\"fa fa-external-link-alt\"></i></span>将结果从字节字符串转换为base58字符串。<code>12weWzbq5jT7c3MHbHD2WP2uLXEUtaGLXZ</code></p>\n</li>\n</ol>\n<p>参考代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">createBitcoinAddress</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">/** Create Bitcoin Address */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">`crypto`</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ecdh = crypto.<span class=\"title function_\">createECDH</span>(<span class=\"string\">&#x27;secp256k1&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> bs58 = <span class=\"built_in\">require</span>(<span class=\"string\">`bs58`</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 0. Having a private ECDSA key</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateKey = crypto.<span class=\"title function_\">randomBytes</span>(<span class=\"number\">32</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Private key:[<span class=\"subst\">$&#123;privateKey.toString(<span class=\"string\">`hex`</span>)&#125;</span>]`</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 1. Take the corresponding public key generated with it (33 bytes, 1 byte 0x02 (y-coord is even), </span></span><br><span class=\"line\">  <span class=\"comment\">// and 32 bytes corresponding to X coordinate)</span></span><br><span class=\"line\">  ecdh.<span class=\"title function_\">setPrivateKey</span>(privateKey);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cpublicKey = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(ecdh.<span class=\"title function_\">getPublicKey</span>(<span class=\"string\">&#x27;hex&#x27;</span>, <span class=\"string\">&#x27;compressed&#x27;</span>), <span class=\"string\">&#x27;hex&#x27;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Public key:[<span class=\"subst\">$&#123;cpublicKey.toString(<span class=\"string\">`hex`</span>).toUpperCase()&#125;</span>]`</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 2. Perform SHA-256 hashing on the public key</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sha1 = crypto.<span class=\"title function_\">createHash</span>(<span class=\"string\">`sha256`</span>).<span class=\"title function_\">update</span>(cpublicKey).<span class=\"title function_\">digest</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`SHA-256:[<span class=\"subst\">$&#123;sha1.toString(<span class=\"string\">`hex`</span>)&#125;</span>]`</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 3. Perform RIPEMD-160 hashing on the result of SHA-256</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> ripemd160 = crypto.<span class=\"title function_\">createHash</span>(<span class=\"string\">`rmd160`</span>).<span class=\"title function_\">update</span>(sha1).<span class=\"title function_\">digest</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`RIPEMD-160:[<span class=\"subst\">$&#123;ripemd160.toString(<span class=\"string\">`hex`</span>)&#125;</span>]`</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 4. Add version byte in front of RIPEMD-160 hash (0x00 for Main Network, 0x6f for Testnet)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> version = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>([<span class=\"number\">0x00</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> extendedPriKey = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">alloc</span>(ripemd160.<span class=\"property\">length</span> + version.<span class=\"property\">length</span>);</span><br><span class=\"line\">  extendedPriKey = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">concat</span>([version, ripemd160], extendedPriKey.<span class=\"property\">length</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Extended RIPEMD-160:[<span class=\"subst\">$&#123;extendedPriKey.toString(<span class=\"string\">`hex`</span>)&#125;</span>]`</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 5. Perform SHA-256 hash on the extended RIPEMD-160 result</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sha2 = crypto.<span class=\"title function_\">createHash</span>(<span class=\"string\">`sha256`</span>).<span class=\"title function_\">update</span>(extendedPriKey).<span class=\"title function_\">digest</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`SHA-256:[<span class=\"subst\">$&#123;sha2.toString(<span class=\"string\">`hex`</span>)&#125;</span>]`</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 6. Perform SHA-256 hash on the result of the previous SHA-256 hash</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sha3 = crypto.<span class=\"title function_\">createHash</span>(<span class=\"string\">`sha256`</span>).<span class=\"title function_\">update</span>(sha2).<span class=\"title function_\">digest</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`SHA-256:[<span class=\"subst\">$&#123;sha3.toString(<span class=\"string\">`hex`</span>)&#125;</span>]`</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 7. Take the first 4 bytes of the second SHA-256 hash. This is the address checksum</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> checksum = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">alloc</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">  sha3.<span class=\"title function_\">copy</span>(checksum, <span class=\"number\">0</span>, <span class=\"number\">0</span>, checksum.<span class=\"property\">length</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Checksum:[<span class=\"subst\">$&#123;checksum.toString(<span class=\"string\">`hex`</span>)&#125;</span>]`</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 8. Add the 4 checksum bytes from stage 7 at the end of extended RIPEMD-160 hash from stage 4. </span></span><br><span class=\"line\">  <span class=\"comment\">// This is the 25-byte binary Bitcoin Address.</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> btcAddress = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">alloc</span>(extendedPriKey.<span class=\"property\">length</span> + checksum.<span class=\"property\">length</span>);</span><br><span class=\"line\">  btcAddress = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">concat</span>([extendedPriKey, checksum], btcAddress.<span class=\"property\">length</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`25-byte binary bitcoin address:[<span class=\"subst\">$&#123;btcAddress.toString(<span class=\"string\">`hex`</span>)&#125;</span>]`</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 9. Convert the result from a byte string into a base58 string using Base58Check encoding. </span></span><br><span class=\"line\">  <span class=\"comment\">// This is the most commonly used Bitcoin Address format</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> address = bs58.<span class=\"title function_\">encode</span>(btcAddress);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Address:[<span class=\"subst\">$&#123;address&#125;</span>]`</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">success</span>(address);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、-校验流程\"><a href=\"#二、-校验流程\" class=\"headerlink\" title=\"二、 校验流程\"></a>二、 校验流程</h2><p>根据生成流程来实现校验方式。</p>\n<ol>\n<li>把地址base58解码成字节数组</li>\n<li>把数组分成两个字节数组，字节数组（一）是后4字节数组，字节数组（二）是减去后4字节的数组</li>\n<li>把字节数组（二）两次Sha256 Hash</li>\n<li>取字节数组（二）hash后的前4位，跟字节数组（一）比较。如果相同校验通过。</li>\n<li>校验通过的解码字节数组取第一个字节（0xff），得到版本号</li>\n<li>检验版本号的合法性（根据主网参数校验）</li>\n</ol>\n<p>参考代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">isAddress</span>(<span class=\"params\">address</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.把地址base58解码成字节数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = bs58.<span class=\"title function_\">decode</span>(address);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> buf = <span class=\"keyword\">new</span> <span class=\"title class_\">Buffer</span>(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.把数组分成两个字节数组，字节数组（一）是后4字节数组，字节数组（二）是减去后4字节的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> checksum = buf.<span class=\"title function_\">slice</span>(-<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bytes = buf.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, buf.<span class=\"property\">length</span>. <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3.把字节数组（二）两次Sha256 Hash</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> shax1 = <span class=\"title function_\">createHash</span>(<span class=\"string\">&#x27;sha256&#x27;</span>).<span class=\"title function_\">update</span>(bytes).<span class=\"title function_\">digest</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> shax2 = <span class=\"title function_\">createHash</span>(<span class=\"string\">&#x27;sha256&#x27;</span>).<span class=\"title function_\">update</span>(shax1).<span class=\"title function_\">digest</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 4.取字节数组（二）hash后的前4位，跟字节数组（一）比较。如果相同校验通过。</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newChecksum = shax2.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (checksum.<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>) !== newChecksum.<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Invalid checksum&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 5.校验通过的解码字节数组取第一个字节（0xff），得到版本号</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = buf.<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>).<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 6.检验版本号的合法性（根据主网参数校验）00 为普通地址，05为脚本地址，注意大小写。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(version !== <span class=\"string\">&#x27;00&#x27;</span> &amp;&amp; version !== <span class=\"string\">&#x27;05&#x27;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Invalid version&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、-参考文档\"><a href=\"#三、-参考文档\" class=\"headerlink\" title=\"三、 参考文档\"></a>三、 参考文档</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi5iaXRjb2luLml0L3dpa2kvVGVjaG5pY2FsX2JhY2tncm91bmRfb2ZfdmVyc2lvbl8xX0JpdGNvaW5fYWRkcmVzc2Vz\">https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"四、-网络判断码\"><a href=\"#四、-网络判断码\" class=\"headerlink\" title=\"四、 网络判断码\"></a>四、 网络判断码</h2><table>\n<thead>\n<tr>\n<th align=\"center\">Crypto Coin</th>\n<th align=\"center\">Public Address</th>\n<th align=\"center\">Private Wallet Import Format</th>\n<th align=\"center\">Script Hash</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">BTC</td>\n<td align=\"center\">0x00</td>\n<td align=\"center\">0x80</td>\n<td align=\"center\">0x05</td>\n</tr>\n<tr>\n<td align=\"center\">BTC-TEST</td>\n<td align=\"center\">0x6F</td>\n<td align=\"center\">0xEF</td>\n<td align=\"center\">0xC4</td>\n</tr>\n<tr>\n<td align=\"center\">DOGE</td>\n<td align=\"center\">0x1E</td>\n<td align=\"center\">0x9E</td>\n<td align=\"center\">0x16</td>\n</tr>\n<tr>\n<td align=\"center\">DOGE-TEST</td>\n<td align=\"center\">0x71</td>\n<td align=\"center\">0xF1</td>\n<td align=\"center\">0xC4</td>\n</tr>\n<tr>\n<td align=\"center\">LTC</td>\n<td align=\"center\">0x30</td>\n<td align=\"center\">0xB0</td>\n<td align=\"center\">0x05</td>\n</tr>\n<tr>\n<td align=\"center\">LTC-TEST</td>\n<td align=\"center\">0x6F</td>\n<td align=\"center\">0xEF</td>\n<td align=\"center\">0xC4</td>\n</tr>\n<tr>\n<td align=\"center\">NMC</td>\n<td align=\"center\">0x34</td>\n<td align=\"center\">0xB4</td>\n<td align=\"center\">0x05</td>\n</tr>\n<tr>\n<td align=\"center\">PPC</td>\n<td align=\"center\">0x37</td>\n<td align=\"center\">0xB7</td>\n<td align=\"center\">0x75</td>\n</tr>\n<tr>\n<td align=\"center\">URO</td>\n<td align=\"center\">0x44</td>\n<td align=\"center\">0xC4</td>\n<td align=\"center\">0x05</td>\n</tr>\n</tbody></table>\n","categories":["BlockChain"],"tags":["区块链 btc"]},{"title":"22个只有华尔街交易员才懂的“黑话”","url":"/slang_22_words_only_understand_by_wallstreet/","content":"<p>1.Long&#x2F;short</p>\n<p>Long 和 short 指预计将上升或下降，分别用来表达对某事感觉不错，或者感觉很差。它是这么用的：</p>\n<p>投行家A：我Long泡泡纱，short法兰绒。</p>\n<p>——我喜欢泡泡纱，讨厌法兰绒。</p>\n<p>为了表示绝对确定，一个投行家可能会说，他们对一个结果或者目标“三倍Long”或者“三倍short”。</p>\n<span id=\"more\"></span>\n\n<p>2、Sold</p>\n<p>用讽刺方式来表达“千万别！”，典型的用法是这样的：</p>\n<p>投行家 A：我们去看“真爱至上”吧</p>\n<p>投行家 B：Sold</p>\n<p>——意思就是千万别去！</p>\n<p>3、Upside&#x2F;Downside</p>\n<p>这意思是说，在既定市场环境中，Upside——有大量的机会，或者Downside——根本无利可图。</p>\n<p>投行家：“假设这周末去汉普顿度假，Upside就是说James要在夜店Pink Elephant开狂欢party，Downside就是他还邀请了我的前任女友。”</p>\n<p>4、A piker</p>\n<p>A piker就是指某人假装对华尔街无所不知，但其实他什么事情也不懂，而且在不上档次的公司拿着微薄的薪水。</p>\n<p>这个词来源于19世纪末期的俚语“pike”，意思是因为过度谨慎小心而退出协议的人。</p>\n<p>5、Big swinging d*ck</p>\n<p>如果你不知道这个词，说明你根本不认识任何一个华尔街人。Big Swinging D*ck是这样一种人：他经手大手笔的买卖，赚着高薪，是一个人人艳羡的混蛋。</p>\n<p>它曾在Michael Lewis的 《说谎者的扑克牌》一书中出现过，</p>\n<p>如果能赚到数百万美元，他就会成为最受崇敬的那类人——a Big Swinging D*ck。</p>\n<p>6、”Hunting elephants”</p>\n<p>字面意思是“猎杀大象”。这个词之所以出名，就是因为巴菲特使用了它，意思是说你正在寻找大生意。在宣布与巴西私募巨头3G资本联手竞购亨氏食品公司之后，巴菲特在CNBC采访中使用了这个词：</p>\n<p>我正在寻找另外一头大象。如果你看到了任何一只，请告诉我。我们已经准备好了。那只猎杀大象的枪早已重装上阵，我扣动扳机的手指已经急不可耐。</p>\n<p>7、”Buying size”</p>\n<p>这是指大笔资金交易或者数额巨大的证券交易。</p>\n<p>对冲基金交易员：</p>\n<p>我那个在摩根士丹利工作的朋友每天都作着Buying size，我们应该挖走他。</p>\n<p>8、”F-You money”</p>\n<p>这个词指很大一笔钱，它能让你提前退休，永远不需要再工作。</p>\n<p>9、”Junked up”被毒品麻醉</p>\n<p>这个词可以用在任何证券交易中，表示你非常看好。交易员们在平时生活中也会这么说，用来表达对一个事物的热情。</p>\n<p>交易员：“我被委内瑞拉10年期国债麻醉了。”</p>\n<p>——我非常看好委内瑞拉10年期国债。</p>\n<p>10、”A clowngrade”</p>\n<p>当卖方分析师调升或者调降股票评级，但是理由非常愚蠢的时候，交易员马上就会说：</p>\n<p>看到了吗？古根海姆分析师调降了Twitter股票评级！别指望这能赚钱！</p>\n<p>11、”Building a book”</p>\n<p>这是习惯说法，也是行业用语，意思就是你正在做交易。</p>\n<p>12、”Put it on the tape”</p>\n<p>字面就是“打印在纸带上”指代下订单。过去，经纪人执行的交易指令都被记录在自动收报机的纸带上，很长很长的一卷纸，上面不间断地打印着交易指令。当然，现在这些指令都由计算机来完成了。</p>\n<p>然而，这句话却没有随着纸带的淘汰而消失。现在，这些“纸带”不仅仅用在股市或债市交易上，它还可能被用在下订单购买从食品到毒品的任何事物上。</p>\n<p>13、”Stopped out”</p>\n<p>这句话的意思是你已经提交了订单，不能再有更多其他的申请了——无论是食品订单还是毒品订单。</p>\n<p>14、”Treat me subject”</p>\n<p>这是也许、大概的意思。当为客户下单的时候，交易员可能会说“Treat me subject”，表明客户可能需要交易员再度确认指令，以保证下单准确无误。</p>\n<p>这个短句子也用在日常对话中，表示“可能”。</p>\n<p>投行家A：我们下班后要去日本餐厅Nobu 57 。</p>\n<p>投行家B：Treat me subject。</p>\n<p>——看情况吧，也许能去，也许不能。</p>\n<p>15、”Fish”</p>\n<p>是指女孩们或者客户们。无论怎样，这个世界总是有很多女孩子，也有一大堆客户。</p>\n<p>16、”Not held”</p>\n<p>交易术语，意思就是你可以随意进入市场交易。如果你在交谈中听到这个词，这就是在说“请随意”“随你便”。</p>\n<p>投行家A：我们应该买300美元一瓶的意大利葡萄酒Barolo吗？</p>\n<p>投行家B：Not held</p>\n<p>——无所谓啦。</p>\n<p>17、”Uptick”升级</p>\n<p>想象一下，你在纽约梦幻市区酒店(Dream Downtown)的PH-D 酒吧里享受着Party，这时候你的董事总经理决定买些奢华的法国顶级伏特加Grey Goose来犒劳大家，这就是Uptick！</p>\n<p>18、” Traded ahead” 交易之前</p>\n<p>如果投行家A在酒吧里盯上一个女孩，但却被投行家B抢先一步跑去和她搭讪……第二天，投行家B就会对投行家A说：“Sorry，Traded ahead.</p>\n<p>——比你快了一步！”</p>\n<p>19、”The staffer’s coming.”</p>\n<p>其实，这是一句脏话。通常，初级投行家急匆匆地走过你身边，你就会听到他嘟囔了这句话。职员就是副总裁，他必须得给分析师和助理们分配工作任务，尤其是必须连夜赶工或周末加班的任务。</p>\n<p>20、“What is your schedule this weekend?”</p>\n<p>如果上司在上班时间这么问你，那是他在温和地同你商量，能不能周末过来加班？在华尔街，这句话就意味着无论你有什么度假计划，它都泡汤了。</p>\n<p>21、”Can you give me some more color on that?</p>\n<p>分析师经常在上市公司业绩发布会上这么发问，意思是他要求得到更多细节。</p>\n<p>如果你同事在日常谈话中这么问你，那是他想八卦你夜不归宿的那晚究竟发生了什么。</p>\n<p>22、”I’m doing market research.”</p>\n<p>我在看YouTube.</p>\n","categories":["Financing"]},{"title":"《小狗钱钱》读后感","url":"/puppy_money_after_reading/","content":"<p>在此致敬感激老板教给我最重要的一件事情—自信心。<br>《小狗钱钱》这本书通篇我个人最看重的是它所讲的自信。一件一件小事不断的提升自己投资的信心，不断进行记忆的加深，使之拥有更强烈的行动的动力。想到古语有云：“一屋不扫何以扫天下”。细节的处理在不断的影响我们身心体，持之以恒差距会越来越大。<br>这本书对建立自己的投资原则，进行了系统性的描述，解释了相应的方法论。只要你按照去做，真的可以做到自己的第一个一百万。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"赚钱的动力\"><a href=\"#赚钱的动力\" class=\"headerlink\" title=\"赚钱的动力\"></a>赚钱的动力</h2><p>一开始，必须明确金钱对自己的意义。比如买房，买车，名牌衣服，一次国际旅游，上学等。但是一定需要从中确定出最重要的目标，明白自己的真实所需才能更好地去坚持下去。将自己的梦想放置在显目的位置，潜意识会不断的提醒并支持你做下去。天下难事必做于易，天下大事必做于细。</p>\n<h2 id=\"高收入以及债务的关系\"><a href=\"#高收入以及债务的关系\" class=\"headerlink\" title=\"高收入以及债务的关系\"></a>高收入以及债务的关系</h2><p>往往高收入的同时带来高支出，而同时增加的负债往往会更多导致更多的财务风险。所以高收入并不一定等于所能持有的会更高。</p>\n<h2 id=\"成功日记的必要性\"><a href=\"#成功日记的必要性\" class=\"headerlink\" title=\"成功日记的必要性\"></a>成功日记的必要性</h2><p>每日进行几件好事的记录，有助于记下成长，增强潜意识中的成就。在未来中遇到困难的时候，过往的成功经历都会给自己带来更多的信心。就像人们常说的没有过不去的坎，同样的不管什么挫折过后再看，什么都不算。多坚持一下或许天堑变通途。在怀疑自己，不敢迎接挑战时就翻一翻自己的“成功日记”，这些细小的事情会让你信心百倍。</p>\n<h2 id=\"分仓\"><a href=\"#分仓\" class=\"headerlink\" title=\"分仓\"></a>分仓</h2><p>小女主在最开始资产较为少的时候就在积攒自己的金鹅，去下自己的鸡蛋。不管挣多少钱，都存储一半到银行中。剩下的二分之一放入梦想存钱罐，其他的作为零钱奖励自己。</p>\n<h2 id=\"钱生钱\"><a href=\"#钱生钱\" class=\"headerlink\" title=\"钱生钱\"></a>钱生钱</h2><p>后面的通篇都在讲述钱生钱的重要性。普通人相对来说，比较好的投资就是进行基金定投了。相比较于股票，外汇等，基金的风险性相对较低，随着市场的发展，收益又较为高。同时为非是一种资产置换的概念。低增长率的资产置换为高增长率的资产。从这个角度看，钱也是资产之一，同时用钱挣更多的钱才是稳妥收益。投资的选择：安全是首要，投入的钱要下很多金蛋，也就是利息最高，方式形式应该简单明白，易于操作——股票&amp;基金。复利是人类最伟大的发明。</p>\n<h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><p>如果你只带着试试看的心态，那么你最后只会以失败而告终，你会一事无成。尝试纯粹是一种借口，你还没有做，就已经给自己想好退路了。不能试验，你只有两个选择：做，或者不做。</p>\n<p>这本书是零基础理财入门必读了。<br>再推荐一本《原则》，能少走很多弯路。</p>\n","categories":["Financing"]},{"title":"《投资复盘》教你如何从100个币变为1个币","url":"/how_100coin_to_1coin/","content":"<blockquote>\n<p>论韭菜之神级操作</p>\n</blockquote>\n<h2 id=\"Who-Am-I\"><a href=\"#Who-Am-I\" class=\"headerlink\" title=\"Who Am I\"></a>Who Am I</h2><p>昵称阿牛，写有‘金牛茶馆’公众号。创业中，是一名量化工程师！<br>对区块链充满兴趣，并在学习中有幸遇到很多挚友，成为硅谷密探智能合约学员。一名007er，输出倒逼输入，不断完善写作的梦想。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"神操作之追涨杀跌\"><a href=\"#神操作之追涨杀跌\" class=\"headerlink\" title=\"神操作之追涨杀跌\"></a>神操作之追涨杀跌</h2><blockquote>\n<p>追涨杀跌：右侧建仓的王牌手段。</p>\n</blockquote>\n<p>趋势型选手会在稳定后建仓，向右方前进，然后盈利点进行退出。<br>追涨杀跌是金融市场中的专业术语。是金融技术派操盘的一种方式，与抄底摸顶的操作方式相反。具体操作方式：就是在金融市场（股票，期货，外汇等）价格上涨的时候买入金融产品，以期待涨得更多，然后以更高的价格卖出获利了结。在金融市场价格下跌的时候卖出金融产品，以更低的价格买入回来，以获取价格下跌的收益。</p>\n<p>神操作之画虎不成反类犬。在进行神操作的时候，低价买入很开心，并且不断加仓。等到开跌没有及时止盈或者止损，一直到跌了很多，实在忍不住了，就考虑要不要卖出一部分然后低价抄回来。卖出之后下跌了很开心，完全没有抄回来的想法，嗖的一下就飞了，完美反向操作。</p>\n<p>追涨杀跌的原则：</p>\n<p>判明大势，顺势而为。无论是跟风个股也好，还是对整个板块看淡后的杀跌也好，都必须考虑大势这一重要因素，切忌逆势操作。因为如果大势向淡，那么个股或整个板块中个股的短期涨势将不能持有，使跟风失去意义；如果大盘向好，那么个股或整个板块中个股的短期跌势将不能持续，杀跌失去意义。震荡期你追涨杀跌一定会反复割肉。</p>\n<h2 id=\"神操作之网格\"><a href=\"#神操作之网格\" class=\"headerlink\" title=\"神操作之网格\"></a>神操作之网格</h2><blockquote>\n<p>震荡型选手之最爱网格</p>\n</blockquote>\n<p>网格的操作原理设定总资金，每格仓位，起始价位，网格密度，每格资金量。从起始价位开始，价格每下跌一格，就买入相应的资金量。从买入价位开始，价格上升一格，就卖掉买入的仓位。</p>\n<p>然而我在一路下行中不断使用网格高位卖了，低位接回来，某天牛抬头直接飞起，筹码全无。某天牛低头，被套成狗。</p>\n<p>网格的原则：</p>\n<ol>\n<li>要判定市场是否是震荡市。单边行情不适合此策略。</li>\n<li>选择个股要有一定价值，泡沫太大，一顿下杀，跑不掉。</li>\n<li>个股股性要活跃，就是波动大。拿超级大盘股做做是没啥好做的。</li>\n</ol>\n<h2 id=\"神操作之高抛低吸\"><a href=\"#神操作之高抛低吸\" class=\"headerlink\" title=\"神操作之高抛低吸\"></a>神操作之高抛低吸</h2><p>高抛低吸通俗易懂就是“低位买入，高位卖出”的确是可以这样理解。主要趋势向上时买进和持有在底部刚刚启动，或者刚刚脱离了底部区域的。在高位进行卖出。</p>\n<p>然而个人在操作的时候看有股涨的很多，生怕被拉下，追之。做了飞机之后眼看不断下跌忍不住割肉。做成了高吸低抛。</p>\n<p>追涨杀跌的原则：<br>高抛低吸需要一定的信仰。不到万不得已不采用止损策略。高抛低吸的入场理由是对基本面进行了全面、深入的研究，以价值投资为出发点，认为当前交易品价格已经偏离了商品的实际价值，最终理应回归合理价格。除非分析的结果出现错误，否则没有理由轻易止损出局，并且要越跌越买、越涨越卖。切记在下降趋势中高抛低吸可能会越吸越套。</p>\n<h2 id=\"推荐优选策略\"><a href=\"#推荐优选策略\" class=\"headerlink\" title=\"推荐优选策略\"></a>推荐优选策略</h2><ul>\n<li>趋势加轮动</li>\n<li>买入并持有</li>\n<li>定投</li>\n</ul>\n<p>干货：二八原则。20%牛市，80%熊市。</p>\n<hr>\n<p>祝大家事业有成，身体健康，炒币发财。</p>\n","categories":["Financing"]},{"title":"一个不断完善的投资系统","url":"/a_continous_improvement_of_the_investment_system/","content":"<p>1000万以下资产的时候，没有资格讲配置，需要做的就是ALL IN，梭哈。仅此而已。</p>\n<span id=\"more\"></span>\n\n<p>持有看好的价值被低估的币种。</p>\n<p>等待价值体现之后进行卖出，等待并选择其他的。</p>\n<p>如何选择价值币：</p>\n<ul>\n<li><p>1.上一波牛市中出现的热度极高，一币难求的项目。<br>  本次熊市中还没有启动，理论上可以作为标的之一。<br>  比如9.4 时候的status。一度抢购导致以太的网络瘫痪。后来熊市中价格一度破发，筹码确不断集中。</p>\n</li>\n<li><p>2.超牛大神。<br>  比如eos的bm，ctxc的田亮等。这两个项目均在熊转牛的时候表现良好。</p>\n</li>\n<li><p>3.超级大庄。<br>  筹码不断集中，牛散深度参与，流通盘减少。<br>  符合以上三种的基本就是比较好的标的了。</p>\n</li>\n</ul>\n<p>尽量做趋势单，波段么有意义，因为当你操作的次数越多，你的判断就会越多，心里波动也会越多。</p>\n<p>可能你开十次连续盈利10次，但是当你开单一千次的时候，你的准确率无限趋向于50：50。</p>\n<p>而当你一次上头，不去止损的时候，可能前功尽弃。</p>\n","categories":["Financing"]},{"title":"为什么拿住10倍利润的都是别人？而你最终腰斩！","url":"/why_10profits_other_and_you_cut_an_half/","content":"<p>币圈的朋友都知道，最近市场不太景气，之前疯牛中的盈利，这次一次性就吐回去大半。进圈晚的朋友，更是严重的亏损！</p>\n<p>关注了几个公众号，大家都在做直播实盘。做的比较好的是王团长，从9.4之后最低点进场，百万资金最高到千万，现在依然有三倍的盈余，所以吸引了大量的粉丝。后来模仿者很多就显得底气略有不足了，好一点的黄金斩，略差一点的腰斩。</p>\n<p>相信各位看官在进入市场的时候都是听到朋友或者同事等告诉你这个赚钱了，那个十倍。哇，刚上线的几十倍增幅。惶惶中都急了眼，争先恐后上车前行。然后遇到了慢慢牛转熊，还有利润仓无所谓的，被套牢不忍退去的，割肉离场的。。</p>\n<p>不过亏损了不要担心，且听阿牛在熊市中的分析，打造自己的方法论，练就火眼金睛，选中有价值的项目。坚定不移的响应号召，摒弃炒作，让技术回归技术。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"方式一（此方式适合长线投资者）\"><a href=\"#方式一（此方式适合长线投资者）\" class=\"headerlink\" title=\"方式一（此方式适合长线投资者）\"></a>方式一（此方式适合长线投资者）</h2><p>让我们来看看为什么别人拿的住10倍，甚至100倍项目：</p>\n<ol>\n<li>有自我辨别项目意识，这不是一朝一夕能练就的</li>\n<li>搜集大量项目相关资料，进行技术性评估</li>\n<li>搜寻项目方成员曾经的经历，进行匹配性评估</li>\n<li>立足行业进行前沿性思考</li>\n<li>对顾问进行真实性背调</li>\n</ol>\n<p>翻译成人话：</p>\n<ol>\n<li>找寻项目，自己对这个项目的方向感兴趣（或者相当了解）</li>\n<li>进行白皮书的研究，搞清楚团队到底想怎么实现，解决了这个市场上存在的什么问题</li>\n<li>对项目团队进行评估，考核是否能够完成目标，毕竟好的方向很多，但不是哪个团队去做都会成功。</li>\n<li>进行自身的独立思考，实现后有没有实现壁垒，或者护城河，别的团队做一个同样的需要多少时间，有没有可能被人快速超车等。</li>\n<li>最后参考一下该团队所请到的顾问对他们项目成功的帮助，可以提供什么资源。</li>\n</ol>\n<p>ps：仅仅能站台的那种大V就可以pass了，毕竟顾问不仅仅是帮助拿钱那么简单，更多的是资源整合，融资只是其中最小的帮助。</p>\n<h2 id=\"方式二（此方式适合中短线投资者）\"><a href=\"#方式二（此方式适合中短线投资者）\" class=\"headerlink\" title=\"方式二（此方式适合中短线投资者）\"></a>方式二（此方式适合中短线投资者）</h2><p>此方式为术，基本上根据自己需求选好标的后，进行的操作方式。</p>\n<ol>\n<li><p>正金字塔买入<br> 正金字塔型的下方较宽阔且愈往上愈窄。实战中就是在指数或股价在上升途中先期买进的资金较大，后期买进的资金逐渐减少，从而降低投资风险。采用这种愈买愈少的金字塔型，买入的优点在于：低价时买的多，高价时买的少。虽然不如一次性全部投入获利更多，但却能减少因股价下跌有可能给投资者带来的风险。例如：某只股票或基金价格在10元时，第一次用40%的资金买入。当价格上涨5%时再用30%的资金买进，以此类推在上涨中不断追加买入，直到某一价位完成建仓。正金字塔买入法适合牛市或处于上升通道的股票但不适合牛市末期。</p>\n</li>\n<li><p>倒金字塔买入<br> 与正金字塔相反，实战中就是先期买进的资金较小，后期买进的资金逐渐增加，从而降低投资风险。采用这种愈买愈多的倒金字塔型买入的优点同样在于：高价时买的少，低价时买的多，分批建仓降低成本。投资者不会因为股票或基金出现买点而为没有资金烦恼。实战体现在：指数或股票下跌过程中不断用更大比例资金追加买入，直至在低点建仓完毕，这样可以不断降低成本，市场一旦走好便有获利空间。投资者经常说的“大跌大买，小跌小买”也是这个道理。倒金字塔买入法适合指数或股票底部渐行渐近或熊市末期。</p>\n</li>\n<li><p>DollarCostAverage（定投）<br> 买入没有投资经验的投资者或者向推卸责任的理财顾问大多采用此方法。DollarCostAverage是指采用资金平均投入的策略分批买入，即在固定时期（如每月10日）或满足固定条件(如股市涨跌100个点)的情况下不断增加投资。DollarCostAverage优点在于：股市上涨可以获得收益；股市下跌可以降低成本，说白了就是无论跌或涨都不会太伤心也不会太高兴。GroupRSP和一些个人RSP投资者采DollarCostAverage</p>\n</li>\n</ol>\n<p>方法分批买入，但在牛市收益一般，在熊市也不能有效降低风险。与正金字塔和倒金字塔相比DollarCostAverage较适合于牛皮市或箱体震荡市场。</p>\n<p>三种不同的买入方法因人而异因时而异因市而异，个人倾向：<strong>牛市初期采用正金字塔买入；熊市末期或牛市强势整理时期采用倒金字塔买入。</strong></p>\n<p>同时一定要有止盈和止损的概念。</p>\n<p>止盈的核心要领是：</p>\n<ol>\n<li>克制永无止境的贪心</li>\n<li>获利时要有卖出的决心</li>\n</ol>\n<p>止损操作的核心要领是：</p>\n<ol>\n<li>树立止损的意识</li>\n<li>掌握止损的技巧</li>\n</ol>\n<p>本文重在科普意识，培养道，不在具体描述术，不构成任何投资建议。大家有兴趣可以自己搜寻更多技巧。</p>\n<p>熊市攒币，牛市攒钱。这波大涨大跌一子没动，但是在过程中深刻领悟了这短短八个字的精髓，不就是低买卖高吗？</p>\n<p>慢慢熊市遥不可及地，在这个时间上，小伙伴们不如来一起学习区块链的知识，快速成长为区块链内行，争取在下一个牛市中站在风口中获得先机。<br>我们小伙伴特地组织了一个小小的队伍，共同精读原版比特币白皮书！有大神带队！互相监督，免费学习！还想错过下一波牛市吗？还要看着隔壁老王发家致富吗？你还在等什么？加入我们，只字不差的理解区块链世界！</p>\n<p>有兴趣的小伙伴可以加我微信，进入小组，让我们争当前行者！<br><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-ac29323099d27b51.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"WechatIMG136.jpeg\"></p>\n","categories":["Financing"]},{"title":"今天我们谈谈复利","url":"/today_talk_compound_interest/","content":"<blockquote>\n<p>先看看百度百科对复利的释义：复利是指一笔资金除本金产生利息外，在下一个计息周期内，以前各计息周期内产生的利息也计算利息的计息方法。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"什么是复利\"><a href=\"#什么是复利\" class=\"headerlink\" title=\"什么是复利\"></a>什么是复利</h2><p>数学公式为：F&#x3D;A*(1+i)^n</p>\n<p>可能我们普通人对于公式看起来是一脸懵逼的，那么请允许我用EXCEL计算一下收益。最上面一行是不同的年化收益率，最左边一列为投资年限。如果你的复合年化收益率做到30%，那么第一年结束，你的本金加收益应该等于1.3。第十年结束的时候应该为13.79，也就是说翻了接近14倍。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-c17a7306f50fa6d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"复利表格.png\"></p>\n<p>哇哦，让我们来假设一下，一个年化高<strong>35%</strong> 的人来说（先忍住，不要去想“我能不能做到？”）6年后的效果（6.05），相当于能做到年化复合收益率10%的人要等上19年才能到到的效果（6.12）。即便年化复合收益率比10%仅仅高出5个百分点，即15%，也可以“提前6年”达到差不多同样的效果。</p>\n<p>从上面的论据我们可以得出的结论：</p>\n<ul>\n<li>1.你的能力越弱，你的长期就会越长。</li>\n<li>2.屁股决定脑袋。</li>\n</ul>\n<p>当然还能另外翻译一下：</p>\n<ul>\n<li>1.你可以通过提高能力缩短长期的长度。</li>\n<li>2.先有了脑袋或许屁股可以坐的更高一点。</li>\n</ul>\n<h2 id=\"复利加定投策略的影响\"><a href=\"#复利加定投策略的影响\" class=\"headerlink\" title=\"复利加定投策略的影响\"></a>复利加定投策略的影响</h2><p>先别急，让我们优化一下表格，将定投的概念加进去。第一行还是年化复合收益率，最左边的那一列还是年限，而左边第二列是累计投资金额–假设每年都追加1个单位的投资金额。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-a166b87dadeebabc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"复利加定投\"></p>\n<p>第三四年的时候10%和30%的复利收益好像并没有什么差距。但是后续我们再看的时候逐步加大直至望其项背而不得。这个论点衍生到读书无用论的反方论证，这个社会还没到拼智商的地步，而坚持读书并学习还不错的人，具有向上学习的品质，那么随着逐年累月的増积，直至差距越来越大。所以最终一个早早辍学进入重复性劳动工作的人，如果没有开智拼搏获取一专之长，大概率拼不过一个奋发读书的人。无论是智力，见识以及所能获取到的机会。</p>\n<p>而以上的数据也是一个特别经典的例子，可以说明在一定程度上，策略可以弥补能力的不足。那么在论证一次就是即便曾经没有学习好，不要放弃，持续的坚持奔跑，终会超过大部分投资者。<br>从某种程度上，用好了“策略”会给我们后来者居上的机会。比如使用正确的策略，我们看到同样的10%的年化收益率，在第一张表格中，要等到第19年才能做到6.12，而在第二张表格里，第4年就能做到6.11。</p>\n<p>说到这里，一个关于投资的“秘密”终于“浮出水面”，你也看到了，不是吗？</p>\n<blockquote>\n<p>除了稳定投资外，最好有稳定的场外赚钱能力。</p>\n</blockquote>\n<h2 id=\"负利\"><a href=\"#负利\" class=\"headerlink\" title=\"负利\"></a>负利</h2><p>如果你是那种“总是不得不把投资收益中一部分拿出来花掉的人”，那你就惨了。</p>\n<p><strong>以下表格假定每年必须花掉0.2个单位的资金。</strong></p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-e7a3d5870a9cb18d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"花掉的后果\"></p>\n<p>哇哦，仅仅到达十年的标的，复合收益低的人已经成了负债模式。即便年化复合收益率高达35%。翻倍都需要至少4年，坚持十年不过是9.19。。更何况能做到35%收益的人凤毛麟角。。。</p>\n<p>不断的反思几个公式的过程中，过去的种种行为如走马观花般过目，发现自己犯下了极大地错误。在初始参加工作的时候就立下了flag，每月从工资中划出一部分，固定的存储一些资产（那时候没有投资理财的概念，完全是穷怕了之后的一种本能）。然而这两年却把整个习惯破掉了，不仅将全部积蓄拿出来进行了风险投资，更不惜血本all in创业。完全进入了赌徒模式。直到今天如醍醐灌顶，惊出一身的汗。</p>\n<p>我们讲复利投资，不仅仅是一种投资手段，更是一种做事风格。希望能重归自然，注重积累，循序渐进。不要奢求暴富，要避免某一年份大亏，避免持续的小亏。不仅要赚钱，还要能守住赚到的利润。尽早的开始投资同时不断地增加场外赚钱能力。</p>\n<h2 id=\"72法则\"><a href=\"#72法则\" class=\"headerlink\" title=\"72法则\"></a>72法则</h2><p>我们还有一个计算长期的公式，叫做“72法则”：本金增长一倍所需的时间&#x3D;72&#x2F;年化符合收益率<br>比如，你的年化是10%的话，那么你需要72&#x2F;10，即大约7年的时间让你的投资翻倍；如果你的年化复合收益率是25%的话，那么你需要75&#x2F;25，即大约3年的时间让你的投资翻倍。</p>\n<p>那么在此基础上，你可以理解：</p>\n<blockquote>\n<p>能让你投资翻倍的时间，相当于中期；<br>能让你投资翻倍在翻倍的时间，相当于长期；</p>\n</blockquote>\n<p>于是你可以将自己的远期目标进行倒着运算，就可以看到自己每年所需的增长要求和短期长期的需求了。</p>\n<p>而你现在也可以理解巴菲特老爷子认为至少十年以上才算是长期了，因为他给自己的目标和事后长期的要求是：</p>\n<blockquote>\n<p>买到年化复合增长率至少15%的股票。</p>\n</blockquote>\n<p>在这个目标下，5年翻倍，10年翻倍再翻倍。当然，他事实上的表现比自己当初设想的更好，于是，他做到的是：</p>\n<blockquote>\n<p>运用自己的能力（和能力的提升），把5年缩短为3年多一点，把10年缩短为6年多一点。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>找一条足够长的坡，足够湿的雪，就能让财富滚雪球。<br>复利不仅仅是一种投资方式更是一种思维方式，希望你能学会这种思想运用在生活中。</p>\n<p>让我们总结一下几个重点：</p>\n<ul>\n<li>1.越早开始越好。</li>\n<li>2.少亏损多赚钱。</li>\n<li>3.增加场外赚钱能力。</li>\n<li>4.持续增长，良性循环。</li>\n<li>5.合理使用正确的策略。</li>\n</ul>\n<p>即使一点点的投入不断的利复利，当你坚持下去进入良行循环当中，最终这一切都会有不菲的回报。我个人每日坚持早起打卡英语跑步。每月定存工资。使用<span class=\"exturl\" data-url=\"aHR0cDovL3hpYW9iYW8uaW8vcmVnaXN0ZXI/cmVmPTViNTMyZWQ5Y2U0NDQ0MzU5NWQxNTEzOA==\">自动化工具<i class=\"fa fa-external-link-alt\"></i></span> 定投数字货币。你呢？</p>\n<p>ps：以上部分逻辑及公式表达方式摘抄自李笑来老师的通往财富自由之路，个人感觉描述的比较清晰。同时对表格的分析到了非常精准的地步，我没有能力在做更精确的分析。本文从最简单的模仿开始磨练写作的风格。</p>\n","categories":["Financing"]},{"title":"价值1000万的定投教程","url":"/tutorial_worth_10_million_dollars/","content":"<p>简单介绍一下：一枚草根程序员宅男，喜欢写写代码。在区块链行业，鼓捣过矿机，玩过量化，创过业。</p>\n<p>自进入区块链领域就受到大师的指点“定投比特币”，然而像极了很多的股市神话：市场低迷无关注，牛市红眼竞杀入。获利颇丰未了结，熊市归零被教育。幡然醒悟知价值，定投大法真是好。</p>\n<span id=\"more\"></span>\n\n<p>开始进入区块链公司的时候，我们公司闷头做公链，还做出了百万级用户的APP，在业内属于踏实做事，真正在创造价值的公司。当市场风口起来后我们也成立了量化基金，鼓捣了一些量化策略。过程中我们一直思考量化毕竟门槛还是太高了，需要懂数学，懂金融，懂程序，还要懂人性，博弈论。。。对于散户（传说中总是被割的“韭菜”）来说，这是他们远远不能承受的成本。做基金量化为高净值人群做一些资产管理，收获一些利益回报。但是如何为广大的用户提供价值呢？基于这点思考，我们团队在通过对自身丰富的交易经验以及大量资料分析，发现对于普通的投资者（大神和赌徒看到这里就好了，本次分享是给小白入门。来教给大家如何理性的进行投资从而合理理财避免称为“负翁”）来说“定投”是最适用于数字货币市场的方式！</p>\n<p>经历了多次牛熊后，曾各种投资回报的资产也达到过千万级的浮盈，然后在牛市相信了价值投资被割的一塌糊涂，（涨了几倍，几十倍甚至百倍的币买过，<strong>没卖</strong>。跌了99.999%的币就不说了都是泪）。终于明白了熊市是用来收集筹码的，牛市是用来套现的。踩在了风口上，成为了摔死的猪之后，心里也踏实了，做自己喜欢的事好好工作努力码代码，用闲钱定投，进行搬砖套利二次收益。持续获取复利收益，日常投资的方式以稳为主。市场上的钱是赚不完的，但是可以亏完的。一年三倍易，三年一倍难。</p>\n<blockquote>\n<p>先给大家做一些心理按摩</p>\n</blockquote>\n<h2 id=\"什么是定投？\"><a href=\"#什么是定投？\" class=\"headerlink\" title=\"什么是定投？\"></a>什么是定投？</h2><p>定投是个出现频率很高的词汇。在股票市场浸淫过的人一定会经常听到，尤其是每次大跌进入熊市，那必然有新的大V出现开始教育大家定投balabala。。。总之就是定投大法好，定投大法带你财务自由。当然会出来另一派不屑的一笑，告诉你：定投？定投能赚多少，我上次balala。。。</p>\n<p>定投说起来很简单，做起来却并不简单。</p>\n<p>为什么说定投简单呢？这里咱们给定投下个定义：“定投就是定期购买定额的固定投资品种”。<br>比如我每周会买250块钱的比特币。<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-ad5a7103982aee8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>听起来是不是很简单？我们当时有10几个同事跟着大师定投，在牛市大家还都赚到点钱很开心，更坚定了定投的心思还拓展了很多的朋友。不过最近我一问，还在坚持的没超过三个。</p>\n<p>也就是我们常说的的知难行易。我们前面有明确的目标在引导，看到了别人通过定投获取丰厚的回报，却依然没有坚持这么简单的策略，为什么呢？是我们不想通过投资赚钱？</p>\n<p>我总结了以下几条常见的因素：<br>*1.牛转熊，赚钱效应下降，甚至亏损。心理开始惶恐，抱着我在等等看的心理。<br>*2.需要用钱。牛市赚钱效应强，花钱效应高。市场一有变动，资金周转不开。<br>*3.心思灵活，易变动。常在市场做，会看到很多大神秀操作，看到别人赚钱自己忍不住。<br>*4.不懂得止盈止损。一个好的策略就像操作系统必须有输入和输出。<br>*5.不懂资产配置，摁着单一品种死磕，导致即将归零，怀疑人生。<br>*6.勤于学习，善于总结。走上自己的道。定投只是入门的术。</p>\n<p>可能还有更多的因素，欢迎大家补充和交流。希望大家放下定投的原因会是最后一种方式，哈哈哈。所以这么简单的事，你看到了，却很少有人坚持下来。像极了背英语单词不是吗？</p>\n<h2 id=\"为什么要定投？\"><a href=\"#为什么要定投？\" class=\"headerlink\" title=\"为什么要定投？\"></a>为什么要定投？</h2><p>太阳底下没啥新鲜事，只是每次换了一拨人干着同样的傻事。投资的本质无非是人性。投资者面临的最大风险是：懒、贪、蠢。也有人说做交易本身就是一件在反人性的事情。在贪心的时候要保持警惕，在低谷的时候保持自信。往往大家的做法是：一到牛市就坚定了价值投资，不懂得套现。一到熊市就看到了各种悲观失望，不敢进行抄底。</p>\n<p>为什么说定投不简单？<br>新东方的李老师说投资成功的最核心方法论是什么？</p>\n<blockquote>\n<p>低买高卖</p>\n</blockquote>\n<p>我信了，难道你还能举出更好的方法论？但是低买高卖说起来简单，试试就知道了，做起来是要多难有多难。每个字都得拆开来琢磨，什么时候是低？又什么时候是高？按照巴菲特的老师本杰明·格雷厄姆（价值投资理论奠基人）的说法，低于标的物的实际价值为低，高于标的物的实际价值为高。那么公司的实际价值又如何计算呢？<br>什么时候买？又什么时候卖？是一次性全部买入还是分多次进场，比例又该如何划分呢？<br>只要我们在思考，那就和愚公移山一样，这个问题还没解决，新的问题就像子子孙孙一样无穷无尽。</p>\n<p>如果你看的投资类书籍够多，那么会发现其他几个高频词汇“均线”、“资产配置”、“凯利公式”、“周期”、“趋势”等等。然后我们再看看定投。</p>\n<p>定期，通过拉长时间周期，降低了买在高点卖在低点的风险。定期且定额，最终购买到的价格相当于购买在了这段周期内的平均价格上下（非恒等于，极可能会低于那段时间内的平均价，毕竟是熊长牛短）。</p>\n<blockquote>\n<p>ps :关于补仓﻿平均价计算<br>如果某个币种你在10元的时候买入1W元，如今跌到5元再买入1W元，那么你的持有成本可以降到6.68元，而不是你想象中的7.5元。</p>\n</blockquote>\n<p>购买固定品种，这个是相当的重要，资金分散有限就要求大家购买的时候选好标的物，而非听市场在买，好的我也买入。这方面可以多参考巴菲特的价值投资理论。</p>\n<p><strong>我个人有几个原则分享给大家：</strong></p>\n<ul>\n<li>1.配置很重要。配置很重要。配置很重要。在看好某个品种也不要all in，当然也不要选择太多，分配3-5个是不错的选择。</li>\n<li>2.分配仓位除了拍脑袋还可以用凯利公式。</li>\n<li>3.一定要买自己喜欢的品种。</li>\n<li>4.便宜的不一定就涨的多，极大概率会更便宜。</li>\n<li>5.波动越大的越适合定投。</li>\n<li>6.用过去的推测来预测未来是极度不靠谱的。</li>\n</ul>\n<p>无意间一个小小的定投策略，竟然满足了市场上关于投资大部分的“高频词汇”。我们选择几个品种，买在了平均价格，在熊市默默的收货，牛市进行套现。赚钱是随着市场的周期赚钱。这不就是很好的“避险策略”吗？完全的符合金融的三大定理，分别是:时间的价值、资金的集聚、风险的分担。</p>\n<p>用定投的方式来进行投资，好处是除了定期定额的进行购买以外，你什么都不用管。不用研究k线的走势，不用天天看价格是涨了还是跌了，也不用潜伏在数十上百个群里收集“内幕消息”，真的是什么都不用管。可以安心的工作，放心的进行夜生活（不要笑，在牛市的时候我知道很多人恨不得每天能25小时在电脑前关注涨跌，完全不知道夜生活是什么？）。在借用新东方李老师的话就是：用可以判“死刑”（7年一辈子）的钱投资。那这时候就更加舒心了。</p>\n<h2 id=\"如何定投\"><a href=\"#如何定投\" class=\"headerlink\" title=\"如何定投\"></a>如何定投</h2><p>我知道就是磨破了嘴皮子，你在台下听得如痴如醉，回家可能就忘了，不如真刀真枪的实干一把才能更深入的理解这堂课为什么价值1000万。当然因为大家平时的工作比较忙碌，每周一次的定投可能都没有时间坚持，所以给大家带来一个方便的工具，可以一键定投，妈妈再也不用担心我轻易就放弃了。</p>\n<p>可以打开<span class=\"exturl\" data-url=\"aHR0cDovL3hpYW9iYW8uaW8vcmVnaXN0ZXI/cmVmPTViNTMyZWQ5Y2U0NDQ0MzU5NWQxNTEzOA==\">币小宝<i class=\"fa fa-external-link-alt\"></i></span>注册一下。注册的流程就不讲了，和普通的平台一样。<br><strong>点击注册-&gt;邮箱验证(如未找到邮箱，请查找垃圾桶)-&gt;登陆成功</strong></p>\n<p>我们主要看看是怎么使用的：</p>\n<h3 id=\"1-首先需要创建APIKEY。\"><a href=\"#1-首先需要创建APIKEY。\" class=\"headerlink\" title=\"1.首先需要创建APIKEY。\"></a>1.首先需要创建APIKEY。</h3><p>为了安全起见，工具只提供了代替用户操作行为，用户的资金是放在交易所的，可以完全放心使用。那如何帮助大家进行买卖的呢？这就是apikey的作用了，我们通过交易所提供的api进行下单等操作。下面以火币举例：</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-4cb27535d632f794.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"火币添加APIKEY.jpg\"></p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-20fb42bab1b46ebe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"新增APIKEY.jpg\"></p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-7632519b67ad1fe3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加到定投KEY.jpg\"></p>\n<h3 id=\"2-重要的是创建策略。\"><a href=\"#2-重要的是创建策略。\" class=\"headerlink\" title=\"2.重要的是创建策略。\"></a>2.重要的是创建策略。</h3><p>每个参数可以进行斟酌后在填写，投入资金一定要在自己的可承受范围内哦。<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-e3555a81f235b756.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"定投创建页详解.jpg\"></p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-63d79f3190bd683c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"定投列表页.jpg\"></p>\n<p>大家可以看到我们设置止盈但是没有设置止损，从严格意义上来说并不是很好的策略方式，毕竟你可能也听惯了少亏就是多赚，钱是赚不完的但本金是亏的完的。不过工具的意义在于方便，有时候越简单的反而效果不一定差，所以我放弃了进行复杂策略。只要求用户做一件事儿，确定你是否想买这个品种。我想在使用这个产品的时候，大家已经想好要购买的品种，且通过我们上面的学习也知道了仓位分配的重要性。工具还是工具，重要的是怎么用。它能解决我们重复性的劳动工作，而非帮我们决策买卖。这方面还是建议大家多多思考。</p>\n<p>波峰回撤大家理解的可能会比较少，这是一个非常有意思的参数。大家知道定投微笑曲线对吧。<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-c619ec3d6cbf6076.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"定投原理.jpg\"></p>\n<p>那波峰回撤是怎么回事呢？就是在我们达到止盈率的时候，暂不进行卖出操作。因为我相信经过漫长的熊市，“终于”等到了牛市，所以我的资产净值得到提升。这时候要保持贪婪，等牛市再次向下转熊的时候我在进行退出。也就是达到顶点回落百分比。</p>\n<p>不过这里要废话两句了。定投只教会大家怎么买，而没有卖。我的工具提供了两种方式止盈率和波峰回撤，但不一定是最优的方式。只是为了一个完整的策略和工具的定位才设定的参数。</p>\n<p>其实我想给大家讲的是，看好了就不要动，除非急用钱，不考虑卖出的问题。定投的关键不在于“定期”也不在于“定额”，甚至不在于“长期坚持定投策略”。。。那关键在哪？</p>\n<p>关键在于：</p>\n<blockquote>\n<p>在开始之前，你经过深入研究，得到了相当确定的结论。我投资的是一个非常棒的资产。比如一家成长性极强的公司股票。那么你的收益&#x3D;公司成长*定投策略效用</p>\n</blockquote>\n<p>如果事实上公司（可以是任何资产）成长性为零，那么定投策略的效用为零；如果最终证明，该公司不仅没有成长甚至衰落了，那么定投策略的效用事实上等同于放大了损失。<br>只有对“成长性极强的公司”采用定投策略才是不仅有意义还有“倍增效应”的做法。更为关键的是这一步做对了，下边就更省事儿了。你根本不用考虑退出的问题。因为退出策略很简单：</p>\n<blockquote>\n<p>只要公司还在成长，就没必要退出。</p>\n</blockquote>\n<p>该段案例依然是学习自新东方的李老师（老师的话要听，老师的币不要买）。感谢老师教会了我把注意力放在“正确的事情”上是有多么重要。所以定投策略，最重要的不是“定期”，也不是“策略”，而是“正确的选择成长型公司”。这也是后来在有人和我争论这个“策略”不好，太傻瓜了，太小白了。。。我已经默默不再回答了，毕竟人家说的是对的。</p>\n<p><strong>投资这件事是可以学习并刻意练习的。</strong></p>\n<p>希望普通的投资者可以通过“定投”入门投资这门艺术，理解其中的含义，多多进行思考。切勿盲从且专注于“伸手党”。让数学和未来赚钱。</p>\n<p>以上，今天就讲到这里。</p>\n","categories":["Financing"]},{"title":"会买的是徒弟，会卖的是师傅","url":"/appretice_buy_master_sell/","content":"<blockquote>\n<p>七年就是一辈子。</p>\n</blockquote>\n<p>相信宿命，也相信周期和轮回。纵观历史，有兴盛有衰败，谱写了跌宕起伏的诗歌。盛极而衰、否极泰来。</p>\n<p>我们印证到投资领域，亦是如此。</p>\n<span id=\"more\"></span>\n\n<p>久盘必涨是一门技术，盘久必跌是另一门技术。<br>前者是强势股，不回调，庄强势横盘调整，等待20天线或中期均线跟上，然后诱空一下直接放量涨停。<br>后者是弱势股技术，庄在出货。然后出的差不多的时候，或者大盘突显利空。庄家不计成本抛售股票的结果。</p>\n<p>这种事情有时候是股票价位决定，如果是低位，久盘必涨，横有多长，竖有多高；如果是半山腰，则会反复上下波动，最终还会上攻，再创新高；如果是高位，特别是急速上涨，第三个跳空缺口出现之后的横盘，必然在横盘一段之后就怎么上来的，就怎么下去。</p>\n<p>万物都在有韵律的呼吸，哪怕是冰冷的数字。金融逃脱不了大自然的规律。找准节凑，踏对步伐，或许你我都可以在这场资本盛宴中分一杯羹。<br>只有投资未来收益更为丰厚，投资现在，收益更为稳健。</p>\n<p>下面我们来点实际的。既然市场有节奏，那么我们如何去踏准这个节奏呢？<br>只能分享一下最近的心得，看各位看官自己的悟了。</p>\n<p>币圈似乎一直存在一个自身的规律，也就是在区块链大周期中的小周期。每当BTC吸血大涨，其他的币种小涨或反跌。BTC大跌，所有的币种都跟着跌。BTC横盘，其他的币种开始群魔乱舞。</p>\n<p>从这个周期性规律中，我们不难发现，跟着节奏走就是了，不就是低买高卖那么简单吗?当然前提是大周期在上行阶段。那么现在区块链如火如荼，不就是上行通道中吗？</p>\n<p>呐，我说简单一点，大跌阶段性补仓，涨到心理价位卖出。</p>\n<p>纵观历史，几乎每次BTC吸血上涨都代表着新的一轮行情开始，那么离暴力拉升还有多远？本次暴涨暴跌，完全满仓度过，只为了体悟一下这种感受。不知道开始建仓了吗？</p>\n","categories":["Financing"]},{"title":"关于投资你不得不知的窍门","url":"/tips_about_investing_you_have_to_know/","content":"<h2 id=\"一-关于收益\"><a href=\"#一-关于收益\" class=\"headerlink\" title=\"一. 关于收益\"></a>一. 关于收益</h2><p>假如你有100W,收益达到100%后资产达到200W.如果接下来亏损50%,那么你的资产将回到100W.显然亏损50%比赚100%要容易很多.</p>\n<h2 id=\"二-关于涨跌幅\"><a href=\"#二-关于涨跌幅\" class=\"headerlink\" title=\"二. 关于涨跌幅\"></a>二. 关于涨跌幅</h2><p>假如你有100W,第一天涨10%后资产达到110W,然后第二天跌10%后则资产剩余99W.反之,第一天跌10%,第二天涨10%,资产还是99W.</p>\n<h2 id=\"三-关于波动性\"><a href=\"#三-关于波动性\" class=\"headerlink\" title=\"三. 关于波动性\"></a>三. 关于波动性</h2><p>假如你有100W,第一年赚40%,第二年亏20%,第三年赚40%,第四年亏20%,第五年赚40%,第六年亏20%,资产剩余140.5W,六年年华收益率仅为5.83%,甚至低于5年期凭证式国债票面利率.</p>\n<h2 id=\"四-关于每天1\"><a href=\"#四-关于每天1\" class=\"headerlink\" title=\"四. 关于每天1%\"></a>四. 关于每天1%</h2><p>假如你有100W,如果你每天能赚1%就离场,那么250天后,你的资产可以达到1203.2W,到500天后你的资产将达到1.45亿.</p>\n<h2 id=\"五-关于每年200\"><a href=\"#五-关于每年200\" class=\"headerlink\" title=\"五. 关于每年200%\"></a>五. 关于每年200%</h2><p>假如你有100W,如果连续5年收益达到200%收益率,那么5年后你的资产将达到2.43亿,不过这种高收益是很难持续的.</p>\n<h2 id=\"六-关于十年10倍\"><a href=\"#六-关于十年10倍\" class=\"headerlink\" title=\"六. 关于十年10倍\"></a>六. 关于十年10倍</h2><p>假如你有100W,希望十年后达到1000W,二十年后达到1亿,三十年后达到10亿,那么你需要做到年化收益率达到25.89.</p>\n<h2 id=\"七-关于补仓\"><a href=\"#七-关于补仓\" class=\"headerlink\" title=\"七. 关于补仓\"></a>七. 关于补仓</h2><p>如果某个币种你在10元的时候买入1W元,如今跌到5元再买入1W元,那么你的持有成本可以降到6.67元,而不是你想象中的7.5元.</p>\n<h2 id=\"八-关于持有成本\"><a href=\"#八-关于持有成本\" class=\"headerlink\" title=\"八. 关于持有成本\"></a>八. 关于持有成本</h2><p>假如你有100W,投资某个币种盈利10%,当你做出卖出决定的时候你可以留下10W元市值的筹码,那么你的持有成本将归零,接下来你就可以毫无压力的长期持有了.如果你极度看好这个币种,并留下了20W元市值的筹码,你会发现,你的盈利将从10%上升为100%,不过不要得意,因为如果后期这币跌了50%,那么你就有可能还是会亏损.</p>\n<h2 id=\"九-关于资产组合\"><a href=\"#九-关于资产组合\" class=\"headerlink\" title=\"九. 关于资产组合\"></a>九. 关于资产组合</h2><p>有无风险资产A(年华收益5%)和风险资产B(收益-20%-40%),假如你有100W,你可以投80W无风险资产A和20W风险资产B,那么你全年最差的收益是零,最佳收益可能是12%,这就是应用于保本基金的CPPI技术的雏形.</p>\n<h2 id=\"十-关于做空\"><a href=\"#十-关于做空\" class=\"headerlink\" title=\"十. 关于做空\"></a>十. 关于做空</h2><p>假如你有100W,做空某个币,在不加杠杆的条件下,你可能发生的最大收益是100%,前提是你做空的币种跌没了.而做多的收益率是没有上限的,因此不要永久的做空,除非你不相信人类社会会向前进步.</p>\n<h2 id=\"十一-关于赌场盈利\"><a href=\"#十一-关于赌场盈利\" class=\"headerlink\" title=\"十一. 关于赌场盈利\"></a>十一. 关于赌场盈利</h2><p>分析了澳门赌客1000个数据,发现胜负的概率为53%与47%,其中赢钱离场的人平均盈利34%,而输钱离场平均亏损为72%,赌场不需要做局盈利,保证公平利用人性的弱点就可以实现持续盈利.币市也是如此.</p>\n<h2 id=\"十二-关于投资成功的概率\"><a href=\"#十二-关于投资成功的概率\" class=\"headerlink\" title=\"十二. 关于投资成功的概率\"></a>十二. 关于投资成功的概率</h2><p>如果你投资成功的概率是60%,那么意味着你连续投资100次,其中盈利60次,亏损40次,如果把你的止盈和止损都设置为10%和-10%,那么意味着最终的收益率是350%.</p>\n<p>解读:是的,小伙伴,结果亮瞎眼了吧.3.5倍的收益率!而接下来你要思考的是如何保证你60%的胜率,不要想当然,这个胜率对于多数人来说几乎不可能.</p>\n<h2 id=\"十三-关于止盈和止损\"><a href=\"#十三-关于止盈和止损\" class=\"headerlink\" title=\"十三. 关于止盈和止损\"></a>十三. 关于止盈和止损</h2><p>索罗斯说过,他不在乎胜负的概率,而更期待盈利的时候比亏损的时候多赚一些.假设我们每次止盈是10%,每次止损是5%,那么连续投资100次,假设胜负概率是50%,最终你的收益率将达到803.26%!</p>\n<p>解读:你没有看错,的确是8倍的利润,前提是你可以坚决的止盈和止损,其次你能保证你50%的概率能达到更多的止盈机会吗?</p>\n<h2 id=\"十四-关于正态分布\"><a href=\"#十四-关于正态分布\" class=\"headerlink\" title=\"十四. 关于正态分布\"></a>十四. 关于正态分布</h2><p>这个世界很多事情都呈现正态分布,比如天才和蠢材的比例很小,多数是庸庸碌碌的大众,也比如社会里的财富分配,穷人和富人也呈现正态分布,人类身高,体重等等太多事物都呈现正态分布.</p>\n<p>而币市里无论牛熊市,所有币种和大盘BTC相比也呈现正态分布,在同一行情里,能够远超大盘涨跌幅的只是少数.</p>\n<p>当你想取得超额利润的时候,一定是你某项因素或者某项能力也同样达到了正态分布偏正的极小值区域.</p>\n<p>如果你没有这个能力,该肿么办呢?当然了,命好是投资的核心竞争力,但不要忘记了,命运好坏也是正态分布的.</p>\n<h2 id=\"十五-关于马太效应\"><a href=\"#十五-关于马太效应\" class=\"headerlink\" title=\"十五. 关于马太效应\"></a>十五. 关于马太效应</h2><p>土豪账户有1亿元本金,屌丝账户有10W元本金,土豪一年收益10%,屌丝收益一年100%.年底时,土豪账上有1.1亿元,屌丝账户上有20W元,双方差距又拉大了990W元.</p>\n<p>当你的本金和别人不是一个数量级别的时候,你很可能并不知道别人是怎么想的.</p>\n<h2 id=\"十六-鸡和兔子的数学题\"><a href=\"#十六-鸡和兔子的数学题\" class=\"headerlink\" title=\"十六. 鸡和兔子的数学题\"></a>十六. 鸡和兔子的数学题</h2><p>问鸡和兔子有18只,一共有46条腿,问鸡有几只,兔子有几只?</p>\n<p>解读:常规的思考方式是鸡为X,兔子为18-X,再设一元方程求解.而超凡的思维是让所有的鸡和兔子都抬起两条腿,这样一共抬起18*2&#x3D;36条腿,剩下的10条腿都是兔子的,那么兔子的数量是10&#x2F;2&#x3D;5只,鸡有13只.</p>\n<p>所以,你要相信,同样的币市走势数据面前,有些人思考逻辑是和你完全不一样的.</p>\n<h2 id=\"十七-关于稳健投资\"><a href=\"#十七-关于稳健投资\" class=\"headerlink\" title=\"十七. 关于稳健投资\"></a>十七. 关于稳健投资</h2><p>投资者A和B,A连续两年第一年收益10%,第二年收益50%,B保持了每年30%的收益,问两年后谁的收益更高?</p>\n<p>解读:结果是B两年后的收益为69%,高于A两年收益65%,高出4个百分点,很简单的一道题只为告诉大家稳健投资不等于低收益,而是为了保证最终高收益的确定性更强.</p>\n<h2 id=\"十八-关于交易频率\"><a href=\"#十八-关于交易频率\" class=\"headerlink\" title=\"十八. 关于交易频率\"></a>十八. 关于交易频率</h2><p>假设币市手续费是千分之1.5,一年10倍换手率,那么一年下来的手续费是0.15%<em>2</em>10&#x3D;3%,对于每周都要大换仓的小伙伴,一年的手续费其实远超10%,甚至20%,所以,除非你有强大的获利能力,否则降低你的交易频率,要不然你的平均收益可能都捐给了交易平台.</p>\n","categories":["Financing"]},{"title":"分享三九投资","url":"/share_from_39/","content":"<p>先来几段三九老师的鸡汤文：</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>有时候，你的顿悟，可能就是别人的基本功;别人的只言片语，可能就会解了你好长时间的惑。</li>\n<li>投资不练价值感知，好比习武不扎马步。</li>\n<li>涨100倍的投资策略，选2个可以涨10倍的币。</li>\n<li>低买高卖，一定是有周期的。</li>\n<li>战场上爬回来的人，你可以不喜欢他，但是你应该信任他。</li>\n<li>了解周期，从不确定性找到确定性，为自己的投资找到指导。</li>\n<li>区块链投资，低买高卖中的【买】与【卖】，时间节点需放置在四年的大周期中。没有周期作为前提，就变成了“赌运气”。 </li>\n<li>真正的财富，是需要你在熊市去囤积的。</li>\n<li>投资不知周期，犹如打仗不懂兵法。</li>\n<li>熊市定投，低买，跌跌不休屯代币。牛市定抛，高卖，屡创新高攒票子。</li>\n<li>持有币的数量不能超过你的能力范围。</li>\n<li>骑单车、游泳、投资都是技能，既然是技能，就可以通过刻意练习来提升投资技能。</li>\n<li>复杂问题简单化，简单问题重复做。</li>\n<li>分批次卖就是分批次“抑”贪婪。</li>\n<li>投资策略分为两条线：长线投资，价值投资，延迟满足。短线投资，价格投机，即时满足。</li>\n<li>二级市场投资相当于独自创业。</li>\n<li>投资风格：守业型投资（收入稳定有一定经济基础，性格偏保守），以守为攻，配置2加N。创业型投资（收入波动大有一定生活压力，性格偏激进），毕其功于一役，单点突破。</li>\n<li>拿出一部分资金来进行短期投资，是完成我们心理上即时满足的一个方法。</li>\n<li>三年内能爆发的项目，公链（相当于盖房子的基础），交易所（相当于运输队）。</li>\n<li>投资是一种不甘平凡的生活态度。</li>\n<li>所有放在交易所的币，都不属于你。一切放在交易所的币，都不属于你。</li>\n<li>持币直至退市，遭遇人生痛苦的巅峰时刻。</li>\n<li>你要去做刻意练习，等到我把房子卖了要冲进去的时候，我是会通知你的。</li>\n<li>教是最好的学，病历本比错题集更形象。</li>\n<li>不管你做什么，都没有比区块链更能赚钱的，但前提是你要坚持刻意学习学会投资。</li>\n<li>区块链目前是一个零和游戏，但这个游戏中的玩家会越来越多。</li>\n<li>根据20&#x2F;80原则，看这篇文章的人中肯定有一些人将来是千万富翁。</li>\n<li>比特币解决了大资产存储的问题，它是一个世界银行。</li>\n<li>鸡蛋不要放在同一个篮子里，思考的重点首先不在“篮子”，而在于你有多少“鸡蛋”。 初级投资者10万元&#x3D;1个鸡蛋。</li>\n<li>所有巨大的商业模式的变革，核心在于八个字：降低成本，提升效率。所以区块链能成功。</li>\n<li>投资第一天坑：把价格投机后的套牢当成价值投资。</li>\n<li>投资三板斧：周期、策略、耐心。<br>投资护城河：场外赚钱能力。<br>投资定海神针：持仓成本进入第一梯队。<br>投资第一天敌：“祥林嫂”式的抱怨。</li>\n<li>投资最好的状态就是手心微微冒汗，晚上睡得香。</li>\n<li>行情下降的时候，就是你苦练内功的时候。</li>\n<li>价值投资基于周期，价格投机基于事件（横盘震荡）。</li>\n</ul>\n<p>我认为三九老师找到了自己的道。大家可以进行深度的学习和参考。<br>明天在进行详细分析给你听。</p>\n","categories":["Financing"]},{"title":"分享美林投资时钟理论","url":"/share_the_merrill/","content":"<p>相信看过我分享的朋友还依稀记得周期那一节。我相信历史，深知兴衰，合久必分分久必合。在投资领域上亦同，常常说经历几个牛熊过后才会成长为合格的投资者。有牛市就有熊市，有长周期，有短周期，越短的周期越不好预测。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-经济周期\"><a href=\"#1-经济周期\" class=\"headerlink\" title=\"1.经济周期\"></a>1.经济周期</h2><p>美林投资时钟理论按照经济增长与通胀的不同搭配，将经济周期划分为四个阶段：</p>\n<ul>\n<li><p>1、“经济上行，通胀下行”构成复苏阶段，此阶段由于股票对经济的弹性更大，其相对债券和现金具备明显超额收益；</p>\n</li>\n<li><p>2、“经济上行，通胀上行”构成过热阶段，在此阶段，通胀上升增加了持有现金的机会成本，可能出台的加息政策降低了债券的吸引力，股票的配置价值相对较强，而商品则将明显走牛；</p>\n</li>\n<li><p>3、“经济下行，通胀上行”构成滞胀阶段，在滞胀阶段，现金收益率提高，持有现金最明智，经济下行对企业盈利的冲击将对股票构成负面影响，债券相对股票的收益率提高；</p>\n</li>\n<li><p>4、“经济下行，通胀下行”构成衰退阶段，在衰退阶段，通胀压力下降，货币政策趋松，债券表现最突出，随着经济即将见底的预期逐步形成，股票的吸引力逐步增强。</p>\n</li>\n</ul>\n<h2 id=\"2-收益率\"><a href=\"#2-收益率\" class=\"headerlink\" title=\"2.收益率\"></a>2.收益率</h2><ul>\n<li>Ⅰ衰退：债券&gt;现金&gt;股票&gt;大宗商品</li>\n<li>Ⅱ复苏：股票&gt;债券&gt;现金&gt;大宗商品</li>\n<li>Ⅲ过热：大宗商品&gt;股票&gt;现金&#x2F;债券</li>\n<li>Ⅳ滞胀：现金&gt;大宗商品&#x2F;债券&gt;股票</li>\n</ul>\n<h2 id=\"3-制定周期\"><a href=\"#3-制定周期\" class=\"headerlink\" title=\"3.制定周期\"></a>3.制定周期</h2><ul>\n<li>Ⅰ周期性：当经济增长加快（北），股票和大宗商品表现好。周期性行业，如：高科技股或钢铁股表现超过大市。当经济增长放缓（南），债券、现金及防守性投资组合表现超过大市。</li>\n<li>Ⅱ久期：当通胀率下降（西），折现率下降，金融资产表现好。投资者购买久期长的成长型股票。当通胀率上升（东），实体资产，如：大宗商品和现金表现好。估值波动小而且久期短的价值型股票表现超出大市。</li>\n<li>Ⅲ利率敏感：银行和可选消费股属于利率敏感型，在一个周期中最早有反应。在中央银行放松银根，增长开始复苏时的衰退和复苏阶段，它们的表现最好。</li>\n<li>Ⅳ与标的资产相关：一些行业的表现与标的资产的价格走势相关联。保险类股票和投资银行类股票往往对债券或股权价格敏感，在衰退或复苏阶段中表现得好。矿业股对金属价格敏感，在过热阶段中表现得好。石油与天然气股对石油价格敏感，在滞胀阶段中表现超过大市。</li>\n</ul>\n<p>在感知周期中，熊市定投，牛市定抛。<br>也就是低买高卖，趋势投资者的核心系统。</p>\n","categories":["Financing"]},{"title":"半年从30万到3000万，你以为全靠运气？","url":"/not_only_luck_30w_to_3000w_half_a_year/","content":"<p>进入币圈几个月，疯狂学习，快速入了门。就像笑来老师说的，「快速成功」难，但是「快速入门」容易且有必要。快速入门我是完成了，但怎么快速度过这个阶段，这是门学问。</p>\n<p>我知道的方法论有：</p>\n<p><em><strong>反复刻意练习，反复试错，反复反思，反复改进。</strong></em></p>\n<p>总之，首先应该快速行动起来。这是做正确的事。</p>\n<span id=\"more\"></span>\n\n<p>如果这个时候，还有个前人给你指路，通过自己的实践，在方法，观念，意识上给你引导，是不是会好得多，至少不用绕一些不必要的弯子。这是给你正确的方法。</p>\n<p><strong>用正确的方法做正确的事，足以快速通过这个阶段。</strong></p>\n<p>在学习区块链，投资区块链的起步过程中，我们在爆炸性的知识中寻觅对自己有用的信息和资料，多而乱，会让我们疲惫不堪。学到了不少，但是有些投资策略却只知皮毛，不知精髓，更不懂得灵活运用。</p>\n<p>例如：</p>\n<ul>\n<li>你是不是也和我一样，只知道老老实实地屯，被套后，为了不割肉，被动地转为了价值投资。</li>\n<li>你是不是也一直不清楚，居然还有「定抛」这个概念。</li>\n</ul>\n<p>「定投」这个概念咱们都知道（当然定投不只定时定额），而「定抛」的策略，我第一次知道，却是张三九的课里：</p>\n<p><strong>市场有【周期】，投资不知周期，就好比打仗不知兵法。</strong></p>\n<p>举个例子：</p>\n<p>有几年，大蒜的价格从最低的1分钱&#x2F;斤，涨至最高的 10 多元&#x2F;斤，涨幅达 100 倍。就一颗大蒜而言，它的疯狂程度足以和比特币争个高低。</p>\n<p>在丰收—跌价、减产—涨价的轮回中，普通的「蒜农」每次都滞后于市场的脉动，永远「踩不准点！」</p>\n<p>自然天灾导致产量下降、供小于求导致价格暴涨、中间商趁机囤货居奇操控价格。</p>\n<p>产量过剩导致供过于求价格大跌，价格大跌无人问津产量下降，2至3 年完成一个 “涨跌” 的全过程，这就是一个周期。</p>\n<p>对于投资而言：</p>\n<p><strong>【 周期 】同样分为两部分，牛涨与熊跌。</strong></p>\n<p>所以，我们首要的任务就是利用周期来避险。</p>\n<p>当一个事物发展的规律基本呈现时，作为一名合格投资者，首要的任务是在此基础上进行避险，而不是继续「掩耳盗铃」，像一个赌徒一样冒进。</p>\n<p><strong>低买高卖的道理很简单，可是99%的人都做不到。</strong></p>\n<p>所以：</p>\n<p>熊市「定投」才是明智之举。这里的熊市，可指较长时间段的熊市，也指投资标的价格下跌，此时该分批次买入，补仓屯币。</p>\n<p>牛市「定卖」才是最优策略。这里的牛市，可指较长时间段的牛市，也指投资标的价格上涨到预期时，该分批次卖出，攒票子。</p>\n<p>记住一句话：</p>\n<p><strong>屡创新高攒票子，跌跌不休屯代币</strong></p>\n<blockquote>\n<p>你真的理解【周期】吗？</p>\n</blockquote>\n<p>我先来问你几个问题：</p>\n<ul>\n<li>你能否做到长时间不看投资标的的价格，例如半个月；</li>\n<li>你能否做到「低买高卖」，做到牛市变现，熊市屯币，而不是在套牢后成为「被动价值投资」；</li>\n<li>你是否对资金做一个长期的安排，例如：如果未来两年是熊市，你准备了「孩子的奶粉钱、家人旅游潇洒的钱、应对意外变故的钱」了吗？</li>\n</ul>\n<p>想必，你并没有深刻理解什么是周期。</p>\n<p>怎么办？</p>\n<p>周期的背后，考验的是人的耐心，是见微知著的能力。</p>\n<p>如果没有，那么就得训练！</p>\n<blockquote>\n<p>【价值感知】训练方法</p>\n</blockquote>\n<p>最初提出：李笑来在他的《通往财富自由之路》中提出了这个训练方法。</p>\n<p>如何训练：选定一两只股票进行长期的追踪记录，算出它每次相对于第一次记录时的涨跌幅。</p>\n<p>每月只能允许记录一次，其他时间绝对不允许去看价格。</p>\n<p>训练时间：一年</p>\n<p>目的：做好最基础的「价值感知」训练，培养耐心、自控力、见微知著的能力，去感知牛熊，学会敬畏周期。从而以一个更宏观的视角去看待投资。</p>\n<p>在投资之前，我们每个人都应该进行「价值感知训练」，完成「自我投资教育」。不进行投资训练，拿着真金白银直接冲进去，那就真的是赌运气了。就像：要学好游泳，你需要一个游泳教练；要学会开车，你需要一个驾校教练；要做好投资，你同样需要一个投资教练。</p>\n","categories":["Financing"]},{"title":"周期性经济对币市影响分析","url":"/cyclical_economy_on_the_bitcoin/","content":"<p>现在全球的形势是美国加息缩表减税，维持经济提振，避免杠杆破裂，避免美股崩盘，这是大事，美国没时间玩比特币什么破事，人家这是商业性的上着玩。把美股稳几年，把资产债务缩减下来，风险就稳住了，经济还能增长一些。</p>\n<span id=\"more\"></span>\n\n<p>欧洲那边还是乱，前段时间还在降息，欧洲人民的钱也不敢放银行，只能买股票投数字货币，美国现在什么也不管就加息让欧洲很为难。日本是没办法，特朗普现在政策回缩，不想带小弟玩了，日本只能期待数字货币能拯救已经危险的经济形势。韩国是两边为难，半岛局势恶化，人民被迫屯币。</p>\n<p>中国现在降杠杆，提升短中期的市场借贷便利，股市不振，楼市现在也是难关，房价未来必须降，去年的政策把钱锁死在房子里，现在投资楼市根本没得玩，银行理财也不保险了，股市也玩不下去，现在有个口子出来，你就知道为什么股民会进来。可以说现在的投资市场只有数字货币还可以玩，因为现在数字货币在涨，是牛市，小散认得是这个。</p>\n<p>为什么现在资金还不大，因为大家还觉得是泡沫，是骗局，但当市场再涨几倍，这些人就按捺不住了，死命往里冲，这就是牛市中后期的势头，也是为什么波浪理论第5浪会一场疯狂的原因。</p>\n<p>所以你就知道接下来主要做一件事，就是屯币。屯低位币，逢低就接。就是赌趋势，顺着这个走。然后就是等，保持“佛系”心态。</p>\n<p>掏心窝的语录：</p>\n<p>区块链投资虽然进入了疯狂的牛市，但总体上还处于早期阶段。区块链投资风险很大，要在自己承受的范围内投资。不要将鸡蛋放在一个篮子里，再好的项目也不宜全仓，多选几个项目分散投。不要频繁操作，以免与超级黑马失之交臂。多学习，不断提高自己能力。</p>\n","categories":["Financing"]},{"title":"基金投资必备知识","url":"/fund_investment_necessary_konwledge/","content":"<p>在前面文章中我们知道了投资是理财一部分。</p>\n<p>俗话说“工欲善其事必先利其器”，要做好投资选择合适的工具非常重要，公募基金就是一种适合大多人的投资工具。</p>\n<p>关于公募基金投资，你需要了解的必备知识帮你整理好了，在此奉上。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"01-公募基金是什么\"><a href=\"#01-公募基金是什么\" class=\"headerlink\" title=\"01 公募基金是什么\"></a><strong>01 公募基金是什么</strong></h2><p>“基金”一词在我们生活中很常见，你可能听说过慈善基金、保险基金、退休基金等，不过今天讲的公募基金可以说是最贴近大家生活的基金。</p>\n<p>公募基金，通俗的讲就是通过公开募集的方式，大家把钱凑在一起统一交给基金公司管理，基金公司会任命基金经理专门打理这笔钱，用于投资股票、债券等。如果赚钱了，买了基金的你也会获得收益；当然，基金经理也不是神，并不能保证投资一定能够赚钱，也会有赔钱的时候。</p>\n<h3 id=\"公募基金除了方便投资外，最大好处的是“安全”。\"><a href=\"#公募基金除了方便投资外，最大好处的是“安全”。\" class=\"headerlink\" title=\"公募基金除了方便投资外，最大好处的是“安全”。\"></a><strong>公募基金除了方便投资外，最大好处的是“安全”。</strong></h3><p>目前的公募基金是最透明、最规范的投资产品，基金公司的设立本身就有非常高的准入门槛，你投资到基金的钱是放到托管机构中，并不是直接给到基金公司，也不经过类似且慢这样的基金销售机构。<br>而国内的托管机构通常为银行、券商等，且整个流程都会受到严格监管，可以说资金是非常安全的，绝对不会存在跑路的风险。</p>\n<h2 id=\"02-公募基金的类型\"><a href=\"#02-公募基金的类型\" class=\"headerlink\" title=\"02 公募基金的类型\"></a><strong>02 公募基金的类型</strong></h2><blockquote>\n<p><strong>按投资标的分类</strong></p>\n</blockquote>\n<p>通常把80%以上资产投资于股票的基金称为股票基金；<br>80%以上资产投资于债券的基金称为债券基金（其中完全投资于债券的基金称为纯债基金）；<br>介于上述两者间的称为混合基金；<br>我们熟悉的余额宝则属于货币基金，主要投资于国库券、商业票据、银行定期存单等短期货币市场工具；<br>另外还有一些基金比较另类，投资的是黄金、期货或者大宗商品等，这类基金称为另类投资基金。</p>\n<p> 通常情况下，基金的预期收益和风险都是股票型＞混合型＞债券型＞货币型。</p>\n<blockquote>\n<p><strong>按投资市场分类</strong></p>\n</blockquote>\n<p>如果某只基金单纯买了境内市场的股票、债券等，那这只基金就是国内基金了；<br>但也有一些基金买了境外上市的一些公司的股票、债券，比如某基金买了在香港上市的腾讯，或在美股上市的阿里巴巴，这类基金就是我们常听到的QDII基金或沪港深基金了。<br>这类基金的存在也让普通投资者有了简便的方式参与全球市场。</p>\n<blockquote>\n<p><strong>按投资理念分类</strong></p>\n</blockquote>\n<p>跟踪具体指数的基金被称为被动型基金（通常又被称为指数基金）。</p>\n<p>这类基金完全复制对应指数的股票比例，因此它的业绩更多的取决于跟踪的指数本身，而与基金经理的能力几乎没有什么关系。</p>\n<p>这里需要说明一下指数：所谓的指数你可以简单理解为一套选股规则，有具体的成分股及成分股筛选标准。</p>\n<p>常见的指数有大家耳熟能详的沪深300,、中证500等。以沪深300为例，这个指数是中证指数公司编制的，其成分股是A股市值最大的300家公司，通常用于反映大盘股的走势。</p>\n<p>对应的，那些依靠基金经理个人能力投资的基金称为主动型基金。这也是大多数人理解的基金，这类基金投资业绩的好坏更多的依赖于基金经理。</p>\n<p>介于主动型和完全被动型指数基金之间还有一类称为增强型指数基金。增强型指数基金也应归属于指数基金，只不过它并不是完全模拟指数来买股的，在参考指数的基础上还加入了一些增强策略来博取超越指数的收益。</p>\n<p><strong>总结一下基金的主要分类方式</strong></p>\n<p>按投资标的：货币型、股票型、债券型、混合型、另类投资型</p>\n<p>按投资市场：仅投资于境内市场的基金、可投资于境外市场的基金（沪港深基金、QDII基金）</p>\n<p>按投资理念：主动型、被动型（完全被动型、增强型）</p>\n<h2 id=\"03-基金交易的常见名词\"><a href=\"#03-基金交易的常见名词\" class=\"headerlink\" title=\"03 基金交易的常见名词\"></a><strong>03 基金交易的常见名词</strong></h2><blockquote>\n<p><strong>份额&amp;净值</strong></p>\n</blockquote>\n<p>购买的基金的数量可以用这个“份额”来衡量，比如你可以说你持有1000份某基金。</p>\n<p>基金的“净值”理解为每份基金的价格。通常我们讲的净值指的是“单位净值”，也就是你实际买卖中会使用到的净值，它代表了当前每份基金的净资产价值。</p>\n<blockquote>\n<p><strong>申购&amp;认购</strong></p>\n</blockquote>\n<p>基金的买入严格来说应该叫申购，即申请购买的意思。基金申购采取“金额申购”原则，即以确定的金额去换取基金份额。</p>\n<p>与“申购”相近的还有一个概念叫作“认购”，在基金刚成立时通常有个募集期，在募集期申请购买基金就称为认购。</p>\n<p>简单的理解就是新基金的买入叫认购，老基金的买入叫申购。</p>\n<blockquote>\n<p><strong>赎回</strong></p>\n</blockquote>\n<p>基金的卖出行为也叫基金的赎回，基金赎回采用“份额赎回”原则，即我们在卖出基金时是按卖出的份额提出，而不是按卖出的金额提出，这点有别于前面讲到的基金申购的“金额申购”原则。 </p>\n<p>你一定会疑惑，为什么申购时就按金额，赎回时就按份额呢？其实这跟基金交易中的“未知价原则”有关。</p>\n<p>所谓的“未知价原则”就是你申购、赎回基金的时候具体的成交的价格（也就是前面提到的单位净值）你是不知道的</p>\n<p>是的，你没有听错！基金的单位净值只有在交易日收盘后晚上基金公司才会公布，而你的买卖行为是必须在收盘前（也即交易时间内）完成的。</p>\n<blockquote>\n<p><strong>交易时间</strong></p>\n</blockquote>\n<p>相信你经常看到这样的表述：T日、T+0、T+1等，这里的T日指的是交易日，周末和节假日不属于交易日。需要特别注意的是，交易日并不完全等于工作日，有时候周末是工作日但是当天并不是交易日。</p>\n<p>基金的交易时间你只需记住一个特别的时间点：交易日的15：00。</p>\n<p>1）交易日15:00以前申购或赎回基金，根据当天收盘净值进行结算，但需要下一个交易日（T+1）进行确认，QDII基金需要T+2确认。</p>\n<p>2）交易日15:00以后申购或赎回基金，根据下个交易日的净值结算，相当于下个交易日15：00前交易的。</p>\n<blockquote>\n<p><strong>赎回到账时间</strong></p>\n</blockquote>\n<p>基金的赎回到账时间不同的基金不太一样，一般情况下：</p>\n<p>货币基金为T+0（快速取现）或T+1（普通取现）；</p>\n<p>国内股票、混合、债券型基金一般为T+1至T+4个工作日到账；</p>\n<p>海外型QDII基金赎回到账时间一般为T+4至T+10个工作日。</p>\n<p>具体的到账时间可以查看对应基金的《招募说明书》或在交易订单中查看。</p>\n<blockquote>\n<p><strong>基金的分红</strong></p>\n</blockquote>\n<p>基金交易中你可能会经常遇到基金分红的情况，基金分红有两种方式可以选择：现金分红和红利再投。</p>\n<p>简单来说，市场被高估时适合选择现金分红，低估时适合红利再投。</p>\n<h2 id=\"04-基金的费用\"><a href=\"#04-基金的费用\" class=\"headerlink\" title=\"04 基金的费用\"></a><strong>04 基金的费用</strong></h2><p><strong>基金的费用主要包括两类：申赎费用和运作费用</strong></p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-7fd599129a61c431?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<blockquote>\n<p><strong>申（认）购费</strong></p>\n</blockquote>\n<p>申购费和认购费一般在购买基金时都会计算并显示出来。</p>\n<p>一般主动型股票基金、混合基金申购费为1.5%，指数基金及债券型基金的申购费会低一些，货币基金没有申购费用。（具体的费用可以在基金详情中查看到）。</p>\n<p>实际上基金销售平台通常会对申购费用进行打折，如且慢平台上大部分基金的申购费都为一折。</p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-de1091609cfa0a67?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>例如上图的沪深300指数基金，最高申购费是1.2%，而在且慢上购买实际支付的费用为0.12%。</p>\n<blockquote>\n<p><strong>赎回费</strong></p>\n</blockquote>\n<p>基金的赎回费也是不同的基金会有些差别，另外持有的时间也有可能影响赎回费，通常持有时间越长赎回费越低，大多数基金持有两年以上就没有赎回费了，这也体现出基金是更适合长期投资的。</p>\n<p>同样，各基金具体的赎回费你也可以在且慢平台上基金的详情中查到，区别于申购费，赎回费各渠道都不会打折，你看到的费率就是实际需要支付的费率了。</p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-f4e943eaf4037871?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>赎回费的计算方式：</p>\n<p>（以0.5%赎回费率，赎回100份净值为1.2元的基金为例）</p>\n<p>由于基金“未知价法”的存在，基金赎回采用份额赎回的方式，实际的赎回总金额是未知的。</p>\n<p>赎回总金额&#x3D;赎回份额x T日净值&#x3D;100x1.2&#x3D;120元</p>\n<p>赎回费&#x3D;赎回总金额x赎回费率&#x3D;120x0.5%&#x3D;0.6元</p>\n<p>赎回到账金额&#x3D;赎回总金额-赎回费&#x3D;120-0.6&#x3D;119.4元</p>\n<blockquote>\n<p><strong>运作费用</strong></p>\n</blockquote>\n<p>顾名思义，基金的运作费用是在基金日常运作中产生的费用，包括管理费、托管费和销售服务费。 </p>\n<p>运作费用跟申赎费用最大的区别就是这类费用是每日在基金资产中计提的，也就是说你每天看到的净值其实已经偷偷扣除了这些费用，在交易过程中不需要再扣取。这种费用的扣取是“无痛”的，因为你根本就看不到。但具体的费率你还是可以在基金详情中查看到。</p>\n<p>管理费是基金公司主要的收入来源，是基金经理管理基金应得的回报。</p>\n<p>国内公募基金一般采用一个固定的费率，不同的基金管理费会有所不同，一般偏股型基金管理费＞债券型基金管理费＞货币基金管理费，主动型基金管理费＞指数基金管理费。</p>\n<p>托管费是基金托管人为保管和处置基金资产而向基金收取的费用，不同的基金费率也不太一样。</p>\n<p>销售服务费是专门为销售服务过程收取的，用于支付销售机构佣金、基金的营销费用等。但不是所有基金都有销售服务费的，一般当某基金有A类和C类之分时，A类基金一般是不收此项费用的。</p>\n<p><strong>以上就是基金投资的必备知识</strong></p>\n<p><strong>关于投资理财的更多内容，请继续阅读接下来文章的分享哦。</strong></p>\n","categories":["Financing"]},{"title":"学习理财第一课","url":"/first_lesson_of_financial_management/","content":"<p>很多人面对琳琅满目的产品无从选择，或是把收益高低作为唯一选择依据，或是频繁买入卖出，导致最终亏损离场，因此对理财产生焦虑。</p>\n<p>真正的理财，应该是能够帮助你在奋斗的过程中，减少资产打理的烦恼，用较少的时间完成资产的保值增值，让你面对未来更加从容。</p>\n<p>希望跟着阿牛的学习能帮助你建立正确的理财观，让你真正学会梳理好自己的资产状况。</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>一、【扫清理财的常见误区】☝<ul>\n<li>1、理财就是一夜暴富</li>\n<li>2、资金少就不理财，等有钱了再理财</li>\n<li>3、理财就是投资</li>\n</ul>\n</li>\n<li>二、【一个公式，点亮你的理财思维】☝<ul>\n<li>1、理财和不理财的区别到底有多大？</li>\n<li>2、复利三要素：时间、本金、收益率</li>\n<li>3、用四笔钱思维打造你的理财系统</li>\n</ul>\n</li>\n</ul>\n<p>很多人对理财存在理解误区，因此在学习理财思维之前，阿牛需要先纠正一些常见的理财误区，看看能不能帮到你。让我们先扫清理财的常见误区~</p>\n<h2 id=\"一、【理财就是一夜暴富】\"><a href=\"#一、【理财就是一夜暴富】\" class=\"headerlink\" title=\"一、【理财就是一夜暴富】\"></a>一、【理财就是一夜暴富】</h2><p>很多人都有这个误区，但其实理财并不能一夜暴富。理财是通过合理规划你的资产，做好不同人生阶段的资金适配，在保障财务状况稳定的前提下，实现资产的保值增值，让你面对未来更加从容。</p>\n<h2 id=\"二、【资金少就不理财，等有钱了再理财】\"><a href=\"#二、【资金少就不理财，等有钱了再理财】\" class=\"headerlink\" title=\"二、【资金少就不理财，等有钱了再理财】\"></a>二、【资金少就不理财，等有钱了再理财】</h2><p>很多人觉得自己目前的本金比较少，可以不用理财，等以后有钱再理财就可以了。但是如果你不懂得如何合理规划和安排，哪怕你拥有50万、500万甚至更多的时候，也还是会不知所措。</p>\n<p>再者，当你本金少的时候就开始尝试去理财，尽管可能会遇到一些坑，但是由于本金少，这个亏损还是可以承受的。<br>但是，当你已经充分积累本金后才开始理财，因为缺乏经验，踩坑的后果也许难以想象。</p>\n<p>所以，理财要趁早，理财能力是一个积累的过程，它需要尽早规划并不断锻炼。</p>\n<h2 id=\"三、【理财就是投资】\"><a href=\"#三、【理财就是投资】\" class=\"headerlink\" title=\"三、【理财就是投资】\"></a>三、【理财就是投资】</h2><p>理财是在保障财务状况稳定的前提下，实现资产的保值增值，它并不仅仅只有投资。投资只是理财的一部分，是实现资产保值增值的手段，你还需要通过保险以保障财务状况稳定，以应对未来不确定的风险，比如大病开销、意外等。你可以把投资理解为进攻，保险理解为防守，一个科学合理的理财规划应该既有进攻也有防守。 </p>\n<p>理财的常见误区，就介绍到这里。让我们开始下一步学习吧~</p>\n<hr>\n<p>对待任何一件事，理清楚其背后的思维逻辑很重要，这有助于你系统地了解事情本身。那么，理财思维究竟是什么样的呢？</p>\n<h2 id=\"一、【一个公式，点亮你的理财思维】🌟\"><a href=\"#一、【一个公式，点亮你的理财思维】🌟\" class=\"headerlink\" title=\"一、【一个公式，点亮你的理财思维】🌟\"></a>一、【一个公式，点亮你的理财思维】🌟</h2><h3 id=\"1、【理财和不理财的区别到底有多大？】\"><a href=\"#1、【理财和不理财的区别到底有多大？】\" class=\"headerlink\" title=\"1、【理财和不理财的区别到底有多大？】\"></a>1、【理财和不理财的区别到底有多大？】</h3><p>先举个例子，一个一线城市初入职场的人，假如他的月工资收入假如是1万2，抛开日常消费、租房、保险等基本花销外，每个月能结余3000左右。👦<br>假设两种不同的投入方式，第一种是，把每个月三分之二的结余，即2000元去做理财，预期年化收益能够达到10%，然后剩下的1000元放在银行。第二种是不理财，把3000元全部放在银行卡。</p>\n<p>这两种选择结果，分别以蓝色和橙色两种颜色展示出来：🎅</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-2e72e32e15dc41b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"来自且慢.png\"></p>\n<p>这张图中，蓝色是理财的结果，黄色是银行存款的结果，10年、15年、20年，随着理财年限的增加，结果是非常不一样的。😉<br>即使在工资收入增速为0 ，不增加可投入本金的极端假设条件下，不同的理财方式会对个人资产积累带来极大的影响，而👉复利效应👈是理财保值增值最主要的原因。</p>\n<h2 id=\"二、【复利三要素：时间、本金、收益率】\"><a href=\"#二、【复利三要素：时间、本金、收益率】\" class=\"headerlink\" title=\"二、【复利三要素：时间、本金、收益率】\"></a>二、【复利三要素：时间、本金、收益率】</h2><p>那什么是复利效应？<br>复利&#x3D;本金*（1+收益率）^时间<br>复利是让本金在一个时间周期中，找到一个可以持续获得的合理收益率，并通过耐心的等待，换取本金的成长空间。就像上图一样，随着时间的拉长，复利效应会越发的明显，这也是你资产保值增值的根本。</p>\n<p>当然，复利公式在理财中并不像表面那样单一，当你站在总资产的角度，对本金、收益率、时间进行拆解分析时，能够看到更深层次的东西。</p>\n<p>本金🚀<br>本金是你所有能用于理财的资产，不仅包括留给未来的钱，也包含那些准备用于年底旅游的钱。<br>很多人往往会忘记本金的重要性，其实它的增加决定着未来资产的高度，但本金的增加并不是理财能带来的，是要你不断努力去从外部获取。🐱<br>因此，你不要让理财占用太多的时间，而是通过自己事业的成长，去获得更多本金。然后，在本金安全的前提下，通过理财不断保值增值。🐔<br>当然，这里的安全并不是一点都不亏，而是在理财前确认这些产品都是靠谱的，不会因跑路导致本金全无或者重大损失。</p>\n<p>时间🚀<br>在复利中，时间起到关键的作用，它包含着两层含义。<br>👉第一层是比较好理解的，时间越长复利效应越明显，所以理财要趁早。<br>👉第二层是建立在本金之上的概念，你的本金中包含着准备日常开支的钱、准备年底旅游的钱、留给未来的钱等，不同用途的钱具有不同时间的特性，比如日常开销需要随时取出、年底旅游开销要在年底使用、留给未来的钱会在三五年内都不使用等。<br>👉因此，你不仅要趁早理财，还要区分好资产以确定合适的时间期限。</p>\n<p>🚀收益率<br>👉理财不是一味地追求高收益，你需要根据本金中不同资产的时间特性和风险性要求，选择合适的产品去获取合理的收益。<br>可以看看下表，这是根据不同用途资金列举的合理预期收益：</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-28aa186c815e45fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"来自且慢.png\"></p>\n<p>当你依照这样的理财思维，站在整个资产的保值增值角度看，你会发现理财并不单纯的追求高收益率那么简单，它不仅需要考虑本金中的各资产用途、对应的时间期限、合理的收益率，以实现整个资产的有效复利。🐴它还需要考虑的是本金的成长性，也就是你通过奋斗成长所带来的获取资产能力的增加，这是整个资产空间上升最大的动力来源。🍳</p>\n<h2 id=\"三、【用四笔钱思维打造你的理财系统】🚀\"><a href=\"#三、【用四笔钱思维打造你的理财系统】🚀\" class=\"headerlink\" title=\"三、【用四笔钱思维打造你的理财系统】🚀\"></a>三、【用四笔钱思维打造你的理财系统】🚀</h2><p>当然，你要实现总资产有效复利的话，需要先把资产梳理清楚，并且知道不同的钱需要完成什么样的任务。<br>那如何梳理资产呢？<br>👉阿牛建议你，把整体资产分成活钱管理、稳健理财、长期投资、保险保障四笔钱。</p>\n<p>在拆解四笔钱思维之前，阿牛先普及一个知识点：金融的三个属性——收益性、风险性、流动性，这其实是实现总资产有效复利所遵循的底层逻辑。👈<br>一般来讲，风险性和收益性成正相关，越安全的投资，其收益就越低，反之亦然。🌟<br>而流动性和收益性两者一般成负相关。流动性越高，收益性越低；流动性越低，收益性越高。🌟</p>\n<p>因此，理财不能只看到收益一项，更重要的是看到期限和风险，这也是为什么会在复利效应中提到，要你根据本金中不同资产的时间和风险性要求，选择合适的产品去获取合理的收益。<br>那么，阿牛来拆解一下这四笔钱：🚀</p>\n<p>【活钱管理】的是你随时需要用的钱，主要是用于日常支出。因此，活钱管理最重要的是流动好，风险低，相应的收益不会太高。 🎸</p>\n<p>【稳健理财】中是你为一定期限的支出做的准备，不需要随时动用，但是会有具体用途，比如下个月要还信用卡的钱，计划年底要去旅游的钱，计划明年或后年买车的钱。在尽量不亏损的前提下，根据时间搭配好合适的产品，去获取比活钱更高的收益。 🎸</p>\n<p>【长期投资】是留给未来的钱，这部分钱投资期限较长，以高风险去获取高收益，然后用期限的拉长去降低长期投资的风险。 🎸</p>\n<p>【保险保障】则是在不确定的未来中，给你的生活托底。让你不至于在风险发生的时候动用本金，尤其是长期投资的钱，在市场中被迫退出，承担不必要的损失。🎸</p>\n<p>接下来，你可能会问：“四笔钱的比例一般是多少呢？”😳<br>举个例子供参考，一个一线城市初入职场的人，假设月收入是1万元，每月收入的分配可以这么分配：</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-2230803df8a4f1a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"来自且慢.png\"></p>\n<p>当然，这个比例并不是通用的（其实是阿牛自己的案例），现实中每个家庭的情况差别也很大，你需要根据你自己的具体情况来做安排。</p>\n<p>这四笔钱中活钱管理、稳健理财、长期投资属于投资部分，保险保障属于保障部分。☝</p>\n<p>投资中，你可以通过复利效应使资产获得保值增值，而保险则为你的投资乃至生活建立一张安全网，以确保复利效应有效进行。<br>这两者一为生钱，一位护钱，缺一不可。👈</p>\n<p>掌握这四笔钱的理财思维，可以帮助你根据具体的用途，为不同的资产寻找合适的投资产品，从而建立一个属于你自己的理财系统。<br>那么，你肯定会问：“理财思维我已经知道了，每笔钱的实操应该怎么做呢？”让阿牛带你更加深入的了解理财世界吧~😏</p>\n<p>预告一下明天的内容，明天我们会分享，长期的钱应该怎么具体打理？<br>不考虑保险，日常用的钱放零钱通或者余额宝，投资的钱每月定投指数基金或者你看好的股票，应该是新手的选择吧～</p>\n","categories":["Financing"]},{"title":"操作系统之外汇交易","url":"/operating_system_for_forex_trading/","content":"<blockquote>\n<p>外汇交易高手一致性获利的前提是：正确的交易理念+交易策略+技术分析+资金管理+有效的执行。</p>\n</blockquote>\n<p>想通过投资实现财务自由，那就通过向高手学习不断提升你运作资金的能力，成为金字塔尖高手行列的一员。</p>\n<p>今天给大家透露外汇高手是如何玩外汇交易的，当你了解他们的手法的时候，你会为他们的操作手法和思维拍案叫绝，这也是给你思维视野的一次提升。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"外汇交易本身也是概率游戏\"><a href=\"#外汇交易本身也是概率游戏\" class=\"headerlink\" title=\"外汇交易本身也是概率游戏\"></a>外汇交易本身也是概率游戏</h2><p>所以我们只能利用正确的资金管理和策略来操作布局，行情走势的多样化的，以不同的形态产生，这些也无法预料，我们的策略也只是在符合我们预期的情况下有效盈利，在不符合我们策略预期的情况下会出现亏损。</p>\n<p>在外汇交易中，我们的优势不在于判断准确，而在于资金管理和策略，塑造正确的资金管理系统和策略尤为重要。</p>\n<p>资金管理包括：仓位，胜算，盈亏比，做单频率，对冲交易，止损措施。</p>\n<p>策略包括：布局，优势，概率，统计学。</p>\n<h2 id=\"在外汇交易中正确的资金管理应该是什么标准呢？\"><a href=\"#在外汇交易中正确的资金管理应该是什么标准呢？\" class=\"headerlink\" title=\"在外汇交易中正确的资金管理应该是什么标准呢？\"></a>在外汇交易中正确的资金管理应该是什么标准呢？</h2><ul>\n<li>仓位：我以一万美元为例，每一次下单必须设置固定为1手，不能乱调手数；账户总交易品种不能超过3个，总交易手数不能超过3手。</li>\n<li>胜算：每一单下单的胜算必须根据个人经验，胜算达到45%以上在下单。</li>\n<li>盈亏比：必须在1.5:1以上，比如止损25点，那盈利点必须在40点以上。</li>\n<li>做单频率：一天不能超过4单</li>\n<li>对冲交易：应该多元化多品种交易，这样幸福对冲更好，千万不能只操作一个品种操作，因为这样一来机会有限，二来还容易陷入心魔。</li>\n<li>止损措施：每一单必须在下单的同时带上止损，绝不可以先下单在设止损。止损只能在20-30点之间固定，最好是固定止损，比如25点就一种固定25点，或者在平时操作的时候是25点，数据行情是20点。决不能超过30点，不然容易陷入抗单和修改止损的陋习，还影响心态。</li>\n</ul>\n<h2 id=\"外汇交易中正确的策略是什么标准呢？\"><a href=\"#外汇交易中正确的策略是什么标准呢？\" class=\"headerlink\" title=\"外汇交易中正确的策略是什么标准呢？\"></a>外汇交易中正确的策略是什么标准呢？</h2><ul>\n<li>布局：这就是我们根据外汇交易的游戏规则和行情波动的特性采取的操作方案，任何一种方法固定下来都能最终赢利，只是科学控制仓量的学问。就是要有一套有效的价格趋势策略,加上良好的资金管理和风险控制机制，资金要平衡，子力要平衡，局面也要平衡。攻得太急，有弄险之虞;走得太稳，又可能作茧自缚。把握好度，过则冒进，不及则缓，这就是布局。</li>\n<li>优势：外汇交易是不对等的游戏，因为交易成本的存在，玩家和市场不是五五开的，玩家和市场占比是48:52，所以游戏开始玩家就处于弱势，那玩家的优势就是良好的资金管理和发现市场惯性规律，根据胜算下注获取大概率优势。</li>\n<li>概率：下注的每一单，都要用概率思维去判断，而不是凭感觉，概率从何判断呢，这个就是从长期操作获取统计学而来，也就是经验。当你用概率思维思考的时候，你就充分认识了输赢，你就不再纠结每一单的输赢得失，你就会以平和坦然的心态操作。</li>\n<li>统计学：这个就是根据历史交易记录获取的大数据统计出来的概率分布现象，比如非农数据公布，70%出现单边行情，30%出现过山车行情，打断一下。当我们掌握统计学的时候，我们就学会不断的总结，不断的根据历史数据而判断出下单的概率区间，这样增加我们的胜算。</li>\n</ul>\n<hr>\n<p>其实高手们每次入场只是例行公事，按照自己的交易策略简单执行，他们关注过程的控制，把结果交给市场，把执行交给系统，市场不符合你的系统布局，你就小止损离场，证明你是对的，你就大赚一笔，到达盈利目的在离场。只有放下盈利的欲望，你才会得到盈利的结果。</p>\n","categories":["Financing"]},{"title":"支付宝信用卡还款也要收手续费了！如何用更优的方式免费还款","url":"/pay_credit_debt_better_way/","content":"<p>听说支付宝代还信用卡要收费了。让一直使用支付的粉丝心头一跳！我可是绑了几十张卡在上边啊，就是为了一个方便。现在支付宝也开始收费了，还款只能一个个转账了吗？（什么？信用卡还能转账还款。想必有一些信用卡新用户都不知道可以用储蓄卡还款）</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-支付宝公告\"><a href=\"#1-支付宝公告\" class=\"headerlink\" title=\"1.支付宝公告\"></a>1.支付宝公告</h2><blockquote>\n<p>自2019年3月26日开始，个人用户在使用支付宝客户端“信用卡还款”功能时，支付宝将对超出免费额度的部分，收取一定比例的服务费。</p>\n</blockquote>\n<p>据公告，个人用户每人每月都可以享有2000元的基础免费还款额度;超出免费额度后，超出的部分按照0.1%收取服务费，单笔服务费小于0.1元的，按照0.1元收取;在用完基础免费额度后，还可以使用支付宝会员积分兑换更多的免费额度。以还款3000元为例，减去2000元的免费额度，需要支付的服务费为1000*0.1%&#x3D;1元。</p>\n<p>ps：留了一线之地，还有每个月2000免费可用。超出的小伙伴要加0.1%了，确实变得有点鸡肋。这是强迫大家用花呗，少使用信用卡哦。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-b5962a11cb4bca2d.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"支付宝和微信手续费对比.jpeg\"></p>\n<h2 id=\"2-还款信用卡哪家强\"><a href=\"#2-还款信用卡哪家强\" class=\"headerlink\" title=\"2.还款信用卡哪家强\"></a>2.还款信用卡哪家强</h2><p>如果是大额的还款，用户可以选择通过银行网银等渠道免费还款。每家银行都支持自己家的储蓄卡自动还款，可以进行绑定后，当到期日的时候，将钱转入相应的储蓄卡即可。<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-7712bc4239971bec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"招商银行.png\"></p>\n<p>第三方的话，<br>首推云闪付。中国银联官方推出的一款集银行卡管理、支付、生活服务等于一体的软件，云闪付还是蛮好用的，可以使用各种生活活动，查看账单信息等，当然各种活动也很是给力。重要的是代还信用卡不收费哦。<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-e757129496ce103d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"云闪付.png\"></p>\n","categories":["Financing"]},{"title":"是时候告诉你定投的真相了","url":"/its_time_to_tell_you_the_truth_about_dingtou/","content":"<blockquote>\n<p>没错，这是一篇科普文。熊市定投，牛市定抛。价值投资，长保金鸡。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"WHAT-—-什么是定投\"><a href=\"#WHAT-—-什么是定投\" class=\"headerlink\" title=\"WHAT — 什么是定投\"></a>WHAT — 什么是定投</h2><p>假如你毫无投资经验，眼看着市场猛牛上涨，又不知道该买点啥，当你寻求理财帮助时，一定会有人和你说，定投吧。<br>假如你毫无投资经验，眼看着市场蛮熊大跌，又不知道该买点啥，当你寻求理财帮助时，一定会有人和你说，定投吧。</p>\n<p>太阳底下没啥新鲜事，只是每次换了一拨人干着同样的傻事。投资的本质无非是人性。投资者面临的最大风险是：懒、贪、蠢。</p>\n<p>那什么是定投呢？<br>简单来讲就是定额定期分批次进场。<br>比如我会每周五购买1000块钱的比特币。<br>每天分批次购买三次EOS，每次买10美金。</p>\n<h2 id=\"WHY-—-为什么定投\"><a href=\"#WHY-—-为什么定投\" class=\"headerlink\" title=\"WHY — 为什么定投\"></a>WHY — 为什么定投</h2><p>当我们进行投资的时候，往往不知道该买多少，卖多少。最好的投资方式为在合适的时机一次性买入并进行持有，但往往追涨杀跌，买在了高点，卖在了低点造成了大量的经济损失。所以有朋友会耗费大量精力研究种种指标，听很多的课，收益率确没什么提升。</p>\n<p>最简单的有时候会是最好用的。不得不提到一个简单的投资策略 – <strong>定投</strong>。</p>\n<p>定投的五大优点：</p>\n<ul>\n<li>1、定期投资，积少成多</li>\n<li>2、不用考虑投资的时点</li>\n<li>3、平均投资，分散风险</li>\n<li>4、复利效果，长期可观</li>\n<li>5、自动扣款，手续简便</li>\n</ul>\n<p>通过定期投资，如愚公移山般积累原始筹码。无需进行择时进场，任意时间进入，只要坚持下去通过不间断的投资，大大降低风险的同时，将筹码的成本价不断下移直到进入上升通道。这时候触发了止盈率，happy躺赚。</p>\n<h2 id=\"HOW-—-如何进行定投\"><a href=\"#HOW-—-如何进行定投\" class=\"headerlink\" title=\"HOW — 如何进行定投\"></a>HOW — 如何进行定投</h2><p>如果有一定的时间可以自己手工进行操作，用excel进行记录即可，优先在熟悉的平台进行固定周期固定金额的购买。</p>\n<p>举例：<br>小牛每月工资10000块，每个月可以拿出1000块钱做理财。但是小牛没有非常丰富的投资经验，听了朋友的解释，他决定进行每周定投。假设每月四周，那么小牛每次购买250元。这部分钱对于小牛来说在可承受的损失范围内且短期用不到。经过慎重的筛选，小牛最终选择在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaGJnLmNvbS96aC1jbi90b3BpYy9pbnZpdGVkLz9pbnZpdGVfY29kZT10N3Q0Mw==\">火币<i class=\"fa fa-external-link-alt\"></i></span>上每周购买250元的BTC。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-d2d2e2d7729a5d48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"定投实盘模拟数据.png\"></p>\n<p>坚持了一段时间后，共计投入3500元，获利500元，利润率约为15%。走了标准的微笑曲线。</p>\n<p>ps：以上举例时间段为任意选择，更多回测可以自己进行模拟。</p>\n<hr>\n<p>在这里推荐一个好用的平台<span class=\"exturl\" data-url=\"aHR0cDovL3hpYW9iYW8uaW8vcmVnaXN0ZXI/cmVmPTViNTMyZWQ5Y2U0NDQ0MzU5NWQxNTEzOA==\">币小宝<i class=\"fa fa-external-link-alt\"></i></span> ，投资数字资产的最好用平台！</p>\n<p>熊市来洗脑，科普投资技巧，幸福你我他。</p>\n<hr>\n<p>来一张实盘数据：</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-188f134cb24036e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2018-08-29.png\"></p>\n<hr>\n<p>看完之后是不是还有些晕晕的。没关系，工具我们都帮你做好了！一键定投各大币种，欢迎来试用。</p>\n<p>不脸发出试用邀请链接<span class=\"exturl\" data-url=\"aHR0cDovL3hpYW9iYW8uaW8vcmVnaXN0ZXI/cmVmPTViNTMyZWQ5Y2U0NDQ0MzU5NWQxNTEzOA==\">币小宝<i class=\"fa fa-external-link-alt\"></i></span> 。<br>注册即可得价值8.8美金！</p>\n<p>熊市定投，牛市定抛！小宝带你躺赚，穿越牛熊。</p>\n","categories":["Financing"]},{"title":"李笑来2013年度总结","url":"/summary_of_2013_about_lixiaolai/","content":"<p>​2013年4月1日，这个愚人节发生了很多事情。Google一本正经地推出了一个Google Nose，说是可以通过互联网传递气味；Youtube说经过八年的运营，已经选出最好的视频，从此再无必要继续运营；Apple在官方网站贴出一则道歉信；有人在微信上告诉中国学生，College Board的最新通告：从现在开始国际考生参加SAT考试的时候，可以带电子词典……<br>在大伙处心积虑地开愚人节玩笑的时候，有一个玩笑开大了：BTC兑美元价格冲破100美元，最终收盘价为105美元！</p>\n<span id=\"more\"></span>\n\n<p>当一个“虚拟”的货币，在全球都有交易所（价格几乎同步），能与全球几乎所有货币兑换的时候，bitcoin已经不像是虚拟的了——尤其是当1个BTC的价格冲破100美元的时候。时至2013年4月1日，bitcoin总计发行了10,980,875个BTC，按照当时的价格，市值超过11亿美元（1,162,215,810）；当天BTC总计流通55,337个，价值581,035美元。<br>事实上，从一开始，bitcoin就是真正的货币——只不过大多数人并不相信而已。可大多数人的疑虑重重在过去的三年多的时间里并没有阻止bitcoin成为互联网上最有影响力的货币；而放眼将来，也无法阻止它最终早晚会成为地球上最有影响力货币之一。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190426160439.png\"></p>\n<p>2008年，有一个域名，bitcoin.org，被静悄悄地匿名注册成功。同年10月31日，有一篇论文发表在usenet上：Bitcoin design paper；10天之后，开源社区sourceforge.net上出现了一个叫bitcoin的项目，一个注定要颠覆这个世界的开源项目。（看看！这才是真正的敏捷开发！）<br>项目的创造者究竟是谁，没有人知道。只知道一个名字：中田聪（Satoshi Nakamoto）。在Bitcoin成功发布之后，此人从互联网上彻底消失了（国外有个专门的词形容这种消失——infosuicide)。此后，此项目由两个前google工程师维护；即便是他们俩，也声称从未见过中田聪。<br>2009年1月3日，第一个比特币（BTC）诞生；又过了10天，第一笔交易诞生（<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ibG9ja2V4cGxvcmVyLmNvbS9iLzE3MCVFRiVCQyU4OSVFMyU4MCU4Mg==\">http://www.blockexplorer.com/b/170）。<i class=\"fa fa-external-link-alt\"></i></span><br>至此，bitcoin只是极少数程序员手中的玩具。大约10个月之后(2009年10月5日)，有人计算出了BTC汇率：$1 &#x3D; 1,309.03 BTC（天哪，算算吧，BTC在3年之中涨了多少倍！）……<br>BTC第一次被人们像真正的货币一样对待，是2010年的5月21日，一位昵称为laszlo的人，用10,000BTC（当时相当于$25美元）购买了一个匹萨饼优惠券——人类史上不会再出现这种情况了：某人卖了一张匹萨饼优惠券，三年后居然发现自己手里的一个文件价值105万人民币——三年不到的时间里，涨了4万2千倍……<br>2011年2月9日，BTC价格超越1美元；此后一路飙升，到当年6月8日，MtGox上BTC的报价高达31.91美元……<br>然后，史上最大的震荡开始了……<br>因为BTC早已经成为真金白银，无数黑客开始闻风而动。最先被攻破的是dropbox——2011年6月10日，黑客通过Dropbox服务器上的一个bug，进入大量的dropbox帐号，而后获取了一些用户存在那里的Bitcoin钱包。<br>没多久，2011年6月19日，全球最大的BTC交易所MtGox被攻破，黑客在Mtgox上生成了大量的兑换价为0.01美元&#x2F;BTC的订单（当时的兑换价是17美元&#x2F;BTC左右），“倾销”他人账户中的BTC，而后用自己的账户接单；这还不算，黑客随后在网络上公布了一个含有6万个Mtgox帐号及其密码的文件……同一天，那些在MyBitcoin使用同样的用户名与密码的大约600名用户，痛苦地发现自己的BTC不翼而飞，最多的一个人丢了两千多个BTC……<br>这是多米诺骨牌，而其它的交易所也几乎无一幸免。最大的一起失窃案，发生在一台linode虚拟机上；2012年3月1日，黑客在这台虚拟机上偷走了大约5万个BTC。<br>最大的漏洞，其实并不在于这些服务提供商，而在于绝大多数用户在互联网上，常常使用同一套用户名和密码注册登录所有的服务。也就是说，如果黑客知道了某人的dropbox帐号，用同样的用户名和密码，也可以登录此用户的gmail，hotmail, twitter, facebook……<br>有人猜测，微软MSN的衰败，与这一轮疯狂的帐户入侵有关——大家一定还记得，突然之间，MSN上的好多好友变成了色情网站的推广帐号（因为黑客入侵用户hotmail帐户，扫描走BTC钱包之后，就把这些帐号批量卖给色情网站了）。QQ之所以相安无事，是因为绝大多数用户登录时所使用的用户名不是邮箱地址……也许并不是巧合，同年年底，2011年11月，多家中国大型网站发生用户信息泄漏事件。<br>黑客拿到BTC之后，当然要兑现，于是，市场上不断出现倾销大单，最终，BTC价格一度被砸到2美元以下……<br>然而，即便是这样的震荡，也没有彻底毁掉BTC，这是p2p网络的一个重要属性——只要启动，就无法停止……而BTC用户一直在稳定增长，到2012年7月22日，用户在bicoin官方论坛（bitcointalk.org）上总计发表了100万个帖子。<br>到2012年11月28日，bitcoin货币发行了一半（总计发行2100万个）——这是个历史性的时刻。<br>2013年2月的最后一天，BTC价格在601天之后超越历史最高点——31.91美元。一个月后，在愚人节那天，BTC价格超过了100美元。两年多一点点的时间里，它至少涨了100倍。<br>2013年3月，路透社报道，有一位加拿大小伙，决定将房子卖掉，换成BTC——大家惊呼，这真是个疯狂的想法！可事实上，这只是小巫而已，真正的大巫，是个传奇性人物——瑞典海盗党的创始人，Rickard Falkvinge。此人早在2011年5月29日，就宣布将自己所有的财产都换成了BTC，这还不够，他还借了很多钱，大量囤积BTC。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190426160513.png\"></p>\n<p>我和海盗党的创始人一样，并不在乎BTC的匿名性——匿名性本身，对我这种人提供不了多大的价值，我又不买毒品，我又不买军火，我没有用BTC购买任何违法商品的欲望。<br>我也一样，对Bitcoin有着浓厚的兴趣。研究了bitcoin一段时间以后，在2011年5月份，我写了一篇《此物一出天下反》，发表在我的博客上，估计是国内相当早的一篇关于BTC的文章。（在此前几天，新浪发表过一篇《虚拟货币Bitcoin之害》）<br>2011年的6月份，在朋友的帮助下，我在天津和北京的交界处建了一个“矿场”：一共46张5970显卡，装成23台机器，放在一个定制的集装箱里，要用两万伏的交流电……当时的耗资相当于一辆奥迪Q5的价格。资金来自于我在当年3月初以均价6美元买来的BTC，在5月底6月初以28美元的价格卖出了一部分。原本的计划是，在2012年11月，一半的BTC发行完毕之前，通过挖矿，获得更多的BTC。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190426160553.png\"><br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190426160538.png\"><br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190426160606.png\"></p>\n<p>可是，这个当时可能是亚洲最大的矿场并没有给我带来多少收益，甚至是一场灾难。因为供电不稳定，断电之后，别说远程管理了，远程启动都不可能，动不动那些显卡就闲置两周甚至更久，然后，修复后两天内又挂掉……几个月后，我不得不以1&#x2F;5不到的价格处理掉了那些硬件。<br>实在不甘心的我，只好不断买卖——当然，更多的时候是在买入，买到买不动了为止……经过几轮买卖，又恰逢大幅度跌荡，最终，我获得了通过挖矿根本不可能获得的数量。最近总有人问我，那你究竟有多少BTC了？说实话，我真的觉得这个问题的答案其实没什么意义，因为那对别人来说只不过是一串数字而已；而对我自己，也只不过是被我用特定算法翻译成两句话的一对公钥与私钥而已——那个钱包文件，已经物理销毁。<br>据我所知，我可能并不是国内拥有BTC数量最多的人。也许拥有BTC最多的中国人是mpex的站长，此人的邮箱是126.com的。他的网站上写着这样的说明：“The only Bitcoin service that has never been hacked. Established August 2011.”<br>我为什么对Bitcoin有如此笃定的信心呢？这个在别人看来各种不靠谱的东西，为什么在我眼里不能更靠谱了呢？<br>首先，我深知p2p的威力。一切p2p网络都有同样地属性：它一旦启动，就无法阻止。<br>其次，我相信bitcoin比我见过的任何纸币都更真实。事实上，所有的纸币都是虚拟的——纸币本身没有价值，它“代表”一个价值数额。而这个数额，据说是由黄金支持的，你相信吗？我其实是不相信的——事实上，人类史上就没有任何一个特权不滥用自己的。我们之所以姑且相信银行，是因为我们不得不相信。然而，bitcoin不一样，所有使用bitcoin的人，是自愿相信的。我坚信“自愿的信任”远比“被迫的信任”更有价值。<br>最重要的是，当我反复研读Bitcoin design paper之后，我的结论是，最重要的革新，并不是所谓的匿名性（它只是一个附带属性），也不是p2p，而是：bitcoin是一种“通缩货币”——它只发行2100万个。通胀货币只能不断贬值，而通缩货币，只能不断增值。<br>这三个因素放在一起，对我来说，只能给我带来一个决定：买。<br>2013年4月2日清晨，我重新看了一眼mtgox，哦，$105 &#x2F; BTC了。以后可以不看了。</p>\n<p>原文出处（好像已经失效了）：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rbmV3b25lLmNvbS90aGluZ3MvYml0Y29pbi9yZXZpZXdzLzUxNWFmNDk4NzM3M2MyZmQwYjAwMDAxNz9yZWZlcj13ZWlibw==\">https://knewone.com/things/bitcoin/reviews/515af4987373c2fd0b000017?refer=weibo<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Financing"]},{"title":"止盈止损","url":"/surplus_stop_loss/","content":"<blockquote>\n<p>止损是让你活着；止盈，是让你活得更好。投资，磨练的是人性。</p>\n</blockquote>\n<p>老生常谈止盈止损，小白听到常常不得其解。那么这几个名词到底是什么意思，又该如何使用呢？今天阿牛给大家带来详细的介绍。</p>\n<p>作为个人交易员，在我们交易过程中，常常会感到涨的时候买的少了，跌的时候没有卖出。每次赚钱都破解不了10%魔咒，熬过漫长熊市，刚涨了10%就卖出了。每次亏损都伤筋动骨，趴在地上装死，永不退出，最后伤痕累累割肉出局。<br>是否深有同感？恭喜你，已经开始从嫩韭菜转变到新韭菜了。导致这个结果往往是因为操作不当，没有良好的操作习惯导致。通过大量的练习是可以寻得稳定盈利模式的，也就是人人常说的盘感。而练习一般从最初等的技能逐步增强，学会不贪-止盈，学会心稳-止损，学会顺势而为-追踪止损。不管在牛叉的高手必然从基础练习，而少亏多赚最终才是赢家。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"止损\"><a href=\"#止损\" class=\"headerlink\" title=\"止损\"></a>止损</h3><p>大多数人的止损意识非常差，我认为这也是最难练习的。从心理学上来讲丢失100块钱和捡到200块钱的心理强度是相等的，绝大部分人都是损失厌恶型人格。</p>\n<p>当然事实上止损意识是为了限制损失，毕竟当你需要止损的时候说明做出了错误的买入决定。而止损可能会是一个新的错误，但只是可能而已，而不止损是一个肯定的错误。</p>\n<p>一般我们止损会遵循以下一些原则：</p>\n<ul>\n<li>必须在买入前确定止损盘，这样买入后可以安心观察市场变化。</li>\n<li>确定止损后，不得随意取消。</li>\n<li>点位止损法，可以适当调整一些价位，一般放在整数心理关口上下比较好。</li>\n</ul>\n<h3 id=\"止盈\"><a href=\"#止盈\" class=\"headerlink\" title=\"止盈\"></a>止盈</h3><p>如上文所说，普通交易者常常受到10%魔咒的困扰。这就是没有正确掌握止盈的原因。<br>止盈的作用主要是确定仓位在何时获利了结。没有永远上涨的市场，也没有永远下跌的市场。即便是多年连续牛的每股，到现在也岌岌可危。止盈的设置会让仓位管理更加的高效合理。</p>\n<p>常见的换仓手法也正是一种止盈的思路。比如资金经理常用的买入排名前10的股票，每周调整一次仓位保持百分比均衡。</p>\n<p>开始练习可以从常见的点数和关键点止盈起步，然后学习一些自己喜欢的技术指标变化止盈，比如常用到的MACD动能减少进行止盈。金叉死叉出现后止盈止损等。</p>\n<h3 id=\"追踪止损\"><a href=\"#追踪止损\" class=\"headerlink\" title=\"追踪止损\"></a>追踪止损</h3><p>这里详细讲解一下进阶版的止盈止损。</p>\n<p>也就是进行动态的止盈止损。这是我个人最喜欢的一种操作手法。<br>当然练习到最后，可能会达到看多买入，看空离场，这个程度对于普通人来说太难，做长趋势还是可以试试，中短趋势想都别想。<br>所以对于我来说想做到涨的时候慢慢卖，利润尽量大。跌的时候慢慢卖，亏损尽量少。积累起来每次都赚一点，加上复利加持很是了不得。</p>\n<p>到底是怎么操作的呢？如下图所示：<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-73908ee82ffc85a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>大意为：跟着市场的趋势，不断上移止损位或止盈位。</p>\n<h3 id=\"止盈止损的一些方法\"><a href=\"#止盈止损的一些方法\" class=\"headerlink\" title=\"止盈止损的一些方法\"></a>止盈止损的一些方法</h3><ul>\n<li>定额止盈止损。最高效简单的策略，就是固定价格进行止盈止损。</li>\n<li>动态追踪止盈止损。以开仓后最高价为基础，回撤N止损。或上涨N止盈。</li>\n<li>关键点止盈止损。这个是比较通用的做法，支撑位和压力位操作。<br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-e892072510dcec9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"设置在上次低点.png\"><br><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-0a4f43b925571c9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"整数位.png\"></li>\n<li>阶梯止损。与动态止损相类似，阶梯止损策略不对止盈止损价格进行预判，而是随着行情变动不断调整，在保证一定亏损额度的情况下，可以实现利润的最大化。</li>\n<li>ATR止损。ATR平均真实波动范围，简称ATR指标，可以用来衡量市场波动的强烈度，即为了显示市场变化率的指标。通过平均真实波动数值可以为止盈止损策略提供参考，当短期价格偏离平均波动负的时就有回调的可能。</li>\n<li>SAR止损。SAR指标又叫抛物线指标或停损转向操作点指标，是最经典的止盈止损点技术分析指标，属于时间与价格并重的系统。它是通过对价格振幅及时间的分析研究,随时设立停损点以观察股票卖出时机的一种技术指标。</li>\n</ul>\n","categories":["Financing"]},{"title":"正儿八经的七夕节攻略","url":"/serious_Tanabata_festival_strategy/","content":"<blockquote>\n<p>是否还记得小时后，刻在桌上的名字。<br>  是否还记得城墙上，到此一游是谁的雕刻。<br>  是否还记得泰山情人锁上，锁住的是谁。<br>  — 那一世的美好</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190426170844.png\"></p>\n<p>又到了情人劫，各位想必都在静心准备礼物吧！<br>今天阿牛带来一篇终极攻略，让你的海誓山盟永远存留！<br>表白的去表白，结婚的依然可以跟自己的老婆示爱！</p>\n<h2 id=\"先做一点区块链科普\"><a href=\"#先做一点区块链科普\" class=\"headerlink\" title=\"先做一点区块链科普\"></a>先做一点区块链科普</h2><p>从狭义来讲，区块链是一种按照时间顺序将数据区块以顺序相连的方式组合成的一种链式数据结构，并以密码学方式保证的不可篡改和不可伪造的分布式账本。而从广义来讲，区块链技术是利用块链式数据结构来验证与存储数据、利用分布式节点共识算法来生成和更新数据、利用密码学的方式保证数据传输和访问的安全的一种全新的分布式基础架构与计算范式。</p>\n<p>一句话概述就是：区块链是一个分布式数据库，通过本身的数据结构特征确保数据可追溯和不可篡改。</p>\n<h2 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h2><p>本文教程基于以太坊公链。<br>需要准备的工具：</p>\n<ul>\n<li>字符转换成16进制网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmVqc29uLmNvbS9jb252ZXJ0L294MnN0ci8=\">https://www.bejson.com/convert/ox2str/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>以太坊钱包。imtoken | metamask</li>\n</ul>\n<h2 id=\"字符转16进制\"><a href=\"#字符转16进制\" class=\"headerlink\" title=\"字符转16进制\"></a>字符转16进制</h2><p>首先将想说的话，字符转换成16进制。<br>打开网站 ： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmVqc29uLmNvbS9jb252ZXJ0L294MnN0ci8=\">https://www.bejson.com/convert/ox2str/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190426170859.png\"></p>\n<p>将想说的话（阿牛爱上天使。）填入上方，并点击字符转16进制按钮。下边出来的一串字符就是16进制。</p>\n<h2 id=\"在公链记录\"><a href=\"#在公链记录\" class=\"headerlink\" title=\"在公链记录\"></a>在公链记录</h2><p>打开 imtoken 钱包，填写转账地址，gas 以及wei。<br>因为过节网络比较拥堵，所以我的gwei ，gas设置比较高。平时填写20，21000就挺高了。<br>最重要的是将你刚刚转换的十六进制字符串填到下面的data框中，如果使用imtoken记得添加 0x ！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190426170914.png\"></p>\n<p>转账成功后如下所示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190426170932.png\"></p>\n<p>到此就完成啦！很简单有木有！！点击复制url查看你使用区块链技术永久记录在互联网中的示爱宣言吧！！！</p>\n<h2 id=\"查看永久数据记录\"><a href=\"#查看永久数据记录\" class=\"headerlink\" title=\"查看永久数据记录\"></a>查看永久数据记录</h2><p>打开刚刚复制的连接，input Data 中就看到了你的宣言~ </p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190426170945.png\"></p>\n<p>记得进行转换字符哦！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190426171006.png\"></p>\n<p>这是我发表的：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldGhlcnNjYW4uaW8vdHgvMHhmZDZiZDYzZTQ4MzY2NjQ2MTM5MjUxZTM3ZWRmNzliZWRiYjEzYjRiYjQ0N2I4ZmZhNzkyZWU2MGM3ODBkZjYx\">https://etherscan.io/tx/0xfd6bd63e48366646139251e37edf79bedbb13b4bb447b8ffa792ee60c780df61<i class=\"fa fa-external-link-alt\"></i></span></p>\n<hr>\n<p>熊市定投，牛市定抛。<br>在这个币圈投资寒冬中，发现一个特别好用的定投工具，一起来定投吧！<br><span class=\"exturl\" data-url=\"aHR0cDovL3hpYW9iYW8uaW8vcmVnaXN0ZXI/cmVmPTViNTMyZWQ5Y2U0NDQ0MzU5NWQxNTEzOA==\">http://xiaobao.io/register?ref=5b532ed9ce44443595d15138<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Financing"],"tags":["区块链","eth"]},{"title":"熊市定投，牛市定抛","url":"/bear_buy_bull_sell/","content":"<blockquote>\n<p>如果你对这个市场有信心，那么就一直买下去。     – 巴老爷子</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>刚刚币圈的小伙伴又经历了一番别有滋味的过山车。在腰斩之后再次腰斩，请问你的信心还在吗？是不是像新婚的娇娘，接受了蹂躏却还想一次再来一次。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-84c2a215d3ab5dbf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"定投微笑曲线.jpg\"></p>\n<p>如何在超大号过山车中也能保持好的心情，宠辱不惊，看庭前花开花落；去留无意，望天上云卷云舒呢？今天由阿牛给你带来一个字：<strong>“定投”</strong>。其实，你会发现对于普通用户定投真的比一次性梭哈要好很多。</p>\n<h2 id=\"1-普通定投\"><a href=\"#1-普通定投\" class=\"headerlink\" title=\"1.普通定投\"></a>1.普通定投</h2><p>也就是傻瓜式定投并及时止盈。 固定的时间用固定的数额投资固定的品种。在市场快速向上时进行部分退出。提前计划好止盈点，例如年化达20%时退出30%，60天内净值上涨20%时退出20%等。</p>\n<p>在投资市场中，不存在常盈将军。很多专业投资者能够盈利，最重要的是信心。著名的《海龟交易法则》中全篇都在讲的就是这一件事儿。而傻瓜式定投不断地小仓位进入，跌了在承受范围内，涨了也拿得住。相对有利于培养普通投资者的心态，只有心态平和，学会了赢多输少，才能真的在这汪洋中只取一瓢。</p>\n<h2 id=\"2-智能定投\"><a href=\"#2-智能定投\" class=\"headerlink\" title=\"2.智能定投\"></a>2.智能定投</h2><p>仅仅傻瓜式定投怎么能满足客官的心呢？遂又带来进阶版的智能定投！</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-0596e7a5582fd47c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"定投原理.jpg\"></p>\n<p>在定投周期，根据价值的变动，在价值高估时减少定投金额，在价值低估时提高定投金额。投资者可以将筹码更多地聚集在低估值区域，在长期投资的过程将获得更高的收益。 </p>\n<h2 id=\"结论（仅供参考）\"><a href=\"#结论（仅供参考）\" class=\"headerlink\" title=\"结论（仅供参考）\"></a>结论（仅供参考）</h2><ul>\n<li>1、总体而言，“定投”仍是有效降低投资风险的稳妥模式；</li>\n<li>2、投资品种相当重要。首选—大波动、且远期趋势向上的品种！</li>\n<li>3、由于低位自动追加、高位适当止盈策略，“价值平均法”完胜传统定投；</li>\n<li>4、“价值平均策略”需要强大的现金流(尤其单边熊市)。</li>\n</ul>\n<hr>\n<p>看完之后是不是还有些晕晕的。没关系，工具我们都帮你做好了！一键定投各大币种，欢迎来试用。</p>\n<p>不脸发出试用邀请链接<span class=\"exturl\" data-url=\"aHR0cDovL3hpYW9iYW8uaW8vcmVnaXN0ZXI/cmVmPTViNTMyZWQ5Y2U0NDQ0MzU5NWQxNTEzOA==\">币小宝<i class=\"fa fa-external-link-alt\"></i></span> 。<br>注册即可得价值8.8美金！<br>熊市定投，牛市定抛！小宝带你躺赚，穿越牛熊。</p>\n","categories":["Financing"]},{"title":"科普ETF","url":"/whats_etf/","content":"<p>比特最近推出ETF的消息注了一波强心剂。</p>\n<p>ETF是比特币期货合约ETF，并不意味着“会有一大波的韭菜进场”，但是，这依然是从传统金融到数字货币的具有里程碑意义的一步。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"那么什么是ETF呢？\"><a href=\"#那么什么是ETF呢？\" class=\"headerlink\" title=\"那么什么是ETF呢？\"></a>那么什么是ETF呢？</h2><p>交易型开放式指数基金，通常又被称为交易所交易基金（Exchange Traded Funds，简称“ETF”），是一种在交易所上市交易的、基金份额可变的一种开放式基金。</p>\n<h2 id=\"优点介绍\"><a href=\"#优点介绍\" class=\"headerlink\" title=\"优点介绍\"></a>优点介绍</h2><h3 id=\"分散投资并降低投资风险\"><a href=\"#分散投资并降低投资风险\" class=\"headerlink\" title=\"分散投资并降低投资风险\"></a>分散投资并降低投资风险</h3><p>被动式投资组合通常较一般的主动式投资组合包含较多的标的数量，标的数量的增加可减少单一标的波动对整体投资组合的影响，同时借由不同标的对市场风险的不同影响，得以降低投资组合的波动。﻿</p>\n<h3 id=\"兼具股票和指数基金的特色\"><a href=\"#兼具股票和指数基金的特色\" class=\"headerlink\" title=\"兼具股票和指数基金的特色\"></a>兼具股票和指数基金的特色</h3><p>（1）对普通投资者而言，ETF也可以像普通股票一样，在被拆分成更小交易单位后，在交易所二级市场进行买卖。﻿</p>\n<p>（2）赚了指数就赚钱，投资者再也不用研究股票，担心踩上地雷股了；（2010年之前我国证券市场不存在做空机制，因此存在着“指数跌了就要赔钱”的情况。2010年4月，股指期货开通，2011年12月5日起，有七只ETF基金纳入融资融券标的的范畴）﻿</p>\n<h3 id=\"结合了封闭式与开放式基金的优点\"><a href=\"#结合了封闭式与开放式基金的优点\" class=\"headerlink\" title=\"结合了封闭式与开放式基金的优点\"></a>结合了封闭式与开放式基金的优点</h3><p>ETF与我们所熟悉的封闭式基金一样，可以小的“基金单位”形式在交易所买卖。与开放式基金类似，ETF允许投资者连续申购和赎回，但是ETF在赎回的时候，投资者拿到的不是现金，而是一篮子股票，同时要求达到一定规模后，才允许申购和赎回。﻿</p>\n<p>ETF与封闭式基金相比，相同点是都在交易所挂牌交易，就像股票一样挂牌上市，一天中可随时交易，不同点是： ①ETF透明度更高。由于投资者可以连续申购&#x2F;赎回，要求基金管理人公布净值和投资组合的频率相应加快。②由于有连续申购&#x2F;赎回机制存在，ETF的净值与市价从理论上讲不会存在太大的折价&#x2F;溢价。﻿</p>\n<p>ETF基金与开放式基金相比，优点有两个：一是ETF在交易所上市，一天中可以随时交易，具有交易的便利性。一般开放式基金每天只能开放一次，投资者每天只有一次交易机会（即申购赎回）；二是ETF赎回时是交付一揽子股票，无需保留现金，方便管理人操作，可以提高基金投资的管理效率。开放式基金往往需要保留一定的现金应付赎回，当开放式基金的投资者赎回基金份额时，常常迫使基金管理人不停调整投资组合，由此产生的税收和一些投资机会的损失都由那些没有要求赎回的长期投资者承担。这个机制，可以保证当有ETF部分投资者要求赎回的时候，对ETF的长期投资者并无多大影响（因为赎回的是股票）。﻿</p>\n<h3 id=\"交易成本低廉\"><a href=\"#交易成本低廉\" class=\"headerlink\" title=\"交易成本低廉\"></a>交易成本低廉</h3><p>指数化投资往往具有低管理费及低交易成本的特性。相对于其他基金而言，指数投资不以跑赢指数为目的，经理人只会根据指数成分变化来调整投资组合，不需支付投资研究分析费用，因此可收取较低的管理费用；另一方面，指数投资倾向于长期持有购买的证券，而区别于主动式管理因积极买卖形成高周转率而必须支付较高的交易成本，指数投资不主动调整投资组合，周转率低，交易成本自然降低。﻿</p>\n<h3 id=\"投资者可以当天套利\"><a href=\"#投资者可以当天套利\" class=\"headerlink\" title=\"投资者可以当天套利\"></a>投资者可以当天套利</h3><p>例如，上证50在一个交易日内出现大幅波动，当日盘中涨幅一度超过5%，收市却平收甚至下跌。对于普通的开放式指数基金的投资者而言，当日盘中涨幅再大都没有意义，赎回价只能根据收盘价来计算，ETF的特点则可以帮助投资者抓住盘中上涨的机会。由于交易所每15秒钟显示一次IOPV（净值估值），这个IOPV即时反映了指数涨跌带来基金净值的变化，ETF二级市场价格随IOPV的变化而变化，因此，投资者可以盘中指数上涨时在二级市场及时抛出ETF，获取指数当日盘中上涨带来的收益。﻿</p>\n<h3 id=\"高透明性\"><a href=\"#高透明性\" class=\"headerlink\" title=\"高透明性\"></a>高透明性</h3><p>ETF采用被动式管理，完全复制指数的成分股作为基金投资组合及投资报酬率，基金持股相当透明，投资人较易明了投资组合特性并完全掌握投资组合状况，做出适当的预期。加上盘中每15秒更新指数值及估计基金净值供投资人参考，让投资人能随时掌握其价格变动，并随时以贴近基金净值的价格买卖。无论是封闭式基金还是开放式基金，都无法提供ETF交易的便利性与透明性。</p>\n<h3 id=\"增加市场避险工具\"><a href=\"#增加市场避险工具\" class=\"headerlink\" title=\"增加市场避险工具\"></a>增加市场避险工具</h3><p>由于ETF商品在概念上可以看作一档指数现货，配合ETF本身多空皆可操作的商品特性，若机构投资者手上有股票，但看坏股市表现的话，就可以利用融券方式卖出ETF来做反向操作，以减少手上现货损失的金额。对整体市场而言，ETF的诞生使得金融投资渠道更加多样化，也增加了市场的做空通道。例如，过去机构投资者在操作基金时，只能通过减少仓位来避险，期货推出后虽然增加做空通道，但投资者使用期货做长期避险工具时，还须面临每月结仓、交易成本和价差问题，使用ETF作为避险工具，不但能降低股票仓位风险，也无须在现货市场卖股票，从而为投资者提供了更多样化的选择。</p>\n<h2 id=\"对于我们的好处\"><a href=\"#对于我们的好处\" class=\"headerlink\" title=\"对于我们的好处\"></a>对于我们的好处</h2><p>进一步增加蓝筹股的流动性，市场更加活跃，理论上会迎来上涨空间。<br>一篮子股票会降低风险。<br>增加了一种对冲套利手段，有了更多投机可能性，投机客进入进一步增加市场活跃度。</p>\n","categories":["Financing"]},{"title":"论区块链市场投资逻辑","url":"/on_the_investment_login_of_blockchain_market/","content":"<blockquote>\n<p>别多说，撸起袖子就是干。</p>\n</blockquote>\n<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>最近看了一篇文章，煞有其事的问了几个<strong>好问题</strong>。</p>\n<ul>\n<li>比特币是不是数字黄金？</li>\n<li>比特币到底有没有价值？</li>\n<li>币圈到底有没有信仰？</li>\n<li>比特币能合法吗？</li>\n</ul>\n<p><strong>还有一些煞有其事的个人观点：</strong></p>\n<ol>\n<li>尽管币圈的人一说比特币就要跟你谈区块链，但，比特币并不等于区块链，看好区块链并不等于就要支持比特币或其它数字货币；</li>\n<li>比特币是对区块链的一项优秀应用，或者说，区块链通过比特币这一实践而被大家了解；</li>\n<li>比特币的价格本身，因充满了热钱来去之下的“割韭菜”，而更接近于“博傻”、赌博。（最近我看了一篇关于英国某开设比特币戒瘾治疗医院的报道，里头医生对于比特币交易沉迷者的定义，就是深度网络赌博者。）</li>\n</ol>\n<p>通篇描述，看起来像是笔者了解过比特币或者区块链，然后有了自己的认知，再然后开始长篇大论的描写对数字货币整个金融系统的本质问题求解。最终毫无疑问抛出了比特币落地论，毫无疑问放在了“洗钱”这个问题上。</p>\n<p>对于新人来讲或许真的会被这几个问题以及先入为主的观念慑住。</p>\n<h2 id=\"观点一\"><a href=\"#观点一\" class=\"headerlink\" title=\"观点一\"></a>观点一</h2><p>说实话，借用该文笔者也曾用到的一句话：太阳底下没有新鲜事。<br>自称研究金融的伪骗在讽刺整个金融市场在骗人，真是又像笔者所说的：诗人歌德说：“一想到德意志人民，我常常不免黯然神伤，他们作为个人，个个可贵，作为整体，却又那么可怜。”</p>\n<p>既然都是金融常用语，那我们也举个栗子看看。</p>\n<p>互联网被无数人看为最大的泡沫，可它的市值不断提升。如果我没记错，应该是2000年崩盘严重？当时无数人拟出类似批判互联网的文章？也就说所谓的互联网怎么落地呢，一个内容网站凭啥值钱，就是个搜索框还能上市？一个聊天工具罢了还能比得过电话？信用卡那么方便谁用移动支付干什么？<br>诸如此类的问题，我想不仅在互联网过程中出现过，其他茁壮成长的领域也不少见吧。自以为是的脑子每年都不少。</p>\n<p>都是站在当前看未来，谁能看的准呢。曾经我们也想象不到互联网可以改变一切？其实当你认真的时候已经输了。在认认真真看比特是什么，它能做什么的时候，你已经开始进入了区块链，当你不管是写反面的言论还是正面的言论，只要出现在大众的眼中，就是在为他的宣传做了进一步的推波助澜。真理不怕辩证，时间会告诉我们一切。</p>\n<h2 id=\"观点二\"><a href=\"#观点二\" class=\"headerlink\" title=\"观点二\"></a>观点二</h2><p>总有人说我现在也认可区块链技术牛逼，但是不代表比特币的厉害。<br>每每听到，不屑一笑。好像你真的理解了比特币，理解了区块链一样。请回去将比特币的白皮书再看上一百遍，再仔细看看国家对区块链技术列为与人工智呢，大数据同一级别研究方向的描述。回来我们再聊这个问题：比特币不等于区块链技术，但是没有比特币的出现和发展就没有现在的区块链技术，这就是信仰。</p>\n<p>他们认为比特币的作用就是洗钱。<br>谈到此我真是会心一笑，原来还有这么大的作用。好歹有了一点这批人眼中的“落地”。如果你偏要理论比特币是否可以买煎饼果子（如果这算是落地），我会这么回答：再愿意接受比特币支付的煎饼果子摊位上，可以用比特币买煎饼果子。</p>\n<h2 id=\"观点三\"><a href=\"#观点三\" class=\"headerlink\" title=\"观点三\"></a>观点三</h2><p>我可以这么描述这门技术，想象：未来互联网的一切都会架设在区块链协议上，用做数据身份的证明，可信账本的建设，跨系统的秒级传输。有人工智能依据大数据处理做自动化分析，用区块链通讯。形成一个图灵世界必不可少的部分。<br>互联网的出现，已经改变了一切的“落地”，我们的讲述是如何用机器提供更高效的社会分工合作，这哪是眼中只有数字变化的金融财经人士所能理解的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当然，虽技术没错，但这个领域存在不同的观点。而挣到钱是真谛，无论观点和技术。</p>\n<p>我们再来看看所谓的各种金融专家，有数几能跑过指数的增长？<br>从古至今，投资未来的回报收益最高。用过去证明未来？这本就是伪命题。我们只有站在未来看未来才知道如何投资未来。</p>\n<p>互联网的蓬勃发展，难道你还在怀疑这是一场巨大的泡沫？我想说是的，泡沫中才蕴含了巨大的财富机会。这本身就是财富的转移过程。别在只盯着比特币如何洗钱的方向看了，看看它所代表的区块链技术能在未来施展的拳脚。</p>\n<p><strong>中本聪曾经说过，这是一场伟大的实验。</strong></p>\n<p>没错，比特币就仅仅是个试验品罢了。怎么用是使用他的人的事情。菜刀本身的作用是切菜，在恶人手里也能砍人。比特币仅仅是个账本罢了，在记账得人手中仅能记账，在毒品贩子手中可以买毒品，在卖房买房的人手中可以做房产交易。</p>\n<blockquote>\n<p>参与到互联网的改革浪潮中，期许做出点什么成绩。当年老的时候，不因默默无为而悔恨，可以自豪的说这一生奉献给了伟大的互联网改革，为人类的进步做出了微微的贡献。摘自《钢铁是怎么炼成的》</p>\n</blockquote>\n","categories":["Financing"]},{"title":"金牛第一炮|韭菜心得","url":"/taurus_first_leek_tips/","content":"<blockquote>\n<p>有幸进入区块链行业，迅速被收割成长为了一个老韭菜。经过茁壮的成长，总结了一些心得。在此有幸分享给各位。<br>金牛茶馆 2017年12月17日</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p><em><strong>资产配置为投资者最为重要的事情！</strong></em><br><em><strong>资产配置为投资者最为重要的事情！</strong></em><br><em><strong>资产配置为投资者最为重要的事情！</strong></em></p>\n<h2 id=\"配置一-即刻买入比特\"><a href=\"#配置一-即刻买入比特\" class=\"headerlink\" title=\"配置一 即刻买入比特\"></a>配置一 即刻买入比特</h2><p>在区块链领域投资，一定理解比特币是区块链资产的硬通货。配置50%以上的比特，是区块链资产的底线（请深思，没看懂不要投）。</p>\n<p>老猫将比特币比喻为白马，那么骑在白马上去寻找黑马不正我们想做的事么？<br>既然是配置，一定配置长期看好的品种，短期价格不重要！</p>\n<p>如果计划配置50%的比特币，闭着眼买入20%，拿到手再说，之后看到暴跌就买入。如果实在没机会，那就拿着30%的资金等待补仓。</p>\n<h2 id=\"配置二-配置5-10-的前六市值品种\"><a href=\"#配置二-配置5-10-的前六市值品种\" class=\"headerlink\" title=\"配置二 配置5-10%的前六市值品种\"></a>配置二 配置5-10%的前六市值品种</h2><p>此处老猫建议为市值第二品种，因为既然排行第二，必有其可取之处，市场给了他这个市值，按照一定比例配置，属于“防守策略”。<br>经过时间的变化后，此条我个人建议从前六选中自己看好并经过深入了解的优质币种。</p>\n<h2 id=\"配置三-配置5-10-自己喜欢的品种\"><a href=\"#配置三-配置5-10-自己喜欢的品种\" class=\"headerlink\" title=\"配置三 配置5-10%自己喜欢的品种\"></a>配置三 配置5-10%自己喜欢的品种</h2><p>区块链投资本来就是高风险，当自己对市场有了足够的理解能力。用自己的眼光去寻找属于自己的黑马，也许这是可以胜出别人投资盈利的方式。<br>如果喜欢多个品种，真心建议不要超过15%，且同时持有不超过三种（土豪请忽略，随便买）。因为个人的精力是有限的，我相信你不会每天在关注那么多币种全部的动态。那么反而会影响自己的投资决策。</p>\n<p>如果投资自己喜欢的品种获取了巨大的收益，是对自己眼光的证明，有益于培养自己的信心！从而印证自己的道。</p>\n<h2 id=\"配置四-配置5-10-的资金用于ico\"><a href=\"#配置四-配置5-10-的资金用于ico\" class=\"headerlink\" title=\"配置四 配置5-10%的资金用于ico\"></a>配置四 配置5-10%的资金用于ico</h2><p>ico类似于股市的打新股，不过门槛要低很多。同时风险也会高出很多，收益同样也很可观。<br>偶尔金牛茶馆会分析一些优质项目。大家可自由观看。</p>\n<h2 id=\"配置五-配置可以自己调整，但不投看不懂的项目！\"><a href=\"#配置五-配置可以自己调整，但不投看不懂的项目！\" class=\"headerlink\" title=\"配置五 配置可以自己调整，但不投看不懂的项目！\"></a>配置五 配置可以自己调整，但不投看不懂的项目！</h2><p>每个人可以根据自己的风险偏好进行适当的调整，根据自己对市场的理解，调整仓位，做到游刃有余，是高手的行为。留一些现金捕捉一些短线机会，或者进行对冲ICO部分资产，这是聪明的做法。<br>一定，一定，一定要训练自己独立判断能力，哪怕判断失误，也是一种成长，失败是成功他妈妈。每个老韭菜的背后都不知道被割了多少次。如果跟着别人投自己看不懂的品种，绝大多数下你肯定是输的。（曾投过一个项目HBT，现在还是脚斩中，已割肉。）</p>\n<h2 id=\"配置六-更多关注长期价值投资品种\"><a href=\"#配置六-更多关注长期价值投资品种\" class=\"headerlink\" title=\"配置六 更多关注长期价值投资品种\"></a>配置六 更多关注长期价值投资品种</h2><p>如果觉得无法拿住三年的项目，3分钟也不要持有。</p>\n<p>自己研究明白了区块链资产投资的逻辑，也按照自己的方式进行了配置，买定离手，不在关注，给自己设置一个时间周期再去关注，并且，带着长期投资的心态去观察，不要太在意短期涨跌。</p>\n<h2 id=\"配置七-配置对冲的区块链资产\"><a href=\"#配置七-配置对冲的区块链资产\" class=\"headerlink\" title=\"配置七 配置对冲的区块链资产\"></a>配置七 配置对冲的区块链资产</h2><p>这个必须讲到币市中跷跷板作用。如果你细心观察，会看到比特币抬头，所有币种下跌。同时从长期项目选择中来看，按照一定逻辑配置其他币种，某种程度上是对冲比特币的高位风险。</p>\n<h2 id=\"特别提醒：不要梭哈\"><a href=\"#特别提醒：不要梭哈\" class=\"headerlink\" title=\"特别提醒：不要梭哈\"></a>特别提醒：不要梭哈</h2><p>不要 ALL-IN 某一个品种，哪怕是比特币。成功的认识必须要对冲。</p>\n<p>长线配置千万不要加杠杆，会影响心态。</p>\n<hr>\n<p>以上建议仅供参考，如果运用得当，根本无需每天关注盘面变化，该干嘛干嘛。<br>让时间发酵收益，老话说：<strong>横财不赶急门</strong>。<br>以上摘自公众号：《猫说》中的资产配置一文。（TODO 我还不会加链接，大家可以自己去找原文）</p>\n","categories":["Financing"]},{"title":"金牛第二炮|套利终结者","url":"/taurus_second_arbitrager_terminator/","content":"<p>此文描述了搬砖套利，期现套利以及其他一些小手段，你想掌握的所有套利技巧都在这里。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-什么是套利？\"><a href=\"#1-什么是套利？\" class=\"headerlink\" title=\"1.什么是套利？\"></a>1.什么是套利？</h2><p>套利也叫价差交易，套利指的是在买入或卖出某种电子交易合约的同时，卖出或买入相关的另一种合约。</p>\n<h2 id=\"2-如何套利？\"><a href=\"#2-如何套利？\" class=\"headerlink\" title=\"2.如何套利？\"></a>2.如何套利？</h2><h3 id=\"现货对冲套利\"><a href=\"#现货对冲套利\" class=\"headerlink\" title=\"现货对冲套利\"></a>现货对冲套利</h3><p>现货对冲，也就是说，在A平台和B平台上，你同时有两个币种比如BTC、ETH。 那么两个平台上的两个交易对价格产生差距的时候，就可以进行互倒。</p>\n<p>例：</p>\n<p>A平台BTC&#x2F;ETH 0.01 B平台BTC&#x2F;ETH 0.011</p>\n<p>那么在B平台将ETH换成BTC，A平台BTC换成ETH，你就赚到了10%的币。</p>\n<h3 id=\"期现对冲套利\"><a href=\"#期现对冲套利\" class=\"headerlink\" title=\"期现对冲套利\"></a>期现对冲套利</h3><p>期现对冲稍微有点难度，小白慎入！ 也就是期货和现货进行杠杆对冲，我们假定价值会回归收敛。</p>\n<h3 id=\"期期对冲套利\"><a href=\"#期期对冲套利\" class=\"headerlink\" title=\"期期对冲套利\"></a>期期对冲套利</h3><p>期期对冲同样有点难度，小白慎入！ 也就是期期之间进行杠杆多空对冲，我们假定价值会回归收敛。</p>\n<h3 id=\"搬砖套利\"><a href=\"#搬砖套利\" class=\"headerlink\" title=\"搬砖套利\"></a>搬砖套利</h3><p>搬砖也就是在低价平台购买，再去高价平台进行卖出。</p>\n<h3 id=\"通道套利\"><a href=\"#通道套利\" class=\"headerlink\" title=\"通道套利\"></a>通道套利</h3><p>这个通道就有一点门槛了。 比如最近韩国交易所的价格一直比国内高，而usdt的需求也很高。</p>\n<p>如果有韩元-&gt;rmb，美元-&gt;rmb 的渠道。 恭喜老板发财。</p>\n<h2 id=\"3-套利过程中需要避开哪些坑？\"><a href=\"#3-套利过程中需要避开哪些坑？\" class=\"headerlink\" title=\"3.套利过程中需要避开哪些坑？\"></a>3.套利过程中需要避开哪些坑？</h2><p>首先是价格计算问题，不小心手抖输错小数点就gg了。</p>\n<p>交易所深度问题，可能出现利差，但是深度不足，可能导致不仅利润消失甚至亏损。</p>\n<p>提币问题。不同的币种之间提币速度不同，跨交易所搬砖肯能会收到影响。</p>\n<p>交易所限制问题。有时候交易所之间出现巨大的利差，可能是因为交易所单方面暂停提币，所以每次搬之前，一定分析出相关的原因所在。</p>\n<h2 id=\"4-套利工具\"><a href=\"#4-套利工具\" class=\"headerlink\" title=\"4.套利工具\"></a>4.套利工具</h2><p>常用的数据舆情站</p>\n<ul>\n<li>xiaobao.io</li>\n<li>coinmarketcap.com</li>\n<li>feixiaohao.com</li>\n</ul>\n<h2 id=\"5-经常去哪套利\"><a href=\"#5-经常去哪套利\" class=\"headerlink\" title=\"5.经常去哪套利\"></a>5.经常去哪套利</h2><h3 id=\"交易所\"><a href=\"#交易所\" class=\"headerlink\" title=\"交易所\"></a>交易所</h3><ul>\n<li>币安 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmluYW5jZS5jb20vP3JlZj0xMDAxMDIwMQ==\">https://www.binance.com/?ref=10010201<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>b网 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iaXR0cmV4LmNvbS8=\">https://bittrex.com/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>p网 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wb2xvbmlleC5jb20v\">www.poloniex.com<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>bithump <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYml0aHVtYi5jb20v\">https://www.bithumb.com<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"钱包\"><a href=\"#钱包\" class=\"headerlink\" title=\"钱包\"></a>钱包</h3><ul>\n<li>ImToken <span class=\"exturl\" data-url=\"aHR0cHM6Ly90b2tlbi5pbS8=\">https://token.im/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>比特派 <span class=\"exturl\" data-url=\"aHR0cDovL2JpdHBpZS5jb20v\">http://bitpie.com/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>mytoken <span class=\"exturl\" data-url=\"aHR0cDovL215dG9rZW4uaW8v\">http://mytoken.io/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"6-其他提示\"><a href=\"#6-其他提示\" class=\"headerlink\" title=\"6.其他提示\"></a>6.其他提示</h2><p>比例配置，定投，等待机会二次套利。</p>\n<p>搬砖有个小技巧，等溢价。价低的基本要涨到高价。</p>\n<p>耐心，不要怕辛苦。总会赚到比别人更多的钱。</p>\n<p>很多朋友对定投感兴趣，稍后会进行一个详细的解说。</p>\n","categories":["Financing"]},{"title":"韭菜之路","url":"/road_of_leek/","content":"<h2 id=\"初入市，被割成韭菜\"><a href=\"#初入市，被割成韭菜\" class=\"headerlink\" title=\"初入市，被割成韭菜\"></a>初入市，被割成韭菜</h2><p>莽莽撞撞进入区块链的世界，每天周边的朋友都在聊比特币，以太坊，邻萌宝…这个赚了多少钱，那个暴涨了。作为一个有心人，记住了跨平台搬砖可以赚点小钱，遂上阵开启了韭菜之旅。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"学了很多技术，依然被割成韭菜\"><a href=\"#学了很多技术，依然被割成韭菜\" class=\"headerlink\" title=\"学了很多技术，依然被割成韭菜\"></a>学了很多技术，依然被割成韭菜</h2><p>从搬砖开始，接触到大神极力推荐的定投。赚了点零花钱，觉得自己很牛逼，比工资都不少了，从此一发不可收拾。和几个非常有兴趣的朋友每天研究各种花样，什么花式网格，趋势，套利，高频等等。。兴致勃勃</p>\n<p>最终成为了变着花的被割韭菜。</p>\n<h2 id=\"技术升级，量化之道\"><a href=\"#技术升级，量化之道\" class=\"headerlink\" title=\"技术升级，量化之道\"></a>技术升级，量化之道</h2><p>逐步逐渐的搞了一堆的工具，自动化的交易，定投，搬砖，监控，行情分析等等，有机会进行了全职的量化开发，从此学了很多很多的知识。</p>\n<p>对于散户来说，最好的方式就是一次性买入，少看，少操作。<br>开始大哥给讲的时候，没有听懂，觉得就是忽悠我，这么简单的方式能赚钱吗，高点卖了，低点买回来又赚一倍。。然而，每次在低点卖了，高点买回来经历多了之后，老实了。大哥教的是真理，多年操作的精华。</p>\n<p>其次的方式，数K线，这个是有技巧在里边的，不过多解释。</p>\n<p>还有一个适合小散，毕竟大家总是问，别人买的都涨，我拿的就不涨怎么办呢？我应该买哪个币呢？<br>直接配置3-5个种类，然后少看，少操作。每个月调仓一次都算多的。</p>\n<h2 id=\"回归技术，终有小成\"><a href=\"#回归技术，终有小成\" class=\"headerlink\" title=\"回归技术，终有小成\"></a>回归技术，终有小成</h2><p>折腾半天，被割了一茬又一茬终于学聪明了。每天沉迷于编程技术，考试，然后把炒币这事儿给忘了。<br>某天打开一看，原来登录平台不收取手续费，略有盈利。</p>\n","categories":["Financing"]},{"title":"托福阅读","url":"/english_toelf_reading/","content":"<p> TOEFL Reading</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190606170746.png\" alt=\"阅读题型\"></p>\n<blockquote>\n<p>You are better than you think.<br>  学习就是重复<br>  坚持就是胜利<br>  <strong>坚持 踏实</strong></p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"背单词-过遍数——30遍\"><a href=\"#背单词-过遍数——30遍\" class=\"headerlink\" title=\"背单词 过遍数——30遍\"></a>背单词 过遍数——30遍</h2><p>新单词:</p>\n<ol>\n<li>每个新单词30秒-60秒以内，听⾳音频、读、背词义;</li>\n<li>每个单词的意思只先背第一个;</li>\n<li>只背发音、拼写、词义、词性，不看句子或解释;</li>\n<li>每天⾄少2个单元新单词;(可分上下午各⼀个) </li>\n<li>⼀本看着顺眼的单词书:背完足矣。</li>\n<li>顶住恶心，熬过第一到⼆个⽉月</li>\n</ol>\n<p>旧单词:(每阶段3-5遍)</p>\n<ol>\n<li>每天重复背过单词:⽤表格(3-5 遍记不住正常)</li>\n<li>第一阶段:⽤听课证捂上中文，只看英文单词，5秒钟之内反应旧单词意思，反应不出来重复新单词第一步</li>\n<li>当70&#x2F;80%的单词5秒内反应没问题:<br>  第二阶段:每⽇日再按照表格复习单词时，撤掉听课证，加⼊背诵单词的其余解释、派⽣生词、同义词、反义词等， 以及⾃己创建不同单词之间的联系</li>\n<li>第三阶段:听音频 不看书 反应词义:利用⾳频读英文与 中文的间隔1秒钟 反应词义(听⼒服务)</li>\n<li>第四阶段:听⾳频 笔上写英⽂文 嘴上说中⽂文(写作服务)</li>\n<li>⼀直背到考试，做到最后1秒钟2个词的反应速度。</li>\n</ol>\n<h2 id=\"阅读备考参考计划-4-6个月\"><a href=\"#阅读备考参考计划-4-6个月\" class=\"headerlink\" title=\"阅读备考参考计划(4-6个月)\"></a>阅读备考参考计划(4-6个月)</h2><h3 id=\"第一阶段-背单词-翻译TPO⽂文章-TPO20-30\"><a href=\"#第一阶段-背单词-翻译TPO⽂文章-TPO20-30\" class=\"headerlink\" title=\"第一阶段:背单词+翻译TPO⽂文章(TPO20-30)\"></a>第一阶段:背单词+翻译TPO⽂文章(TPO20-30)</h3><p>时间1-2个月 (每天分配阅读时间4⼩小时): 四级+托福</p>\n<ol>\n<li>按照单词背诵计划表 每天都要背!!!!!!</li>\n<li>复习句⼦分析 背原则 !!!!!</li>\n<li>练习翻译⻓长难句 读30遍!!!!!!</li>\n<li>翻译TPO文章 参考翻译答案 ⽐对翻译问题<br>  利用⽂章熟悉单词，提⾼句⼦理解能力和翻译速度</li>\n<li>想要进一步提高句⼦能力的同学额外可参考:《GRE长难句图解与精炼》</li>\n</ol>\n<h3 id=\"第⼆阶段-熟悉题型——25分钟内-TPO30-40\"><a href=\"#第⼆阶段-熟悉题型——25分钟内-TPO30-40\" class=\"headerlink\" title=\"第⼆阶段:熟悉题型——25分钟内(TPO30-40)\"></a>第⼆阶段:熟悉题型——25分钟内(TPO30-40)</h3><p>时间1-2个月(每天分配阅读时间3⼩时): 每天必须背单词!!!!!!!!<br>必须复习讲义 背题型做题⽅法 复习做过题目和要点<br>每天⼀篇，熟悉解题技巧，检验阅读速度;<br>查漏补缺单词、整理攻克文章中的长难句;<br>提升题型认知能力和题型特点把握;<br>分析、记录错误点和复习错误原因、类型;<br>通过多读学习揣摩⽂章写作思路。</p>\n<h3 id=\"第三阶段-计时做文章——20分钟内-TPO40—\"><a href=\"#第三阶段-计时做文章——20分钟内-TPO40—\" class=\"headerlink\" title=\"第三阶段:计时做文章——20分钟内(TPO40—)\"></a>第三阶段:计时做文章——20分钟内(TPO40—)</h3><p>时间1-2个月(每天分配阅读时间2⼩小时):<br>每天必须背单词!!!!!!!!<br>每天⼀篇，分析、记录错误点和改正思路;<br>主动阅读，习惯托福⽂文章思路;<br>联系上下⽂文逻辑或信息线索;<br>必须总结出一套⾃己习惯的有效的做题方法，总结出自⼰易犯的错误原因、类型。</p>\n<p>学习必须总结</p>\n<p>如做的好 做的精 每个阶段15篇⽂文章⾜足矣</p>\n<h2 id=\"每天一篇文章\"><a href=\"#每天一篇文章\" class=\"headerlink\" title=\"每天一篇文章\"></a>每天一篇文章</h2><p>一、分时间阶段25——20——18分钟做题<br>认真对待每一篇备考⽂文章 当考试去模拟</p>\n<p>二、反⽂文章——以段落为单位:<br>1、整理不认识、不熟悉的单词<br>2、整理模拟时2遍没有读明白的句⼦并分析、记录语法现象<br>3、按照“反思问题”回顾每一道题，并记录做题时的问题和反思之后的解答<br>4、整理⽂章中好的词、短语、句型以 备写作时应⽤</p>\n<p>⽂章至少读5遍</p>\n<p>三、每天回顾整理的笔记</p>\n<p> 反思什么 总结什么?<br> 这题我做的时候是否在合理时间范围内完成?<br> 这题我思路是否正确?<br> 是否是最有效的解题⽅方法?<br> 是否出现重复阅读和⽆无⽤用阅读?<br> 这题我为什么错?<br> 没读懂?题干不明?选项有陷阱?<br>——求精不求多</p>\n","categories":["Learn"]},{"title":"四级英语简介","url":"/about_cet4/","content":"<h2 id=\"一、四级英语简介\"><a href=\"#一、四级英语简介\" class=\"headerlink\" title=\"一、四级英语简介\"></a>一、四级英语简介</h2><h3 id=\"（一）试卷结构\"><a href=\"#（一）试卷结构\" class=\"headerlink\" title=\"（一）试卷结构\"></a>（一）试卷结构</h3><p>四级考试成绩采用满分为 710 分的计分体制，不设及格线；成绩报道方式为成绩报告单。成绩报道分为总分和单项分。单项分包括：1）听力，2）阅读，3）翻译和写作。<br>注：【四级考试分数及时间分配表】看个人相簿 </p>\n<span id=\"more\"></span>\n\n<h3 id=\"（二）考场时间分配\"><a href=\"#（二）考场时间分配\" class=\"headerlink\" title=\"（二）考场时间分配\"></a>（二）考场时间分配</h3><p>08：45 验证入场（身份证、准考证、学生证缺一不可）<br>9：00-9：10 发放作文考卷，9：00之后无法入场。<br>9：10 开始作文考试<br>9：35 提醒5分钟后将开始听力考试<br>9：40-10：05 听力考试开始<br>10：05 听力考试结束，录音结束后立即收答题卡一<br>10：10-11：20 作答阅读理解和翻译<br>11：10监考老师口头提醒, 10分钟后考试结束<br>11：20 考试结束。<br>在答题过程中，考生必须在答题卡上作答，在试题册上作答无效。所有选择性试题务<br>必用2B铅笔划线作答；所有非选择性试题（即写作、翻译等）务必用黑色签字笔作答。 </p>\n<h2 id=\"二、四级英语高分攻略\"><a href=\"#二、四级英语高分攻略\" class=\"headerlink\" title=\"二、四级英语高分攻略\"></a>二、四级英语高分攻略</h2><h3 id=\"（一）攻克词汇：\"><a href=\"#（一）攻克词汇：\" class=\"headerlink\" title=\"（一）攻克词汇：\"></a>（一）攻克词汇：</h3><p>1、词汇书：<br>2、软件：<br>3、记忆法：<br>百度：十天搞定考研词汇<br>1）三大背词步骤：<br>A. 快速突破<br>B. 了解用法<br>C. 做题体会<br>2）三大背词顺序：<br>A. 第一遍：正序记忆<br>B. 第二遍：逆序检查<br>C. 第三遍以后：乱序检查<br>3）八大背词时间：<br>艾宾浩斯遗忘曲线<br>5分钟、半小时、12小时、1天、<br>2天、4天、7天、15天<br>十天搞定四级词汇： 【表格】看个人相簿 </p>\n<h3 id=\"（二）精研真题\"><a href=\"#（二）精研真题\" class=\"headerlink\" title=\"（二）精研真题\"></a>（二）精研真题</h3><p>1、词汇：没有一个词汇不认识<br>2、选项：没有一个选项不了解</p>\n<h3 id=\"（三）适当模考：考前一周\"><a href=\"#（三）适当模考：考前一周\" class=\"headerlink\" title=\"（三）适当模考：考前一周\"></a>（三）适当模考：考前一周</h3><p>考前务必严格掐表模考一次！<br>使用最新一套真题 </p>\n<h3 id=\"（四）资料推荐\"><a href=\"#（四）资料推荐\" class=\"headerlink\" title=\"（四）资料推荐\"></a>（四）资料推荐</h3><ol>\n<li>真题：<br>《三大名师英语四级历年真题超详解及复习指导》<br>（王江涛、尹延、王双林，外研社，最新15套真题超详解） </li>\n<li>写作：<br>《四级英语高分写作》（王江涛，浙江教育，真题与预测并重）<br>《四级写作与翻译终极预测20篇》（王江涛，浙江教育，考前点题） </li>\n<li>词汇：<br>《十天搞定四级词汇》（便携版）（王江涛、王妙然，浙江教育）</li>\n</ol>\n","categories":["Learn"]},{"title":"很好的一篇英文实战教程","url":"/good_practical_English_tutorial/","content":"<p>这个题关注的人这么多我觉得有两点大家要先思考一下：</p>\n<ul>\n<li>怎么样算每天坚持学？ 是每天坚持花 10-30分钟还是每天花2小时，坚持了多久？题主在这里是没有说明白的。</li>\n<li>坚持过一段时间之后没有任何效果吗？是不是方法有问题， 有没有尝试改进方法？</li>\n</ul>\n<p>我们大多数人的智商其实都是差不多的，坚持够了+加上正确的方法，我相信这事就不难。</p>\n<p>来回答这个问题有三个原因：</p>\n<ol>\n<li>我是在工作4年之后，花了一年时间从零开始学英语的，后来能听懂npr news，能看原版英文技术书藉，每天和国外的同事一起主持项目会议。希望能给大家一点信心（我这么差的基础，都能学好，所以你们也可以）</li>\n<li>第二是我个人确实掌握了一套有效的英语自学方法（包括教材），希望分享给需要的人。）</li>\n<li>我组了一个群希望能把大家聚集到一起，共同学习，共同进步。</li>\n</ol>\n<p><strong>先说说我在开始学英语之前的情况：</strong></p>\n<ul>\n<li>词汇量：小于1500，（初中英语成绩特别好，属于150分会考130+分的那种。 但是自从进入高中以后就再也没有好好学过英语，再加上工作时间完全不接触英语，所以最后基本上就剩下1500不到的词汇量）</li>\n<li>其它英语能力：总之就是不能听，不能读，不能写，当然，更不能说，连最基本的8种时态都记不怎么清了。</li>\n</ul>\n<p><strong>再说说后来的情况：</strong></p>\n<ul>\n<li>词汇量：10000+</li>\n<li>其它英语能力</li>\n<li>读：能够无障碍浏览英文网站（包括技术论坛，新闻科技网站），不用借助词典阅读原版技术书籍（CLR via c#一类的）</li>\n<li>写：平时工作上邮件，开发文档，技术文档，需求文档都是用英文写</li>\n<li>说：作为项目负责人（TeamLeader) 每周主持2次以上和美国同事开会，有问题随时呼叫他们</li>\n<li>听：80%理解VOA常速，NPR，CNN新闻，Channel9 Videos，以及印度口音（印度人的发音不好，可是不能阻止别人英语很好!)</li>\n<li>其它：后来到美国工作过一段时间基本没有障碍</li>\n</ul>\n<h2 id=\"我是怎么学的？\"><a href=\"#我是怎么学的？\" class=\"headerlink\" title=\"我是怎么学的？\"></a><strong>我是怎么学的？</strong></h2><p>必须秀出我当时为自己制定的完美涅盘计划</p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-8b3416fca272b44a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h2 id=\"一、41天：从新概念一册\"><a href=\"#一、41天：从新概念一册\" class=\"headerlink\" title=\"一、41天：从新概念一册\"></a><strong>一、41天：从新概念一册</strong></h2><p>新概念第一册，是为基础不好或者多年没有接触英语的同学准备的（可以起到温习的作用）。根据自己的水平，如果基础较好，可以把知识点回顾一下，再读读课文，听听英频。如果是从头开始学，建议看视频。现在新东方、沪江上都有比较好的在线视频课程，当然，网络上你总能找到一些免费的。</p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-ff4ed615b18cd41d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>大家看到新概念第一册总共是144课，但是老师是只讲单数课的，复数课自己复习。所以在我的电脑里面是有<strong>72节</strong>的视频课程，每一节的视频是**1个小时,**也就是说学完新概念第一册需要72小时。下面是我的计划表：</p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-64edc317d7ab03b0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>学习目标是什么？</p>\n<ul>\n<li>如果是基础比较差从头开始学的同学，一定要每一篇都背一下，要自己监督。</li>\n<li>如果是温习的话，可以放松一下，听音频，读课文，所有的点都能get到就行。</li>\n</ul>\n<hr>\n<p>收到一位同学的提问，为什么新概念第一册也花了 41天？他现在的情况是很着急，很想学好，但是还没有掌握正确的，有信心的方法。今天学语法，明天背单词，这就更加看不到效果了。</p>\n<p>我觉得这种心态很正常，正是因为想学好，才会有些着急。但我们首先要认清楚的有两点：</p>\n<ul>\n<li>学英语是长期的过程，正是因为长期，所以不能盲目，需要有计划。</li>\n<li>别人的计划和成功的经验都只能做参考，要结合自己的情况找到适合自己的方法。</li>\n</ul>\n<hr>\n<h2 id=\"二、7天：重新学习音标\"><a href=\"#二、7天：重新学习音标\" class=\"headerlink\" title=\"二、7天：重新学习音标\"></a><strong>二、7天：重新学习音标</strong></h2><p>音标学的好有几个好处：</p>\n<ul>\n<li>在还没有开始训练口语以前先练就一口正确的发音，会比较不容易产生口音</li>\n<li>对背单词有很大的帮助</li>\n</ul>\n<p>要结合单词和句子多练，给大家推荐一个学英标的土教程。来自台湾的谢孟媛，谢老师。</p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-71bcf4c8fce62f0b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h2 id=\"三、28天：四级单词攻克\"><a href=\"#三、28天：四级单词攻克\" class=\"headerlink\" title=\"三、28天：四级单词攻克\"></a><strong>三、28天：四级单词攻克</strong></h2><p>在背单词这个问上，我选择：狠，强攻</p>\n<p>我称之为暴力背单词的方法，不取巧，每天背200个。包括后面的六级、10000至20000的单词也是这么背的，后面具体介绍。最开始背的时候目录很简单，不强制要求能听写，只要求看见之后能说出意思，能读对（学了音标的优势能在这里体现出来）。</p>\n<p>你需要有一个这样的计划：<br><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-3d615a4c3cc6516d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>之前给一些朋友也分享过我背单词的一些心经：</p>\n<ul>\n<li>在开始之间先从list里面过滤掉已经认识的单词。</li>\n<li>要快！ 这是一场战役：勤奋的你和懒惰的你。每天30个，4000多个单词得接近半年的时间，你能坚持半年每天都做这件事情么？ 我看太难。所以必须对自己狠一些，一点200个。一个月之内全部背完。</li>\n<li>每天背200个意味着每天要花2个小时左右的时间，但还好只有一个月，忍一忍就过去了。但是一个月之后，你会发现好多文章你居然大致也能看得懂了！这就是胜利的感觉。</li>\n<li>口、手、眼睛、耳朵并且背单词。这是什么操作？第一回合先看和听这个单词，听读音，看音标和释义。第二回合：开始用笔在纸上写这个单词，边写边读。</li>\n<li>读要完整的图，先读单词，再用嘴拼写单词。举例： word， w-o-r-d word。 在这个过程当中你已经在纸上也写了一遍。</li>\n<li>如此至少来回4遍。</li>\n<li>要精确量化：以上一个单词要花多少时间？ 10-15秒。每天200个单词要背多久？ 30-50分钟。昨天的单词至少会忘记一半以上，所以还需要加上10-20分钟的时间。理想评佑每天大脑在记忆单词的时间在 40-70分钟。当然你在路上的时候也是可以拿来回忆和巩固的。</li>\n<li><strong>利用一切时间加深记忆</strong>：把近几天背过的单词做成 mp3 list用耳机听，听的同时回忆单词的意思</li>\n</ul>\n<p><strong>关于背的这么快，最后能不能记的住的问题：</strong></p>\n<ul>\n<li>隔一天、隔三天、四天都会去巩固和复习前面记的单词</li>\n<li>周天的时候不学新单词，把这周所有背过的单词再翻出来重新check一遍，有没有忘记的（这一天可能需要花3-4个小时的时间）</li>\n<li>上面提到了用听单词的方式来加深记忆</li>\n<li>最后背完单词之后，本结合大量的阅读来加深对单词的理解，进一步巩固。</li>\n</ul>\n<h2 id=\"四、41天：新概念第二册\"><a href=\"#四、41天：新概念第二册\" class=\"headerlink\" title=\"四、41天：新概念第二册\"></a><strong>四、41天：新概念第二册</strong></h2><p>从第二册开始进入逐步进入学习状态。 跟读、全文背诵，单词拼写。</p>\n<p>为什么把背4级的单词放在前面是因为4级的单词和新概念第二册的单词有80%左右是重合的。所以这样的话我们其实不用怎么背新概念第二册的单词，正好相反，我们能过学习第二册的课文起到了复习4级单词的作用，有上下文背景的单词会记得更牢靠。</p>\n<p>新概念英语第二册还几乎包含了80%的句式结构和语法知识。</p>\n<p>同样还是要在第二天的早上去复习单词，背诵课文也是放在早上，新概念第二册的课文稍微复杂一些，所以大概背一篇要30分钟以上。</p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-8ff26a3d739eba11.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h2 id=\"五、35天：新概念第三册\"><a href=\"#五、35天：新概念第三册\" class=\"headerlink\" title=\"五、35天：新概念第三册\"></a><strong>五、35天：新概念第三册</strong></h2><p>跟读、全文背诵，单词拼写。这个时候开始有些语法句子感到陌生了，但是能感觉到那种英语的美。</p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-75d80942365cac3c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h2 id=\"六、60天：专项阅读能力提升\"><a href=\"#六、60天：专项阅读能力提升\" class=\"headerlink\" title=\"六、60天：专项阅读能力提升\"></a><strong>六、60天：专项阅读能力提升</strong></h2><p>背了很多单词</p>\n<p>背了新概念第一二三册</p>\n<p>如果快速进入实用阶段？</p>\n<p>从大量的阅读开始</p>\n<p>阅读可能是我们学好英语之后用的最多的技能</p>\n<p>一定不要刻意去读名著、VOA或者BBC这类东西 （它们不太适合基础比较低的学习者）</p>\n<p>而是要找到自己对应的难度</p>\n<p>只有合适的难度，才能更好的坚持和保持长期的阅读习惯</p>\n<p>可以慢慢升级。</p>\n<p>推荐一个app： 沪江听力酷。</p>\n<p>上面有比较多的小说，并且已经有了分级。最重要的是还有语音，看完晚上还可以听，当作复习。</p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-eb5f42ebddf52792.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>如果你还想找到更有意思的书来看，可以到这个网站上找到自己对应的分级。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hbmdlbGZpcmUuY29tL21pMi90aGV0ZWFjaC9MaWJyL0xldmVscy5odG0=\">http://www.angelfire.com/mi2/theteach/Libr/Levels.htm<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-8a17b45c5393bedb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h2 id=\"七、14天：专项写作能力\"><a href=\"#七、14天：专项写作能力\" class=\"headerlink\" title=\"七、14天：专项写作能力\"></a><strong>七、14天：专项写作能力</strong></h2><p>到了写作这里，相信有些同学少不了会有一些困拢。自己单词也会写，阅读能力也还行，但是要自己写的话总是感觉写不出东西来。</p>\n<p>写与听读有些不一样，听读可以是被动的：也就是东西摆在那里你被动的接受，而写必须是全部由你自己构思所以需要有一定的方法+勤于锻炼。</p>\n<p>方法这块我推荐可以找一个教程来看，学习一些句子和段落的方法：</p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-9f93d12504958a93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>如果工作中没有要求用英文与邮件的环境，可以强制要求自己每天写一篇英文的日记，时间长了自然就提高了。</p>\n<h2 id=\"八、长期坚持：听力-amp-口语\"><a href=\"#八、长期坚持：听力-amp-口语\" class=\"headerlink\" title=\"八、长期坚持：听力&amp;口语\"></a><strong>八、长期坚持：听力&amp;口语</strong></h2><h3 id=\"从听单词开始（初阶）\"><a href=\"#从听单词开始（初阶）\" class=\"headerlink\" title=\"从听单词开始（初阶）\"></a><strong>从听单词开始（初阶）</strong></h3><p>我会把生词做成一个list，在地铁或者其它的空闲时间拿出来听。在听的时候猜这个词的意思。同时也好好理解这个单词的发音。（需要有词典app的支持）</p>\n<p>下面这套书就是专门读单词的。每个单词都会配上一些句子，可以加深对单词的理解，同时也能锻炼听力。(从3000、5000到 10000和22000全都有）</p>\n<p>目前为止，在可可英语上还可以下载到免费的mp3。 可可英语真的是业界典范。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5rZWtlbmV0LmNvbS93b3JkL2x5Y2gv\">http://www.kekenet.com/word/lych/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-19d0d111f9a9ec08.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h3 id=\"ESL-是比较好的入门听力材料（初阶）\"><a href=\"#ESL-是比较好的入门听力材料（初阶）\" class=\"headerlink\" title=\"ESL 是比较好的入门听力材料（初阶）\"></a>ESL 是比较好的入门听力材料（初阶）</h3><p><strong><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5lc2xwb2QuY29tLw==\">http://www.eslpod.com/<i class=\"fa fa-external-link-alt\"></i></span></strong></p>\n<p>比较适合初学者，因为发音非常清晰而且慢，是讲故事的那种方式，并且会一个句子一个句子的讲解，所以不用担心听不懂。所以如果你觉得听英语很无趣的话，试试这个。（我有这几本书的电子版和MP3文件，已打包！）</p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-d3024a36e19dc090.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h3 id=\"空中英语（中阶）\"><a href=\"#空中英语（中阶）\" class=\"headerlink\" title=\"空中英语（中阶）\"></a><strong>空中英语（中阶）</strong></h3><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zdHVkaW9jbGFzc3Jvb20tY2hpbmEuY29tLw==\">http://www.studioclassroom-china.com/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>主要为训练语感。有对应的初阶、中级以及高级。空中英语也是讲故事的那种，不会太枯燥，并且每一课都是结合语境讲一段故事或者对话，然后开始讲解这段故事。</p>\n<p>切记： 一定要找到自己能听懂的课程去训练。</p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-93a7e9a434b1280c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h3 id=\"再去听沪江听力酷上的小说\"><a href=\"#再去听沪江听力酷上的小说\" class=\"headerlink\" title=\"再去听沪江听力酷上的小说\"></a>再去听沪江听力酷上的小说</h3><p>每天晚上睡前30分钟，催眠必备。但是这个app沪江已经不更新了，所以在iphone 6 以上的大屏手机上还是以前的老版本。沪江上的听力材料分为 ：</p>\n<ul>\n<li>初级</li>\n<li>初中级</li>\n<li>中级</li>\n<li>中高级</li>\n<li>高级</li>\n</ul>\n<p>大家一定要根据自己的实际情况，选择合适难度的材料来听。</p>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/6868959-38a1d81d290767e4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<h3 id=\"最后上NPR和BBC\"><a href=\"#最后上NPR和BBC\" class=\"headerlink\" title=\"最后上NPR和BBC\"></a><strong>最后上NPR和BBC</strong></h3><p>先npr还是bbc看个人喜好，npr是美式发音，而bbc是英式的。个人比较喜欢美式的，所有一直听的是npr。</p>\n<p>其实沪江听力酷上也有npr和bbc，但是由于他们更新不怎么及时，所以大家可以到可可英语上去看看</p>\n<p><a href=\"http//www.kekenet.com/broadcast/NPR/\">http://www.kekenet.com/broadcast/NPR/</a></p>\n<p>达到这个级别，相信大家在日常生活和工作中使用英语，听边这块应该没有什么问题了。</p>\n","categories":["Learn"]},{"title":"托福技巧","url":"/toefl_test_skills/","content":"<p>在准备托福考试之前，我们得先弄明白托福到底是考什么、具体是怎么考的。托福考试由四个部分组成，分别是阅读、听力、口试、写作。在明白了其考试内容之后，就要去搞清楚托福到底是怎么考的。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"托福考试题型\"><a href=\"#托福考试题型\" class=\"headerlink\" title=\"托福考试题型\"></a>托福考试题型</h2><p>第一，阅读，阅读部分有三篇文章，每篇文章有13道题左右，你不需要在阅读全文之后再去做题，因为托福考试中，除了最后一题之外，其他的12道题都是针对文章中的某一个部分提问的，题目的顺序与文章的段落顺序是一致的。最后一题是针对整篇文章提问的。</p>\n<p>第二，听力，听力部分由两篇较长的校园情景对话和四篇演讲组成，演讲的长度大概在每篇5分钟左右。当然在听音频的时候你是看不到试题的，所以在这个过程中你需要去做笔记，把你所听到的材料的重要部分用笔记下来，这样到了做题的时候不至于一脸懵逼了。</p>\n<p>第三，口试，口试部分有6道题，第一二题是给你一个话题，让你就这个话题说明你的观点，第三四题是给出你篇文章，看完之后文章会被隐去，然后你会听到一段与这篇短文相关的对话，最后你需要做的就是根据你所阅读的文章和听到的音频回答问题，第五六题是给你听一段对话，然后回答相关的问题。</p>\n<p>第四，写作，写作分为两个部分，第一部分就是给你一个话题，让你就这一个话题阐述自己的观点，第二部分则是先给你一篇文章，然后再让你听一段与这篇文章相关的音频，然后你要做的就是总结这两段材料的内容并且阐述出来，这一部分不需要你说明自己的观点，把材料中的观点说明白就可以。</p>\n<p>在弄清楚了托福的具体考法之后，你需要做的就是评估一下自己在各个方面的水平和能力，建议你可以在备考前先去做一套托福的OG，对于中国学生来说，阅读和写作应该是强项，而听力和口语相对来说较弱，所以你首先得先明白自己哪个板块比较不好，然后制定相应的复习计划去攻克自己的弱项发挥你的强项。</p>\n<h2 id=\"托福复习方法\"><a href=\"#托福复习方法\" class=\"headerlink\" title=\"托福复习方法\"></a>托福复习方法</h2><p>刚刚我们说了托福具体是怎么考的，那么我们应该怎么样针对不同的板块采取不同的复习方法呢？</p>\n<p>一，阅读，复习托福的最重要的资料就是TPO，因为TPO是托福官方给考生提供的备考资料，无论是从题目内容还是出题形式来看，都是最接近托福考试的。托福的阅读考试对单词量的要求很大，托福要求的常备的词汇量在8000左右，所以单词背诵也是重中之重。那么除了单词量，到底应该怎么提高你的阅读能力呢，其实就是去练习精读文章，坚持每天做一套TPO上的阅读，做完之后把文章中的每个单词、每个句子都弄明白，不认识的单词结合当时的语境去背，这样也能背的更清楚一点。如果一篇阅读当中有大部分的长难句都看不懂的话，那么你就需要另外花时间去练习长难句的分析了，托福对语法的考察不是特别强，所以花几天时间去练习如何分析长难句、如何找到一个长难句当中的主干和修饰成分。每天做完题之后要学会去总结，看看自己做错了的那道题到底是因为词汇的原因还是语法的原因，然后学会做总结，在下一次的练习之前，回顾一下这个总结，看看今天做错的题有没有之前做错过了的，分析为什么会错了这么多次，只有这样，托福阅读才能得到提升。</p>\n<p>二，听力，听力水平无疑是托福考试能不能得高分的关键，因为除了阅读之外，无论哪个部分都离不开听。刚才也说了，大部分的中国考生听力能力还是比较薄弱的，所以加强对听力的练习也是必不可少的。“听写法”是提高我们的听力能力的一种比较有效的方法，就是把TPO当中的听力材料拿出来精听，并且把听到的内容逐字逐句的写下来。对于很多学生来说一开始听写的时候会觉得很困难，也比较费时，所以想要在托福中取得好成绩就一定要坚持下来。</p>\n<p>三，口试，口语这个东西不是单纯的靠记忆的储备就能够有所突破的，因为它不仅要求你有一定的知识储备量，同时也要有对语言的熟悉度，所以一定要通过不断地说不断的去练习，同样，拿TPO的口语题和机经来做练习。托福口语考试中最重要的两点就是语音和内容，语音就不用多说了，就是看你说出来的语音语调地不地道，是不是一听就是中式英语，语音的练习就是靠跟读，你可以去看美剧，模仿他们说话的语调，包括哪些要连读哪些失爆。至于内容方面，就要利用Google了，在Google里搜索和话题相关的文章，它里面的文章都是美国人写的，所以表达方式绝对是地道的，比如“旅游的利与弊”这个话题，你就可以去Google上搜索相关的文章，然后把其中精华的部分记下来然后去背，这样你的内容上也不会很空洞了。</p>\n<p>四，写作，虽然托福写作对字数的要求在300左右，但是你可以看到那些高分作文的字数基本都在500以上，所以考试的时候千万不要偷懒，能多写就尽量多写点，尽量写到500以上。中国人写作文基本上就是除了理论就是理论的东西，但是这一套运用到美国的考试中肯定不中用，在托福的考试当中理论部分少一点，然后用例子去举证你的论点，而例子部分是很好写的，当然最好的是利用美国人都知道的例子，比如你跟美国人说管仲，人家肯定是一脸懵逼的，但是如果你说本杰明•富兰克林，人家一看就能明白了。</p>\n<p>除了以上所提到的复习方法，你还需要做到的就是提高你的记笔记的能力，毕竟考试当中听力部分所占的比例是很高的，而且大部分题目都是在听力听完之后才出现的，所以这个时间就需要利用笔记来帮助你去回忆刚刚所听到的内容了。</p>\n","categories":["Learn"]},{"title":"托福计划（1）基础知识","url":"/toelf_program_1_basics/","content":"<p>既然准备考托福，又进行了大量的研究和学习，粮草备足却迟迟没有行动。随下决心解决这个问题，指定以下计划进行重点突破。</p>\n<p><strong>像婴儿般学习，注重语感培养。基础知识迅速积累，后不断大量重复。</strong></p>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>突破单词（30天完成高中&#x2F;四级词汇）<br>使用17天搞定GRE方式进行一定的验证。<br>从高中&#x2F;四级词汇突破。暂定17天周期（加上复习理论上为45天），加上预留以及额外情况控制在30天内。</p>\n</li>\n<li><p>突破语法（5天时间完成初步了解）<br>简单过一遍语法书，进行一定的理解。找那些对语法很熟悉的人给你讲，从而节省时间提高效率。规律是有限的，语言规律也是如此。<br>英语的语法用一天的时间就足够了解个大概了，可以分为两部分内容。</p>\n<ul>\n<li>一是词语，包括名词、代词、动词（一般动词、助动词、情态动词）、形容词、副词、冠词、数词、介词、连接词的用法和变化，其中，动词的时态（现在、过去、将来，一般、进行、完成）、语态（主动&#x2F;被动）的变化是最多的。词的重点是动词时态、情态动词和人称代词。</li>\n<li>二是句子，包括句子成分（主谓宾、状语）、句子类型（陈述、疑问、祈使、感叹）、从句和非谓语动词、特殊句（虚拟语气、强调句、倒装句、反意疑问句、省略句）。句子的重点是定语从句、名词性从句和非谓语动词。练习语法的正确方式不是背语法点，也不是做语法填空题，而是模仿跟读：录音或视频读一句，暂停录音或视频，你跟着模仿这句，然后再接着放录音或视频。一直到能说得和原来录音或视频里的差不多流畅。这是因为自然语流的特征提示了语法点，比如：停顿提示了从句，拖长音提示了连接词或插入语，连读提示了词语搭配，强调提示了主谓宾，升调提示了并列关系和一般疑问句，降调提示了句子结束和特殊疑问句。熟悉了自然语流的特点，语法点就了然于胸了，这时再去看语法书，就会觉得恍然大悟，这时再去做语法题，就会发现完全靠感觉就能轻松做对。</li>\n</ul>\n</li>\n<li><p>突破口语（每周半天）<br>边记单词边念，矫正一边全部的发音。<br>每周用半天跟读标准发音。</p>\n</li>\n<li><p>突破写作（每日30分钟进行笔记）<br>根据小狗钱钱的方式，记录5件昨日做的比较好的事情。中英双译。</p>\n</li>\n<li><p>突破听力（每日30分钟听简单的书籍）<br>坚持薄荷阅读上读书。</p>\n</li>\n<li><p>突破阅读（每日30分钟阅读简单的书籍）<br>坚持薄荷阅读上读书。</p>\n</li>\n</ul>\n<hr>\n<p>名词解释</p>\n<ul>\n<li>OG是ETS(出托福的机构）的官方指南《新托福考试官方指南》Offial Guide to the New TOEFL ibt，也就是简称OG.</li>\n<li>Delta是《新托福考试备考策略与模拟试题》 Delta’s Key to the Next Generation TOEFL Test.</li>\n<li>Barron同样是托福考试的参考书《新托福考试全真模考与精解》</li>\n<li>ETS是出托福的机构，叫做Educational Testing Service 美国教育考试服务中心</li>\n<li>TPO是ETS给出的在线模拟题，在网上要交44.95刀做测试，全称是TOEFL Practice Online。</li>\n</ul>\n","categories":["Learn"]},{"title":"托福计划（2）提高","url":"/toefl_test_skills_2/","content":"<p>需要提高的部分：</p>\n<ul>\n<li>语法功底</li>\n<li>固定短语搭配</li>\n<li>替换</li>\n<li>地道表达</li>\n<li>单词量</li>\n<li>语感<br><strong>每看到句子不懂的就问一个为什么</strong><span id=\"more\"></span></li>\n</ul>\n<p>学习资料：<br>不用买一堆资料，一会看看这个一会看看那个。<br>一本17天搞定GRE+一本单词书<br>一本适合你水平的阅读书<br>一本适合你水平的听力书</p>\n<p>先记单词，然后进行语法梳理，接着进行阅读和写作能力，提高也有先后之分，必须先提高阅读能力，才能提高写作能力。我们必须通过阅读来训练语感。所以在这里我们可以推出我们的高效学习英语的打开方式：</p>\n<ul>\n<li>因此想提高口语能力的步骤是，<br>阅读——写作——听力——口语</li>\n<li>只想提高听力能力的步骤是：<br>阅读——听力</li>\n<li>只想提高写作能力的步骤是：<br>阅读——写作</li>\n<li>而无论如何都得提高的能力：<br>阅读！</li>\n</ul>\n<p>注意目标导向和及时反馈。定一个周期去进行考试来给自己设定目标，从而增加压迫感和进行阶段性的复习，目标导向会带来强烈动机。同时及时反馈也很重要，及时知道并可以解决问题，让阻力变到最小，让效益值最大。</p>\n<p>所以进行模拟考试或者定好日期直接进行考试相对很重要。</p>\n","categories":["Learn"]},{"title":"留学申请注意事项","url":"/notes_for_overseas_study_application/","content":"<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ul>\n<li>确定学校、专业及老师</li>\n<li>查看该学校专业的需求</li>\n<li>修复相关成绩及资质</li>\n<li>尽可能争取奖学金</li>\n<li>计算学费+生活费</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"确定学校、专业及老师\"><a href=\"#确定学校、专业及老师\" class=\"headerlink\" title=\"确定学校、专业及老师\"></a>确定学校、专业及老师</h2><p>一个原则，尽可能根据自身情况，选择排名靠前的学校。<br>二个基本，尽可能选择自己喜欢的专业，尽可能选择自己喜欢的老师。</p>\n<p>上学时我们还在迷茫，很多人不知道将来要做什么，会做什么。那么就尽量的向前靠，去和聪明人在一起，有助于做出更多的选择。那么聪明人群体在哪？毫无疑问，排名靠前的学校中占据了80%。</p>\n<p>人这一生最优的选择莫过于选一条路走到底。去寻找自己喜欢的行业吧，寻找这个时代缺失的匠人精神。</p>\n<p>专业，也就是某一个行业的专才。古人云：一招鲜吃遍天。好好磨练自己的专业技能，未来必有一边天。</p>\n<p>所以在选择的时候，尽可能选择排名靠前的学校。但不必刻意追求1还是2这种临近数字。比如美国排名，我分为三档：前10，前100，其他。</p>\n<p>如果能申进前10，什么专业都别考虑了，去了学校再换吧。<br>如果能申进前100，尽可能选择自己喜欢的专业吧。<br>如果前边都没申到，尽可能选自己喜欢的位置或者老师。</p>\n<p>尽可能选5个左右去申请吧，如果成绩不是及其优秀，学校录取还有可能会有其他原因被刷下来，所以合理的是有冲刺，保底等选择。</p>\n<h2 id=\"查看该学校专业的需求\"><a href=\"#查看该学校专业的需求\" class=\"headerlink\" title=\"查看该学校专业的需求\"></a>查看该学校专业的需求</h2><p>以sjsu为例。</p>\n<ul>\n<li>申请时间<ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zanN1LmVkdS9ncmFkdWF0ZWFkbWlzc2lvbnMvZGVhZGxpbmVzL2ludGVybmF0aW9uYWwtZmFsbC8=\">国际申请截止日期（F-1签证） - 秋季<i class=\"fa fa-external-link-alt\"></i></span><br>例：计算机工程 ：2019年秋季入学申请将于2018年10月1日开始至2019年4月1日。<br>其他的请自己查询。</p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zanN1LmVkdS9ncmFkdWF0ZWFkbWlzc2lvbnMvZGVhZGxpbmVzL2ludGVybmF0aW9uYWwtc3ByaW5nLw==\">国际申请截止日期（F-1签证） - 春季<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>例：计算机工程 ：2019年春季入学申请将于2018年8月1日开始至2018年10月1日。<br>其他的请自己查询。</p>\n<ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zanN1LmVkdS9ncmFkdWF0ZWFkbWlzc2lvbnMvZGVhZGxpbmVzL2ludGVybmF0aW9uYWwtc3VtbWVyLw==\">国际申请截止日期（F-1签证） - 夏季<i class=\"fa fa-external-link-alt\"></i></span><br>2017年夏季入学申请将于2017年11月1日开课。<br>例：计算机工程无夏季申请<br>其他的请自己查询。</p>\n</li>\n<li><p>申请需要的分数<br>3.0 </p>\n</li>\n<li><p>申请需要的托福<br>80</p>\n</li>\n<li><p>申请需要的GRE<br>无</p>\n</li>\n<li><p>申请需要的GMAT<br>无</p>\n</li>\n<li><p>申请需要的其他成绩<br>无</p>\n</li>\n</ul>\n<h2 id=\"修复相关成绩及资质\"><a href=\"#修复相关成绩及资质\" class=\"headerlink\" title=\"修复相关成绩及资质\"></a>修复相关成绩及资质</h2><p>根据以上修复自己的各项分数，尽可能增加相关的实习经历。如果有精力的话最好多搜集一下老师的资料。这样好进行针对性的写文书进行投递。</p>\n<h2 id=\"尽可能争取奖学金\"><a href=\"#尽可能争取奖学金\" class=\"headerlink\" title=\"尽可能争取奖学金\"></a>尽可能争取奖学金</h2><p>毕竟能省下一大笔钱。在校内会有很多的简单工作会提供给学生。同时也是一个锻炼口语的机会。</p>\n<h2 id=\"计算学费-生活费\"><a href=\"#计算学费-生活费\" class=\"headerlink\" title=\"计算学费+生活费\"></a>计算学费+生活费</h2><p>用网络搜索一下自己学校的其他生活费用诸如附近的衣食住行。按照现有的消费水平基本上学费占了大头。和国内是差不多的一个水平。年大概需要7-10$不等。</p>\n","categories":["Learn"]},{"title":"考研过程","url":"/graduate_process/","content":"<h2 id=\"1-首先确定学校和专业\"><a href=\"#1-首先确定学校和专业\" class=\"headerlink\" title=\"1.首先确定学校和专业\"></a>1.首先确定学校和专业</h2><p>基于个人在互联网行业多年，在这个领域继续发展，进行深度技术学习。但是本身学业情况较差，学习一般。所以选择了普通211学校的非王牌计算机专业。最终确定华北电力大学的计算机技术（专业学位，因为专业学位两年毕业同时考试科目较少，学术学位三年，所以选择专业学位。考博同学最好选择学术学位。我个人规划是读研后可能出国，所以专业学位比学术学位更优）</p>\n<h2 id=\"2-确定考试科目\"><a href=\"#2-确定考试科目\" class=\"headerlink\" title=\"2.确定考试科目\"></a>2.确定考试科目</h2><p>确定专业后，到官网查找该科目的大纲，确定考试内容。<br>如我选择计算机技术内容为：</p>\n<ul>\n<li>①101思想政治理论</li>\n<li>②204英语二</li>\n<li>③302数学二</li>\n<li>④825数据结构与操作系统</li>\n</ul>\n<h2 id=\"3-制定复习周期计划\"><a href=\"#3-制定复习周期计划\" class=\"headerlink\" title=\"3.制定复习周期计划\"></a>3.制定复习周期计划</h2><p>3月份前确定好专业。<br>6月份前完成第一次全面复习。<br>9月份前2次复习，刷一遍真题。<br>10月份之后刷各种真题，冲刺题，模拟卷。</p>\n<h2 id=\"4-各科目资料\"><a href=\"#4-各科目资料\" class=\"headerlink\" title=\"4.各科目资料\"></a>4.各科目资料</h2><h3 id=\"4-1-英语\"><a href=\"#4-1-英语\" class=\"headerlink\" title=\"4.1 英语\"></a>4.1 英语</h3><p>听一个导读，了解大概题型，注意事项。</p>\n<p><strong>词汇量一定注意积累：5500考研词汇。用21天记忆法过一遍红宝书。第二遍的时候一边背书，一边做配套题跟着加深印象。</strong></p>\n<p><strong>可以看看陈正康视频，跟着何凯文公众号每日英语。</strong></p>\n<h3 id=\"4-2-数学\"><a href=\"#4-2-数学\" class=\"headerlink\" title=\"4.2 数学\"></a>4.2 数学</h3><p>考研数学一的考试科目有：高等数学、线性代数、概率论与数理统计。各科目所占比例为：高等数学 56% 、线性代数 22% 、概率论与数理统计 22% 。</p>\n<p><strong>考研数学二考高等数学、线性代数。高等数学78%、线性代数22%。</strong></p>\n<p>考研数学一、二、在试卷中的题型结构都是一样的。<br>分别为：</p>\n<ul>\n<li>单项选择题8小题，每题4分，共32分；</li>\n<li>填空题 6小题，每题4分，共24分;</li>\n<li>解答题(包括证明题) 9小题，共94分。</li>\n</ul>\n<p>数一在题目类型的分布上是1-4、9-12、15-19属于高等数学的题目，5-6、13、20-21属于线性代数的题目，7-8、14、22-23属于概率论与数理统计的题目；<br><strong>数学二不同，1-6、9-13、15-21均是高等数学的题目，7-8、14、22-23为线性代数的题目。</strong></p>\n<h3 id=\"一、关于考研数学二中的高等数学\"><a href=\"#一、关于考研数学二中的高等数学\" class=\"headerlink\" title=\"一、关于考研数学二中的高等数学\"></a>一、关于考研数学二中的高等数学</h3><p>同济六版高等数学中除了第七章微分方程考带<em>号的伯努利方程外，其余带</em>号的都不考;所有“近似”的问题都不考;第四章不定积分不考积分表的使用;不考第八章空间解析几何与向量代数;第九章第五节不考方程组的情形;到第十章二重积分、重积分的应用为止，后面不考了;</p>\n<h3 id=\"二、关于线性代数\"><a href=\"#二、关于线性代数\" class=\"headerlink\" title=\"二、关于线性代数\"></a>二、关于线性代数</h3><p>数学二用的教材是同济五版线性代数，1-5章：行列式、矩阵及其运算、矩阵的初等变换及其方程组、向量组的线性相关性、相似矩阵及二次型;</p>\n<h3 id=\"三、数学二不考概率与数理统计\"><a href=\"#三、数学二不考概率与数理统计\" class=\"headerlink\" title=\"三、数学二不考概率与数理统计\"></a>三、数学二不考概率与数理统计</h3><p>参考书籍：<br>同济教材六版 + 张宇高数18讲 + 张宇概率论9讲 + 李永乐的线性代数 + 往年真题+汤家凤习题</p>\n<p>教学视频：<br>高数基础好-张宇高数基础班与强化版。基础不好：汤家凤<br>李永乐线性代数讲义视频 </p>\n<p>时间安排：<br>六月份：基础+强化视频看完<br>九月份开始：真题<br>十一月份：模拟卷</p>\n<h3 id=\"政治\"><a href=\"#政治\" class=\"headerlink\" title=\"政治\"></a>政治</h3><p>肖秀荣1000题很重要。4，8也是必刷<br>时间安排：<br>10月份开始也不晚。</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>先天勤后王道，还不明白严奶奶的数据结构。<br>严奶奶的数据结构 + 唐朔飞的组成原理 + 汤子瀛的操作系统 + 王道各科复习指导书（很有用） +王道模拟题</p>\n<p>6月份之前：<br>数学：汤家凤基础，张宇基础。<br>英语：单词刷一遍（先高中，后考研，红宝书+习题），陈正康视频+何凯文每日<br>专业课：数据结构，操作系统，基础课程迅速看一遍。课后习题做一遍。</p>\n","categories":["Learn"]},{"title":"阿牛学英语-单词篇","url":"/nle_words/","content":"<p>单词毫无疑问是横在大家学习英语的一个拦路虎。通过自身整理和收集，筛选出一些好用的方法，便于查询。看完之后不用在到处去找方法了，按照以下来执行，相信你可以。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h2><ul>\n<li>1.提升自信心，小步快跑逐渐建立信心。每次记之前告诉自己：“又要学习新的知识了，真开心”。</li>\n<li>2.背单词最好每天一次到两次或者多次。每次间隔6-10个小时。</li>\n<li>3.第二天背的时候复习昨天的单词。</li>\n<li>4.多记几遍，前两遍过单词不用追求所有的意思全记住。最好是先记一遍，优先将单词的第一个意思记住，然后在逐步扩展其他的意思。</li>\n<li>5.选一本书背即可，最好根据自己的水平从初级逐渐高级。高中词汇-&gt;四级-&gt;六级-&gt;雅思&#x2F;托福-&gt;GRE。</li>\n</ul>\n<h2 id=\"主要介绍一个背单词方法\"><a href=\"#主要介绍一个背单词方法\" class=\"headerlink\" title=\"主要介绍一个背单词方法\"></a>主要介绍一个背单词方法</h2><h3 id=\"背词法的理论根底\"><a href=\"#背词法的理论根底\" class=\"headerlink\" title=\"背词法的理论根底\"></a>背词法的理论根底</h3><ul>\n<li><p>一.以动机与自信心准绳<br>一句话，人的潜力是无量的，只需你以为你能够，你就能够。</p>\n</li>\n<li><p>二.以时间分配准绳<br>为了进步效率，每个单词花的时间不要太多，而要及时的，重复的温习(这是他文中最主要的思想，这点我也赞同，我看过很多大虾的文章也赞同)。</p>\n</li>\n<li><p>三.数量与质量的关系<br>每天背4-6个list以上的单词。大量记忆，记忆效果不会差。</p>\n</li>\n<li><p>四.以温习准绳<br>要依据遗忘曲线及时温习。</p>\n</li>\n<li><p>五.温习点<br>10分钟后，30分钟后，12个小时后，1天后，2天后，4天后，7天后，15天后温习一遍，在这8个温习点温习，听说契合遗忘曲线。</p>\n</li>\n</ul>\n<h3 id=\"第二章-背词法\"><a href=\"#第二章-背词法\" class=\"headerlink\" title=\"第二章 背词法\"></a>第二章 背词法</h3><p>孔子曰：“豫则立，不豫则废”，意义是凡事假如不做好方案，必将失败。老祖宗的话今天曾经成了工商管理界的金科玉律。能否胜利地运用笔者的背词法的关键，就在于能否做出缜密合理的方案，并且坚决地执行下去。</p>\n<p>初记单词时需求记忆的内容是：</p>\n<ul>\n<li><p><strong>单词的外观特征，到达可以辨认此单词即可。</strong><br>比方单词的长短、起始字母、特征(如中间有两个元ee) 等等。随着日后对单词不时地反复，我们对单词的记忆渐渐加深，到那时你自然就会在不经意间记住很多单词的拼写和发音。</p>\n</li>\n<li><p><strong>单词的中文释义。</strong><br>这种记忆应该尽量精确、但是不用一字不差，意义精确即可。</p>\n</li>\n<li><p><strong>单词的记忆法。</strong><br>这是红宝书中极端有价值的一个局部，能够大幅度地进步学习者的记忆效率。特别是词根、词缀记忆法和比拟记忆法，可以疾速扩展读者的单词量，起到让记忆者举一反三，触类旁通的作用。</p>\n</li>\n<li><p>至于例句，读者能够依据本人的实践状况决议看或是不看，假如对单词的用法的确不太了解，能够一看。</p>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>17天搞定GRE单词</li>\n<li>英语词汇的奥秘</li>\n<li>可以使用 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5leGFtNC51cy8=\">http://www.exam4.us/<i class=\"fa fa-external-link-alt\"></i></span> 生成计划表并打印出来。</li>\n</ul>\n<h2 id=\"17天搞定GRE单词\"><a href=\"#17天搞定GRE单词\" class=\"headerlink\" title=\"17天搞定GRE单词\"></a>17天搞定GRE单词</h2><h2 id=\"词根词缀记忆法\"><a href=\"#词根词缀记忆法\" class=\"headerlink\" title=\"词根词缀记忆法\"></a>词根词缀记忆法</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2MTgxOTU4MDYvP3A9MQ==\">P1第一节课 前缀（1~24）<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2MTgxOTU4MDYvP3A9Mg==\">P2第二节课 前缀（25~59）<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2MTgxOTU4MDYvP3A9Mw==\">P3第三节课 前缀（60~66）<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2MTgxOTU4MDYvP3A9NA==\">P4第四节课 词汇复习1<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><a href=\"https://www.bilibili.com/video/av18195806/?p=5\" title=\"第五节课 前缀（67~83）+ 后缀（1~10）\">P5第五节课 前缀（67<del>83）+ 后缀（1</del>10）</a></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2MTgxOTU4MDYvP3A9Ng==\">P6第六节课 后缀（11~35）<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><a href=\"https://www.bilibili.com/video/av18195806/?p=7\" title=\"第七节课 后缀（36~53）+ 词根（1~4）\">P7第七节课 后缀（36<del>53）+ 词根（1</del>4）</a></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2MTgxOTU4MDYvP3A9OA==\">P8第八节课 词根（5~14）<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2MTgxOTU4MDYvP3A9OQ==\">P9第九节课 词汇复习2<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2MTgxOTU4MDYvP3A9MTA=\">P10第十节课 词根(15~40)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2MTgxOTU4MDYvP3A9MTE=\">P11第十一节课 词根 (41~54)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2MTgxOTU4MDYvP3A9MTI=\">P12第十二节课 词根 (55~67)+ 字母变换规则1<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Learn"]},{"title":"阿牛学英语-学习方法大纲篇","url":"/nle_an_outline_of_learning_methods/","content":"<blockquote>\n<p>对英语的重视从未放下，但总是各种借口一再拖延，下定决心将它学好，准备过托福。经过大量的收集之后，整理出自己的方法和系统。</p>\n</blockquote>\n<p>最关键的持之以恒的去做，惟坚持尔。<br>由浅入深，持之以恒。是学习的法门。<br>英语分为听说读写四大类，每个都有独特的升级学习方法，确又不可拆分。</p>\n<span id=\"more\"></span>\n\n<p><strong>重点：英语并非拦路虎，首先建立自信心。</strong></p>\n<h2 id=\"记单词\"><a href=\"#记单词\" class=\"headerlink\" title=\"记单词\"></a>记单词</h2><ul>\n<li>1.提升自信心，小步快跑逐渐建立信心。每次记之前告诉自己：“又要学习新的知识了，真开心”。</li>\n<li>2.背单词最好每天一次到两次或者多次。每次间隔6-10个小时。</li>\n<li>3.第二天背的时候复习昨天的单词。</li>\n<li>4.多记几遍，前两遍过单词不用追求所有的意思全记住。最好是先记一遍，优先将单词的第一个意思记住，然后在逐步扩展其他的意思。</li>\n<li>5.选一本书背即可，最好根据水平从初级逐渐高级。高中词汇-&gt;四级-&gt;六级-&gt;GRE。</li>\n</ul>\n<h3 id=\"推荐方法：\"><a href=\"#推荐方法：\" class=\"headerlink\" title=\"推荐方法：\"></a>推荐方法：</h3><ul>\n<li>17天搞定GRE单词</li>\n<li>英语词汇的奥秘</li>\n</ul>\n<h2 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h2><ul>\n<li>1.找到关键的架构，基本语法就那么多。</li>\n<li>2.用潜意识进行模式识别。</li>\n<li>3.不要过度在意语法，是一种自然而然的意识。</li>\n</ul>\n<h2 id=\"听力：\"><a href=\"#听力：\" class=\"headerlink\" title=\"听力：\"></a>听力：</h2><ul>\n<li>1.第一遍不看原文，纯听。不懂得地方写两个关键字。</li>\n<li>2.阅读原文，把原文不懂的词儿查出来。把刚才没懂的句子划出来弄明白。</li>\n<li>3.第二遍看着整理后的原文听，跟读。</li>\n<li>4.不断重复听，直到懂为止。</li>\n<li>5.隔几天复习一下。</li>\n</ul>\n<h2 id=\"口语：\"><a href=\"#口语：\" class=\"headerlink\" title=\"口语：\"></a>口语：</h2><ul>\n<li>认识全部音标，最好模拟的足够标准。一共44个发音。如果每天一个，一个半月就搞定了。</li>\n<li>跟读，大量的练习。掌握发音，节奏，词组，提升反应速度。</li>\n<li>英语趣配音APP配合。</li>\n<li>十遍老友记。前两遍看字幕，剧情。三五遍尽量看英文字幕。然后最好不看字幕，磨耳朵。</li>\n</ul>\n<h2 id=\"读：\"><a href=\"#读：\" class=\"headerlink\" title=\"读：\"></a>读：</h2><ul>\n<li>1.选择适合自己的读物，切勿过难。</li>\n<li>2.直接看原著，不懂得单词进行字典查询，优先英文原版词典。</li>\n<li>3.推荐顺序。幼儿读物-&gt;名著-&gt;TED-&gt;新闻。</li>\n</ul>\n<h2 id=\"写：\"><a href=\"#写：\" class=\"headerlink\" title=\"写：\"></a>写：</h2><ul>\n<li>1.同样就是和学写中文一样，开始大量的抄。</li>\n<li>2.总结自己的规律，形成自己的写作系统并进行写作。</li>\n<li>3.大量阅读，不断摘抄。</li>\n</ul>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><ul>\n<li>1.保持轻松向上的心态。</li>\n<li>2.用强音乐刺激大脑，可以让大脑兴奋，增加速度。</li>\n<li>3.围绕熟悉内容不断加强和拓展。</li>\n</ul>\n<hr>\n<p>推荐：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2MTE5MTA5Njcv\">零基础6个月学会英语<i class=\"fa fa-external-link-alt\"></i></span>：bilibili上分享的一个心理学和语言学家做的，可以加速看完，很有意思。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2MTMwODg2ODE=\">英语入门基础词汇1000 1-54合集<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Learn"]},{"title":"阿牛学英语-音标","url":"/nle_accent_cource/","content":"<p><img data-src=\"https://upload-images.jianshu.io/upload_images/6868959-b1bbb85dde06680b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"英语发音图示.jpg\"></p>\n<span id=\"more\"></span>\n\n<p>一共44个发音，每天一个，一个半月就搞定了。</p>\n<h2 id=\"音标\"><a href=\"#音标\" class=\"headerlink\" title=\"音标\"></a>音标</h2><p>英语音标发音表（国际英语音标分类表）</p>\n<table>\n<thead>\n<tr>\n<th>总类</th>\n<th align=\"right\">子类</th>\n<th align=\"right\">小类</th>\n<th align=\"right\"></th>\n<th align=\"right\"></th>\n<th align=\"right\"></th>\n<th align=\"right\"></th>\n<th align=\"right\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>元音</td>\n<td align=\"right\">单元音</td>\n<td align=\"right\">前元音</td>\n<td align=\"right\">&#x2F;iː&#x2F;</td>\n<td align=\"right\">&#x2F;ɪ&#x2F;</td>\n<td align=\"right\">&#x2F;e&#x2F;</td>\n<td align=\"right\">&#x2F;æ&#x2F;</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\"></td>\n<td align=\"right\">中元音</td>\n<td align=\"right\"></td>\n<td align=\"right\">&#x2F;ɜː&#x2F;</td>\n<td align=\"right\">&#x2F;ə&#x2F;</td>\n<td align=\"right\">&#x2F;ʌ&#x2F;</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\"></td>\n<td align=\"right\">后元音</td>\n<td align=\"right\">&#x2F;uː&#x2F;</td>\n<td align=\"right\">&#x2F;ʊ&#x2F;</td>\n<td align=\"right\">&#x2F;ɔː&#x2F;</td>\n<td align=\"right\">&#x2F;ɒ&#x2F;</td>\n<td align=\"right\">&#x2F;ɑː&#x2F;</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\">双元音</td>\n<td align=\"right\">开合双元音</td>\n<td align=\"right\">&#x2F;eɪ&#x2F;</td>\n<td align=\"right\">&#x2F;aɪ&#x2F;</td>\n<td align=\"right\">&#x2F;ɔɪ&#x2F;</td>\n<td align=\"right\">&#x2F;aʊ&#x2F;</td>\n<td align=\"right\">&#x2F;əʊ&#x2F;</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\"></td>\n<td align=\"right\">集中双元音</td>\n<td align=\"right\">&#x2F;ɪə&#x2F;</td>\n<td align=\"right\">&#x2F;eə&#x2F;</td>\n<td align=\"right\">&#x2F;ʊə&#x2F;</td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td>辅音</td>\n<td align=\"right\">爆破音</td>\n<td align=\"right\">清辅音</td>\n<td align=\"right\">&#x2F;p&#x2F;</td>\n<td align=\"right\">&#x2F;t&#x2F;</td>\n<td align=\"right\">&#x2F;k&#x2F;</td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\"></td>\n<td align=\"right\">浊辅音</td>\n<td align=\"right\">&#x2F;b&#x2F;</td>\n<td align=\"right\">&#x2F;d&#x2F;</td>\n<td align=\"right\">&#x2F;ɡ&#x2F;</td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\">摩擦音</td>\n<td align=\"right\">清辅音</td>\n<td align=\"right\">&#x2F;f&#x2F;</td>\n<td align=\"right\">&#x2F;s&#x2F;</td>\n<td align=\"right\">&#x2F;ʃ&#x2F;</td>\n<td align=\"right\">&#x2F;θ&#x2F;</td>\n<td align=\"right\">&#x2F;h&#x2F;</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\"></td>\n<td align=\"right\">浊辅音</td>\n<td align=\"right\">&#x2F;v&#x2F;</td>\n<td align=\"right\">&#x2F;z&#x2F;</td>\n<td align=\"right\">&#x2F;ʒ&#x2F;</td>\n<td align=\"right\">&#x2F;ð&#x2F;</td>\n<td align=\"right\">&#x2F;r&#x2F;</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\">破擦音</td>\n<td align=\"right\">清辅音</td>\n<td align=\"right\">&#x2F;tʃ&#x2F;</td>\n<td align=\"right\">&#x2F;tr&#x2F;</td>\n<td align=\"right\">&#x2F;ts&#x2F;</td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\"></td>\n<td align=\"right\">浊辅音</td>\n<td align=\"right\">&#x2F;dʒ&#x2F;</td>\n<td align=\"right\">&#x2F;dr&#x2F;</td>\n<td align=\"right\">&#x2F;dz&#x2F;</td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\">鼻音</td>\n<td align=\"right\">（浊辅音）</td>\n<td align=\"right\">&#x2F;m&#x2F;</td>\n<td align=\"right\">&#x2F;n&#x2F;</td>\n<td align=\"right\">&#x2F;ŋ&#x2F;</td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\">舌则音</td>\n<td align=\"right\">（浊辅音）</td>\n<td align=\"right\">&#x2F;l&#x2F;</td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"right\">半元音</td>\n<td align=\"right\">（浊辅音）</td>\n<td align=\"right\">&#x2F;j&#x2F;</td>\n<td align=\"right\">&#x2F;w&#x2F;</td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"标准音标-American-Accent-Course\"><a href=\"#标准音标-American-Accent-Course\" class=\"headerlink\" title=\"标准音标 American Accent Course\"></a>标准音标 American Accent Course</h2><p>可以直接在哔哩哔哩看<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2Mjg5MTY2MS8/cD0y\">视频<i class=\"fa fa-external-link-alt\"></i></span><br>可以看恶喵的奶爸整理到<span class=\"exturl\" data-url=\"aHR0cDovL3QuY24vUnFlaFdOSj9tPTM5NzUzNDI0OTE4MzcwNDQmdT0yNDkyNDY1NTIw\">微博<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Learn"]},{"title":"2017年总结-昨天，今天，明天","url":"/summary_of_2017/","content":"<blockquote>\n<p>或许执着于明天，看到了曙光。</p>\n</blockquote>\n<p>17年作为区块链新的元年。越来越来多小伙伴登上了这个高速列车，一个又一个踏上了通向财富自由之路，微博网红赛博鱼3.5万到2500万的直播，王团长的简书直播，15万三个月逆袭千万的搬砖大神坚石……无数的造富神话在谱写。</p>\n<span id=\"more\"></span>\n\n<p>作为资深屌丝的我，虽然轻轻的来，慢慢的游，没有带走一丝财富，但是也收获了穿越牛熊的经验，更重要的是宝贵的创业经历！</p>\n<p>感谢熊总给予了这个机会，韬爷教诲了量化入门，奶总资深基金经理的言传身教，最应感谢领头羊蓝总把大家召集到了一起，努力推动量化事业的前进！期望在新的一年我们能在这个领域站稳，深扎，甚至成为行业标杆。</p>\n<p>ps：今年三个月40%-130%的收益率还是很不错的。</p>\n<p>自己的回顾，今年也启动了很多：</p>\n<ol>\n<li>开启Python 量化之旅。</li>\n<li>简读大量区块链相关书籍，研读区块链项目源码。</li>\n<li>通过海量投资，逐步建立了自己的投资观念。</li>\n<li>走出了程序员的一片天，积极加入社群，坚持每周一篇文章。</li>\n</ol>\n<p>这一年过得真快，发生了很多很多事情，恍惚间，白驹已逝。还记得小时候特别喜欢保尔柯察金说的：“人最宝贵的是生命，生命对人来说只有一次。人的一生应当这样度过：当他回首往事时，不会因为碌碌无为，虚度年华而悔恨，也不会因为人卑劣，生活庸俗而愧疚。”</p>\n<p>所以一直期待着战争，这样就可以去战场上，抛头颅洒热血，保家卫国！可惜我们生活在了和平年代，国力强盛，民生安康，家家户户奔向了小康。后来又想成为光荣的人民教师，桃李满天下，奈何公务员考试太难了。</p>\n<p>直到进入了互联网浪潮，突然明白，这就是我想做的事儿。它不仅能造福小家，更能连通国家，链接地球村。互联网对我们生活的改变，体现在方方面面，通讯，数据，信息，购物，支付等等。在这个浪潮中，一浪比一浪高，一波比一波大。如饥似渴的吸收各种相关知识，期待踏在浪上，成为一个弄潮儿。</p>\n<p>幸运的是进入了区块链领域。这是一场金融革命，千年难得一次大机遇。</p>\n<p>第一次和熊聊的时候，觉得老板做的这事有意思挺好玩。后来随着经历的市场牛熊转换，在赚钱效应下，越发的感兴趣，虽然开始作为嫩嫩的韭菜，被割的不要不要的，不过也收获了很多，我们一定要做价值投资者。在这场区块链革命中，有太多的机会。投机只能让自己损失惨重！眼光要放眼将来。规律不在于长线短线，而在于样本量和噪音。芒格也说：既然看好了就下重仓。</p>\n<ul>\n<li>可能是今天成就了明天。</li>\n</ul>\n<p>分享了2017年的收获和感悟，在此也为2018年立一个flag。</p>\n<ol>\n<li>在几位大神的指导下，完善量化平台。</li>\n<li>解读比特币源码，追踪EOS源码。</li>\n<li>坚持每周至少一篇文章。</li>\n<li>得到付费专栏至少通读四个。</li>\n<li>坚持英语。</li>\n</ol>\n<p>在最后送上金牛经典语句：</p>\n<p>配置，定投，不要看，重仓梭。</p>\n","categories":["Life"]},{"title":"2018年总结-弃过往，驻今朝，望明日","url":"/summary_of_2018/","content":"<p>过年这几天进行了去年的复盘，可以确定的是做了很多事，犯了很多错误。<br>偶思虑几句佛偈道语，然子不语怪力乱神。我个人坚决抵制封建迷信，但是流传千年的古人智慧结晶有很多经验依然适用于当下。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-尽信书则不如无书，相信别人不如相信自己。\"><a href=\"#1-尽信书则不如无书，相信别人不如相信自己。\" class=\"headerlink\" title=\"1.尽信书则不如无书，相信别人不如相信自己。\"></a>1.尽信书则不如无书，相信别人不如相信自己。</h2><p>孟子教导当我们读书时应当加以分析，辩证的去看到问题，不应该盲目的迷信书。我发现在读书多的人群中辩证主义会更加普遍存在，在少书人群中盲从主义更加普遍。或许是因为读书多，辩证多，自我进化了辩证意识？所以看待事物有着独特的视野，敢于讨论勇于提出不同的见解。不外如是，人们常有所闻的名人毛主席烟不离手，手不离卷。也正因为读书多，才能开创共产主义的时代吧。每读一本书就像穿越时空和距离在同写书的作者交流沟通，喜不自胜。</p>\n<p>其实和人相处又何不如是。道理相通，常常抱着善良的心态对待世界，认为人人都是善良，世界是美好和平的。然而往往现实会给你一巴掌，欺骗无处不在，往往被最信任的人背后捅一刀子的事儿常常发生。所以相信别人不如相信自己。</p>\n<h2 id=\"2-人生是我们做的最大的一笔投资。\"><a href=\"#2-人生是我们做的最大的一笔投资。\" class=\"headerlink\" title=\"2.人生是我们做的最大的一笔投资。\"></a>2.人生是我们做的最大的一笔投资。</h2><p>“七年”一辈子，给每一笔投资设定阶段性止盈止损线。</p>\n<p>人生需要复利思维。尽量的优化自己财富报表，从逆向复利到正向复利。越早进入这个领域和模式，活得足够久那么收益越会足够高。</p>\n<p>厚积而薄发，跨业积累不同的技能兴趣。投资自身的兴趣和潜能，是一个极好的方式。小小的脚步前进，不断达成小的成就，积累信心，终能活出自我。</p>\n<p>投资自身健康，才能活得更久，更有质量。<br>投资自身头脑，才能更加聪明，更懂得如何处理事情。<br>投资自身情绪，才能修身养性，使自己舒心，使别人踏心。</p>\n<p>当逐步清除负循环的影响，走向正循环的道路，会发觉越走路越宽，天越高。<br>技能，学识，人脉都是可以通过学习进行习得，投资使习得周期压缩，从优秀者处迅速获取该项能力入门。开始越早，时间越久效果越明显。</p>\n<h2 id=\"3-害人之心不可有，防人之心不可无。\"><a href=\"#3-害人之心不可有，防人之心不可无。\" class=\"headerlink\" title=\"3.害人之心不可有，防人之心不可无。\"></a>3.害人之心不可有，防人之心不可无。</h2><p>今年也算是数次创业经历，过程中还是有些总结，最重要也最难的还是人这一关。整理总结了一些大家提出的点。</p>\n<ul>\n<li>常怀感恩的心。有报复心理的人，甚为小心，你对她的百次好不如一次不妥，关键时刻掉链子没得商量。</li>\n<li>坦诚相待。合伙做事切勿有私心过重之人，不然一颗老鼠屎坏了一锅汤。</li>\n<li>创业思维。坚决摒弃工作思维，常有此类思维，不仅影响自身的工作情绪和能力发挥，也会渐渐影响其他人。人性中有一双眼镜是专门看别人的。</li>\n<li>公私分明。公私分明越清楚越好。</li>\n</ul>\n<p>人是群居性动物，往往有一双眼睛在看别人。多和优秀的人一起合作，团队会越来越优秀。若其中有在特定时期不适于当下的行为或个体，会迅速被其他有消极特怠心理的复制，导致系列性问题。</p>\n<h2 id=\"4-辩证的视角看待资产增值\"><a href=\"#4-辩证的视角看待资产增值\" class=\"headerlink\" title=\"4.辩证的视角看待资产增值\"></a>4.辩证的视角看待资产增值</h2><p>今年研读颇多宏观经济，微观经济，货币历史等，得出自己的结论：财富的积累自身能力在其中体现不足百一，重要的是时势造英雄。也即是说我们的财富跨越阶层的积累靠的是命。请注意，这不是消极，也不是认命，而是一种豁达。各种周期论在其背后都有一套人们说不清道不明的逻辑支撑，理论的基础在于大量事实的拟合推断。<br>根据历史我们看现在富豪榜上的发家史，无一不和历史崛起因素。因为有了历史性的需求，才产生了阶段性的财富爆发积累。<br>这也是我今年为什么不断对朋友重复，你们无意间选择了最省力最快速的道路：读书。这是一条厚积而薄发的道路，往往机会来了拼尽力气去抓去足矣。而力气是无数次锻炼积来，所以错失了良机别急，别懊悔，因为那是给有准备的人，给予时代骄子。作为普通大众的一员，顺应时代，就是最好的财富积累方式。好好工作，该炒股炒股，该买房买房。三代积累自然而然。</p>\n<h2 id=\"5-阶段可行性计划\"><a href=\"#5-阶段可行性计划\" class=\"headerlink\" title=\"5.阶段可行性计划\"></a>5.阶段可行性计划</h2><p>今年的计划很重要，起到承上启下的作用。规律的作息才能提供更高效的效率，好的身体决定能走多远。</p>\n<ul>\n<li>one 绝对绝对不熬夜，12点前必须睡觉，6点起床，规律作息。</li>\n<li>two 过英语关，拿下托福。达到正常交流水平。</li>\n<li>three 坚持日记。中英双版，积累写作素材。</li>\n<li>four 自由泳拿下。泳姿的练习后是新的提高。</li>\n<li>five 三次中短出游。 读万卷书，行万里路。阶段性修正。</li>\n<li>six 一曲吉他走天涯。惭愧，闲置一年还未达到可弹奏状态。</li>\n</ul>\n<p>有点贪心，却不是不可完成。看似条目多，却是走向正向循环的必经路。期望身体保持健康，头脑越来越丰富。</p>\n","categories":["Life"]},{"title":"关于学习不得不说的技巧","url":"/skills_about_learning/","content":"<blockquote>\n<p>最近了整理一些学习的心得，与君共勉。</p>\n</blockquote>\n<h2 id=\"1-相信前辈，更要相信自己\"><a href=\"#1-相信前辈，更要相信自己\" class=\"headerlink\" title=\"1. 相信前辈，更要相信自己\"></a>1. 相信前辈，更要相信自己</h2><p>我们在确定目标院校以后，通常会第一时间联系已经考去目标院校的师兄师姐，或在目标院校读书的亲戚朋友们，目的就是搜集最新资讯。</p>\n<p>这个当然可以有，而且是非常必要的。但我们不能只复习师兄师姐给的资料，而丢掉了自己的计划，或者说自己根本没计划。</p>\n<p>唯有充分准备，方能以不变应万变。</p>\n<h2 id=\"2-跑步午睡，持续战斗之源\"><a href=\"#2-跑步午睡，持续战斗之源\" class=\"headerlink\" title=\"2. 跑步午睡，持续战斗之源\"></a>2. 跑步午睡，持续战斗之源</h2><p>为什么有时候越学越没劲，越学越觉得又累又困，就是没有有效地调整自己的状态，不管是学习还是工作，劳逸结合都是良方。</p>\n<h2 id=\"3-删繁就简，抄写等于省时\"><a href=\"#3-删繁就简，抄写等于省时\" class=\"headerlink\" title=\"3. 删繁就简，抄写等于省时\"></a>3. 删繁就简，抄写等于省时</h2><p>这是我最大的一个特点。俗话说好记性不如烂笔头，我习惯把课本的重点知识摘抄到笔记本上，抄的过程同样是记忆。</p>\n<p>本子里的内容全是我要求自己一定要百分百熟练掌握的知识，本子随身携带随看随记。<br>所以前期花大量时间抄写，后期的主要任务就是合理安排时间熟记并默写，默写更需要时间，但是你若是愿意花费时间默写重点的话，上考场真的可以信手拈来。</p>\n<h2 id=\"4-关于复试，真功夫在平时\"><a href=\"#4-关于复试，真功夫在平时\" class=\"headerlink\" title=\"4. 关于复试，真功夫在平时\"></a>4. 关于复试，真功夫在平时</h2><p>在平时多多积累，相信自然有需要用的时候，临阵磨枪的事情还是少做为好。</p>\n","categories":["Life"]},{"title":"关于社群定位的思考","url":"/thinking_about_community_positioning/","content":"<blockquote>\n<p>在这个环境当中，好像大家都要做点什么事情。那么其中踏踏实实做基础服务工作的还有多少人？</p>\n</blockquote>\n<p>区块链领域出现了很多很多社群。其中不乏务实做事情的，有的带领小白合理投资，协助链接资源。有的科普传播相关技术。有的做成学院有体系授课。这些热血而又充满激情的人，极大地促进了整个市场的发展，欣欣向荣。</p>\n<span id=\"more\"></span>\n\n<p>但也不乏来蹭热点不知所云的，更有一些打着去中心协作幌子来让大家免费打工的。甚至一些什么内容都没有的星球收费199，博主开圈没有更新过。</p>\n<p><em><strong>在百花争鸣，而又乱相丛生的时代里，我们可以做点什么？</strong></em></p>\n<p>默默的观察了许久，参与了大量的社群，发现很多很多人都有梦想并且极有热情，大家都喜欢共同参与并创造。但是同时有点迷茫，不知道要走向什么方向，不知道在这个大浪潮当中自己如何参与。看到别人做的有声有色，略有点羡慕。</p>\n<p><strong>在浮躁的币圈，有没有人想过做一股清流，我们默默的锻造自身的同时，以工匠精神来打磨一个又一个能对广大币友提供服务的工具。</strong></p>\n<p>如果你曾经设想：</p>\n<ul>\n<li>坚持定投，有一个自动化的工具节省时间就好了。</li>\n<li>这个数据监控平台延迟好高，有一个及时的平台就好了。</li>\n<li>搬砖的同时发现行情数据不好用，还得自己整理，有个能实时显示并计算的平台就好了。</li>\n</ul>\n<p>如果：</p>\n<ul>\n<li>你想做点什么，却还在迷茫</li>\n<li>你想参与到浪潮当中，做一个弄潮儿</li>\n<li>你想实现自我价值</li>\n</ul>\n<p>或许我们可以抱团取暖，以工匠精神打磨自身，打磨产品，自己用的同时免费提供给大家使用。</p>\n","categories":["Life"]},{"title":"听大多数人的话,参考少数人的意见,最终自己做决定","url":"/listen_more_consult_min_make_your_own_descsion/","content":"<blockquote>\n<p>“套模版”真是一个好方法。</p>\n</blockquote>\n<p>讲真，我打小数学就好，一般扣分都是因为小数点写错了而不是公式不会套，对套公式那是相当有心得。随着年岁的增长，除了上学外开始接触社会，形形色色的人，杂七杂八的事，比如进行投资（or投机）。越来越喜欢将一些古人的智慧当作公式套在不同的领域。</p>\n<p>这不，最近想明白了“听大多数人的话,参考少数人的意见,最终自己做决定”在投资领域真是一个好的公式。</p>\n<span id=\"more\"></span>\n<h2 id=\"听大多数人的话\"><a href=\"#听大多数人的话\" class=\"headerlink\" title=\"听大多数人的话\"></a>听大多数人的话</h2><p>大多数人代表了热点。<br>有的人喜欢追热点，或者是说大部分人都喜欢追热点，中国人极为爱热闹。当一个时代兴起的时候，其实你不会不知不觉，而是非常清楚。<br>我们举个例子：<br>1990年代股票热，人们疯狂的涌向股市。疯狂, 暴富, 崩盘三板斧耍的那是虎虎生风。金融市场震荡不停，一波未起一波又生。<br>2000年房产泡沫第一波被捅灭之后，又开始攀升。<br>2010年区块链造富神话引无数资金盘竟折腰。</p>\n<p>历史总是惊人的相似，却不是简单的重复。</p>\n<p>所以各位先烈前辈总结了种种规律。房市中有死多，无限杠杆大法。股市有波浪理论，均线大法，缠中说缠。币圈融合金融，传销，高科技。</p>\n<p>很多人参与，才能形成热点。每个热点兴起，经过了漫长的孕育。就好像我们经过九年义务教育才能考高中，苦学三年上大学，考上大学就像漏气的气球，一飞冲天。然后势能消失，一蹶不振，进入社会被各种蹂躏。之后奋勇加班，走上人生巅峰（or猝死）。个体的成长规律和个股又是惊人的相似。</p>\n<p>大部分人都做的事就是正确的事，因为只有正确的事才吸引大部分人去做。这句话说起来很绕口，却是古人苦口婆心所教的。男怕入错行，女怕嫁错郎。你看，古人就说男人的热点就是进入当下最好的行业，女人最重要的选择是一生的归宿。行业和婚娶就是古代的热点，做得好还是不好，每双眼睛都在盯着你这两件事看。和我们看像房产，股市，区块链是同样的眼光。那是一种贪婪的欲望，幻想着一夜暴富的神话，愉快的被市场蹂躏。既然往往被市场教育，有人说，那我不参与不就好了吗？不好意思，这就是“行”，选当下最热的“行”，跟着大部分人的脚步总是没错的。</p>\n<blockquote>\n<p><strong>互联网是当下的热点</strong></p>\n</blockquote>\n<h2 id=\"参考少数人的意见\"><a href=\"#参考少数人的意见\" class=\"headerlink\" title=\"参考少数人的意见\"></a>参考少数人的意见</h2><p>只要是投资领域，永远会有龙头存在。有的基金只配置排名前5的投资种类。<br>排名最前的往往是热点最高。最受到价值认可的。大资金总是在吹捧的，散户却往往不愿意买的。理由很简单，因为价格太高了。</p>\n<p>每个领域人多了，就要有交流，自然就会出来各种咖。</p>\n<p>各个成功的人士也好，公司也罢。我们深入研究会发现，大部分的成功者都不是从零开始白手起家。要么是几个不错的点子拼在一起，要么是参照了已经成功的商业模式。据传阿里巴巴是马云去美国看了人家的网站回来抄的，腾讯抄袭大王，百度是李彦宏本身就是搜索专家的基础上做的。模仿其他的成功，加上自己的理念，才有了最终的成功。最近看了一本《有钱的人想的和你不一样》上面写到成功人士，善于吸收他人经验，转化为自己的经验。所以在我们开始不懂的时候，从单纯模仿开始是对的，逐步修炼出自己的方法才是更好的。</p>\n<p>当我们刚进入投资领域的时候，多看看各个跳大神的咖也无妨。但是请记住一个原则：当你信任的咖买入时你也跟着买入了，那么当他卖出时一定要跟着卖出。</p>\n<p>如果不是很贪心（不贪心的很少，我们进投资就是暴富的），买入前3，做好配置持有就是最好的方式。</p>\n<blockquote>\n<p><strong>区块链是互联网中的热点。</strong></p>\n</blockquote>\n<h2 id=\"最终自己做决定\"><a href=\"#最终自己做决定\" class=\"headerlink\" title=\"最终自己做决定\"></a>最终自己做决定</h2><p>成年人请为自己的每个决定负责。<br>越早的冲进热点领域越好，积累的时间足够久，自然的增幅也会让你享受到足够的福利，也就是投资人常常讲的蓝海效应。</p>\n<p>当我们随着大流，一头冲入现在的最流行的领域。听从几个大咖的建议，选择了某个正确的姿势。这个时候就要不断的摸索，打磨出独有的方式。当然这依然是可以借鉴的，我会从投资领域给出几条总结，以便省去查找之苦：</p>\n<ul>\n<li><p>1.我是有1万块钱开始投资好，还是攒够100万在开始投资？<br>越早确定越好。虽然本金少，赚不到多少钱，却有利于避开巨额损失的风险。就像开车一样，一个从没上过路的司机总认为驾驶是件恐怖的事情，你让他试一试，会感觉“也不过如此”。实际操作一下你就会明白“原来还可以这样赚钱”“原来这么做会亏钱”。开始行动很重要。</p>\n</li>\n<li><p>2.什么时候买入，什么时候卖出？<br>低买高卖是赚钱不二的法则。在深入一点，大跌时买入，大涨时卖出。</p>\n</li>\n<li><p>3.多多尝试，找到自己的方法，并坚持下去。<br>武林门派众多，各走一锋。想少年初入武林挑的眼花缭乱不知入哪派门下。</p>\n</li>\n</ul>\n<blockquote>\n<p>如果你经常被市场蹂躏，这里给大家推荐一下定投。</p>\n</blockquote>\n<p>吸收了巴菲特的价值大法，简化为初入之人最稳的方式。详情参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xZDU5NTVkMzQ1NTI=\">《价值1000万的定投教程》<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Life"]},{"title":"周报的作用和意义","url":"/about_weekly_reports/","content":"<h2 id=\"写周报的目的和意义是什么？\"><a href=\"#写周报的目的和意义是什么？\" class=\"headerlink\" title=\"写周报的目的和意义是什么？\"></a>写周报的目的和意义是什么？</h2><blockquote>\n<p>为自己做记录、为自己做提醒、为时间管理做铺垫</p>\n</blockquote>\n<p>古有孔子曰：“吾日三省吾身;为人谋而不忠乎?与朋友交而不信乎?传不习乎?”。孔圣人每天都要问自己三件事，来验证自己做的是否到位，用问题来约束自己，是否有改善空间。</p>\n<span id=\"more\"></span>\n<p>按照周期来进行工作总结有利于形成好的习惯，我们知道形成习惯之后很多事情都是顺其自然而已。而且进行固定的周期的总结，对于企业和个人都有很多的益处。</p>\n<p>对于企业来说，可以了解到员工的工作紧张，文字传输的效率比每日进行人工跟进要高很多了。同时有利于企业对工作更进一步追踪和进行安排。而员工对工作的内容输出，也是一个对自己成长的总结，方便企业了解到员工的进步以及现在的能力。</p>\n<p>对于员工来说，可以根据上周的计划以及本周的总结进行阶段性的对比和反思。总结相关的能力，提炼出其中学到的知识，不断的进步。有相关的正反馈促进成长。只有不断的进行反思，提升获得收获，这样才能更快的进步。同时也可以给自己进行一些相关的总结，提供一些素材在更长周期中使用。更重要的是遇到的问题，犯过的错误记下来同时经常去回顾，才能最大限度避免同类问题。就像小时候学习一样，老师常常要求我们整理错题本，可以及时温故而知新。</p>\n<h2 id=\"周报写哪些内容？\"><a href=\"#周报写哪些内容？\" class=\"headerlink\" title=\"周报写哪些内容？\"></a>周报写哪些内容？</h2><ul>\n<li><p>本周工作内容。<br>总结本周的工作成果，切记不是写流水账哦。<br>最好的方式是把自己的工作结果量化来描述，可以把平时记下的小经验什么的同时写下。<br>比如我是一名开发，主要会写本周写了多少代码，完成了哪些功能，学了什么新东西等等。同时呢要加入量化后的感悟和总结，比如本次写的代码都是干啥的，能满足什么需求。比如本周新上线了，结果怎么样，效果比上次好还是不好，中间出了什么问题，又是如何解决的。<br>就是要在周报和领导进行汇报，让他完整的知道你这周的内容产出，可以更加完善的了解你个人以及项目的信息。<br><strong>要诀：重点在于“成绩”。</strong></p>\n</li>\n<li><p>下周工作计划。<br>对下周要开展哪些工作同样用量化的方式写出来。细致的计划是成功的基石，做好完整的计划不仅可以让自己做事紧紧有条，同时能极大的增加把控度。日积月累沉淀的能力会越来越强。同时要写出什么时候完成什么事，最好能加上可以完成的原因以及不可以完成的原因，同样可以让领导更加清楚你的下一步计划以及能做到哪些程度，可能产生的影响对进展的影响。<br><strong>要诀：重点在于“结果”。</strong></p>\n</li>\n<li><p>碰到了什么问题。<br>在工作中常常遇到问题，这些都是宝贵的财富，记录下来并进行沉淀遇到的同类问题会越来越少，再次遇到同类问题可以很方便的解决。同时从中总结出自己处理问题的方法论有助于形成自己的思维习惯处理方式。<br><strong>要诀：重点在于“解决方案”</strong></p>\n</li>\n</ul>\n<h2 id=\"需要注意的问题\"><a href=\"#需要注意的问题\" class=\"headerlink\" title=\"需要注意的问题\"></a>需要注意的问题</h2><ol>\n<li>务实。切不可虚大描述，一旦预期和产出差距过大，要反思自己的问题。</li>\n<li>数据说话。尽可能用量化的方式进行阐述，可以让阅读者清晰明了。</li>\n<li>逻辑清晰。一定要逻辑清晰明了，切不可漫天飞舞，不着边际。</li>\n<li>事情具体但不鸡毛蒜皮。</li>\n<li>有思考，有内涵。</li>\n</ol>\n","categories":["Life"]},{"title":"哪有什么自律，就是种习惯","url":"/no_discipline_just_habit/","content":"<blockquote>\n<p>年少时参过军或许会是一生幸福的开始。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"01-每支军队有自己的风格，自己的口号。\"><a href=\"#01-每支军队有自己的风格，自己的口号。\" class=\"headerlink\" title=\"01 每支军队有自己的风格，自己的口号。\"></a>01 每支军队有自己的风格，自己的口号。</h2><p>青年时在长城汽车做过小工，入职前要参与军训。那和学生时代的军训不同，是真正的军训，我常常恶意的猜测，是不是老板先让你军训累惨了，正式工作后反而觉得轻松能坚持下去。我们知道工厂的流动性是很高的，工作辛苦，薪资低。为了最大化的赶进度，保持机器的使用率，百中夜三班倒。导致的结果就是工人干不了几个月就走了。更严重的前些年富士康更常传出工人压力过大跳楼的事件。</p>\n<p>而长城汽车给我到现在的印象，是进厂墙上那一行红艳艳大字“每天进步一点点”。这句话，这句口号，一直在内心深处不断的呐喊。人生就像长跑，哪怕走偏了，跑错了路，被别人拉下远远儿的也没什么关系。重要的是不要停，只要你一直跑，哪怕在慢也会有超越半路停下人的那一天。人生路很长，别着急。</p>\n<h2 id=\"02-无志者常立志，有志者立长志。\"><a href=\"#02-无志者常立志，有志者立长志。\" class=\"headerlink\" title=\"02 无志者常立志，有志者立长志。\"></a>02 无志者常立志，有志者立长志。</h2><p>中国有句古话说有小见大，也就是从下时候就能看出这个人长大了什么样。通过一些例子能很好的佐证这个观点。悬梁刺股，凿壁偷光，囊萤映雪，岳母刺字，孟母三迁等等无数中外名人在年少时多有长志。</p>\n<p>他们的坚持在我们现在成为自律。</p>\n<p>当你问他的时候，我想所有人都会告诉你。自律？不，我并没有什么自律，只是喜欢做这件事罢了。</p>\n<h2 id=\"03-我亦无他-惟手熟尔。\"><a href=\"#03-我亦无他-惟手熟尔。\" class=\"headerlink\" title=\"03 我亦无他,惟手熟尔。\"></a>03 我亦无他,惟手<em>熟尔</em>。</h2><p>人和人出生都没什么差距，但是随着时间的加持，差距会越来越大，表现的越来越明显。自幼聪慧者如能走上自己喜欢的路往往有所成就，如走上背向自己爱好者难逃中庸。当一个技能磨练一万小时后，即可称为大师。大师都是自律吗？都是刻意练习吗？真的不是，大师练习的时候是无时无刻，是爱好，是习惯。</p>\n<p>所谓的自律，刻意练习。都是后人总结出来的名词。少年郎多注意脚下路，切莫贪杯眼前空。选一个长长的雪坡，攒一颗小小的雪球，尽情的滑下去。将这些假大空的名词放下，一点点的行动，自然而然成为一种习惯。</p>\n","categories":["Life"]},{"title":"常反思，必有得","url":"/ruminates_gains/","content":"<p>记得那是两年前的秋季，公司组织到张北草原团建。那里有美味的烤羊腿，有热情好客的老板娘，有调皮的小马驹……</p>\n<span id=\"more\"></span>\n\n<p>故事从小马驹讲起。</p>\n<p>早晨，天蒙蒙亮，昨夜“疯狂”之后的疲惫似乎随着夜晚的睡眠一起离去。大家都早早的起床洗漱，欢聚一堂，品尝美味的农家饭。经过城市中各种外卖的摧残后，朴素简单的玉米粥显得格外的香，平时只能吃一个馒头的小姐姐，在这时胃口大开，竟然连吃三个。</p>\n<p>一声马嘶，打破了晨日的安宁。端着碗正要喝米粥的小哥哥停了一下，加咸菜的筷子，剥蛋的手定在了那里，已经吃完饭蹲门口抽烟的兄弟缓缓抬起了头，那一刻镜头好像放慢了，时间走缓了。随着第一匹马的进入，缓缓的进来了一队健壮的马儿，他们挺着胸，昂着头踏着缓缓的脚步走了进来。</p>\n<p>一声欢呼打破了突然的宁静。这时候，时间又仿佛恢复了正常，甚至还有一丝的欢快。今天原来有骑马奔草原的活动啊！大家很是兴奋，烟坯一撇，迅速扒了蛋，呼噜噜的喝下粥，聚集到了马群的地方。</p>\n<p>一群小白很是兴奋围着转来转去，看看这个，和那个拍个照。在马主人的帮助下，都安全的登上了马鞍。缓缓向村外走去，渡向草原。</p>\n<p>我分配了一匹大马，如果是老手可能知道，大马适合新手学习骑乘，主要是稳健，识途总会跟着大部队行动。</p>\n<p>当到达草原上，看着骑乘小马驹的同事奔来奔去，羡慕不已，也学他们的样子，用马主人教的方式，轻轻的夹马肚。然而没什么卵用，还发生了一件很尴尬的事情，兴许是被扰的烦了。大马静静地卧在了那里，拒绝前行。</p>\n<p>在回程的时候，在眼巴巴的可怜眼神中，换到了一匹小骏马。</p>\n<p>果然不一般的飞腾。在草原中，放开了马蹄，狂奔不止。嗯，没错，你又猜对了，我掌控不住了，哈哈哈。因为我不敢用力的嘞住它，也不想，所以成了第二道靓丽的风景。马主人特地过来帮我暂停了我们哥俩短暂的欢乐。这次我小心翼翼使用着刚刚用生命学来的技能，速度快但是稳，还能转圈圈。</p>\n<p>最近偶有所感，突然想起这个事情。和现实中其他发生的一些事儿互相印证，有了更多的感悟。</p>\n<p>所想的事情和实际的可能会不一样。比如小马确实如我们所想，奔跑更欢快，却不一定是你所能掌控，这个时候往往容易出现危险。但是一旦你掌握了相关的技巧，就能达到你所想的草原飞奔。风险和利益并存。当然可以选择大马，悠悠的过去，悠悠的回来，安全体验了骑马。</p>\n<p>如果是你，会选择哪种方式呢？</p>\n","categories":["Life"]},{"title":"18考研信息收集分享","url":"/graduate_18_info/","content":"<p>推荐APP工具：百度网盘（你所能找到的好多资料都需要百度网盘来中转），扇贝单词，扇贝新闻，帮学堂，粉笔考研，考研万题库，口袋题库考研，完美规划，考研帮，有道词典</p>\n<span id=\"more\"></span>\n\n<h2 id=\"政治\"><a href=\"#政治\" class=\"headerlink\" title=\"政治\"></a>政治</h2><hr>\n<p>肖四，肖八，肖的命题人形式与政策（只看选择题），蒋中挺4套卷（选择题），米鹏的几套卷（选择题），任汝芬的几套卷（选择题），你能找到的其他老师的卷子（选择题）</p>\n<p>考研政治包括五个部分：马原30%，毛中特30%，近现代史15%，思修15%，还有时政10%。</p>\n<p>马原：阮晔。毛中特：徐涛。思修：肖秀荣1000题。近现代史：秀荣老师或者任汝芬老师。</p>\n<p>形式与政策：徐涛最后的20天20题（传说中的小黄书）最后那几页会有每年的政治实事预测考点，把那个看一遍一般这部分没问题。</p>\n<p>选择题，一直选择题做下去就行了，对答案，在做，三遍之后你就会有不同的感觉</p>\n<p>大题，直接背诵肖四，肖八的大题。</p>\n<h2 id=\"英语（二）\"><a href=\"#英语（二）\" class=\"headerlink\" title=\"英语（二）\"></a>英语（二）</h2><hr>\n<p>张剑黄皮书真题。恋恋有词加上红宝书。</p>\n<p>作文：王江涛作文。阅读：李旭。翻译：唐静。新题型与完形填空：王晟。</p>\n<p>看扇贝新闻，背200个单词。真正的用笔写英语的作文练习。</p>\n<p>考研阅读素材来源主要有 经济学人、商ye周刊、自然杂志、华尔jie邮报、纽yue时报等,考研阅读文章多采用经济、教育、文化等公共话题的篇章。</p>\n<p>扇贝单词，选一个考研的单词书，每天设定二百个，拼写模式，背完差不多一个小时（它里面内置了艾宾浩斯遗忘曲线，就当是一个好的方法吧），然后就看扇贝新闻（每天四篇，不求全部翻译出来，就是每天四篇坚持看，相信我，坚持200天，就知道效果有多明显了</p>\n<p>何凯文的长难句分析小本子。</p>\n<h2 id=\"数学（二）\"><a href=\"#数学（二）\" class=\"headerlink\" title=\"数学（二）\"></a>数学（二）</h2><hr>\n<p>资料： 线代 同济第六版， 同济高数（第六版，找最新版的就行了），张宇十八讲，李永乐复习全书，李永乐660题，李永乐老师的线代辅导讲义，李永乐的历年真题（数二）</p>\n<p>李永乐线代视频，张宇高数视频，汤家凤视频</p>\n<p>如果是考数一就在多找王式安的概率论视频（前一年的视频，网上找，或者很便宜能买到）</p>\n<h2 id=\"线代\"><a href=\"#线代\" class=\"headerlink\" title=\"线代\"></a>线代</h2><hr>\n<p>先看李永乐视频，李永乐线代基础32讲</p>\n<p>视频完了之后就做660题配套的送的一本小书，按照章节分类的，看完一章线代就做一章。</p>\n<h2 id=\"高数（二）\"><a href=\"#高数（二）\" class=\"headerlink\" title=\"高数（二）\"></a>高数（二）</h2><hr>\n<p>如果有时间，先把汤老师的基础班和强化班看完，再看张宇视频。我直接刷的张宇。</p>\n<p>练全书的题，真题练习。</p>\n<h2 id=\"专业课\"><a href=\"#专业课\" class=\"headerlink\" title=\"专业课\"></a>专业课</h2><hr>\n<p>资料：真题，去年考取的学长学姐</p>\n<p>可以到目标院校的校区一趟，去学校里面的书店，相信我会有收获的。</p>\n<p>或者可以直接去学院的所在地，如果你够聪明（脸皮够厚），肯定能找到愿意帮你的人。</p>\n<h2 id=\"比较好的公众号\"><a href=\"#比较好的公众号\" class=\"headerlink\" title=\"比较好的公众号\"></a>比较好的公众号</h2><hr>\n<p>考研就业十点杂谈、考研教研室、考研研学姐、考研过来人</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><hr>\n<p>最全最整齐的2018政治名师老师课程汇总：张鑫、肖秀荣、蒋中挺等等 最全最整齐的2018英语名师老师课程汇总：刘晓燕、何凯文、商志、朱伟、陈正康、老蒋（蒋军虎）链接 最全最整齐的2018数学名师老师课程汇总：汤家凤、张宇、李永乐、王式安、张伟等</p>\n","categories":["Life"]},{"title":"习惯性开篇总结","url":"/habitual_opening_summary/","content":"<p>终于抽出一点时间将博客站重新上线。</p>\n<p>为了节省时间采用了wordpress框架。对于程序，现在认为有可用即可用，存在即是合理，而不再执着于要用很多时间去自己写一个框架。</p>\n<span id=\"more\"></span>\n<p>高可用，敏捷快速是为建站灵魂。拿来主义，是为了释放时间精力做更加擅长的事情。</p>\n<p>在此分享自走上程序之路的一些思维方式，期望新加入程序大军的猿们可以有一个模糊的方向，更快的突破限制，走得更远更快。</p>\n<p>常认为能从零到有，从小白到建站技术都略懂一些能在短短时间如此大的跨步，得益于老大的指点：“代码就是工具，是让你来使用的，不要执着于什么语法，什么语言，仅仅是工具而已。但是它可以帮助你完成梦想。”。</p>\n<p>写代码和日常生活可能是一样的，师父领进门修行在个人，没有什么捷径，唯有勤学苦练。所以在纠结于要不要去培训班的同学，请先明确自己到底想付出什么，又想要得到什么。</p>\n<p>刚刚出学校时，没有任何经验，没有高校背景，找工作确实很难。这时候反省自己有没有努力，有没有决心从零开始在某个行业做下去。考虑好自己所想的，做自己喜欢的，坚持下去。</p>\n<p>关于培训的问题。。培训班可能对于一点基础没有的同学也是一个路。但是强烈建议一定要摒弃在培训过程中什么都依赖别人去教的习惯，学会自主解决问题，师父领进门，修行靠个人，切记。</p>\n","categories":["Life"]},{"title":"习惯性开篇总结2","url":"/habitual_opening_summary_2/","content":"<p>都记不清折腾博客框架多少次了。</p>\n<p>好像每次有个新技术，就先用博客来练手。最开始用自己改的<strong>PHP微框架</strong>，后来嫌麻烦用了<strong>wordpress</strong>。学习<strong>go</strong>语言的时候，先尝试写了个博客站。<strong>python</strong>，<strong>node</strong>等等。都用博客作为开始的练手项目，每次都兴致勃勃重写重新部署。</p>\n<span id=\"more\"></span>\n\n<p>后来还尝试了不同的网站去写不同的文字，尝试了公众号，简书等。可能是基于技术的思维方式不同，运营方面的能力偏弱，都没有获取很高的访问量，文字能力还是一般没有成长为大V。或者是对这个领域研究比较少的原因。不过自身写文字只是基于兴趣，将一些成长经验写出来，让看到的小伙伴可以少走弯路，参考我走过的坑将相关经验直接吸收无疑是一件好事。没有想过成为什么大V，如有可能，倒是期望能写成一本踩坑大全。在大学时买过几本什么成长之路，大学生必知，现在看来都是毫无社会经验的理论派写的不知所云的玩意。反正我是没看懂，后来进入社会都是自己一点点摸索。</p>\n<p>这次折腾换为了基于node的<strong>hexo</strong>框架，模版用的是比较火的next，我相对也蛮喜欢，很简洁。估计很久都不会在换框架了。学习一门新的语言，现在看起来都是差不多的，看一看文档基本就能使用了，所以也没有重新写博客站来熟悉的动力。而这个主题也比较符合我对博客站的期待，估计一些布局细节会微调，重构实在是没有什么精力了。</p>\n<p>最近除了工作，主要在学习<strong>英语</strong>。这个技能还是蛮重要的。不仅是工作交流，国际交流，用到的地方太多了。目标也不是很高，托福85分能进行基本的日常交流即可。</p>\n<p>非常惭愧的是去年就做了很多功课，进行学习，也报了很多辅导班，花了一堆时间和金钱却没有什么效果。后来找到各种借口给自己推脱，结果也看到了，就是最终学的全还给老师了。重新整理博客文章过程中，发现了去年整理的方法，感觉很适合用，当然可能要根据自己的实际情况进行一些调整。待我达到目标在来报喜。最重要的是<strong>just do it</strong>，开始背单词是最重要的。</p>\n<p>找出几篇不错的，与大家共享：</p>\n<ul>\n<li><a href=\"https://yaozihao.com/good_practical_English_tutorial/\">从零开始学英语</a></li>\n<li><a href=\"https://yaozihao.com/tutorial_worth_10_million_dollars/\">价值1000万的定投教程</a></li>\n<li><a href=\"https://yaozihao.com/tips_about_investing_you_have_to_know/\">关于投资你不得不知的窍门</a></li>\n<li><a href=\"https://yaozihao.com/eth_contract_list/\">智能合约学习目录</a></li>\n<li><a href=\"https://yaozihao.com/bitcoin_en_white_paper/\">比特币英文版白皮书</a></li>\n<li><a href=\"https://yaozihao.com/quant_list/\">史上最全Quant资源整理</a></li>\n</ul>\n<p>更多精彩就自己探索吧！😄</p>\n","categories":["Life"]},{"title":"记龙泉寺义工（五月二十一日）","url":"/volunteers_17_05_21/","content":"<p>忙忙碌碌中的一天，听闻龙泉寺招募义工，信息技术类。我佛慈悲，正好从事此类工作，遂积极报名前往欲与师兄共承担。</p>\n<span id=\"more\"></span>\n<p>早六点起床去追赶快乐大巴，对于常年工作繁忙到深夜，每日九点起床来说，还是有一点点小的忧桑，然而在车上各位师兄的带动和分享，使我一扫繁碌工作生活中积累的霾气，感觉整个人都轻了很多。</p>\n<p>早九点开始观影，十年，看到学诚法师带领各位师兄如何一砖一瓦将龙泉寺建设起来，佩服不已。尔后各位师兄进行观影分享，其中一位师兄的分享解了我很大的疑惑。他说读书是为了什么，读书能使人多挣钱吗？并不能，读书只是可以多提供几条可选择的道路。工作越久，迷茫越深，最近有了想回去考研的想法，但是一直无法平定内心的枷锁，放不下世俗的金钱和地位。师兄的分享以及观影的影响带给我很大的启示，我们应该为了给社会做出更多的贡献而努力，不仅仅活在当下的昏昏碌碌。感恩师兄，祝本次上山心愿得成。</p>\n<p>午十一点四十，进行了斋饭，自14年以来少有行斋，一碗青菜，两个发糕，一碗粥。吃出了内心的平静。</p>\n<p>午1点，面试人工智能与信息中心组。听闻各位师兄现在项目的进展，互相技能的全面了解。发现各位师兄都很专业，并且愿意承担很多，相信佛寺的信息化建设会因为大家的共同努力越来越好。</p>\n","categories":["Life"]},{"title":"病来如山倒，病去如抽丝","url":"/sick_come_mountain_go_thread/","content":"<blockquote>\n<p>“疾病来时像山崩一样迅速而猛烈，而要康复却很慢，像从蚕茧里面抽丝。 得病容易,治病难。”</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"常见“病”是长期不良习惯的积累\"><a href=\"#常见“病”是长期不良习惯的积累\" class=\"headerlink\" title=\"常见“病”是长期不良习惯的积累\"></a>常见“病”是长期不良习惯的积累</h2><p>当我们生病的时候，从察觉到严重，快则半天慢则一天。<br>比如感冒，感觉到发烧的时候，已经很难受了，接着各种症状迅速显现。</p>\n<p>为什么生病不是一个逐渐发展的缓慢过程？<br>其实当症状显示的时候，已经积累了很长时间。</p>\n<p>这里我们看一下生病的基本原理，可以总结为以下几点：</p>\n<ul>\n<li>1.致病微生物</li>\n<li>2.不良环境条件</li>\n<li>3.生物本身的抗性<br>当然， 这里谈及的是由外部因素引发的病害，不是遗传基因导致的先天缺陷。</li>\n</ul>\n<p>以感冒举例，我们知道常听说是有几种，西医认为可以分为：病毒性感冒、细菌性感冒。<br>中医常分为风寒型、风热型、外寒内热型。我觉的可以综合性来看。<br>环境变化受寒或受热导致的感冒是比较常见的，尤其是每年三月份和九月份的流感，多为换季环境变化较大所导致。另外就是感染所致，西医称为上呼吸道感染，这时候多为病毒性感冒。<br>而生病并不是一天所导致的，多为许久不注意所积累的，也就是小病不治成大病。感冒是一种常见病症，如果不注意治疗或者治疗不当，常引起并发症，严重的有气管炎，脑炎，心肌炎等。</p>\n<p>这就好比是华佗所讲的：<br>华佗一家是中医世家，他的父辈和两个哥哥也都是医生。有一次，魏文帝曹丕问华佗：“你们兄弟三人，都精于医术，是天下有名的医生，究竟谁的医术最高?”。华佗毫不迟疑地回答：“我们三个人的研究各有侧重，也各有所长，但论医术的高明程度，大哥最好，二哥次之，我是最差的那一个。”文王十分纳闷，于是再问：“可是，你是全国知名的神医啊?他们的名气显然不如你。既然你不如他们，为何最出名?”华佗解释道：“大哥治病主要在病情发作之前，由于一般人不知道他事先能铲除病因，所以他的名气无法传出去。二哥治病，主要是治病于病情发作初起之时，一般人认为他只能治轻微的病，所以他的名气只传于本乡里。而我治病，是治病情最严重的时候，一般人都看到我能做大手术，所以，认为我的医术高明，名气自然就响遍全国。”</p>\n<p>人们常谈的养生，锻炼增强抵抗力，无不都是从源头避免长期积累的病因。<br>而老人常说春捂秋冻，别淋雨，头发吹干再出门等生活常识可以避免环境对我们产生的变化影响。</p>\n<h2 id=\"对症下药\"><a href=\"#对症下药\" class=\"headerlink\" title=\"对症下药\"></a>对症下药</h2><p>多数病倒是逐渐积累起来的，有的病如果治疗得当也会收到立竿见影的效果。</p>\n<p>还是以感冒举例。<br>其实很多时候我们的感冒是自限性疾病，如果体质比较好或症状不重可以不用药，多注意休息，多喝热水，开窗通风。<br>如果症状较为严重，细菌感染可以用抗生素，如果是病毒感染同时发烧，注意对症治疗。<br>请注意，在小诊所拿药或者输液，医生常给开抗生素，但是抗生素应该用于上呼吸道感染的细菌感染，对普通感冒和流感没有效果，反而对身体还有副作用。</p>\n<p>根据症状治疗得当，可以很快康复。但切记不可病急乱投医，症状严重吃药迟迟不见效，还是要到医院就诊。</p>\n","categories":["Life"]},{"title":"风雨兼程,砥砺前行","url":"/run_with_storm/","content":"<blockquote>\n<p>我不去想是否能够成功<br>既然选择了远方<br>便只顾风雨兼程<br>我不去想能否赢得爱情<br>既然钟情于玫瑰<br>就勇敢地吐露真诚<br>我不去想身后会不会袭来寒风冷雨<br>既然目标是地平线<br>留给世界的只能是背影<br>我不去想未来是平坦还是泥泞<br>只要热爱生命<br>一切<br>都在意料之中</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"初衷\"><a href=\"#初衷\" class=\"headerlink\" title=\"初衷\"></a>初衷</h2><p>在多方考量之后，毅然决然的踏入创业这条路。为此违反了自己的一个flag，准备出国深造。不想成败，只享受过程。</p>\n<h2 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h2><p>经过月余的筹备，目前小团队初具形态，第一个demo版的产品已经上线。一个基于大数据的智能投顾平台。<br>期间多少日日夜夜在公司不眠不休，与小伙伴的共同努力，就像抚养孩子一样小心翼翼呵护着长大。</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>产品的出发点在于解决普通用户的信息不对称，投资理财难，耗精力等问题。未来会提供更多维度的数据分析给大家免费使用，提供更多更简单易用的理财工具。<br>简单的介绍一下，更多功能期待你一起来探索哦！</p>\n<h2 id=\"搞事情，我们是认真的！\"><a href=\"#搞事情，我们是认真的！\" class=\"headerlink\" title=\"搞事情，我们是认真的！\"></a>搞事情，我们是认真的！</h2><p>广寻好朋友进行合作，也欢迎大家提出自己的意见和建议，期待同行的你。<br>《小狗钱钱》中的一段话：不是试试看，而是行动！人至贱则无敌！如果你只是带着试试看的心态，那么你最后只会以失败而告终，会一事无成。尝试纯粹是一种借口，你还没有真正去做，就已经给自己想好了退路。不能试验，你只有两种选择，做或者不做。千万不要拖延。</p>\n","categories":["Life"]},{"title":"Centos6.5安装配置Mongodb","url":"/linux_mongodb/","content":"<blockquote>\n<p>mongodb官网上下载最新版本的mongodb，按照官网上的说明进行安装。</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>首先运行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -O http://downloads.mongodb.org/linux/mongodb-linux-x86_64-2.6.3.tgz</span><br></pre></td></tr></table></figure>\n\n<p>其次，运用tar 进行解压缩，按照如下命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf mongodb-linux-x86_64-2.6.3.tgz</span><br></pre></td></tr></table></figure>\n\n<p>第三，新建mongodb文件夹，把解压了的mongodb-linux-x86_64-2.6.3复制到mongodb下面。<br>按照如下命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p mongodb</span><br><span class=\"line\"><span class=\"built_in\">cp</span> -R -n mongodb-linux-x86_64-2.6.3/ mongodb</span><br></pre></td></tr></table></figure>\n<p>第四，更改环境变量，在路径 &#x2F;etc&#x2F;下面，找到bashrc文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=&lt;mongodb-install-directory&gt;:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n<p>替换成你的mongodb路径就可以了</p>\n<p>第五，创建mongodb的dbdata的路径</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p  /usr/local/mongo/data  </span><br><span class=\"line\">mongod --dbpath /usr/local/mongo/data</span><br></pre></td></tr></table></figure>\n\n<p>第六，进入mongo的文件夹，运行mongo命令，启动mongo就可以了。<br>上面的安装方法比较简单，但是有个问题，就是mongo启动必须同时制定data,也就是要运行<code>mongod –dbpath /usr/local/mongo/data</code>，比较繁琐，下面介绍一种一劳永逸的安装办法，把mongo的启动添加到服务当中。</p>\n<p>创建配置文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /usr/local/mongo/etc /usr/local/mongo/data /usr/local/mongo/log/ /usr/local/mongo/repair</span><br><span class=\"line\">vim  /usr/local/mongo/etc/mongo.conf</span><br><span class=\"line\">在mongo.conf中添加下面的内容</span><br><span class=\"line\">dbpath = /usr/local/mongo/data</span><br><span class=\"line\">logpath = /usr/local/mongo/mongodb.log</span><br><span class=\"line\">repairpath = /usr/local/mongo/repair</span><br><span class=\"line\">pidfilepath = /usr/local/mongo/mongodb.pid</span><br><span class=\"line\">directoryperdb = <span class=\"literal\">true</span></span><br><span class=\"line\">logappend = <span class=\"literal\">true</span></span><br><span class=\"line\">noauth = <span class=\"literal\">true</span></span><br><span class=\"line\">port = 27017</span><br><span class=\"line\">maxConns = 1024</span><br><span class=\"line\">fork = <span class=\"literal\">true</span></span><br><span class=\"line\">rest = <span class=\"literal\">true</span></span><br><span class=\"line\">quota = <span class=\"literal\">true</span></span><br><span class=\"line\">quotaFiles = 1024</span><br><span class=\"line\">nssize = 16</span><br></pre></td></tr></table></figure>\n\n<p>启动mongodb</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/mongo/bin/mongod /usr/bin/mongod</span><br><span class=\"line\">mongod -f /usr/local/mongo/etc/mongo.conf</span><br></pre></td></tr></table></figure>\n<p>看看是不是启动起来了，但是使用这种方式管理mongodb服务器很不明智，我们完善一下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /usr/local/mongo/srv</span><br><span class=\"line\">vim /usr/local/mongo/srv/mongodb-start</span><br></pre></td></tr></table></figure>\n\n<p>添加下面的内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">mongod -f /usr/local/mongo/etc/mongo.conf</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /usr/local/mongo/srv/mongodb-stop</span><br></pre></td></tr></table></figure>\n\n<p>添加下面的内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">pid=`ps -o pid,<span class=\"built_in\">command</span> ax | grep mongod | awk <span class=\"string\">&#x27;!/awk/ &amp;&amp; !/grep/ &#123;print $1&#125;&#x27;</span>`;</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$&#123;pid&#125;</span>&quot;</span> != <span class=\"string\">&quot;&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">kill</span> -2 <span class=\"variable\">$&#123;pid&#125;</span>;</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>添加执行权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> a+x /usr/local/mongo/srv/mongodb-start</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> a+x /usr/local/mongo/srv/mongodb-stop</span><br><span class=\"line\">vim /etc/rc.d/init.d/mongodb</span><br></pre></td></tr></table></figure>\n\n<p>添加下面的内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># mongodb – this script starts and stops the mongodb daemon</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: - 85 15</span></span><br><span class=\"line\"><span class=\"comment\"># description: MongoDB is a non-relational database storage system.</span></span><br><span class=\"line\"><span class=\"comment\"># processname: mongodb</span></span><br><span class=\"line\"><span class=\"comment\"># config: /usr/local/mongo/etc/mongo.conf</span></span><br><span class=\"line\"><span class=\"comment\"># pidfile: /usr/local/mongo/mongodb.pid</span></span><br><span class=\"line\">PATH=/usr/local/mongo/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\">NAME=mongodb</span><br><span class=\"line\"><span class=\"built_in\">test</span> -x <span class=\"variable\">$DAEMON</span> || <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  start)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Starting MongoDB... &quot;</span></span><br><span class=\"line\">        /usr/local/mongo/srv/mongodb-start</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">  stop)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -n <span class=\"string\">&quot;Stopping MongoDB... &quot;</span></span><br><span class=\"line\">        /usr/local/mongo/srv/mongodb-stop</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">      *)</span><br><span class=\"line\">            N=/etc/init.d/<span class=\"variable\">$NAME</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$N</span> &#123;start|stop&#125;&quot;</span> &gt;&amp;2</span><br><span class=\"line\">            <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n\n<p>添加服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> a+x /etc/rc.d/init.d/mongodb</span><br><span class=\"line\">chkconfig --add mongodb</span><br><span class=\"line\">chkconfig --level 345 mongodb on</span><br><span class=\"line\">/etc/rc.d/init.d/mongodb start</span><br></pre></td></tr></table></figure>","categories":["Linux"],"tags":["linux","mongodb","centos"]},{"title":"虚拟机安装Centos7后配置网络","url":"/linux_vibox_centos_network/","content":"<ul>\n<li><p>1：添加网卡2 桥接网卡</p>\n</li>\n<li><p>2：复制网络配置文件</p>\n</li>\n<li><p>3：使用ip addr 看一下本机分配的ip</p>\n</li>\n<li><p>4：根据本机信息修改配置文件</p>\n</li>\n<li><p>5： 习惯使用<code>ifconfig</code>的话 使用 <code>yum -y install net-tools</code> 安装一个网络包</p>\n</li>\n</ul>\n","categories":["Linux"]},{"title":"Centos7精简安装后中killall，pstree，fuser","url":"/linux_centos_lite_version_add_kpf/","content":"<p>centos7精简安装后，使用中发现没有<code>killall</code>命令。</p>\n<p>经查找，可以通过以下命令解决：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install psmisc</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>简单介绍一下 psmisc ：</p>\n<p><code>Psmisc</code>软件包包含三个帮助管理<code>/proc</code>目录的程序。</p>\n<p>安装下列程序: fuser, killall,pstree和pstree.x11(到pstree的链接)</p>\n<p><code>fuser</code> 显示使用指定文件或者文件系统的进程的PID。</p>\n<p><code>killall</code> 杀死某个名字的进程，它向运行指定命令的所有进程发出信号。</p>\n<p><code>pstree</code> 树型显示当前运行的进程。</p>\n<p><code>pstree.x11</code>与<code>pstree</code>功能相同，只是在退出前需要确认。</p>\n","categories":["Linux"],"tags":["linux","centos"]},{"title":"Centos下编译nginx","url":"/linux_centos_nginx_compile/","content":"<p>本篇文章主要介绍如何在Centos上进行源码编译安装nginx。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装nginx时必须先安装相应的编译工具\"><a href=\"#安装nginx时必须先安装相应的编译工具\" class=\"headerlink\" title=\"安装nginx时必须先安装相应的编译工具\"></a>安装nginx时必须先安装相应的编译工具</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ autoconf automake</span><br><span class=\"line\">yum -y install zlib zlib-devel openssl openssl-devel pcre-devel</span><br></pre></td></tr></table></figure>\n\n<p>小结：centos没有安装make编译器<br>解决：<code>yum -y install gcc automake autoconf libtool make</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install wget</span><br></pre></td></tr></table></figure>\n\n<p>建立<code>nginx</code> 组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupadd -r nginx</span><br><span class=\"line\">useradd -s /sbin/nologin -g nginx -r nginx</span><br><span class=\"line\"><span class=\"built_in\">id</span> nginx</span><br></pre></td></tr></table></figure>\n\n<p><code>zlib:nginx</code>提供gzip模块，需要zlib库支持<br><code>openssl:nginx</code>提供ssl功能<br><code>pcre</code>:支持地址重写rewrite功能</p>\n<h2 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.9.9.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -zxvf nginx-1.9.9.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.2.8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./configure –prefix=/usr/local/nginx –conf-path=/usr/local/nginx/conf/nginx.conf –error-log-path=/usr/local/nginx/logs/error.log –http-log-path=/usr/local/nginx/logs/access.log –pid-path=/usr/local/nginx/pid/nginx.pid –user=nginx –group=nginx –with-http_ssl_module –with-http_flv_module –with-http_gzip_static_module –with-http_stub_status_module</span><br></pre></td></tr></table></figure>\n<p>执行完毕后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>参数解释</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">–prefix= 指向安装目录</span><br><span class=\"line\">–sbin-path 指向（执行）程序文件（nginx）</span><br><span class=\"line\">–conf-path= 指向配置文件（nginx.conf）</span><br><span class=\"line\">–error-log-path= 指向错误日志目录</span><br><span class=\"line\">–pid-path= 指向pid文件（nginx.pid）</span><br><span class=\"line\">–lock-path= 指向lock文件（nginx.lock）（安装文件锁定，防止安装文件被别人利用，或自己误操作。）</span><br><span class=\"line\">–user= 指定程序运行时的非特权用户</span><br><span class=\"line\">–group= 指定程序运行时的非特权用户组</span><br><span class=\"line\">–builddir= 指向编译目录</span><br><span class=\"line\">–with-rtsig_module 启用rtsig模块支持（实时信号）</span><br><span class=\"line\">–with-select_module 启用select模块支持（一种轮询模式,不推荐在高载环境下使用）禁用：–without-select_module</span><br><span class=\"line\">–with-poll_module 启用poll模块支持（功能与select相同，与select特性相同，为一种轮询模式,不推荐在高载环境下使用）</span><br><span class=\"line\">–with-file-aio 启用file aio支持（一种APL文件传输格式）</span><br><span class=\"line\">–with-ipv6 启用ipv6支持</span><br><span class=\"line\">–with-http_ssl_module 启用ngx_http_ssl_module支持（使支持https请求，需已安装openssl）</span><br><span class=\"line\">–with-http_realip_module 启用ngx_http_realip_module支持（这个模块允许从请求标头更改客户端的IP地址值，默认为关）</span><br><span class=\"line\">–with-http_addition_module 启用ngx_http_addition_module支持（作为一个输出过滤器，支持不完全缓冲，分部分响应请求）</span><br><span class=\"line\">–with-http_xslt_module 启用ngx_http_xslt_module支持（过滤转换XML请求）</span><br><span class=\"line\">–with-http_image_filter_module 启用ngx_http_image_filter_module支持（传输JPEG/GIF/PNG 图片的一个过滤器）（默认为不启用。gd库要用到）</span><br><span class=\"line\">–with-http_geoip_module 启用ngx_http_geoip_module支持（该模块创建基于与MaxMind GeoIP二进制文件相配的客户端IP地址的ngx_http_geoip_module变量）</span><br><span class=\"line\">–with-http_sub_module 启用ngx_http_sub_module支持（允许用一些其他文本替换nginx响应中的一些文本）</span><br><span class=\"line\">–with-http_dav_module 启用ngx_http_dav_module支持（增加PUT,DELETE,MKCOL：创建集合,COPY和MOVE方法）默认情况下为关闭，需编译开启</span><br><span class=\"line\">–with-http_flv_module 启用ngx_http_flv_module支持（提供寻求内存使用基于时间的偏移量文件）</span><br><span class=\"line\">–with-http_gzip_static_module 启用ngx_http_gzip_static_module支持（在线实时压缩输出数据流）</span><br><span class=\"line\">–with-http_random_index_module 启用ngx_http_random_index_module支持（从目录中随机挑选一个目录索引）</span><br><span class=\"line\">–with-http_secure_link_module 启用ngx_http_secure_link_module支持（计算和检查要求所需的安全链接网址）</span><br><span class=\"line\">–with-http_degradation_module 启用ngx_http_degradation_module支持（允许在内存不足的情况下返回204或444码）</span><br><span class=\"line\">–with-http_stub_status_module 启用ngx_http_stub_status_module支持（获取nginx自上次启动以来的工作状态）</span><br><span class=\"line\">–without-http_charset_module 禁用ngx_http_charset_module支持（重新编码web页面，但只能是一个方向–服务器端到客户端，并且只有一个字节的编码可以被重新编码）</span><br><span class=\"line\">–without-http_gzip_module 禁用ngx_http_gzip_module支持（该模块同-with-http_gzip_static_module功能一样）</span><br><span class=\"line\">–without-http_ssi_module 禁用ngx_http_ssi_module支持（该模块提供了一个在输入端处理处理服务器包含文件（SSI）的过滤器，目前支持SSI命令的列表是不完整的）</span><br><span class=\"line\">–without-http_userid_module 禁用ngx_http_userid_module支持（该模块用来处理用来确定客户端后续请求的cookies）</span><br><span class=\"line\">–without-http_access_module 禁用ngx_http_access_module支持（该模块提供了一个简单的基于主机的访问控制。允许/拒绝基于ip地址）</span><br><span class=\"line\">–without-http_auth_basic_module禁用ngx_http_auth_basic_module（该模块是可以使用用户名和密码基于http基本认证方法来保护你的站点或其部分内容）</span><br><span class=\"line\">–without-http_autoindex_module 禁用<span class=\"built_in\">disable</span> ngx_http_autoindex_module支持（该模块用于自动生成目录列表，只在ngx_http_index_module模块未找到索引文件时发出请求。）</span><br><span class=\"line\">–without-http_geo_module 禁用ngx_http_geo_module支持（创建一些变量，其值依赖于客户端的IP地址）</span><br><span class=\"line\">–without-http_map_module 禁用ngx_http_map_module支持（使用任意的键/值对设置配置变量）</span><br><span class=\"line\">–without-http_split_clients_module 禁用ngx_http_split_clients_module支持（该模块用来基于某些条件划分用户。条件如：ip地址、报头、cookies等等）</span><br><span class=\"line\">–without-http_referer_module 禁用<span class=\"built_in\">disable</span> ngx_http_referer_module支持（该模块用来过滤请求，拒绝报头中Referer值不正确的请求）</span><br><span class=\"line\">–without-http_rewrite_module 禁用ngx_http_rewrite_module支持（该模块允许使用正则表达式改变URI，并且根据变量来转向以及选择配置。如果在server级别设置该选项，那么他们将在 location之前生效。如果在location还有更进一步的重写规则，location部分的规则依然会被执行。如果这个URI重写是因为location部分的规则造成的，那么 location部分会再次被执行作为新的URI。 这个循环会执行10次，然后Nginx会返回一个500错误。）</span><br><span class=\"line\">–without-http_proxy_module 禁用ngx_http_proxy_module支持（有关代理服务器）</span><br><span class=\"line\">–without-http_fastcgi_module 禁用ngx_http_fastcgi_module支持（该模块允许Nginx 与FastCGI 进程交互，并通过传递参数来控制FastCGI 进程工作。 ）FastCGI一个常驻型的公共网关接口。</span><br><span class=\"line\">–without-http_uwsgi_module 禁用ngx_http_uwsgi_module支持（该模块用来医用uwsgi协议，uWSGI服务器相关）</span><br><span class=\"line\">–without-http_scgi_module 禁用ngx_http_scgi_module支持（该模块用来启用SCGI协议支持，SCGI协议是CGI协议的替代。它是一种应用程序与HTTP服务接口标准。它有些像FastCGI但他的设计 更容易实现。）</span><br><span class=\"line\">–without-http_memcached_module 禁用ngx_http_memcached_module支持（该模块用来提供简单的缓存，以提高系统效率）</span><br><span class=\"line\">-without-http_limit_zone_module 禁用ngx_http_limit_zone_module支持（该模块可以针对条件，进行会话的并发连接数控制）</span><br><span class=\"line\">–without-http_limit_req_module 禁用ngx_http_limit_req_module支持（该模块允许你对于一个地址进行请求数量的限制用一个给定的session或一个特定的事件）</span><br><span class=\"line\">–without-http_empty_gif_module 禁用ngx_http_empty_gif_module支持（该模块在内存中常驻了一个1*1的透明GIF图像，可以被非常快速的调用）</span><br><span class=\"line\">–without-http_browser_module 禁用ngx_http_browser_module支持（该模块用来创建依赖于请求报头的值。如果浏览器为modern ，则<span class=\"variable\">$modern_browser</span>等于modern_browser_value指令分配的值；如 果浏览器为old，则<span class=\"variable\">$ancient_browser</span>等于 ancient_browser_value指令分配的值；如果浏览器为 MSIE中的任意版本，则 <span class=\"variable\">$msie</span>等于1）</span><br><span class=\"line\">–without-http_upstream_ip_hash_module 禁用ngx_http_upstream_ip_hash_module支持（该模块用于简单的负载均衡）</span><br><span class=\"line\">–with-http_perl_module 启用ngx_http_perl_module支持（该模块使nginx可以直接使用perl或通过ssi调用perl）</span><br><span class=\"line\">–with-perl_modules_path= 设定perl模块路径</span><br><span class=\"line\">–with-perl= 设定perl库文件路径</span><br><span class=\"line\">–http-log-path= 设定access <span class=\"built_in\">log</span>路径</span><br><span class=\"line\">–http-client-body-temp-path= 设定http客户端请求临时文件路径</span><br><span class=\"line\">–http-proxy-temp-path= 设定http代理临时文件路径</span><br><span class=\"line\">–http-fastcgi-temp-path= 设定http fastcgi临时文件路径</span><br><span class=\"line\">–http-uwsgi-temp-path= 设定http uwsgi临时文件路径</span><br><span class=\"line\">–http-scgi-temp-path= 设定http scgi临时文件路径</span><br><span class=\"line\">-without-http 禁用http server功能</span><br><span class=\"line\">–without-http-cache 禁用http cache功能</span><br><span class=\"line\">–with-mail 启用POP3/IMAP4/SMTP代理模块支持</span><br><span class=\"line\">–with-mail_ssl_module 启用ngx_mail_ssl_module支持</span><br><span class=\"line\">–without-mail_pop3_module 禁用pop3协议（POP3即邮局协议的第3个版本,它是规定个人计算机如何连接到互联网上的邮件服务器进行收发邮件的协议。是因特网电子邮件的第一个离线协议标 准,POP3协议允许用户从服务器上把邮件存储到本地主机上,同时根据客户端的操作删除或保存在邮件服务器上的邮件。POP3协议是TCP/IP协议族中的一员，主要用于 支持使用客户端远程管理在服务器上的电子邮件）</span><br><span class=\"line\">–without-mail_imap_module 禁用imap协议（一种邮件获取协议。它的主要作用是邮件客户端可以通过这种协议从邮件服务器上获取邮件的信息，下载邮件等。IMAP协议运行在TCP/IP协议之上， 使用的端口是143。它与POP3协议的主要区别是用户可以不用把所有的邮件全部下载，可以通过客户端直接对服务器上的邮件进行操作。）</span><br><span class=\"line\">–without-mail_smtp_module 禁用smtp协议（SMTP即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。SMTP协议属于TCP/IP协议族，它帮助每台计算机在发送或中转信件时找到下一个目的地。）</span><br><span class=\"line\">–with-google_perftools_module 启用ngx_google_perftools_module支持（调试用，剖析程序性能瓶颈）</span><br><span class=\"line\">–with-cpp_test_module 启用ngx_cpp_test_module支持</span><br><span class=\"line\">–add-module= 启用外部模块支持</span><br><span class=\"line\">–with-cc= 指向C编译器路径</span><br><span class=\"line\">–with-cpp= 指向C预处理路径</span><br><span class=\"line\">–with-cc-opt= 设置C编译器参数（PCRE库，需要指定–with-cc-opt=”-I /usr/local/include”，如果使用select()函数则需要同时增加文件描述符数量，可以通过–with-cc- opt=”-D FD_SETSIZE=2048”指定。）</span><br><span class=\"line\">–with-ld-opt= 设置连接文件参数。（PCRE库，需要指定–with-ld-opt=”-L /usr/local/lib”。）</span><br><span class=\"line\">–with-cpu-opt= 指定编译的CPU，可用的值为: pentium, pentiumpro, pentium3, pentium4, athlon, opteron, amd64, sparc32, sparc64, ppc64</span><br><span class=\"line\">–without-pcre 禁用pcre库</span><br><span class=\"line\">–with-pcre 启用pcre库</span><br><span class=\"line\">–with-pcre= 指向pcre库文件目录</span><br><span class=\"line\">–with-pcre-opt= 在编译时为pcre库设置附加参数</span><br><span class=\"line\">–with-md5= 指向md5库文件目录（消息摘要算法第五版，用以提供消息的完整性保护）</span><br><span class=\"line\">–with-md5-opt= 在编译时为md5库设置附加参数</span><br><span class=\"line\">–with-md5-asm 使用md5汇编源</span><br><span class=\"line\">–with-sha1= 指向sha1库目录（数字签名算法，主要用于数字签名）</span><br><span class=\"line\">–with-sha1-opt= 在编译时为sha1库设置附加参数</span><br><span class=\"line\">–with-sha1-asm 使用sha1汇编源</span><br><span class=\"line\">–with-zlib= 指向zlib库目录</span><br><span class=\"line\">–with-zlib-opt= 在编译时为zlib设置附加参数</span><br><span class=\"line\">–with-zlib-asm= 为指定的CPU使用zlib汇编源进行优化，CPU类型为pentium, pentiumpro</span><br><span class=\"line\">–with-libatomic 为原子内存的更新操作的实现提供一个架构</span><br><span class=\"line\">–with-libatomic= 指向libatomic_ops安装目录</span><br><span class=\"line\">–with-openssl= 指向openssl安装目录</span><br><span class=\"line\">–with-openssl-opt 在编译时为openssl设置附加参数</span><br><span class=\"line\">–with-debug 启用debug日志</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试是否成功\"><a href=\"#测试是否成功\" class=\"headerlink\" title=\"测试是否成功\"></a>测试是否成功</h2><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/nginx/sbin/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">curl -s http://localhost | grep nginx.com</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/local/nginx-1.7.0/sbin/nginx -s reload</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/local/nginx-1.7.0/sbin/nginx -s stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># curl -s http://localhost | grep nginx.com</span></span><br><span class=\"line\">/usr/local/nginx-1.7.0/sbin/nginx</span><br></pre></td></tr></table></figure>","categories":["Linux"],"tags":["linux","centos","nginx"]},{"title":"Centos编译mysql","url":"/centos_mysql_compile/","content":"<h2 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.23.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar zxvf mysql-5.6.23.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装必要的包\"><a href=\"#安装必要的包\" class=\"headerlink\" title=\"安装必要的包\"></a>安装必要的包</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install cmake gcc gcc-c++ ncurses-devel perl-Data-Dumper cmake ncurses-devel bison autoconf automake zlib* fiex* libxml* libmcrypt* libtool-ltdl-devel*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进入mysql源码目录，生成makefile\"><a href=\"#进入mysql源码目录，生成makefile\" class=\"headerlink\" title=\"进入mysql源码目录，生成makefile\"></a>进入mysql源码目录，生成makefile</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> mysql-5.6.23</span><br><span class=\"line\">cmake .</span><br></pre></td></tr></table></figure>\n\n<p>生成失败的的话</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -f CMakeCache.txt</span><br></pre></td></tr></table></figure>\n\n<p>查看问题，进行修复</p>\n<h2 id=\"编译并安装\"><a href=\"#编译并安装\" class=\"headerlink\" title=\"编译并安装\"></a>编译并安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>mysql将会安装到<code>/usr/local/mysql</code>路径。</p>\n<h2 id=\"添加mysql用户和组\"><a href=\"#添加mysql用户和组\" class=\"headerlink\" title=\"添加mysql用户和组\"></a>添加mysql用户和组</h2><p>先查看是否存在</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/passwd | grep mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group | grep mysql</span><br></pre></td></tr></table></figure>\n\n<p>添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo groupadd mysql</span><br><span class=\"line\">sudo useradd -r -g mysql mysql</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R mysql:mysql /usr/local/mysql</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改目录和文件权限，安装默认数据库\"><a href=\"#修改目录和文件权限，安装默认数据库\" class=\"headerlink\" title=\"修改目录和文件权限，安装默认数据库\"></a>修改目录和文件权限，安装默认数据库</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/mysql</span><br><span class=\"line\">sudo scripts/mysql_install_db --user=mysql?--basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure>\n\n<p>至此，<code>mysql</code>就可以启动运行了。</p>\n<h2 id=\"启动mysql\"><a href=\"#启动mysql\" class=\"headerlink\" title=\"启动mysql\"></a>启动mysql</h2><p>CentOS7自带MariaDB的支持，<code>/etc</code>下默认存在<code>my.cnf</code>文件干扰mysql运行，需要先删掉</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc</span><br><span class=\"line\">sudo <span class=\"built_in\">rm</span> -fr my.cnf my.cnf.d</span><br></pre></td></tr></table></figure>\n\n<p>然后再<code>/etc</code>下重建<code>my.cnf</code>文件，内容如下</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Foradvice onhow tochange settings please see</span><br><span class=\"line\"># http://dev.mysql.<span class=\"keyword\">com</span>/doc/refman/<span class=\"number\">5.6</span>/<span class=\"keyword\">en</span>/server-configuration-defaults.html</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"># Remove leading # andsettothe amount ofRAM forthe most important data</span><br><span class=\"line\"># cache inMySQL. Start at70% oftotal RAM fordedicated server, else10%.</span><br><span class=\"line\"># innodb_buffer_pool_size = <span class=\"number\">128</span>M</span><br><span class=\"line\"># Remove leading # toturn ona very important data integrity option: logging</span><br><span class=\"line\"># <span class=\"keyword\">changes</span> tothe binarylog betweenbackups.</span><br><span class=\"line\"># log_bin</span><br><span class=\"line\"># These are commonly <span class=\"keyword\">set</span>, <span class=\"built_in\">remove</span> the # andsetasrequired.</span><br><span class=\"line\"># basedir = .....</span><br><span class=\"line\"># datadir = /data/mysql/data</span><br><span class=\"line\">?port = .....</span><br><span class=\"line\"># server_id = .....</span><br><span class=\"line\"># socket = .....</span><br><span class=\"line\"># Remove leading # tosetoptions mainly useful forreporting servers.</span><br><span class=\"line\"># The server defaults are faster fortransactions andfast SELECTs.</span><br><span class=\"line\"># Adjust sizes asneeded, experiment tofind the optimal <span class=\"built_in\">values</span>.</span><br><span class=\"line\"># join_buffer_size = <span class=\"number\">128</span>M</span><br><span class=\"line\"># sort_buffer_size = <span class=\"number\">2</span>M</span><br><span class=\"line\"># read_rnd_buffer_size = <span class=\"number\">2</span>M</span><br><span class=\"line\">max_connection = <span class=\"number\">10000</span></span><br><span class=\"line\">sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class=\"line\">#binarylog</span><br><span class=\"line\"><span class=\"built_in\">log</span>-bin = mysql-bin</span><br><span class=\"line\">binlog_format = mixed</span><br><span class=\"line\">expire_logs_day = <span class=\"number\">30</span></span><br><span class=\"line\">#slow query <span class=\"built_in\">log</span></span><br><span class=\"line\">slow_query_log = <span class=\"number\">1</span></span><br><span class=\"line\">slow_query_log_file = /var/<span class=\"built_in\">log</span>/mysql/slow.<span class=\"built_in\">log</span></span><br><span class=\"line\">long_query_time = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">log</span>-queries-not-using-indexes</span><br><span class=\"line\"><span class=\"built_in\">log</span>-slow-admin-statements</span><br><span class=\"line\">?</span><br><span class=\"line\">innodb_log_files_in_group=<span class=\"number\">2</span></span><br><span class=\"line\">innodb_data_home_dir = /<span class=\"keyword\">opt</span>/data/mysql/</span><br><span class=\"line\">innodb_data_file_path = ibdata1:<span class=\"number\">2000</span>M;ibdata2:<span class=\"number\">2000</span>M;ibdata3:<span class=\"number\">20</span>M:autoextend</span><br><span class=\"line\">innodb_log_group_home_dir = /<span class=\"keyword\">opt</span>/data/mysql/</span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"number\">4</span>G RAM</span><br><span class=\"line\">innodb_buffer_pool_size = <span class=\"number\">1</span>G</span><br><span class=\"line\">innodb_log_file_size = <span class=\"number\">256</span>M</span><br><span class=\"line\">innodb_log_buffer_size = <span class=\"number\">8</span>M</span><br><span class=\"line\">innodb_flush_log_at_trx_commit=<span class=\"number\">0</span></span><br><span class=\"line\">innodb_thread_concurrency=<span class=\"number\">8</span></span><br><span class=\"line\">innodb_flush_method=O_DIRECT</span><br><span class=\"line\"></span><br><span class=\"line\"># perform</span><br><span class=\"line\">tmp_table_size = <span class=\"number\">512</span>M</span><br><span class=\"line\">max_heap_table_size=<span class=\"number\">128</span>M</span><br></pre></td></tr></table></figure>\n\n<p>现在可以启动mysql了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /usr/local/mysql/bin/mysqld_safe --user=mysql &amp;</span><br></pre></td></tr></table></figure>\n\n<p>CentOS7 不能使用service控制mysql服务，而源码安装的mysql也没有提供<code>Systemd</code>的控制脚本。</p>\n<h2 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h2><p>于是编辑<code>/etc/rc.d/rc.local</code>文件，添加<code>mysql</code>的开机启动命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;</span><br></pre></td></tr></table></figure>\n\n<p>然后给<code>/etc/rc.d/rc.local</code>添加可执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chmod</span> a+x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>如果开启时报错 ，重新初始化，注意用户名别用错了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /usr/local/mysql/bin/mysqld_safe --user=mysql &amp;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改root密码\"><a href=\"#修改root密码\" class=\"headerlink\" title=\"修改root密码\"></a>修改root密码</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/mysql/bin/mysql -uroot</span><br><span class=\"line\">use mysql;</span><br><span class=\"line\">select * from mysql?WHERE?user=?<span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\">UPDATE user SET?password= PASSWORD(<span class=\"string\">&#x27;123456&#x27;</span>) WHERE?user= <span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.*  TO root@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;123456&#x27;</span>;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n<p>至此，安装基本完成了，一个mysql就能用了。</p>\n<h2 id=\"服务启动mysql\"><a href=\"#服务启动mysql\" class=\"headerlink\" title=\"服务启动mysql\"></a>服务启动mysql</h2><p>添加服务，拷贝服务脚本到init.d目录，并设置开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> support-files/mysql.server /etc/init.d/mysql</span><br><span class=\"line\">chkconfig mysql on</span><br><span class=\"line\">service mysql start –启动MySQL</span><br></pre></td></tr></table></figure>\n\n<p>查看是否启动成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -lntp | grep 3306</span><br></pre></td></tr></table></figure>\n","categories":["Linux"],"tags":["linux","centos","mysql"]},{"title":"Centos编译php5.6","url":"/linux_centos_php_install/","content":"<p>本篇文章主要介绍如何在Centos上进行源码编译安装php。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"系统环境：\"><a href=\"#系统环境：\" class=\"headerlink\" title=\"系统环境：\"></a>系统环境：</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CentOS 6.5 / 7.0 x86_64</span><br><span class=\"line\">Fedora 20 x86_64</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载-PHP-源码包\"><a href=\"#下载-PHP-源码包\" class=\"headerlink\" title=\"下载 PHP 源码包\"></a>下载 PHP 源码包</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://cn2.php.net/distributions/php-5.6.0.tar.xz</span><br><span class=\"line\">xz -d php-5.6.0.tar.xz</span><br><span class=\"line\">tar xf php-5.6.0.tar -C /usr/local/src/</span><br><span class=\"line\"><span class=\"comment\"># 添加 epel 源</span></span><br><span class=\"line\">rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install gcc bison bison-devel zlib-devel libmcrypt-devel mcrypt mhash-devel openssl-devel libxml2-devel libcurl-devel bzip2-devel readline-devel libedit-devel sqlite-devel</span><br></pre></td></tr></table></figure>\n\n<p>注：如果你使用的<code>epel 7</code>的源，可能会没有<code>mcrypt mhash mhash-devel</code>几个包，在 <span class=\"exturl\" data-url=\"aHR0cDovL2RsLmZlZG9yYXByb2plY3Qub3JnL3B1Yi9lcGVsLzYveDg2XzY0Lw==\">http://dl.fedoraproject.org/pub/epel/6/x86_64/<i class=\"fa fa-external-link-alt\"></i></span> 中下载，使用<code>yum localinstall xxx.rpm</code>或<code>rpm -Uvh xxx.rpm</code>手动安装即可。</p>\n<h2 id=\"创建-www-用户\"><a href=\"#创建-www-用户\" class=\"headerlink\" title=\"创建 www 用户\"></a>创建 www 用户</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupadd www</span><br><span class=\"line\">useradd -g www -s /sbin/nologin -M www</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/src/php-5.6.0/</span><br><span class=\"line\">./configure \\--prefix=/usr/local/php56 \\</span><br><span class=\"line\">--with-config-file-path=/usr/local/php56/etc \\</span><br><span class=\"line\">--enable-inline-optimization \\</span><br><span class=\"line\">--disable-debug \\</span><br><span class=\"line\">--disable-rpath \\</span><br><span class=\"line\">--enable-shared \\</span><br><span class=\"line\">--enable-opcache \\</span><br><span class=\"line\">--enable-fpm \\</span><br><span class=\"line\">--with-fpm-user=www \\</span><br><span class=\"line\">--with-fpm-group=www \\</span><br><span class=\"line\">--with-mysql=mysqlnd \\</span><br><span class=\"line\">--with-mysqli=mysqlnd \\</span><br><span class=\"line\">--with-pdo-mysql=mysqlnd \\</span><br><span class=\"line\">--with-gettext \\</span><br><span class=\"line\">--enable-mbstring \\</span><br><span class=\"line\">--with-iconv \\</span><br><span class=\"line\">--with-mcrypt \\</span><br><span class=\"line\">--with-mhash \\</span><br><span class=\"line\">--with-openssl \\</span><br><span class=\"line\">--enable-bcmath \\</span><br><span class=\"line\">--enable-soap \\</span><br><span class=\"line\">--with-libxml-dir \\</span><br><span class=\"line\">--enable-pcntl \\</span><br><span class=\"line\">--enable-shmop \\</span><br><span class=\"line\">--enable-sysvmsg \\</span><br><span class=\"line\">--enable-sysvsem \\</span><br><span class=\"line\">--enable-sysvshm \\</span><br><span class=\"line\">--enable-sockets \\</span><br><span class=\"line\">--with-curl \\</span><br><span class=\"line\">--with-zlib \\</span><br><span class=\"line\">--enable-zip \\</span><br><span class=\"line\">--with-bz2 \\</span><br><span class=\"line\">--with-readline</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; 安装路径 &quot;</span><span class=\"string\">&quot;&quot;</span>--prefix=/usr/local/php56 \\</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; php.ini 配置文件路径 &quot;</span><span class=\"string\">&quot;&quot;</span>--with-config-<span class=\"keyword\">file</span>-path=/usr/local/php56/etc \\</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; 优化选项 &quot;</span><span class=\"string\">&quot;&quot;</span>--enable-inline-optimization \\</span><br><span class=\"line\">--disable-<span class=\"keyword\">debug</span> \\</span><br><span class=\"line\">--disable-rpath \\</span><br><span class=\"line\">--enable-shared \\</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; 启用 opcache，默认为 ZendOptimizer+(ZendOpcache) &quot;</span><span class=\"string\">&quot;&quot;</span>--enable-opcache \\</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; FPM &quot;</span><span class=\"string\">&quot;&quot;</span>--enable-fpm \\</span><br><span class=\"line\">--with-fpm-user=www \\</span><br><span class=\"line\">--with-fpm-group=www \\</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; MySQL &quot;</span><span class=\"string\">&quot;&quot;</span>--with-mysql=mysqlnd \\</span><br><span class=\"line\">--with-mysqli=mysqlnd \\</span><br><span class=\"line\">--with-pdo-mysql=mysqlnd \\</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; 国际化与字符编码支持 &quot;</span><span class=\"string\">&quot;&quot;</span>--with-gettext \\</span><br><span class=\"line\">--enable-mbstring \\</span><br><span class=\"line\">--with-<span class=\"built_in\">iconv</span> \\</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; 加密扩展 &quot;</span><span class=\"string\">&quot;&quot;</span>--with-mcrypt \\</span><br><span class=\"line\">--with-mhash \\</span><br><span class=\"line\">--with-openssl \\</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; 数学扩展 &quot;</span><span class=\"string\">&quot;&quot;</span>--enable-bcmath \\</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; Web 服务，soap 依赖 libxml &quot;</span><span class=\"string\">&quot;&quot;</span>--enable-soap \\</span><br><span class=\"line\">--with-libxml-dir \\</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; 进程，信号及内存 &quot;</span><span class=\"string\">&quot;&quot;</span>--enable-pcntl \\</span><br><span class=\"line\">--enable-shmop \\</span><br><span class=\"line\">--enable-sysvmsg \\</span><br><span class=\"line\">--enable-sysvsem \\</span><br><span class=\"line\">--enable-sysvshm \\</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; socket &amp; curl &quot;</span><span class=\"string\">&quot;&quot;</span>--enable-sockets \\</span><br><span class=\"line\">--with-curl \\</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; 压缩与归档 &quot;</span><span class=\"string\">&quot;&quot;</span>--with-zlib \\</span><br><span class=\"line\">--enable-zip \\</span><br><span class=\"line\">--with-bz2 \\</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot; GNU Readline 命令行快捷键绑定 &quot;</span><span class=\"string\">&quot;&quot;</span>--with-readline</span><br></pre></td></tr></table></figure>\n\n<p>如果你的 Web Server 使用的 Apache 请添加类似：<code>--with-apxs2=/usr/local/apache-xx/bin/apxs</code>参数。</p>\n<p>关于<code>mysqlnd</code>请查看什么是 <code>PHP</code> 的 <code>MySQL Native</code> 驱动或查看 <code>MySQL</code>官方介绍：<code>MySQL native driver for PHP</code>， 或<code>Installation on Unix</code>。</p>\n<p>PHP 5.6 內建了<code>phpdbg</code>交互式调试器，通过<code>--enable-phpdbg</code>开启，会在<code>PREFIX/bin</code>目录下产生一个 phpdbg 命令，感兴趣的可以试一下。</p>\n<p>更多编译参数请使用<code>./configure --help</code>查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make -j8</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<p>如果想重新安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make clean</span><br><span class=\"line\">make clean all</span><br><span class=\"line\">./configure ...</span><br><span class=\"line\">make -j8</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-PHP\"><a href=\"#配置-PHP\" class=\"headerlink\" title=\"配置 PHP\"></a>配置 PHP</h2><p>配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> php.ini-development /usr/local/php56/etc/php.ini</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"php-fpm-服务\"><a href=\"#php-fpm-服务\" class=\"headerlink\" title=\"php-fpm 服务\"></a>php-fpm 服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /usr/local/php56/etc/php-fpm.conf.default /usr/local/php56/etc/php-fpm.conf</span><br><span class=\"line\"><span class=\"built_in\">cp</span> sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm56</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x /etc/init.d/php-fpm56</span><br></pre></td></tr></table></figure>\n\n<p>启动 php-fpm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service php-fpm56 start</span><br><span class=\"line\">Starting php-fpm  <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p><code>php-fpm</code> 可用参数 <code>start|stop|force-quit|restart|reload|status</code></p>\n<h2 id=\"添加-PHP-命令到环境变量\"><a href=\"#添加-PHP-命令到环境变量\" class=\"headerlink\" title=\"添加 PHP 命令到环境变量\"></a>添加 PHP 命令到环境变量</h2><p>编辑<code>~/.bash_profile</code>，将：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/bin</span><br></pre></td></tr></table></figure>\n\n<p>改为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/bin:/usr/local/php56/bin</span><br></pre></td></tr></table></figure>\n\n<p>使 PHP 环境变量生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">. ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看看-PHP-版本\"><a href=\"#查看看-PHP-版本\" class=\"headerlink\" title=\"查看看 PHP 版本\"></a>查看看 PHP 版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">php -v</span><br><span class=\"line\">PHP 5.6.0(cli)(built:Sep23201403:44:18)Copyright(c)1997-2014The PHP GroupZendEngine v2.6.0,Copyright(c)1998-2014ZendTechnologies</span><br></pre></td></tr></table></figure>\n","categories":["Linux"],"tags":["linux","centos","php"]},{"title":"Crontab使用日期时间命名重定向文件","url":"/linux_crontab/","content":"<p>Linux <code>crontab</code>命令可以实现定时执行任务，最小的执行周期是1分钟</p>\n<span id=\"more\"></span>\n\n<p>例：每天12点执行<code>test.PHP</code>，执行的输出会追加到<code>test.log</code>文件</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">12</span> * * * php /Users/fdipzone/test.php &gt;&gt; /Users/fdipzone/test.<span class=\"built_in\">log</span> <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p><code>2&gt;&amp;1</code> 表示把标准错误输出重定向到与标准输出一致，即<code>test.log</code></p>\n<p>每天12点都执行一次，当天的输出就会追加到<code>test.log</code>文件。如果运行了一段很长的时间（如1年)，<code>test.log</code>文件的内容则会很大。这样不方便查看对应日期的输出记录。</p>\n<p>因此我们需要一个方法，可以按不同时段写入不同的日志文件，例如每日，每周，每月使用一个日志文件（具体根据不同的需求定义）这样就可以方便搜寻。</p>\n<p>例：每天12点执行，使用当天日期来命名重定向文件</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">12</span> * * * php /Users/fdipzone/test.php &gt;&gt; <span class=\"string\">&quot;/Users/fdipzone/$(date +&quot;</span>\\%Y-\\%<span class=\"keyword\">m</span>-\\%d<span class=\"string\">&quot;).log&quot;</span> <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>2016-06-06 执行的，会追加入<code>/Users/fdipzone/2016-06-06.log</code><br>2016-06-07 执行的，会追加入<code>/Users/fdipzone/2016-06-07.log</code><br>…<br>这样可以很方便找到对应日期的定时任务执行日志</p>\n<p>如果每天创建的日志内容不多，我们可以使用月份&#x2F;周为日志命名。如果日志内容很多也可以按小时来命名，以下提供不同时段的命名重定向文件实例。</p>\n<p>使用月份命名</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">12</span> * * * php /Users/fdipzone/test.php &gt;&gt; <span class=\"string\">&quot;/Users/fdipzone/$(date +&quot;</span>\\%Y-\\%<span class=\"keyword\">m</span><span class=\"string\">&quot;).log&quot;</span> <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>使用周命名</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">12</span> * * * php /Users/fdipzone/test.php &gt;&gt; <span class=\"string\">&quot;/Users/fdipzone/$(date +&quot;</span>\\%Y-W\\%W<span class=\"string\">&quot;).log&quot;</span> <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>使用小时命名</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">* * * * * php /Users/fdipzone/test.php &gt;&gt; <span class=\"string\">&quot;/Users/fdipzone/$(date +&quot;</span>\\%Y-\\%<span class=\"keyword\">m</span>-\\%d_\\%H<span class=\"string\">&quot;).log&quot;</span> <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>2017年05月18日16:30:46</p>\n<p>总见人问 怎么设置<code>crontab</code> 每分钟定时执行之类的问题 ，今天我就贴了上来方便大家使用，会的同学就飘过吧不会的就留个脚印。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">每五分钟执行    */<span class=\"number\">5</span> * * * *</span><br><span class=\"line\">每小时执行      <span class=\"number\">0</span> * * * *</span><br><span class=\"line\">每天执行        <span class=\"number\">0</span> <span class=\"number\">0</span> * * *</span><br><span class=\"line\">每周执行        <span class=\"number\">0</span> <span class=\"number\">0</span> * * <span class=\"number\">0</span></span><br><span class=\"line\">每月执行        <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> * *</span><br><span class=\"line\">每年执行        <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span> *</span><br></pre></td></tr></table></figure>\n","categories":["Linux"],"tags":["linux","crontab"]},{"title":"Linux下查看文件和文件夹大小","url":"/linux_file_dir_size/","content":"<p>当磁盘大小超过标准时会有报警提示，这时如果掌握<code>df</code>和<code>du</code>命令是非常明智的选择。</p>\n<span id=\"more\"></span>\n<p><code>df</code>可以查看一级文件夹大小、使用比例、档案系统及其挂入点，但对文件却无能为力。<br><code>du</code>可以查看文件及文件夹的大小。</p>\n<p>两者配合使用，非常有效。比如用df查看哪个一级目录过大，然后用df查看文件夹或文件的大小，如此便可迅速确定症结。</p>\n<p>下面分别简要介绍</p>\n<p>df命令可以显示目前所有文件系统的可用空间及使用情形，请看下列这个例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">df</span> -h</span><br><span class=\"line\">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class=\"line\">/dev/sda1             3.9G  300M  3.4G   8% /</span><br><span class=\"line\">/dev/sda7             100G  188M   95G   1% /data0</span><br><span class=\"line\">/dev/sdb1             133G   80G   47G  64% /data1</span><br><span class=\"line\">/dev/sda6             7.8G  218M  7.2G   3% /var</span><br><span class=\"line\">/dev/sda5             7.8G  166M  7.2G   3% /tmp</span><br><span class=\"line\">/dev/sda3             9.7G  2.5G  6.8G  27% /usr</span><br><span class=\"line\">tmpfs                 2.0G     0  2.0G   0% /dev/shm</span><br></pre></td></tr></table></figure>\n\n<p>参数 <code>-h</code> 表示使用<code>「Human-readable」</code>的输出，也就是在档案系统大小使用 <code>GB</code>、<code>MB</code> 等易读的格式。</p>\n<p>上面的命令输出的第一个字段（Filesystem）及最后一个字段（Mounted on）分别是档案系统及其挂入点。我们可以看到 <code>/dev/sda1</code> 这个分割区被挂在根目录下。</p>\n<p>接下来的四个字段 <code>Size</code>、<code>Used</code>、<code>Avail</code>、及 <code>Use%</code> 分别是该分割区的容量、已使用的大小、剩下的大小、及使用的百分比。 FreeBSD下，当硬盘容量已满时，您可能会看到已使用的百分比超过 100%，因为 FreeBSD 会留一些空间给 <code>root</code>，让 <code>root</code> 在档案系统满时，还是可以写东西到该档案系统中，以进行管理。</p>\n<p>du：查询文件或文件夹的磁盘使用空间</p>\n<p>如果当前目录下文件和文件夹很多，使用不带参数<code>du</code>的命令，可以循环列出所有文件和文件夹所使用的空间。这对查看究竟是那个地方过大是不利的，所以得指定深入目录的层数，参数：<code>–max-depth=</code>，这是个极为有用的参数！如下，注意使用“*”，可以得到文件的使用空间大小.</p>\n<p>提醒：一向命令比linux复杂的FreeBSD，它的du命令指定深入目录的层数却是比linux简化，为 -d。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">du</span> -h –max-depth=1 work/testing</span><br><span class=\"line\">27M     work/testing/logs</span><br><span class=\"line\">35M     work/testing</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">du</span> -h –max-depth=1 work/testing/*</span><br><span class=\"line\">8.0K    work/testing/func.php</span><br><span class=\"line\">27M     work/testing/logs</span><br><span class=\"line\">8.1M    work/testing/nohup.out</span><br><span class=\"line\">8.0K    work/testing/testing_c.php</span><br><span class=\"line\">12K     work/testing/testing_func_reg.php</span><br><span class=\"line\">8.0K    work/testing/testing_get.php</span><br><span class=\"line\">8.0K    work/testing/testing_g.php</span><br><span class=\"line\">8.0K    work/testing/var.php</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">du</span> -h –max-depth=1 work/testing/logs/</span><br><span class=\"line\">27M     work/testing/logs/</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">du</span> -h –max-depth=1 work/testing/logs/*</span><br><span class=\"line\">24K     work/testing/logs/errdate.log_show.log</span><br><span class=\"line\">8.0K    work/testing/logs/pertime_show.log</span><br><span class=\"line\">27M     work/testing/logs/show.log</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">du</span> -shc *</span><br><span class=\"line\"></span><br><span class=\"line\">60M bitcoin</span><br><span class=\"line\">60M total</span><br></pre></td></tr></table></figure>","categories":["Linux"],"tags":["linux"]},{"title":"Linux中vim保存root权限的文件","url":"/linux_vim_root/","content":"<p>今天在linux操作时发现忘记<code>sudo</code>后，在<code>vim</code>中保存一个只有<code>root</code>可以写的文件了。</p>\n<span id=\"more\"></span>\n\n<p>Linux中经常会遇到用vim编辑好了文件，保存的时候提示当前文件是只读的。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">E45: ‘<span class=\"built_in\">readonly</span>’ option is <span class=\"built_in\">set</span> (add ! to override)</span><br></pre></td></tr></table></figure>\n\n<p>原因也很简单，因为用户对当前编辑的文件没有写入权限，一个可行的解决办法就是重新使用<code>sudo</code>命令打开这个文件重新进行编辑，但是这样做的话，之前的编辑工作就需要全部重来了，怎么样才能在忘记使用<code>sudo vim</code>编辑自己不可写的文件后，仍然可以正常写入文件呢？</p>\n<p>vim的强大之处就体现出来了，下面的指令轻松搞定</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">:<span class=\"keyword\">w</span> !sudo tee %</span><br></pre></td></tr></table></figure>\n\n<p>下面是命令使用的情况</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">:<span class=\"keyword\">w</span> !sudo tee %</span><br><span class=\"line\">[sudo] password <span class=\"keyword\">for</span> xxxx:</span><br><span class=\"line\">…</span><br><span class=\"line\">…</span><br><span class=\"line\">…</span><br><span class=\"line\"></span><br><span class=\"line\">Press ENTER <span class=\"built_in\">or</span> <span class=\"built_in\">type</span> <span class=\"keyword\">command</span> <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span></span><br></pre></td></tr></table></figure>\n\n<p>回车后会提示文件已经改变，按<code>O</code>或者<code>L</code>重新加载一下就好。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">W12: Warning: File “xxx” has changed and the buffer was changed <span class=\"keyword\">in</span> Vim as well</span><br><span class=\"line\">See “:<span class=\"built_in\">help</span> W12” <span class=\"keyword\">for</span> more info.</span><br><span class=\"line\">[O]K, (L)oad File:</span><br></pre></td></tr></table></figure>\n\n<p>命令解释</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">:<span class=\"keyword\">w</span> 是<span class=\"keyword\">vim</span>的写入命令</span><br><span class=\"line\">% 当前编辑的文件名</span><br><span class=\"line\">!sudo tee <span class=\"keyword\">vim</span>中调用<span class=\"keyword\">shell</span>命令都是以!开头的</span><br></pre></td></tr></table></figure>\n\n<p>整个命令就是：以<code>root</code>的身份运行<code>tee</code>命令，读取<code>vim :w</code>命令的输出作为标准输入，将其内容输出到标准输出设备，同时保存到<code>%</code>表示的文件中</p>\n","categories":["Linux"],"tags":["linux"]},{"title":"Linux命令大全之scp命令详解(复制文件和目录远程传输)","url":"/linux_scp/","content":"<blockquote>\n<p>在linux服务器上可以使用scp进行文件的传输。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"常用的情况\"><a href=\"#常用的情况\" class=\"headerlink\" title=\"常用的情况\"></a>常用的情况</h2><p>两台机器IP分别为：<code>A.104.238.161.75</code>，<code>B.43.224.34.73</code>。</p>\n<p>在A服务器上操作，将B服务器上<code>/home/zihao/</code>目录下所有的文件全部复制到本地的<code>/root</code>目录下，<br>命令为：<code>scp -r root@43.224.34.73:/home/zihao/ /root</code>。</p>\n<p>具体过程为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp -r root@43.224.34.73:/home/zihao /root</span><br><span class=\"line\">root@43.224.34.73’s password:</span><br><span class=\"line\">k.zip 100% 176 0.2KB/s 00:00</span><br><span class=\"line\">.bash_history 100% 32 0.0KB/s 00:00</span><br></pre></td></tr></table></figure>\n\n<p>在A服务器上将<code>/root/zihao</code>目录下所有的文件传输到B的<code>/home/zihao/cpfile</code>目录下，</p>\n<p>命令为：<code>scp -r /root/zihao root@43.224.34.73:/home/zihao/cpfile</code>。</p>\n<p>具体过称为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@XX zihao]# scp -r /root/zihao root@43.224.34.73:/home/zihao/cpfile</span><br><span class=\"line\">root@43.224.34.73’s password:</span><br><span class=\"line\">k.zip 100% 176 0.2KB/s 00:00</span><br><span class=\"line\">.bashrc 100% 231 0.2KB/s 00:00</span><br></pre></td></tr></table></figure>\n\n<p>scp在夸机器复制的时候为了提高数据的安全性，使用了ssh连接和加密方式，如果机器之间配置了ssh免密码登录，那在使用scp的时候密码都不用输入。</p>\n<p>加端口号和sshkey的方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp -P 65499 -i ~/.ssh/test ~/Downloads/beta.zip ubuntu@123.200.00.100:~/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令详解\"><a href=\"#命令详解\" class=\"headerlink\" title=\"命令详解\"></a>命令详解</h2><p>scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I&#x2F;O非常高，而scp基本不影响系统正常使用。</p>\n<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><p>scp [参数] [原路径] [目标路径]</p>\n<h3 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h3><p>scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。linux的scp命令可以在linux服务器之间复制文件和目录。</p>\n<h3 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">-1 强制scp命令使用协议ssh1</span><br><span class=\"line\"></span><br><span class=\"line\">-2 强制scp命令使用协议ssh2</span><br><span class=\"line\"></span><br><span class=\"line\">-4 强制scp命令只使用IPv4寻址</span><br><span class=\"line\"></span><br><span class=\"line\">-6 强制scp命令只使用IPv6寻址</span><br><span class=\"line\"></span><br><span class=\"line\">-B 使用批处理模式（传输过程中不询问传输口令或短语）</span><br><span class=\"line\"></span><br><span class=\"line\">-C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</span><br><span class=\"line\"></span><br><span class=\"line\">-p 保留原文件的修改时间，访问时间和访问权限。</span><br><span class=\"line\"></span><br><span class=\"line\">-q 不显示传输进度条。</span><br><span class=\"line\"></span><br><span class=\"line\">-r 递归复制整个目录。</span><br><span class=\"line\"></span><br><span class=\"line\">-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</span><br><span class=\"line\"></span><br><span class=\"line\">-c cipher 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</span><br><span class=\"line\"></span><br><span class=\"line\">-F ssh_config 指定一个替代的ssh配置文件，此参数直接传递给ssh。</span><br><span class=\"line\"></span><br><span class=\"line\">-i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</span><br><span class=\"line\"></span><br><span class=\"line\">-l limit 限定用户所能使用的带宽，以Kbit/s为单位。</span><br><span class=\"line\"></span><br><span class=\"line\">-o ssh_option 如果习惯于使用ssh_config(5)中的参数传递方式，</span><br><span class=\"line\"></span><br><span class=\"line\">-P port 注意是大写的P, port是指定数据传输用到的端口号</span><br><span class=\"line\"></span><br><span class=\"line\">-S program 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h3><p>从本地服务器复制到远程服务器：</p>\n<h4 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h4><p>命令格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp local_file remote_username@remote_ip:remote_folder</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp local_file remote_username@remote_ip:remote_file</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp local_file remote_ip:remote_folder</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp local_file remote_ip:remote_file</span><br></pre></td></tr></table></figure>\n\n<p>第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名</p>\n<p>第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名</p>\n<h4 id=\"复制目录\"><a href=\"#复制目录\" class=\"headerlink\" title=\"复制目录\"></a>复制目录</h4><p>命令格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp -r local_folder remote_username@remote_ip:remote_folder</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp -r local_folder remote_ip:remote_folder</span><br></pre></td></tr></table></figure>\n\n<p>第1个指定了用户名，命令执行后需要输入用户密码；</p>\n<p>第2个没有指定用户名，命令执行后需要输入用户名和密码；</p>\n","categories":["Linux"]},{"title":"Nginx与Node.js结合使用","url":"/js_nginx_node/","content":"<p>Node.js是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Node.js 使用事件驱动， 非阻塞I&#x2F;O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用，如实时聊天等等。然而对于gzip编码，静态文件，HTTP缓存，SSL处理，负载平衡和反向代理等，都可以通过nginx来完成，从而减小node.js的负载，并通过nginx强大的缓存来节省网站的流量从而提高网站的加载速度。</p>\n<span id=\"more\"></span>\n\n<p>nginx配置如下：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    proxy_cache_path  /var/cache/nginx levels=<span class=\"number\">1</span>:<span class=\"number\">2</span> keys_zone=one:<span class=\"number\">8</span><span class=\"keyword\">m</span> max_size=<span class=\"number\">3000</span><span class=\"keyword\">m</span> inactive=<span class=\"number\">600</span><span class=\"keyword\">m</span>;</span><br><span class=\"line\">    proxy_temp_path /var/tmp;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet–stream;</span><br><span class=\"line\">    sendfile        <span class=\"keyword\">on</span>;</span><br><span class=\"line\">    keepalive_timeout  <span class=\"number\">65</span>;</span><br><span class=\"line\">    gzip <span class=\"keyword\">on</span>;</span><br><span class=\"line\">    gzip_comp_level <span class=\"number\">6</span>;</span><br><span class=\"line\">    gzip_vary <span class=\"keyword\">on</span>;</span><br><span class=\"line\">    gzip_min_length  <span class=\"number\">1000</span>;</span><br><span class=\"line\">    gzip_proxied any;</span><br><span class=\"line\">    gzip_types text/plain text/html text/css application/json application/<span class=\"keyword\">x</span>–javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class=\"line\">    gzip_buffers <span class=\"number\">16</span> <span class=\"number\">8</span><span class=\"keyword\">k</span>;</span><br><span class=\"line\">    ssl_certificate /some/location/sillyfacesociety.<span class=\"keyword\">com</span>.bundle.crt;</span><br><span class=\"line\">    ssl_certificate_key /some/location/sillyfacesociety.<span class=\"keyword\">com</span>.key;</span><br><span class=\"line\">    ssl_protocols        SSLv3 TLSv1;</span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    upstream silly_face_society_upstream &#123;</span><br><span class=\"line\">      server <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">61337</span>;</span><br><span class=\"line\">      server <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">61338</span>;</span><br><span class=\"line\">      keepalive <span class=\"number\">64</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">      listen <span class=\"number\">80</span>;</span><br><span class=\"line\">      listen <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">      server_name sillyfacesociety.<span class=\"keyword\">com</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">301</span> $scheme://www.sillyfacesociety.<span class=\"keyword\">com</span>$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">80</span>;</span><br><span class=\"line\">        listen <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">        server_name www.sillyfacesociety.<span class=\"keyword\">com</span>;</span><br><span class=\"line\">        error_page <span class=\"number\">502</span>  /errors/<span class=\"number\">502</span>.html;</span><br><span class=\"line\">        location ~ ^/(images/|img/|javascript/|js/|css/|stylesheets/|flash/|media/|static/|robots.txt|humans.txt|favicon.ico) &#123;</span><br><span class=\"line\">          root /usr/local/silly_face_society/node/public;</span><br><span class=\"line\">          access_log off;</span><br><span class=\"line\">          expires <span class=\"built_in\">max</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location /errors &#123;</span><br><span class=\"line\">          internal;</span><br><span class=\"line\">          alias /usr/local/silly_face_society/node/public/errors;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">          proxy_redirect off;</span><br><span class=\"line\">          proxy_set_header   <span class=\"keyword\">X</span>–Real–IP            $remote_addr;</span><br><span class=\"line\">          proxy_set_header   <span class=\"keyword\">X</span>–Forwarded–For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\">          proxy_set_header   <span class=\"keyword\">X</span>–Forwarded–Proto $scheme;</span><br><span class=\"line\">          proxy_set_header   Host                   $http_host;</span><br><span class=\"line\">          proxy_set_header   <span class=\"keyword\">X</span>–NginX–Proxy    true;</span><br><span class=\"line\">          proxy_set_header   Connection “”;</span><br><span class=\"line\">          proxy_http_version <span class=\"number\">1.1</span>;</span><br><span class=\"line\">          proxy_cache one;</span><br><span class=\"line\">          proxy_cache_key sfs$request_uri$scheme;</span><br><span class=\"line\">          proxy_pass         http://silly_face_society_upstream;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置段说明</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    upstream silly_face_society_upstream &#123;</span><br><span class=\"line\">      server <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">61337</span>;</span><br><span class=\"line\">      server <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">61338</span>;</span><br><span class=\"line\">      keepalive <span class=\"number\">64</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>nginx负载均衡多个nodo.js实例。keepalive 64 指示nginx在任何时候保持最少64个HTTP&#x2F; 1.1连接到代理服务器。如果有更多的流量nginx将打开更多的连接。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">          proxy_redirect off;</span><br><span class=\"line\">          proxy_set_header   <span class=\"keyword\">X</span>–Real–IP            $remote_addr;</span><br><span class=\"line\">          proxy_set_header   <span class=\"keyword\">X</span>–Forwarded–For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\">          proxy_set_header   Host                   $http_host;</span><br><span class=\"line\">          proxy_set_header   <span class=\"keyword\">X</span>–NginX–Proxy    true;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">          proxy_set_header   Connection “”;</span><br><span class=\"line\">          proxy_http_version <span class=\"number\">1.1</span>;</span><br><span class=\"line\">          proxy_pass         http://silly_face_society_upstream;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>将符合哪些的请求发送到代理上。nginx的匹配规则可以取看看前面的文章。</p>\n<p>nginx处理静态内容</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        location ~ ^/(images/|img/|javascript/|js/|css/|stylesheets/|flash/|media/|static/|robots.txt|humans.txt|favicon.ico) &#123;</span><br><span class=\"line\">          root /usr/local/silly_face_society/node/public;</span><br><span class=\"line\">          access_log off;</span><br><span class=\"line\">          expires <span class=\"built_in\">max</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置缓存</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    proxy_cache_path  /var/cache/nginx levels=<span class=\"number\">1</span>:<span class=\"number\">2</span> keys_zone=one:<span class=\"number\">8</span><span class=\"keyword\">m</span> max_size=<span class=\"number\">3000</span><span class=\"keyword\">m</span> inactive=<span class=\"number\">600</span><span class=\"keyword\">m</span>;</span><br><span class=\"line\">    proxy_temp_path /var/tmp;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">     location / &#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">          proxy_cache one;</span><br><span class=\"line\">          proxy_cache_key sfs$request_uri$scheme;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>缓存是通过HTTP头部来控制的。</p>\n","categories":["Linux"],"tags":["nginx","js","node"]},{"title":"Path重置问题","url":"/linux_path/","content":"<p><code>PATH=$(getconf PATH)</code>，执行此命令将环境变量恢复到系统初始值。</p>\n","categories":["Linux"],"tags":["mac","linux"]},{"title":"Ubuntu下安装oh-my-zsh","url":"/linux_oh_my_zsh/","content":"<h2 id=\"ubuntu中默认安装了哪些shell\"><a href=\"#ubuntu中默认安装了哪些shell\" class=\"headerlink\" title=\"ubuntu中默认安装了哪些shell\"></a>ubuntu中默认安装了哪些shell</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@Linux:~$ <span class=\"built_in\">cat</span> /etc/shells <span class=\"comment\"># /etc/shells: valid login shells/bin/sh/bin/dash/bin/bash/bin/rbash</span></span><br></pre></td></tr></table></figure>\n\n<p>我的PC上有sh、dash、bash。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"当前正在运行的是那个版本的shell\"><a href=\"#当前正在运行的是那个版本的shell\" class=\"headerlink\" title=\"当前正在运行的是那个版本的shell\"></a>当前正在运行的是那个版本的shell</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@Linux:~$ <span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span>/bin/bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正式安装\"><a href=\"#正式安装\" class=\"headerlink\" title=\"正式安装\"></a>正式安装</h2><p>安装<code>zsh</code>、<code>git</code>和<code>wget</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@Linux:~$ apt-get install zsh git wget</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取并自动安装oh-my-zsh\"><a href=\"#获取并自动安装oh-my-zsh\" class=\"headerlink\" title=\"获取并自动安装oh-my-zsh\"></a>获取并自动安装oh-my-zsh</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@Linux:~$ wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"替换bash为zsh\"><a href=\"#替换bash为zsh\" class=\"headerlink\" title=\"替换bash为zsh\"></a>替换bash为zsh</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@Linux:~$ chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置zsh的参数\"><a href=\"#设置zsh的参数\" class=\"headerlink\" title=\"设置zsh的参数\"></a>设置zsh的参数</h2><p>安装完zsh后，在你的家目录下会有一个名为<code>.zshrc</code>的隐藏文件，可以根据个人习惯配置<code>zsh</code>的参数，先进入家目录，备份原来的<code>.zshrc</code>,然后重命名<code>.zshrc</code>文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@Linux:~$ <span class=\"built_in\">cp</span> .zshrc .zshrc.bak</span><br><span class=\"line\">root@Linux:~$ <span class=\"built_in\">mv</span> .zshrc .zshrc</span><br></pre></td></tr></table></figure>\n\n<p>最后重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@Linux:~$ sudo reboot</span><br></pre></td></tr></table></figure>\n\n<p>(16.04 不用下载字体即可使用)<br>Oh-My-Zsh的默认配置文件在：<code>~/.zshrc</code><br>编辑<code>~/.zshrc</code>修改主题为：<code>agnoster</code></p>\n<h2 id=\"修改Oh-My-Zsh-agnoster匹配字体\"><a href=\"#修改Oh-My-Zsh-agnoster匹配字体\" class=\"headerlink\" title=\"修改Oh-My-Zsh agnoster匹配字体\"></a>修改Oh-My-Zsh agnoster匹配字体</h2><p>显示效果中有乱码，这是因为字体没适配。我们需要下载支持Powerline的字体。</p>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Bvd2VybGluZS9mb250cw==\">https://github.com/powerline/fonts<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>默认Ubuntu 终端使用的是 <code>Ubuntu mono regular</code>字体 13字号，改成<code>Ubuntu Mono derivative Powerline</code>字体</p>\n","categories":["Linux"],"tags":["linux","ubuntu"]},{"title":"Ubuntu使用apt-get install 安装php5.6--php7","url":"/ubuntu_apt_install_php/","content":"<p>使用ppa增加源:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-software-properties</span><br><span class=\"line\">sudo add-apt-repository ppa:ondrej/php</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install -y php7.0 php7.0-mysql php7.0-curl php7.0-json php7.0-cgi</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>然后可以查看php版本:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">php -v</span><br></pre></td></tr></table></figure>\n\n<p>关于php5.4–php5.6版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-software-properties</span><br><span class=\"line\">sudo add-apt-repository ppa:ondrej/php</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -y install php5.6 php5.6-mcrypt php5.6-mbstring php5.6-curl php5.6-cli php5.6-mysql php5.6-gd php5.6-intl php5.6-xsl php5.6-zip</span><br></pre></td></tr></table></figure>\n\n<p>查看php7的扩展</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-cache search php7-*</span><br></pre></td></tr></table></figure>\n\n<p>如果报错的话，尝试解决一下编码问题</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get update &amp;&amp;</span><br><span class=\"line\">apt-get install -y language-pack-en-base &amp;&amp;</span><br><span class=\"line\"><span class=\"built_in\">export</span> LC_ALL=en_US.UTF-8 &amp;&amp;</span><br><span class=\"line\"><span class=\"built_in\">export</span> LANG=en_US.UTF-8 &amp;&amp;</span><br><span class=\"line\">apt-get install -y software-properties-common &amp;&amp;</span><br><span class=\"line\">add-apt-repository -y ppa:ondrej/php5-5.6 &amp;&amp;</span><br><span class=\"line\">add-apt-repository -y ppa:ondrej/mariadb-10.0 &amp;&amp;</span><br><span class=\"line\">apt-get update &amp;&amp;</span><br><span class=\"line\">apt-get -y upgrade</span><br></pre></td></tr></table></figure>\n\n<p>字符编码warning解决方法：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">locale-gen en_US.UTF-<span class=\"number\">8</span></span><br><span class=\"line\">export LANG=en_US.UTF-<span class=\"number\">8</span></span><br><span class=\"line\">export LC_ALL=en_US.UTF-<span class=\"number\">8</span></span><br></pre></td></tr></table></figure>","categories":["Linux"],"tags":["linux","php"]},{"title":"Ubuntu下折腾thrift","url":"/linux_ubuntu_thrift/","content":"<p>系统安装官方文档：<span class=\"exturl\" data-url=\"aHR0cDovL3RocmlmdC5hcGFjaGUub3JnL2RvY3M=\">http://thrift.apache.org/docs<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>下载安装包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://git-wip-us.apache.org/repos/asf/thrift.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> thrift</span><br><span class=\"line\">./bootstrap.sh</span><br><span class=\"line\">./configure --with-lua=no</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n","categories":["Linux"]},{"title":"使用VirtualBox自带管理工具命令为虚拟磁盘扩展空间","url":"/virtuabox_disk/","content":"<p>VirtualBox虚拟磁盘空间不够了，默认10G。想扩大，图形界面下没有找到可操作菜单。Google了一下用 <code>Vbox</code>自带的命令工具<code>VBoxManage</code>即可解决。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Program Files\\Oracle\\VirtualBox&gt;VBoxManage modifyhd e:\\vbox\\Ubuntu12.04\\Ubuntu1204-201302-disk1.vmdk --resize 30000</span><br><span class=\"line\">0%...</span><br><span class=\"line\">Progress state: VBOX_E_NOT_SUPPORTED</span><br><span class=\"line\">VBoxManage.exe: error: Resize hard disk operation <span class=\"keyword\">for</span> this format is not implemented yet!</span><br></pre></td></tr></table></figure>\n\n<p>原来虚拟机用的是<code>vmdk</code>格式，这个命令只能支持<code>vdi</code>格式。怎么办</p>\n<p>发现可以利用<code>VBoxManager</code>来转化虚拟硬盘存储文件格式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Program Files\\Oracle\\VirtualBox&gt;VBoxManage clonehd e:\\vbox\\Ubuntu12.04\\Ubuntu1204-201302-disk1.vmdk  e:\\vbox\\Ubuntu12.04\\Ubuntu1204-201310-disk1.vdi --format VDI</span><br><span class=\"line\">0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%</span><br><span class=\"line\">Clone hard disk created <span class=\"keyword\">in</span> format <span class=\"string\">&#x27;VDI&#x27;</span>. UUID: 455b7aa4-d776-4254-8353-d9b5b3fa1</span><br><span class=\"line\">09b</span><br></pre></td></tr></table></figure>\n\n<p>最后用<code>VBoxManager</code>对转好的vdi文件进行扩容设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Program Files\\Oracle\\VirtualBox&gt;VBoxManage modifyhd e:\\vbox\\Ubuntu12.04\\Ubunt</span><br><span class=\"line\">u1204-201310-disk1.vdi --resize 30000</span><br><span class=\"line\">0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%</span><br></pre></td></tr></table></figure>\n\n<p>大功告成，要将新的虚拟硬盘(vdi)挂载到虚拟机上了。</p>\n<p>打开虚拟机设置，找到存储，点击虚拟硬盘所在的控制器，点“添加虚拟硬盘”-&gt;选”使用现有的虚拟盘”-&gt;选中扩容后的vdi文件，确定后就看见控制器下多了一个硬盘图标，查看容量29.30G。<br>删除原来的vmdk虚拟盘。确定保存配置。大功告成！！</p>\n<p>别忙，还有一部。<br>启动虚拟机后，还要使用<code>GParted – Gnome Partition Editor</code>这个工具，将新扩展的分区进行初始化，否则系统还是不会认出新扩展的空间的。<br>Ubuntu中可用 <code>sudo apt-get install gparted</code>来安装。工具是图形化界面的。好用。设置好后要点菜单“编辑”-&gt;“应用全部操作”，系统才开始执行扩展磁盘的初始化。</p>\n<p>Gnome Partition Editor 官网地址：<span class=\"exturl\" data-url=\"aHR0cDovL2dwYXJ0ZWQuc291cmNlZm9yZ2UubmV0Lw==\">http://gparted.sourceforge.net/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>多嘴一句</p>\n<p>将原来的vid虚拟硬盘数据复制到新的vid硬盘，示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">旧vdi —&gt; 新vdi</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe  clonevdi  E:\\vbox\\server2003\\win2003.vdi E:\\vbox\\server2003\\server2003.vdi<span class=\"string\">&quot; --existing</span></span><br></pre></td></tr></table></figure>\n","categories":["Linux"]},{"title":"阿里云虚拟机ftp流程","url":"/linux_vps_fpt/","content":"<ul>\n<li>1.压缩注意使用tar zip格式 tar -czvf wp-admin-09-24-cvf.tar.gz wp-admin</li>\n<li>2.记得压缩为小一点文件，不然总是断开</li>\n<li>3.在控制台进行解压缩</li>\n</ul>\n","categories":["Linux"]},{"title":"iTerm 2 && Oh My Zsh【DIY教程——亲身体验过程】","url":"/mac_item2_zsh/","content":"<p>经过一个晚上的时间，终于DIY出我梦寐以求的效果。iTerm 2 + Oh My Zsh 就是最可爱的仔。</p>\n<span id=\"more\"></span>\n\n<p><strong>先放上最终DIY效果图：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190422112851.png\" alt=\"DIY效果图\"></p>\n<p>下面，我将分步骤讲解我是怎么一步一步完成DIY过程</p>\n<h2 id=\"安装-item2\"><a href=\"#安装-item2\" class=\"headerlink\" title=\"安装 item2\"></a>安装 item2</h2><ol>\n<li><p>首先下载 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pdGVybTIuY29tLw==\">iTerm 2<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>打开iTerm 2</p>\n</li>\n<li><p>输入下面指令安装<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JvYmJ5cnVzc2VsbC9vaC1teS16c2g=\">oh-my-zsh<i class=\"fa fa-external-link-alt\"></i></span><br><code>curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</code></p>\n</li>\n<li><p>接下来安装<span class=\"exturl\" data-url=\"aHR0cDovL3Bvd2VybGluZS5yZWFkdGhlZG9jcy5vcmcvZW4vbGF0ZXN0L2luc3RhbGxhdGlvbi5odG1s\">Powerline<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ol>\n<p>在官网有教程，我们只需要执行官网第一条安装指令就行。如果你的终端能够正常执行pip指令，那么直接执行下面的指令可以完成安装 <code>pip install powerline-status</code>。如果没有，则先执行安装pip指令 <code>sudo easy_install pip</code>。</p>\n<h2 id=\"下载、安装库字体库\"><a href=\"#下载、安装库字体库\" class=\"headerlink\" title=\"下载、安装库字体库\"></a>下载、安装库<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Bvd2VybGluZS9mb250cw==\">字体库<i class=\"fa fa-external-link-alt\"></i></span></h2><ol>\n<li>将工程下载下来后cd到<code>install.sh</code>文件所在目录 </li>\n<li>执行指令安装字体库 执行<code>./install.sh</code>指令安装所有Powerline字体 安装完成后提示所有字体均已下载到<code>/Users/superdanny/Library/Fonts</code>路径下</li>\n</ol>\n  <figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">All Powerline fonts installed <span class=\"keyword\">to</span> /Users/superdanny/Library/Fonts </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置iTerm-2的Regular-Font-和-Non-ASCII-Font\"><a href=\"#设置iTerm-2的Regular-Font-和-Non-ASCII-Font\" class=\"headerlink\" title=\"设置iTerm 2的Regular Font 和 Non-ASCII Font\"></a>设置iTerm 2的Regular Font 和 Non-ASCII Font</h2><p>安装完字体库之后，把iTerm 2的设置里的<code>Profile</code>中的<code>Text</code> 选项卡中里的<code>Regular Font</code>和<code>Non-ASCII Font</code>的字体都设置成 Powerline的字体，我这里设置的字体是<code>12pt Meslo LG S DZ Regular for Powerline</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190422112932.png\"></p>\n<h2 id=\"配色方案\"><a href=\"#配色方案\" class=\"headerlink\" title=\"配色方案\"></a>配色方案</h2><p>1）安装<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsdGVyY2F0aW9uL3NvbGFyaXplZA==\">配色方案<i class=\"fa fa-external-link-alt\"></i></span> 进入刚刚下载的工程的<code>solarized/iterm2-colors-solarized</code> 下双击 <code>Solarized Dark.itermcolors</code> 和 <code>Solarized Light.itermcolors</code> 两个文件就可以把配置文件导入到 iTerm2 里<br>2）配置配色方案 通过load presets选择刚刚安装的配色主题即可</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190422113043.png\"></p>\n<h2 id=\"使用agnoster主题\"><a href=\"#使用agnoster主题\" class=\"headerlink\" title=\"使用agnoster主题\"></a>使用agnoster主题</h2><ol>\n<li>下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZjYW1ibG9yL29oLW15LXpzaC1hZ25vc3Rlci1mY2FtYmxvcg==\">agnoster<i class=\"fa fa-external-link-alt\"></i></span>主题 到下载的工程里面运行install文件,主题将安装到<code>~/.oh-my-zsh/themes</code>目录下</li>\n<li>设置该主题 进入<code>~/.zshrc</code>打开<code>.zshrc</code>文件，然后将<code>ZSH_THEME</code>后面的字段改为<code>agnoster</code>。<code>ZSH_THEME=&quot;agnoster&quot;</code>（agnoster即为要设置的主题）</li>\n</ol>\n<h2 id=\"增加指令高亮效果——zsh-syntax-highlighting\"><a href=\"#增加指令高亮效果——zsh-syntax-highlighting\" class=\"headerlink\" title=\"增加指令高亮效果——zsh-syntax-highlighting\"></a>增加指令高亮效果——<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtc3ludGF4LWhpZ2hsaWdodGluZw==\">zsh-syntax-highlighting<i class=\"fa fa-external-link-alt\"></i></span></h2><p>指令高亮效果作用是当用户输入正确命令时指令会绿色高亮，错误时命令红色高亮 </p>\n<ol>\n<li>cd到<code>.zshrc</code>所在目录</li>\n<li>执行指令将工程克隆到当前目录 <code>git clone git://github.com/zsh-users/zsh-syntax-highlighting.git</code> </li>\n<li>打开<code>.zshrc</code>文件，在最后添加下面内容 <code>source XXX/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code> 保存文件。 注意：<code>xxx</code>代表<code>.zshrc</code>所在目录 </li>\n<li><code>cd ~/.oh-my-zsh/custom/plugins</code> 5）再次打开<code>.zshrc</code>文件，在最后面添加下面内容 <code>plugins=(zsh-syntax-highlighting)</code> 保存文件。</li>\n</ol>\n<h2 id=\"问题解答区\"><a href=\"#问题解答区\" class=\"headerlink\" title=\"问题解答区\"></a>问题解答区</h2><ol>\n<li>启动iTerm 2 默认使用dash改用zsh解决方法： <code>chsh -s /bin/zsh</code></li>\n<li>执行指令<code>pip install powerline-status</code>出错解决方法： 需要下载苹果官方的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2Rvd25sb2Fkcy9pbmRleC5hY3Rpb24/bmFtZT1mb3IlMjBYY29kZSUyMA==\">Command line<i class=\"fa fa-external-link-alt\"></i></span>。必須官方工具下载最新版 Command Line</li>\n<li>?+Q关闭iTerm 2 时每次弹窗提示问题： iTerm 2 中，进入<code>Preference</code>-<code>General</code>-<code>Closing栏目</code>，将<code>Confirm &quot;Quit iTerm2(?Q)&quot; command</code>选项勾选去掉就行</li>\n<li>找不到.zshrc文件问题： 我这里将我的.zshrc文件分享出来。供大家下载<span class=\"exturl\" data-url=\"aHR0cDovL3Bhbi5iYWlkdS5jb20vcy8xc2sxTHFDdA==\">网盘<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n","categories":["Mac"],"tags":["mac","item","tool"]},{"title":"Mac中使用expect和ga-cmd解决谷歌验证码登陆跳转机","url":"/mac_expect_gacmd/","content":"<p>在公司的时候，需要使用跳板机和二次验证Google Authenticator中的动态令牌。但是作为开发每次重复输入的需求，都会找到最优的解决方案。expect命令可以实现自动交互式任务，自动2步登录。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 安装expect</span></span><br><span class=\"line\">brew install expect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 安装gacmd</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/arcanericky/ga-cmd.git</span><br><span class=\"line\">$ git submodule init</span><br><span class=\"line\">$ git submodule update</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ga-cmd/src</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 获取跳板机</span></span><br><span class=\"line\">$ vim .google_authenticator</span><br><span class=\"line\">$ ./build.sh &lt;16 character seed&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 检测一下</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ ga-cmd/src/bin/ga-cmd</span><br><span class=\"line\">123456</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 编写 expect 脚本</span></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/expect</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> host [lindex <span class=\"variable\">$argv</span> 0]</span><br><span class=\"line\"><span class=\"built_in\">set</span> VERIFICATION [lindex <span class=\"variable\">$argv</span> 1]</span><br><span class=\"line\"><span class=\"built_in\">set</span> TERMSERV 192.2.1.2</span><br><span class=\"line\"><span class=\"built_in\">set</span> USER yaozihao</span><br><span class=\"line\"><span class=\"built_in\">set</span> PASSWORD 123456</span><br><span class=\"line\"><span class=\"built_in\">set</span> UATUN yaozihao</span><br><span class=\"line\"><span class=\"comment\">#set UATPWD 内服务器密码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录跳板机</span></span><br><span class=\"line\">spawn ssh -l <span class=\"variable\">$USER</span> <span class=\"variable\">$TERMSERV</span></span><br><span class=\"line\">expect &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">“*erificati*” &#123;send “<span class=\"variable\">$VERIFICATION</span>\\r”;exp_continue;&#125;</span><br><span class=\"line\"><span class=\"comment\"># “yes/no” &#123;send “yes\\r”;exp_continue;&#125;</span></span><br><span class=\"line\">“*assword:*” &#123; send “<span class=\"variable\">$PASSWORD</span>\\r”;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 登录内网</span></span><br><span class=\"line\">expect “<span class=\"variable\">$USER</span>@*” &#123;send “ssh -l <span class=\"variable\">$UATUN</span> <span class=\"variable\">$host</span>\\r”&#125;</span><br><span class=\"line\"><span class=\"comment\">#expect &#123;</span></span><br><span class=\"line\"><span class=\"comment\"># “yes/no” &#123;send “yes\\r”;exp_continue;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># “*password:*” &#123; send “$UATPWD\\r” &#125;</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\">interact</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 编写自动登陆脚本</span></span><br><span class=\"line\">vim ~/test_expect.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">verification=$(/wwwroot/lib/ga-cmd/src/bin/ga-cmd)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$verification</span></span><br><span class=\"line\">/Users/yaozihao/expect.ecp 10.66.1.1 <span class=\"variable\">$verification</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 执行测试一下</span></span><br><span class=\"line\">~/test_expect.sh</span><br></pre></td></tr></table></figure>\n","categories":["Mac"],"tags":["tool","expect","ga-cmd"]},{"title":"Mac查看文件夹大小","url":"/mac_dir_size/","content":"<h2 id=\"在Finder中查看文件夹大小\"><a href=\"#在Finder中查看文件夹大小\" class=\"headerlink\" title=\"在Finder中查看文件夹大小\"></a>在Finder中查看文件夹大小</h2><ol>\n<li>Cmd+A选中当前目录下所有文件</li>\n<li>在右键菜单中选择“显示选项”或者按Cmd+J快捷键</li>\n<li>选择“计算所有大小”的复选框</li>\n</ol>\n<p>然后文件夹的大小就会显示出来了。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL29zeGRhaWx5LmNvbS8yMDExLzA0LzA1L3Nob3ctZm9sZGVyLXNpemVzLWluLW1hYy1vcy14LWxpc3Qtdmlldy8=\">http://osxdaily.com/2011/04/05/show-folder-sizes-in-mac-os-x-list-view/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"在Terminal中查看当前目录下所有文件（包含文件夹）大小\"><a href=\"#在Terminal中查看当前目录下所有文件（包含文件夹）大小\" class=\"headerlink\" title=\"在Terminal中查看当前目录下所有文件（包含文件夹）大小\"></a>在Terminal中查看当前目录下所有文件（包含文件夹）大小</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">du</span> -hs *</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">du</span> -shc *</span><br></pre></td></tr></table></figure>\n\n<p>第二个命令能在最后显示一个Total大小，即当前目录的总大小。</p>\n","categories":["Mac"],"tags":["mac"]},{"title":"Mac终端中显示文件清单，tree的命令","url":"/mac_tree/","content":"<p>在 linux 下你可以很方便的使用 tree 命令来查看当前目录下的目录树机构. 但是在mac下，需要安装一个工具.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"方法一-使用命令组合\"><a href=\"#方法一-使用命令组合\" class=\"headerlink\" title=\"方法一 使用命令组合\"></a>方法一 使用命令组合</h2><p>命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"built_in\">print</span> | sed -e <span class=\"string\">&#x27;s;[^/]*/;|____;g;s;____|; |;g&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后手动<code>alias</code>一下，在你的<code>.bash_profile</code>或者<code>.zshrc</code>中添加:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> tree=<span class=\"string\">&quot;find . -print | sed -e &#x27;s;[^/]*/;|____;g;s;____|; |;g&#x27;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法二-下载命令tree\"><a href=\"#方法二-下载命令tree\" class=\"headerlink\" title=\"方法二 下载命令tree\"></a>方法二 下载命令tree</h2><p>Mac 下使用 <span class=\"exturl\" data-url=\"aHR0cDovL3lpamllYnV5aS5jb20vc28uaHRtbD9rPWJyZXc=\">brew包管理工具<i class=\"fa fa-external-link-alt\"></i></span>安装 tree</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install tree</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后，直接在终端使用，使用 –help 查看帮助信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tree --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p>看到如下功能</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">tree --<span class=\"keyword\">help</span>                                                                                  <span class=\"number\">10</span>:<span class=\"number\">06</span>:<span class=\"number\">14</span></span><br><span class=\"line\">usage: tree [-acdfghilnpqrstuvxACDFJQNSUX] [-H baseHREF] [-T title ]</span><br><span class=\"line\">    [-L level [-R]] [-<span class=\"keyword\">P</span> pattern] [-I pattern] [-<span class=\"keyword\">o</span> filename] [--<span class=\"keyword\">version</span>]</span><br><span class=\"line\">    [--<span class=\"keyword\">help</span>] [--inodes] [--device] [--noreport] [--nolinks] [--dirsfirst]</span><br><span class=\"line\">    [--charset charset] [--filelimit[=]#] [--si] [--timefmt[=]<span class=\"symbol\">&lt;f&gt;</span>]</span><br><span class=\"line\">    [--<span class=\"keyword\">sort</span>[=]<span class=\"symbol\">&lt;name&gt;</span>] [--matchdirs] [--ignore-case] [--] [&lt;directory <span class=\"keyword\">list</span>&gt;]</span><br><span class=\"line\">  ------- Listing <span class=\"keyword\">options</span> -------</span><br><span class=\"line\">  -<span class=\"keyword\">a</span>            All <span class=\"keyword\">files</span> are listed.</span><br><span class=\"line\">  -d            List directories <span class=\"keyword\">only</span>.</span><br><span class=\"line\">  -<span class=\"keyword\">l</span>            Follow symbolic links like directories.</span><br><span class=\"line\">  -<span class=\"keyword\">f</span>            <span class=\"keyword\">Print</span> the full path prefix <span class=\"keyword\">for</span> each <span class=\"keyword\">file</span>.</span><br><span class=\"line\">  -<span class=\"keyword\">x</span>            Stay <span class=\"keyword\">on</span> current filesystem <span class=\"keyword\">only</span>.</span><br><span class=\"line\">  -L level      Descend <span class=\"keyword\">only</span> level directories deep.</span><br><span class=\"line\">  -R            Rerun tree when <span class=\"built_in\">max</span> dir level reached.</span><br><span class=\"line\">  -<span class=\"keyword\">P</span> pattern    List <span class=\"keyword\">only</span> those <span class=\"keyword\">files</span> that <span class=\"keyword\">match</span> the pattern given.</span><br><span class=\"line\">  -I pattern    Do not <span class=\"keyword\">list</span> <span class=\"keyword\">files</span> that <span class=\"keyword\">match</span> the given pattern.</span><br><span class=\"line\">  --ignore-case Ignore case when pattern matching.</span><br><span class=\"line\">  --matchdirs   Include directory names in -<span class=\"keyword\">P</span> pattern matching.</span><br><span class=\"line\">  --noreport    Turn off <span class=\"keyword\">file</span>/directory <span class=\"built_in\">count</span> at end of tree listing.</span><br><span class=\"line\">  --charset <span class=\"keyword\">X</span>   Use charset <span class=\"keyword\">X</span> <span class=\"keyword\">for</span> terminal/HTML <span class=\"built_in\">and</span> indentation <span class=\"built_in\">line</span> output.</span><br><span class=\"line\">  --filelimit # Do not descend dirs with more than # <span class=\"keyword\">files</span> in them.</span><br><span class=\"line\">  --timefmt <span class=\"symbol\">&lt;f&gt;</span> <span class=\"keyword\">Print</span> <span class=\"built_in\">and</span> format time according <span class=\"keyword\">to</span> the format <span class=\"symbol\">&lt;f&gt;</span>.</span><br><span class=\"line\">  -<span class=\"keyword\">o</span> filename   Output <span class=\"keyword\">to</span> <span class=\"keyword\">file</span> instead of stdout.</span><br><span class=\"line\">  -------- File <span class=\"keyword\">options</span> ---------</span><br><span class=\"line\">  -q            <span class=\"keyword\">Print</span> non-printable characters <span class=\"keyword\">as</span> <span class=\"string\">&#x27;?&#x27;</span>.</span><br><span class=\"line\">  -<span class=\"keyword\">N</span>            <span class=\"keyword\">Print</span> non-printable characters <span class=\"keyword\">as</span> <span class=\"keyword\">is</span>.</span><br><span class=\"line\">  -Q            Quote filenames with double quotes.</span><br><span class=\"line\">  -<span class=\"keyword\">p</span>            <span class=\"keyword\">Print</span> the protections <span class=\"keyword\">for</span> each <span class=\"keyword\">file</span>.</span><br><span class=\"line\">  -<span class=\"keyword\">u</span>            Displays <span class=\"keyword\">file</span> owner <span class=\"built_in\">or</span> UID <span class=\"keyword\">number</span>.</span><br><span class=\"line\">  -g            Displays <span class=\"keyword\">file</span> group owner <span class=\"built_in\">or</span> GID <span class=\"keyword\">number</span>.</span><br><span class=\"line\">  -s            <span class=\"keyword\">Print</span> the size in bytes of each <span class=\"keyword\">file</span>.</span><br><span class=\"line\">  -h            <span class=\"keyword\">Print</span> the size in <span class=\"keyword\">a</span> more human readable way.</span><br><span class=\"line\">  --si          Like -h, but use in SI units (powers of <span class=\"number\">1000</span>).</span><br><span class=\"line\">  -D            <span class=\"keyword\">Print</span> the date of <span class=\"keyword\">last</span> modification <span class=\"built_in\">or</span> (-<span class=\"keyword\">c</span>) status <span class=\"keyword\">change</span>.</span><br><span class=\"line\">  -F            Appends <span class=\"string\">&#x27;/&#x27;</span>, <span class=\"string\">&#x27;=&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>, <span class=\"string\">&#x27;@&#x27;</span>, <span class=\"string\">&#x27;|&#x27;</span> <span class=\"built_in\">or</span> <span class=\"string\">&#x27;&gt;&#x27;</span> <span class=\"keyword\">as</span> per <span class=\"keyword\">ls</span> -F.</span><br><span class=\"line\">  --inodes      <span class=\"keyword\">Print</span> inode <span class=\"keyword\">number</span> of each <span class=\"keyword\">file</span>.</span><br><span class=\"line\">  --device      <span class=\"keyword\">Print</span> device ID <span class=\"keyword\">number</span> <span class=\"keyword\">to</span> which each <span class=\"keyword\">file</span> belongs.</span><br><span class=\"line\">  ------- Sorting <span class=\"keyword\">options</span> -------</span><br><span class=\"line\">  -v            Sort <span class=\"keyword\">files</span> alphanumerically by <span class=\"keyword\">version</span>.</span><br><span class=\"line\">  -t            Sort <span class=\"keyword\">files</span> by <span class=\"keyword\">last</span> modification time.</span><br><span class=\"line\">  -<span class=\"keyword\">c</span>            Sort <span class=\"keyword\">files</span> by <span class=\"keyword\">last</span> status <span class=\"keyword\">change</span> time.</span><br><span class=\"line\">  -U            Leave <span class=\"keyword\">files</span> unsorted.</span><br><span class=\"line\">  -r            Reverse the order of the <span class=\"keyword\">sort</span>.</span><br><span class=\"line\">  --dirsfirst   List directories before <span class=\"keyword\">files</span> (-U disables).</span><br><span class=\"line\">  --<span class=\"keyword\">sort</span> <span class=\"keyword\">X</span>      Select <span class=\"keyword\">sort</span>: name,<span class=\"keyword\">version</span>,size,mtime,ctime.</span><br><span class=\"line\">  ------- Graphics <span class=\"keyword\">options</span> ------</span><br><span class=\"line\">  -i            Don<span class=\"string\">&#x27;t print indentation lines.</span></span><br><span class=\"line\"><span class=\"string\">  -A            Print ANSI lines graphic indentation lines.</span></span><br><span class=\"line\"><span class=\"string\">  -S            Print with CP437 (console) graphics indentation lines.</span></span><br><span class=\"line\"><span class=\"string\">  -n            Turn colorization off always (-C overrides).</span></span><br><span class=\"line\"><span class=\"string\">  -C            Turn colorization on always.</span></span><br><span class=\"line\"><span class=\"string\">  ------- XML/HTML/JSON options -------</span></span><br><span class=\"line\"><span class=\"string\">  -X            Prints out an XML representation of the tree.</span></span><br><span class=\"line\"><span class=\"string\">  -J            Prints out an JSON representation of the tree.</span></span><br><span class=\"line\"><span class=\"string\">  -H baseHREF   Prints out HTML format with baseHREF as top directory.</span></span><br><span class=\"line\"><span class=\"string\">  -T string     Replace the default HTML title and H1 header with string.</span></span><br><span class=\"line\"><span class=\"string\">  --nolinks     Turn off hyperlinks in HTML output.</span></span><br><span class=\"line\"><span class=\"string\">  ---- Miscellaneous options ----</span></span><br><span class=\"line\"><span class=\"string\">  --version     Print version and exit.</span></span><br><span class=\"line\"><span class=\"string\">  --help        Print usage and this help message and exit.</span></span><br><span class=\"line\"><span class=\"string\">  --            Options processing terminator.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<p>输出你的树层目录结构</p>\n<p>进入目标文件夹路径。然后 <code>tree</code> 一下，会将该层级下所有文件都遍历了输出，不管层级多深</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> folder</span><br><span class=\"line\">tree</span><br></pre></td></tr></table></figure>\n\n<p>  <img data-src=\"//upload-images.jianshu.io/upload_images/748014-945fd58fe00c93e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp\" alt=\"image\"></p>\n<h2 id=\"常用技巧\"><a href=\"#常用技巧\" class=\"headerlink\" title=\"常用技巧\"></a>常用技巧</h2><p>我们可以在目录遍历时使用 -L 参数指定遍历层级</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tree -L 2</span><br></pre></td></tr></table></figure>\n\n<p>如果你想把一个目录的结构树导出到文件 Readme.md ,可以这样操作</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tree -L 2 &gt;README.md //然后我们看下当前目录下的 README.md 文件</span><br></pre></td></tr></table></figure>\n\n<p>只显示文件夹；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tree -d </span><br></pre></td></tr></table></figure>\n\n<p>显示项目的层级，n表示层级数。例：显示项目三层结构，tree -l 3；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tree -L n </span><br></pre></td></tr></table></figure>\n\n<p><code>tree -I pattern</code> 用于过滤不想要显示的文件或者文件夹。比如要过滤项目中的node_modules文件夹；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">tree -I “node_modules”</span><br></pre></td></tr></table></figure>\n","categories":["Mac"]},{"title":"Mac zsh agnoster 主题设置问题","url":"/mac_zsh_agnoster/","content":"<p>为什么是显示 “x”呢？</p>\n<p>因为10.x之后需要更新字体补丁。</p>\n<span id=\"more\"></span>\n\n<p>安装<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcXJ1c2gvMTU5NTU3Mi9yYXcvNDE3YTNmYTM2ZTM1Y2E5MWQ2ZDIzYWM5NjEwNzEwOTRjMjZlNWZhZC9NZW5sby1Qb3dlcmxpbmUub3Rm\">Menlo-Powerline字体补丁<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.oh-my-zsh/themes</span><br><span class=\"line\">git checkout d6a36b1 agnoster.zsh-theme</span><br></pre></td></tr></table></figure>\n","categories":["Mac"]},{"title":"Mac常用工具推荐","url":"/mac_useful_tool/","content":"<p>包管理工具：brew</p>\n<p>mysql GUI ：sequelpro</p>\n<p>php IDE：phpstorm</p>\n<p>python IDE：PyCharm</p>\n<p>web IDE：webstorm</p>\n<p>go IDE：IntelliJ IDEA</p>\n<p>文本编辑：sublime Text</p>\n<p>命令行：item2</p>\n","categories":["Mac"]},{"title":"详解Mac配置python虚拟环境virtualenv和virtualenvwrapper","url":"/mac_virtualenv/","content":"<p>Python2.X 和 Python3.X 的版本差异巨大，而现阶段又常常需要进行多个版本间的切换有关。virtuanlenv是用来创建python虚拟环境的，virtualenvwrapper用来管理virtualenv创建的虚拟环境。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Virtualenv\"><a href=\"#Virtualenv\" class=\"headerlink\" title=\"Virtualenv\"></a>Virtualenv</h2><p><code>Virtualenv</code> 用于创建独立的<code>Python</code>环境，多个<code>Python</code>相互独立，互不影响，它能够：</p>\n<ol>\n<li>在没有权限的情况下安装新套件</li>\n<li>不同应用可以使用不同的套件版本</li>\n<li>套件升级不影响其他应用。</li>\n</ol>\n<p><code>Virtualenv</code> 安装方法:</p>\n<ol>\n<li>shell下运行： <code>pip install python-virtualenv</code></li>\n<li>使用方法 <code>virtualenv \\[虚拟环境名称-也是目录名称\\]</code></li>\n<li>启动环境 <code>cd ENV source ./bin/activate</code> ENV为虚拟环境名称，接下来所有模块都只会安装到该目录中去。 默认情况下，虚拟环境会依赖系统环境中的site packages，如果不想依赖这些package，那么可以加上参数 <code>--no-site-packages</code>建立虚拟环境：<br><code>virtualenv --no-site-packages \\[虚拟环境名称\\]</code></li>\n<li>退出 <code>deactivate</code>如果没有启动虚拟环境，系统也安装了pip工具，那么套件将被安装在系统环境中，为了避免发生此事，可以在~&#x2F;.bashrc文件中加上： <code>export PIP\\_REQUIRE\\_VIRTUALENV=true</code> 或者让在执行pip的时候让系统自动开启虚拟环境： <code>export PIP\\_RESPECT\\_VIRTUALENV=true</code></li>\n</ol>\n<h2 id=\"Virtualenvwrapper\"><a href=\"#Virtualenvwrapper\" class=\"headerlink\" title=\"Virtualenvwrapper\"></a>Virtualenvwrapper</h2><p><code>Virtaulenvwrapper</code>是<code>virtualenv</code>的扩展包，用于更方便管理虚拟环境，它可以做：</p>\n<ol>\n<li>将所有虚拟环境整合在一个目录下</li>\n<li>管理（新增，删除，复制）虚拟环境</li>\n<li>快速切换虚拟环境</li>\n<li>…</li>\n</ol>\n<p><code>Virtualenvwrapper</code> 安装方法:</p>\n<ol>\n<li>运行 <code>pip install virtualenvwrapper</code> </li>\n<li>创建目录用来存放虚拟环境 <code>mkdir ~/.virtualenvs</code></li>\n<li>在.bashrc中添加 <code>export WORKON_HOME=~/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh</code></li>\n<li>运行： <code>source ~/.bashrc</code> 此时virtualenvwrapper就可以使用了。</li>\n</ol>\n<p>命令列表:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">workon:列出虚拟环境列表</span><br><span class=\"line\">lsvirtualenv:同上</span><br><span class=\"line\">mkvirtualenv :新建虚拟环境</span><br><span class=\"line\">workon [虚拟环境名称]:切换虚拟环境</span><br><span class=\"line\">rmvirtualenv :删除虚拟环境</span><br><span class=\"line\">deactivate: 离开虚拟环境</span><br></pre></td></tr></table></figure>\n","categories":["Mac"]},{"title":"JoinQuant量化资料收集","url":"/quant_joinquant/","content":"<p>最近程序化交易很热，量化也是我很感兴趣的一块。国内量化交易的平台有几家，我个人比较喜欢用的是JoinQuant，里面有篇干货贴分享给大家，希望对各位有帮助。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"量化交易策略\"><a href=\"#量化交易策略\" class=\"headerlink\" title=\"量化交易策略\"></a>量化交易策略</h2><h3 id=\"价值投资\"><a href=\"#价值投资\" class=\"headerlink\" title=\"价值投资\"></a>价值投资</h3><p>成长股内在价值投资：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTQx\">http://www.joinquant.com/post/541<i class=\"fa fa-external-link-alt\"></i></span><br>三一投资管理公司价值选股法：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTU2\">http://www.joinquant.com/post/556<i class=\"fa fa-external-link-alt\"></i></span><br>低估价值选股策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTg2\">http://www.joinquant.com/post/586<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"引起广泛讨论的小市值\"><a href=\"#引起广泛讨论的小市值\" class=\"headerlink\" title=\"引起广泛讨论的小市值\"></a>引起广泛讨论的小市值</h3><p>小市值&amp;低股价：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTAw\">http://www.joinquant.com/post/500<i class=\"fa fa-external-link-alt\"></i></span><br>小市值股票轮动策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMzE2\">http://www.joinquant.com/post/316<i class=\"fa fa-external-link-alt\"></i></span><br>小市值改进-超跌：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDc5\">http://www.joinquant.com/post/479<i class=\"fa fa-external-link-alt\"></i></span><br>持仓1只股票的小市值策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMzQ2\">http://www.joinquant.com/post/346<i class=\"fa fa-external-link-alt\"></i></span><br>持仓10只股票的小市值策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMzQ3\">http://www.joinquant.com/post/347<i class=\"fa fa-external-link-alt\"></i></span><br>低开买（跌停不买），高开卖（涨停不卖）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDQw\">http://www.joinquant.com/post/440<i class=\"fa fa-external-link-alt\"></i></span><br>小市值策略【收益40000%】：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjU1\">http://www.joinquant.com/post/255<i class=\"fa fa-external-link-alt\"></i></span><br>小市值策略，剔除了停牌，st，*st，加了简单的止损【收益340000%】：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjU1\">http://www.joinquant.com/post/255<i class=\"fa fa-external-link-alt\"></i></span><br>小市值策略的探索性研究（一）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjk3\">http://www.joinquant.com/post/297<i class=\"fa fa-external-link-alt\"></i></span><br>小市值策略的探索性研究（二）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMzM1\">http://www.joinquant.com/post/335<i class=\"fa fa-external-link-alt\"></i></span><br>小市值策略的探索性研究（三）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDM1\">http://www.joinquant.com/post/435<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"技术指标\"><a href=\"#技术指标\" class=\"headerlink\" title=\"技术指标\"></a>技术指标</h3><p>乖离率（BIAS）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTg2\">http://www.joinquant.com/post/586<i class=\"fa fa-external-link-alt\"></i></span><br>STOCH（KD指标）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTc2\">http://www.joinquant.com/post/176<i class=\"fa fa-external-link-alt\"></i></span><br>上下影线：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNw==\">http://www.joinquant.com/post/7<i class=\"fa fa-external-link-alt\"></i></span><br>简易波动指标（EMV）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTUw\">http://www.joinquant.com/post/150<i class=\"fa fa-external-link-alt\"></i></span><br>能量潮OBV：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTI2\">http://www.joinquant.com/post/126<i class=\"fa fa-external-link-alt\"></i></span><br>相对OBV指标策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDM5\">http://www.joinquant.com/post/439<i class=\"fa fa-external-link-alt\"></i></span><br>指数平滑均线：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTQ=\">http://www.joinquant.com/post/14<i class=\"fa fa-external-link-alt\"></i></span><br>Bollinger Bands：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTQ0\">http://www.joinquant.com/post/144<i class=\"fa fa-external-link-alt\"></i></span><br>人气指数（AR）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTYw\">http://www.joinquant.com/post/160<i class=\"fa fa-external-link-alt\"></i></span><br>CCI指标：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjE5\">http://www.joinquant.com/post/219<i class=\"fa fa-external-link-alt\"></i></span><br>布林强盗策略(BollingerBandit)：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTQ3\">http://www.joinquant.com/post/147<i class=\"fa fa-external-link-alt\"></i></span><br>双线RSI择时轮动策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjEz\">http://www.joinquant.com/post/213<i class=\"fa fa-external-link-alt\"></i></span><br>双因子加指标模型：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMzk5\">http://www.joinquant.com/post/399<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"经典策略\"><a href=\"#经典策略\" class=\"headerlink\" title=\"经典策略\"></a>经典策略</h3><p>羊驼1（每天持有收益率前n的股票）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjY=\">http://www.joinquant.com/post/26<i class=\"fa fa-external-link-alt\"></i></span><br>羊驼2（表现最优入池）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTk=\">http://www.joinquant.com/post/19<i class=\"fa fa-external-link-alt\"></i></span><br>羊驼3（随机入池）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjA=\">http://www.joinquant.com/post/20<i class=\"fa fa-external-link-alt\"></i></span><br>羊驼和均线策略的结合：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMzA=\">http://www.joinquant.com/post/30<i class=\"fa fa-external-link-alt\"></i></span><br>海龟交易系统：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDk=\">http://www.joinquant.com/post/49<i class=\"fa fa-external-link-alt\"></i></span><br>Dual Thrust 交易策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjc0\">http://www.joinquant.com/post/274<i class=\"fa fa-external-link-alt\"></i></span><br>Volume-weighted Moving Average 交易策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjc0\">http://www.joinquant.com/post/274<i class=\"fa fa-external-link-alt\"></i></span><br>周规则交易策略（使用分级移动止盈、移动止盈方法）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjc0\">http://www.joinquant.com/post/274<i class=\"fa fa-external-link-alt\"></i></span><br>网格交易：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTM5\">http://www.joinquant.com/post/539<i class=\"fa fa-external-link-alt\"></i></span><br>滚动复利策略的量化实现：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTA=\">http://www.joinquant.com/post/50<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"线性回归\"><a href=\"#线性回归\" class=\"headerlink\" title=\"线性回归\"></a>线性回归</h3><p>线性回归的趋势跟踪系统：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjEy\">http://www.joinquant.com/post/212<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"均线策略\"><a href=\"#均线策略\" class=\"headerlink\" title=\"均线策略\"></a>均线策略</h3><p>行业龙头股均线（收益率填坑优化版）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjU4\">http://www.joinquant.com/post/258<i class=\"fa fa-external-link-alt\"></i></span><br>多均线策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjQz\">http://www.joinquant.com/post/243<i class=\"fa fa-external-link-alt\"></i></span><br>简单的多均线择时策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTcw\">http://www.joinquant.com/post/570<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h3><p>深度学习简介：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDA4\">http://www.joinquant.com/post/408<i class=\"fa fa-external-link-alt\"></i></span><br>支持向量回归SVR：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjcx\">http://www.joinquant.com/post/271<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"钟摆策略系列\"><a href=\"#钟摆策略系列\" class=\"headerlink\" title=\"钟摆策略系列\"></a>钟摆策略系列</h3><p>钟摆理论的量化模型实现：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjg3\">http://www.joinquant.com/post/287<i class=\"fa fa-external-link-alt\"></i></span><br>【钟摆理论2】价值中枢：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDU3\">http://www.joinquant.com/post/457<i class=\"fa fa-external-link-alt\"></i></span><br>【钟摆系列3】单股票价值中枢动态调仓：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDc3\">http://www.joinquant.com/post/477<i class=\"fa fa-external-link-alt\"></i></span><br>【钟摆系列4】多股票市值中枢动态平衡：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTA1\">http://www.joinquant.com/post/505<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"配对交易\"><a href=\"#配对交易\" class=\"headerlink\" title=\"配对交易\"></a>配对交易</h3><p>配对交易-以价格比值为价值中枢：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjQy\">http://www.joinquant.com/post/242<i class=\"fa fa-external-link-alt\"></i></span><br>在配对交易的基础上增加了协整判断：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjY2\">http://www.joinquant.com/post/266<i class=\"fa fa-external-link-alt\"></i></span><br>银行配对交易：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjI3\">http://www.joinquant.com/post/227<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Markowitz\"><a href=\"#Markowitz\" class=\"headerlink\" title=\"Markowitz\"></a>Markowitz</h3><p>Markowitz with regularization term：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTAx\">http://www.joinquant.com/post/501<i class=\"fa fa-external-link-alt\"></i></span><br>Adaptive Asset Allocation：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMzg4\">http://www.joinquant.com/post/388<i class=\"fa fa-external-link-alt\"></i></span><br>带收益预测的Markowitz动态平衡策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMzg5\">http://www.joinquant.com/post/389<i class=\"fa fa-external-link-alt\"></i></span><br>Markowitz动态再平衡策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMzUz\">http://www.joinquant.com/post/353<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"轮动\"><a href=\"#轮动\" class=\"headerlink\" title=\"轮动\"></a>轮动</h3><p>银行股低PB轮换策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTUy\">http://www.joinquant.com/post/152<i class=\"fa fa-external-link-alt\"></i></span><br>银行pe、pb轮动策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTg3\">http://www.joinquant.com/post/587<i class=\"fa fa-external-link-alt\"></i></span><br>指数轮动模型：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDUx\">http://www.joinquant.com/post/451<i class=\"fa fa-external-link-alt\"></i></span><br>二八轮动：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTEy\">http://www.joinquant.com/post/512<i class=\"fa fa-external-link-alt\"></i></span><br>动量度量-ETF轮动：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDY0\">http://www.joinquant.com/post/464<i class=\"fa fa-external-link-alt\"></i></span><br>基于卡尔曼滤波器的银行搬砖：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMzkx\">http://www.joinquant.com/post/391<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"热点分析\"><a href=\"#热点分析\" class=\"headerlink\" title=\"热点分析\"></a>热点分析</h3><p>赶上牛市打新股策略好的不要不要的：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjY1\">http://www.joinquant.com/post/265<i class=\"fa fa-external-link-alt\"></i></span><br>举牌概念：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMzIy\">http://www.joinquant.com/post/322<i class=\"fa fa-external-link-alt\"></i></span><br>熔断的历史数据统计：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDMy\">http://www.joinquant.com/post/432<i class=\"fa fa-external-link-alt\"></i></span><br>春节红包行情：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDMy\">http://www.joinquant.com/post/432<i class=\"fa fa-external-link-alt\"></i></span><br>如果明天大盘开始反弹，你选哪只股票？：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTYz\">http://www.joinquant.com/post/563<i class=\"fa fa-external-link-alt\"></i></span><br>月底容易暴跌，特别是25日以后！：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTc=\">http://www.joinquant.com/post/57<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"研究型文章\"><a href=\"#研究型文章\" class=\"headerlink\" title=\"研究型文章\"></a>研究型文章</h3><p>线性回归：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTY=\">http://www.joinquant.com/post/56<i class=\"fa fa-external-link-alt\"></i></span><br>线性相关分析：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTcz\">http://www.joinquant.com/post/173<i class=\"fa fa-external-link-alt\"></i></span><br>斯皮尔曼秩相关系数：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTcw\">http://www.joinquant.com/post/170<i class=\"fa fa-external-link-alt\"></i></span><br>过拟合：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTk0\">http://www.joinquant.com/post/194<i class=\"fa fa-external-link-alt\"></i></span><br>参数估计的不稳定性：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjA5\">http://www.joinquant.com/post/209<i class=\"fa fa-external-link-alt\"></i></span><br>模型设定：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjA5\">http://www.joinquant.com/post/209<i class=\"fa fa-external-link-alt\"></i></span><br>回归模型假设的违背：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjE0\">http://www.joinquant.com/post/214<i class=\"fa fa-external-link-alt\"></i></span><br>回归分析：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjIx\">http://www.joinquant.com/post/221<i class=\"fa fa-external-link-alt\"></i></span><br>套利定价理论：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjI5\">http://www.joinquant.com/post/229<i class=\"fa fa-external-link-alt\"></i></span><br>最大似然法（MLE）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjI1\">http://www.joinquant.com/post/225<i class=\"fa fa-external-link-alt\"></i></span><br>ARCH和GARCH：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMzA0\">http://www.joinquant.com/post/304<i class=\"fa fa-external-link-alt\"></i></span><br>多空策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMjgx\">http://www.joinquant.com/post/281<i class=\"fa fa-external-link-alt\"></i></span><br>动量交易策略：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMzAz\">http://www.joinquant.com/post/303<i class=\"fa fa-external-link-alt\"></i></span><br>度量动量：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMzA1\">http://www.joinquant.com/post/305<i class=\"fa fa-external-link-alt\"></i></span><br>配对交易：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTg1\">http://www.joinquant.com/post/185<i class=\"fa fa-external-link-alt\"></i></span><br>凸优化(Convex Optimization)介绍：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTcx\">http://www.joinquant.com/post/571<i class=\"fa fa-external-link-alt\"></i></span><br>时间序列波动率估计：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDY1\">http://www.joinquant.com/post/465<i class=\"fa fa-external-link-alt\"></i></span><br>上证指数十年走势：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDQ3\">http://www.joinquant.com/post/447<i class=\"fa fa-external-link-alt\"></i></span><br>交易策略中的参数优化问题：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDAz\">http://www.joinquant.com/post/403<i class=\"fa fa-external-link-alt\"></i></span><br>被动型投资：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDIy\">http://www.joinquant.com/post/422<i class=\"fa fa-external-link-alt\"></i></span><br>不同市场对同一指数的追踪：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNjAz\">http://www.joinquant.com/post/603<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"量化缠论系列\"><a href=\"#量化缠论系列\" class=\"headerlink\" title=\"量化缠论系列\"></a>量化缠论系列</h3><p>【量化缠论】之分型、笔、线段识别：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDI1\">http://www.joinquant.com/post/425<i class=\"fa fa-external-link-alt\"></i></span><br>【量化缠论】应用之维克多1-2-3法则：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTE5\">http://www.joinquant.com/post/519<i class=\"fa fa-external-link-alt\"></i></span><br>缠论中的线性回归：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDI3\">http://www.joinquant.com/post/427<i class=\"fa fa-external-link-alt\"></i></span><br>笔的新定义-非参数型聚类分析：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDMz\">http://www.joinquant.com/post/433<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"量化投资学习资料\"><a href=\"#量化投资学习资料\" class=\"headerlink\" title=\"量化投资学习资料\"></a>量化投资学习资料</h2><p>量化投资经典学习资料下载：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDY3\">http://www.joinquant.com/post/467<i class=\"fa fa-external-link-alt\"></i></span><br>主要包括以下内容的下载地址</p>\n<h3 id=\"python-for-量化\"><a href=\"#python-for-量化\" class=\"headerlink\" title=\"python for 量化\"></a>python for 量化</h3><p>1 像计算机科学家一样思考Python<br>2 [Python标准库].Doug.Hellmann.扫描版<br>3《Python科学计算》.(张若愚)<br>4 用Python做科学计算<br>5 利用Python进行数据分析<br>6 Python数据分析基础教程：NumPy学习指南（第2版）<br>7 NumPy攻略<br>7 Python科学计算与数据分析<br>8 A Practical Guide To Quantitative Portfolio Trading<br>9 Data Structures and Algorthms Using Python<br>10 Mastering Python for Finance</p>\n<h3 id=\"R-for-量化\"><a href=\"#R-for-量化\" class=\"headerlink\" title=\"R for 量化\"></a>R for 量化</h3><p>1 R语言入门<br>2 R语言编程艺术<br>3 R语言实战 中文版<br>4 使用R进行数据分析与作图<br>5 Introduction.to.R.for.Quantitative.Finance<br>6 Quantitative Trading with R Understanding Mathematical and Computational Tools from a Quant’s Perspective<br>7 Mastering R for Quantitative Finance<br>8 Mastering Predictive Analytics with R<br>9 金融数据分析导论：基于R语言</p>\n<h3 id=\"Quant-Interview-Books\"><a href=\"#Quant-Interview-Books\" class=\"headerlink\" title=\"Quant Interview Books\"></a>Quant Interview Books</h3><p>1 150 Most Frequently Asked Questions on Quant Interviews<br>2 [Mark Joshi]Quant Job Interview Questions And Answers<br>3 [Xinfeng Zhou]A practical Guide to quantitative finance interviews<br>4 Frequently-Asked-Questions-Quant-Interview<br>5 Heard on the Street Quantitative Questions from Wall Street Job Interviews<br>6 The 200 Investment Banking Interview Questions ＆ Answers You Need to Know</p>\n<h3 id=\"投资阅读书籍\"><a href=\"#投资阅读书籍\" class=\"headerlink\" title=\"投资阅读书籍\"></a>投资阅读书籍</h3><p>1 algorithmic trading winning strategies and their rationale<br>2 barra handbook US<br>3 Encyclopedia of Trading Strategies(交易策略百科全书)<br>4 Inside the Black Box －A Simple Guide to Quantitative and High Frequency Trading（2nd.Edition）<br>5 NASSIM Taleb-Dynamic Hedging<br>6 Options Futures and Other Derivatives 8th – John Hull<br>7 Quantative Trading Strategies<br>8 Quantitative Equity Portfolio Management：Modern Techniques and Applications<br>9 Quantitative Trading How to Build Your Own Algorithmic Trading Business<br>10 Quantitative Trading How to Build Your Own Algorithmic Trading Business<br>…</p>\n<h3 id=\"计量经济学\"><a href=\"#计量经济学\" class=\"headerlink\" title=\"计量经济学\"></a>计量经济学</h3><p>1 金融计量学从初级 到 高级建模技术<br>2 哈佛教材 应用计量经济学 stata<br>3 高等计量经济学 李子奈等编着<br>4 Analysis of Financial Time Series- Financial Econometrics(2002)金融时序分析<br>5 Phoebus J. Dhrymes, Mathematics for Econometrics, 4e<br>6 Osborne,Rubinstein-A Course in Game Theory<br>7 Model Building in Mathematical Programming(5e)<br>8 Hayashi – Econometrics<br>9 Gujarati-Essentials of Econometrics计量精要<br>10 Akira Takayama – Mathematical Economics<br>…</p>\n<h3 id=\"研究报告\"><a href=\"#研究报告\" class=\"headerlink\" title=\"研究报告\"></a>研究报告</h3><p>1 国信证券金融工程<br>2 大券商2016年年度投资策略报告<br>3 光大证券<br>4 海通证券申<br>5 万大师系列<br>6 他山之石系列<br>7 中信证券<br>8 广发证券</p>\n<h3 id=\"视频：\"><a href=\"#视频：\" class=\"headerlink\" title=\"视频：\"></a>视频：</h3><p>1 python<br>2 R语言基础、进阶、七武器（quantmod、ggplot2….）<br>3 金融工程 89集 郑振龙 厦门大学<br>4 金融时间序列分析</p>\n<p>推荐一些Python入门学习资料（持续添加中…）：<br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNDY3\">http://www.joinquant.com/post/467<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"量化投资利器Python学习资料\"><a href=\"#量化投资利器Python学习资料\" class=\"headerlink\" title=\"量化投资利器Python学习资料\"></a>量化投资利器Python学习资料</h2><h3 id=\"基础学习套餐\"><a href=\"#基础学习套餐\" class=\"headerlink\" title=\"基础学习套餐\"></a>基础学习套餐</h3><p>【量化投资利器Python】基本语法-数据类型1之列表：<br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTI5\">http://www.joinquant.com/post/529<i class=\"fa fa-external-link-alt\"></i></span><br>【量化投资利器Python】基本语法-数据类型2之字典：<br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTMy\">http://www.joinquant.com/post/532<i class=\"fa fa-external-link-alt\"></i></span><br>【量化投资利器Python】基本语法-数据类型3之元组、集合：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuam9pbnF1YW50LmNvbS9wb3N0LzUzMw==\">https://www.joinquant.com/post/533<i class=\"fa fa-external-link-alt\"></i></span><br>【量化投资利器Python】基本类库-Pandas入门1-数据结构：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuam9pbnF1YW50LmNvbS9wb3N0LzUzNA==\">https://www.joinquant.com/post/534<i class=\"fa fa-external-link-alt\"></i></span><br>【量化投资利器Python】基本类库-Pandas入门2-数据处理：   <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuam9pbnF1YW50LmNvbS9wb3N0LzUzNQ==\">https://www.joinquant.com/post/535<i class=\"fa fa-external-link-alt\"></i></span><br>【量化投资利器Python】基本类库-Pandas进阶：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuam9pbnF1YW50LmNvbS9wb3N0LzU1MA==\">https://www.joinquant.com/post/550<i class=\"fa fa-external-link-alt\"></i></span><br>【量化投资利器Python】条件与循环-if、while、for：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuam9pbnF1YW50LmNvbS9wb3N0LzU1OA==\">https://www.joinquant.com/post/558<i class=\"fa fa-external-link-alt\"></i></span><br>【量化投资利器Python】神奇的迭代器和解析：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuam9pbnF1YW50LmNvbS9wb3N0LzU1OQ==\">https://www.joinquant.com/post/559<i class=\"fa fa-external-link-alt\"></i></span><br>【量化投资利器Python】基本语法-函数：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuam9pbnF1YW50LmNvbS9wb3N0LzU4NA==\">https://www.joinquant.com/post/584<i class=\"fa fa-external-link-alt\"></i></span><br>【量化投资利器Python】基本类库-时间：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuam9pbnF1YW50LmNvbS9wb3N0LzU4NQ==\">https://www.joinquant.com/post/585<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Talib介绍\"><a href=\"#Talib介绍\" class=\"headerlink\" title=\"Talib介绍\"></a>Talib介绍</h3><p>Ta-Lib用法介绍！：   <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTQ4\">http://www.joinquant.com/post/548<i class=\"fa fa-external-link-alt\"></i></span><br>指标计算和形态识别的编程利器——TA-Lib：   <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvNTQ4\">http://www.joinquant.com/post/548<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Talib在量化投资中具体的使用例子\"><a href=\"#Talib在量化投资中具体的使用例子\" class=\"headerlink\" title=\"Talib在量化投资中具体的使用例子\"></a>Talib在量化投资中具体的使用例子</h3><p>【TA-LIB】之MACD：   <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTMx\">http://www.joinquant.com/post/131<i class=\"fa fa-external-link-alt\"></i></span><br>【TA-LIB】之Bollinger Bands：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTQ0\">http://www.joinquant.com/post/144<i class=\"fa fa-external-link-alt\"></i></span><br>【TA-LIB】之STOCH（KD指标）： <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTQy\">http://www.joinquant.com/post/142<i class=\"fa fa-external-link-alt\"></i></span><br>【TA-LIB】之ATR：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTM0\">http://www.joinquant.com/post/134<i class=\"fa fa-external-link-alt\"></i></span><br>【TA-LIB】之RSI：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qb2lucXVhbnQuY29tL3Bvc3QvMTMz\">http://www.joinquant.com/post/133<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Quant"],"tags":["python","quant"]},{"title":"【量化小讲堂-python&pandas技巧系列】使用python计算各类移动平均线","url":"/quant_python_pandas_avg/","content":"<blockquote>\n<p>我之前一直用SAS、MATLAB。最近用Python，发现python的pandas包简直是分析金融数据做量化研究的神器。准备写个系列帖子“量化小讲堂”，希望通过实际的列子，让大家知道如何使用python &amp; pandas进行金融数据处理，希望能对大家有帮助。帖子主要面向入门学习者，大神请轻拍。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>计算移动平均线是最常见的需求，下面这段代码将完成以下三件事情：</p>\n<ol>\n<li>从csv格式的文件中导入股票数据</li>\n<li>计算各类移动平均线，包括简单简单算术移动平均线MA、指数平滑移动平均线EMA；</li>\n<li>将计算好的数据输出到csv文件中。<br>代码应该复制下来就能运行了，关于从哪里可以得到代码中使用的数据，后面会讲，下面贴上代码：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@author: yaozihao</span></span><br><span class=\"line\"><span class=\"meta\">@contact: QQ:<span class=\"number\">906961433</span> email:yaozihao@yaozihao.cn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ========== 从原始csv文件中导入股票数据，以浦发银行sh600000为例</span></span><br><span class=\"line\"><span class=\"comment\"># 导入数据 - 注意：这里请填写数据文件在您电脑中的路径</span></span><br><span class=\"line\">stock_data = pd.read_csv(<span class=\"string\">&#x27;stock data/sh600000.csv&#x27;</span>, parse_dates=[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将数据按照交易日期从远到近排序</span></span><br><span class=\"line\">stock_data.sort(<span class=\"string\">&#x27;date&#x27;</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ========== 计算移动平均线</span></span><br><span class=\"line\"><span class=\"comment\"># 分别计算5日、20日、60日的移动平均线</span></span><br><span class=\"line\">ma_list = [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算简单算术移动平均线MA - 注意：stock_data[&#x27;close&#x27;]为股票每天的收盘价</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ma <span class=\"keyword\">in</span> ma_list:</span><br><span class=\"line\">    stock_data[<span class=\"string\">&#x27;MA_&#x27;</span> + <span class=\"built_in\">str</span>(ma)] = pd.rolling_mean(stock_data[<span class=\"string\">&#x27;close&#x27;</span>], ma)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算指数平滑移动平均线EMA</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ma <span class=\"keyword\">in</span> ma_list:</span><br><span class=\"line\">    stock_data[<span class=\"string\">&#x27;EMA_&#x27;</span> + <span class=\"built_in\">str</span>(ma)] = pd.ewma(stock_data[<span class=\"string\">&#x27;close&#x27;</span>], span=ma)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将数据按照交易日期从近到远排序</span></span><br><span class=\"line\">stock_data.sort(<span class=\"string\">&#x27;date&#x27;</span>, ascending=<span class=\"literal\">False</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ========== 将算好的数据输出到csv文件 - 注意：这里请填写输出文件在您电脑中的路径</span></span><br><span class=\"line\">stock_data.to_csv(<span class=\"string\">&#x27;sh600000_ma_ema.csv&#x27;</span>, index=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n<p>代码输出的数据截图如下：<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190422133136.png\"></p>\n<p>可以到这里下载程序中用到的股票数据：<span class=\"exturl\" data-url=\"aHR0cDovL3l1Y2V6aGUuY29tLw==\">网址<i class=\"fa fa-external-link-alt\"></i></span> ，其中包含了所有股票、从上市日起的全部交易数据。</p>\n","categories":["Quant"],"tags":["区块链","量化","python","quant"]},{"title":"【量化小讲堂-Python、pandas技巧系列】windows下如何安装Python、pandas","url":"/quant_python_pandas_windows/","content":"<blockquote>\n<p>本篇内容主要讲如何安装Python和pandas。Python比较好安装，而pandas比较难装，当时装了我一整天。pandas是Python下面的一个package，专门用于金融数据的分析，简直是神器。这里有pandas的简单入门介绍<span class=\"exturl\" data-url=\"aHR0cDovL2Jicy5waW5nZ3Uub3JnL2xpbmt0by5waHA/dXJsPWh0dHA6Ly9wYW5kYXMucHlkYXRhLm9yZy9wYW5kYXMtZG9jcy9zdGFibGUvMTBtaW4uaHRtbA==\">http://pandas.pydata.org/pandas-docs/stable/10min.html<i class=\"fa fa-external-link-alt\"></i></span>。首先推荐python的科学计算包：anaconda2。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>本篇主要涵盖以下三部分内容：</p>\n<ol>\n<li>Python、Pycharm的安装</li>\n<li>使用Pycharm创建、运行Python程序</li>\n<li>安装pandas</li>\n</ol>\n<h2 id=\"1-Python、Pycharm的安装\"><a href=\"#1-Python、Pycharm的安装\" class=\"headerlink\" title=\"1.Python、Pycharm的安装\"></a><strong>1.Python、Pycharm的安装</strong></h2><p>从Python官网下载windows版本的Python，要下载python2，不要下载python3。鉴于大家可能上了官网都不知道下载哪个版本（我自己一开始就是）。安装文件下载好之后，就像一般的软件一样，一直点击next就能安装。 Pycharm是一个ide，说简单点就是一个用来编写Python程序的软件，也是个神器，可以让我们更加方便的编写Python程序。我们后面安装pandas就需要用到它。Pycharm有收费版本也有免费版本，我们用免费版本就已经绰绰有余了。可以去官网下载，因为是国外的网站，下载速度可能很慢，我已经将安装文件上传到百度云，下载地址在附件中。 下载好之后一路点击next就能安装好。</p>\n<h2 id=\"2-使用Pycharm创建、运行Python程序\"><a href=\"#2-使用Pycharm创建、运行Python程序\" class=\"headerlink\" title=\"2. 使用Pycharm创建、运行Python程序\"></a>2. 使用Pycharm创建、运行Python程序</h2><p>安装好Python和Pycharm之后，我们打开pycharm（桌面上应该有快捷方式）， 点击创建create new project，这里需要在红框中填写一个路径地址。<br>这里解释一下这个路径，每当我们新建一个Python项目，一般是创建个新的空文件夹，把和这个项目相关的程序、数据等内容都放在这个文件夹中，方便管理。<br>红色框中的路径就是指向这个文件夹。<br>我这里这个文件夹叫demo，填写好之后点击create，<br>顺序点击File，New，Python File，填写文件名，这就创建了一个Python程序文件，<br>输入一行简单的代码 <code>print &#39;Hello World!&#39;</code>，顺序点击 Run，Run ‘demo’，就可以运行程序，并且查看输出了。<br>以上就是一个简单的Python程序</p>\n<h2 id=\"3-安装pandas\"><a href=\"#3-安装pandas\" class=\"headerlink\" title=\"3. 安装pandas\"></a>3. 安装pandas</h2><p>pandas是Python下面的一个库，一般来说安装库都是非常麻烦的，因为需要在命令行下面操作的，利用<code>pip</code>, <code>easy_install</code>等工具，对于非计算机专业的人来说简直是噩梦。幸好有了Pycharm，它可以帮我们很方便的安装各类库。</p>\n<p>下面以安装pandas为例，介绍如何使用Pycharm安装package：</p>\n<ul>\n<li>顺序点击File，Settings</li>\n<li>然后点击Project，Project Interpreter，</li>\n<li>在搜索框中输入pandas，点击最下方的Install Package，根据网速快慢，等待不定的时间，就完成了安装</li>\n</ul>\n<p>安装过程中可能会提示：Microsoft Visual C++ 9.0 is required (Unable to find vcvarsall.bat). Get it from <span class=\"exturl\" data-url=\"aHR0cDovL2Jicy5waW5nZ3Uub3JnL2xpbmt0by5waHA/dXJsPWh0dHA6Ly9ha2EubXMvdmNweXRob24yNw==\">http://aka.ms/vcpython27<i class=\"fa fa-external-link-alt\"></i></span> 只要按照提示说的的去下载一个VC就可以了。</p>\n<p>这样就安装好了pandas。 然后在按照同样的流程安装好其他一些pandas依赖的package，分别是：<code>numpy</code>，<code>dateutil</code>，可能还有其他。 安装好之后试着运行下面这个程序，如果没有报错，就说明完全安装好pandas了。如果报错，一般是因为缺少依赖的库，按照上述方法继续安装就可以了。</p>\n","categories":["Quant"],"tags":["python","quant"]},{"title":"【量化小讲堂-Python、pandas技巧系列】历史数据告诉你：KDJ指标选股有效吗？","url":"/quant_python_pandas_kdj/","content":"<blockquote>\n<p>KDJ指标是最常用的技术指标之一，它的作用是判断股票未来短期的走势。很多书店里卖的炒股类书籍都会推荐这个指标，并认为KDJ指标低位金叉是一个非常好的买点，还会给出几个很漂亮的K线图形来印证他们的观点。少数的几个例子不能让人信服，KDJ指标低位金叉选股效果到底好不好，一定要用大样本说话。</p>\n</blockquote>\n<p>本篇文章将找出历史上所有股票的全部低位金叉情况，并且统计这些股票在金叉之后若干个交易日内的涨幅，看是否有显著的正收益。通过这个案例将着重向大家介绍pandas的如下功能：</p>\n<ul>\n<li>使用pandas导入股票数据</li>\n<li>如何计算KDJ指标</li>\n<li>如何计算KDJ指标金叉</li>\n<li>shift()函数的用法</li>\n<li>append()函数的用法</li>\n</ul>\n<p><strong>下面开始正文：</strong></p>\n<p>需要找出历史上所有股票的全部低位金叉情况，那么首先必须要有股票的历史日线交易数据，从这个<span class=\"exturl\" data-url=\"aHR0cDovL2Jicy5waW5nZ3Uub3JnL2xpbmt0by5waHA/dXJsPWh0dHA6Ly93d3cueXVjZXpoZS5jb20v\">网站<i class=\"fa fa-external-link-alt\"></i></span>可以下载到所有股票的历史日线数据，可以作为我们计算的原始数据。数据下载下来是下图这个样子：</p>\n<p>每个股票一个csv文件</p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/21.png\">  </p>\n<p>每一行是每一天的数据</p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/22.png\">  </p>\n<p>这个日线数据有以下的字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">【code】 股票的代码，上证股票以sh开头，深证股票以sz开头</span><br><span class=\"line\">【date】 交易日期</span><br><span class=\"line\">【open】 开盘价</span><br><span class=\"line\">【high】 最高价</span><br><span class=\"line\">【low】 最低价</span><br><span class=\"line\">【close】 收盘价</span><br><span class=\"line\">【change】 涨跌幅，复权之后的真实涨跌幅，保证准确</span><br><span class=\"line\">【volume】 成交量</span><br><span class=\"line\">【money】 成交额</span><br><span class=\"line\">【traded_market_value】 流通市值</span><br><span class=\"line\">【market_value】 总市值</span><br><span class=\"line\">【turnover】 换手率，成交量/流通股本</span><br><span class=\"line\">【adjust_price】 后复权价，复权开始时间为股票上市日，精确到小数点后10位</span><br><span class=\"line\">【report_type】 最近一期财务报告的类型，3-31对应一季报，6-30对应半年报，9-30对应三季报，12-31对应年报</span><br><span class=\"line\">【report_date】 最近一期财务报告实际发布的日期</span><br><span class=\"line\">【PE_TTM】 最近12个月市盈率，股价 / 最近12个月归属母公司的每股收益TTM</span><br><span class=\"line\">【PS_TTM】 最近12个月市销率， 股价 / 最近12个月每股营业收入</span><br><span class=\"line\">【PC_TTM】 最近12个月市现率， 股价 / 最近12个月每股经营现金流</span><br><span class=\"line\">【PB】 市净率，股价 / 最近期财报每股净资产</span><br></pre></td></tr></table></figure>\n\n<p>有了原始数据之后就是代码，下面是代码的截图，里面有详细的注释，有问题可以留言。</p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/23.png\"><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/24.png\"> </p>\n<p>把数据下载下来，直接运行代码，就可以看到输出的结果了。这里就不贴出KDJ选股具体的效果了，这样大家可能更有动力钻研下程序吧~ 反正总体选股效果不大好，在总过出现的51万次KDJ金叉状况下，接下来股票会上涨的概率是50%左右。</p>\n<p><strong>思考题</strong><br>本程序其实是挑出了所有KDJ金叉的股票，并不是低位KDJ金叉。有人认为低位KDJ金叉效果更好，例如D值小于20时的金叉。在现有程序上进行小小的改动就可以挑选出低位KDJ金叉的股票，大家感兴趣可以看看选股效果怎么样，说实话具体怎么样我也没有试过。</p>\n","categories":["Quant"],"tags":["python","quant"]},{"title":"【量化小讲堂-Python、pandas技巧系列】如何快速上手使用Python进行金融数据分析","url":"/quant_python_pandas_soon/","content":"<p>本文主要以快速上手使用Pyhton进行系列分析为主题，介绍下我学习量化投资、Python的个人经验。</p>\n<h2 id=\"第一步：好奇心\"><a href=\"#第一步：好奇心\" class=\"headerlink\" title=\"第一步：好奇心\"></a>第一步：好奇心</h2><p>不要为了学习而去学习一门编程语言，或者任何工具。一定要心里首先有一个问题，抱着解决问题的心态，去了解并学习这个工具是如何解决问题的。驱动你去学习量化投资的，应该是你的好奇心。你认为你有一个炒股独家的窍门，你认为你发现了某个规律，你非常好奇的想用历史数据去验证你的想法。<br>比如我在大二的时候接触量化投资，就是因为我的好奇心。当时我看到一些入门的技术分析书上推荐KDJ这个技术指标，说KDJ低位金叉之后股票会涨，是个很好的买入信号，并且书上会配一些图，证明这个指标的有效性。我当时就很好奇，书上说的是不是真的？这几个配图是刻意挑选的还是有代表性的？是不是可以写个程序找出历史上所有的kdj金叉，看看之后涨的概率有多大?</p>\n<p>这就是引领我入门的最初的好奇心。当时我不会编程，一开始用excel来试着验证，发现KDJ从大概率上来讲是不行的。好奇心继续升级：我调整一下KDJ默认的参数，效果会不会好一点？再配合一下其他的指标，效果会不会好一点？再加上点财务数据，效果会不会好一点……</p>\n<p>慢慢的想测试的想法越来越多，excel渐渐的不够用，开始学习编程。我学习编程的目的性很强，就是解决我眼前的问题。对于解决我问题没有帮助的，我就先不学。一开始用的是SAS，自己找书看，论坛上发帖子问。后来觉得SAS太重，不灵活，慢慢的迁移到Python。</p>\n<p>我是计算机专业的，但是学校并不教量化投资，一切都是自己学。可想而知，若没有好奇心一直引导我去探索，这么长的一段时间我怎么可能坚持下来呢？ </p>\n<h2 id=\"第二步：为什么Python\"><a href=\"#第二步：为什么Python\" class=\"headerlink\" title=\"第二步：为什么Python\"></a>第二步：为什么Python</h2><p>我推荐刚入门的量化投资研究者使用Python。主要理由如下：</p>\n<ol>\n<li>适用性<br>  Python配合各类第三方的package（例如下面要降到的pandas），是非常适合用来处理金融数据的</li>\n<li>简单<br>  相比于c，c#等语言，Python容易太多了。让你可以更快，更方便的对自己的想法进行测试。life is short, use Python。</li>\n<li>全能<br>  Matlab是另外一个金融分析领域的统治级语言，以上讲的两点适用性、简单性matlab都是具备的，在业界的使用范围应该是比Python要高的。<br>而Python相比于matlab的一大优势，那就是全能。matlab基本只能用于金融数据分析。但是Python除了拥有不亚于matlab的矩阵计算、科学计算能力之外，其他几乎任何事情都可以做。比如数据的清理、整理，比如从网页上抓取数据，比如进行文本信息的挖掘，比如做一个网站……现在学习一门语言，将来在任何地方都能用到。</li>\n</ol>\n<h2 id=\"第三步：如何入门Python\"><a href=\"#第三步：如何入门Python\" class=\"headerlink\" title=\"第三步：如何入门Python\"></a>第三步：如何入门Python</h2><p>如果你有其他语言的编写经验（比如上过一个学期的编程课），有一定的编程基础。以下三步可以让你入门Python：</p>\n<ol>\n<li>随便找一本Pyhton入门书。这些教程网上有很多很多，论坛里面也有很多，随便搜索一下就是。我稍微整理了下，放在附件中，回复可见。</li>\n<li>挑一本Python入门书，不要花超过半天的时间，快速翻阅这本书。这个步骤不求记住什么东西，只要大概的知道这本书讲了什么，什么知识在这本书的哪一章写了就行，以便将来查阅。</li>\n<li>结合自己的好奇心，给自己寻找一个问题，简单的复杂的都可以，找一点数据(地址)，直接开始实战。遇到问题，第一步是去翻书，第二步是去google(别去百度)，第三步是论坛发帖求助。若你没有什么思路或者问题，可以加群438143420，我可以给你提供思路。</li>\n</ol>\n<p>如果你没有任何编程的基础，那么想要入门Python，也是以上三个步骤。但是第2步，就不是仅仅花半天的时间浏览书了，而是要细细的看书。对着书上的例子，实际的操作下，大概花一个星期的时间的业余时间也就够了吧。</p>\n<h2 id=\"第四步：如何入门pandas\"><a href=\"#第四步：如何入门pandas\" class=\"headerlink\" title=\"第四步：如何入门pandas\"></a>第四步：如何入门pandas</h2><p>使用Python做金融数据分析，一定要用pandas。pandas是Python的一个第三方库，简直是金融数据分析的神器，第一次遇到它的时候让我泪流满面。了解pandas最好的途径就是他的官方文档：<span class=\"exturl\" data-url=\"aHR0cDovL3BhbmRhcy5weWRhdGEub3JnL3BhbmRhcy1kb2NzL3N0YWJsZS8xMG1pbi5odG1s\">http://pandas.pydata.org/pandas-docs/stable/10min.html<i class=\"fa fa-external-link-alt\"></i></span> ，当然也可以看我之前写的系列文章。</p>\n","categories":["Quant"],"tags":["python","quant"]},{"title":"【量化小讲堂-Python、pandas技巧系列】极简方法将日线数据转为周线、月线或其他周期","url":"/quant_python_pandas_kline/","content":"<p>分析股票数据的时候，往往会用不同的周期进行分析，以期得到更加全面的结果。比如日线、周线、月线，或者5分钟、15分钟、30分钟、60分钟。甚至有的时候会想，为什么的我的周期必须是自然周或者自然月，我能不能每11天或者每24天一个周期。 面对这样的需求，就必须写程序在不同的周期之间进行转换。本篇文章以将日线数据转换为周线数据为案例例，向大家介绍pandas的以下功能：</p>\n<ul>\n<li>使用pandas导入和导出输出</li>\n<li>resample函数的用法<span id=\"more\"></span></li>\n</ul>\n<p>下面开始正文。 需要把日线转为周线，那么首先必须要有日线数据，从这个<span class=\"exturl\" data-url=\"aHR0cDovL2Jicy5waW5nZ3Uub3JnL2xpbmt0by5waHA/dXJsPWh0dHA6Ly95dWNlemhlLmNvbS9wcm9kdWN0P25hbWU9dHJhZGluZy1kYXRh\">网站<i class=\"fa fa-external-link-alt\"></i></span>可以下载到所有股票历史上的日线数据，可以作为我们计算的原始数据。数据下载下来是下图这个样子：</p>\n<p>每个股票一个csv文件</p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/10-1.png\"> </p>\n<p>每一行是每一天的数据<br><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/11-1.png\"></p>\n<p><strong>这个日线数据有以下的字段：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">【code】 股票的代码，上证股票以sh开头，深证股票以sz开头</span><br><span class=\"line\">【date】 交易日期</span><br><span class=\"line\">【open】 开盘价</span><br><span class=\"line\">【high】 最高价</span><br><span class=\"line\">【low】 最低价</span><br><span class=\"line\">【close】 收盘价</span><br><span class=\"line\">【change】 涨跌幅，复权之后的真实涨跌幅，保证准确</span><br><span class=\"line\">【volume】 成交量</span><br><span class=\"line\">【money】 成交额</span><br><span class=\"line\">【traded_market_value】 流通市值</span><br><span class=\"line\">【market_value】 总市值</span><br><span class=\"line\">【turnover】 换手率，成交量/流通股本</span><br><span class=\"line\">【adjust_price】 后复权价，复权开始时间为股票上市日，精确到小数点后10位</span><br><span class=\"line\">【report_type】 最近一期财务报告的类型，3-31对应一季报，6-30对应半年报，9-30对应三季报，12-31对应年报</span><br><span class=\"line\">【report_date】 最近一期财务报告实际发布的日期</span><br><span class=\"line\">【PE_TTM】 最近12个月市盈率，股价 / 最近12个月归属母公司的每股收益TTM</span><br><span class=\"line\">【PS_TTM】 最近12个月市销率， 股价 / 最近12个月每股营业收入</span><br><span class=\"line\">【PC_TTM】 最近12个月市现率， 股价 / 最近12个月每股经营现金流</span><br><span class=\"line\">【PB】 市净率，股价 / 最近期财报每股净资产</span><br></pre></td></tr></table></figure>\n\n<p>在进行日线周线转换的时候，一定要注意，大部分周线的指标是这个日线指标在这一周最后一个交易日的值。比如周线的【close】应该等于这一周最后一天日线数据的【close】。但是有的指标是例外，比如周线的【high】应该等于这一周所有日线【high】中的最大值，周线的【volume】应该等于这一周所有日线【volume】的和。有了这样的理解之后，直接上程序截图，里面有详细的注释，有问题可以留言。</p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/12-1.png\"></p>\n<p>把数据和程序下载下来，在程序中修改好文件的路径，应该就可以直接运行了。</p>\n<p><strong>思考题：</strong><br>本案例中是将日线数据转换为周线，那么如何将日线数据转换为月线数据呢？ 答案：只要修改代码中的一个字母就行了。</p>\n","categories":["Quant"],"tags":["python","quant"]},{"title":"【量化小讲堂-Python、pandas技巧系列】计算创业板平均市盈率","url":"/quant_python_pandas_ratio/","content":"<p>最近创业板表现太猛了，很多人说估值太高，那么估值到底有多高？是否达到了历史上的高点？本案例中程序的功能是计算创业板股票历史上每天的平均市盈率，希望通过这个案例一来解答上述问题，二来向大家介绍pandas以下的几个操作：</p>\n<ul>\n<li>数据的导入以及导出</li>\n<li>对整列数据进行操作</li>\n<li>数据合并的append操作</li>\n<li>groupby语句<span id=\"more\"></span></li>\n</ul>\n<p>计算创业板股票每天的平均市盈率，那么必须要知道每个股票每天的市盈率。从<span class=\"exturl\" data-url=\"aHR0cDovL2Jicy5waW5nZ3Uub3JnL2xpbmt0by5waHA/dXJsPWh0dHA6Ly95dWNlemhlLmNvbS9wcm9kdWN0P25hbWU9dHJhZGluZy1kYXRh\">这里<i class=\"fa fa-external-link-alt\"></i></span>可以下载到所有股票的从上市日起的每天的交易数据、以及市盈率数据，可以作为我们计算的原始数据。数据下载下来是下图这个样子：</p>\n<p>每个股票一个csv文件<br><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/1-2.png\"> </p>\n<p>每一行是每一天的数据</p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/2-2.png\"> </p>\n<p>有了原始数据之后就是代码了，下面是代码的截图，有详细的注释，附件中可以下载代码文件。 </p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/3-2.png\"> </p>\n<p>把数据下载下来，并且直接运行代码，结果就会输出到“创业板平均市盈率.csv”文件。至于创业板股票的现在的平均市盈率是多少，这里就不贴出来啦，大家还是自己运行程序之后看结果吧<br><img data-src=\"http://120.27.111.137/static/image/smiley/default/titter.gif\"> </p>\n<p><strong>思考题：</strong><br>本案例中是计算创业板股票的平均市盈率，那么如果计算上证股票的平均市盈率呢？答案：其实只要修改代码中的一个数字就行了。</p>\n","categories":["Quant"],"tags":["python","quant"]},{"title":"【量化小讲堂-Python、Pandas系列】如何判断一个策略的好坏？","url":"/quant_python_pandas_good_or_bad/","content":"<blockquote>\n<p>对于一个交易策略，初学者往往认为收益越高越好。收益确实是一个重要的评价指标，但是除了收益之外，还有很多其他重要的角度来衡量一个策略的好坏。例如这个策略的风险性、胜率、交易频率等。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p><strong>本篇文章以几个常见的交易策略评价指标为案例，向大家介绍pandas的以下几个功能的运用：</strong></p>\n<ul>\n<li>dataframe的合并操作：append()、concat()函数的用法</li>\n<li>按某一列的值排序操作：sort_values()函数的用法</li>\n<li>常见统计指标的方法：mean(), std()等</li>\n<li>pandas画图操作：plot方法</li>\n</ul>\n<p><strong>我将介绍如下几个经典指标</strong></p>\n<ul>\n<li><strong>年化收益</strong> 任何收益都应该转换成年化收益，以进行比较。股神巴菲特投资几十年以来的年化收益是20%左右。美国股市百年来年化收益大概是10%左右。所以我们也不要太贪心，不要动辄就要求每年翻倍的收益。计算公式为：（账户最终价值&#x2F;账户初始价值）^（250&#x2F;回测期间总天数）-1</li>\n<li><strong>最大回撤</strong> 最大回撤就是从一个高点到一个低点最大的下跌幅度，用来描述我们的策略可能出现的最糟糕的情况，衡量了最极端可能的亏损。例如一个策略的最大回撤是50%，那么你使用这个策略之前就要掂量掂量，自己是否能经受得起50%的下跌。计算公式为：min(账户当日价值 &#x2F; 当日之前账户最高价值-1)。我一般认为，年华收益&#x2F;最大回撤，是个最简单有效的策略判断指标。</li>\n<li><strong>平均涨幅</strong> 平均涨幅衡量了在回测期间资产的平均涨跌情况。计算公式为：账户日收益的平均值。</li>\n<li><strong>上涨概率</strong> 上涨概率衡量了我们投资组合上涨的可能性。计算公式为：上涨天数 &#x2F; 回测交易日数量。</li>\n<li><strong>最大连续上涨天数</strong> 衡量了我们策略连续盈利的最大天数。</li>\n<li><strong>最大连续下跌天数</strong> 衡量了我们策略连续亏损的最大天数。或者说策略连续失效的次数。这个指标很重要，在实战中，若连续失败的次数多了，会动摇自己的信心，使自己很难跟着策略走下去。</li>\n<li><strong>最大单周期涨幅</strong> 所有日期中最大的涨幅，衡量了资产一天内的最好表现。</li>\n<li><strong>最大单周期跌幅</strong> 所有日期中最大的跌幅，衡量了资产一天内的最差表现。</li>\n<li><strong>收益波动率</strong> 单单追求高收益率是不行的，我们在投资中还必须考虑到潜在的风险。波动太大的策略往往风险也较高。收益波动率就衡量了策略收益的波动情况即风险。计算公式为：账户日收益的年化标准差。</li>\n<li><strong>贝塔(beta)值</strong> 根据经典的资本资产定价理论(CAPM模型)，β系数衡量了资产的回报率对市场变动的敏感程度，代表了该资产的系统性风险，表示策略对大盘的敏感性。计算公式为：账户日收益与参考基准日收益的协方差 &#x2F; 参考基准日收益的方差。</li>\n<li><strong>阿尔法(alpha)值</strong> 虽然我们的策略会受到大盘的影响，但是每个策略都会有自己市场因素之外的收益，alpha值表示实际风险回报和平均预期风险回报的差额，衡量了投资的非系统性风险。计算公式为：（账户年化收益-无风险收益）-beta*（参考基准年化收益-无风险收益）。</li>\n<li><strong>夏普比率</strong> 理性的投资者将选择并持有有效的投资组合，即那些在给定的风险水平下使期望回报最大的投资组合，夏普比率就是一个可以同时对收益与风险加以综合考虑的经典指标，表示每承受一单位风险，会产生多少的超额回报。计算公式为：（账户年化收益率-无风险利率）&#x2F; 收益波动率。</li>\n<li><strong>信息比率</strong> 信息比率以马克维茨的均异模型为基础，用来衡量超额风险所带来的超额收益。它表示单位主动风险所带来的超额收益。计算公式为：（账户日收益 - 参考基准日收益）的年化均值&#x2F;年化标准差。</li>\n</ul>\n<p>任何策略的结果都是一个收益序列，根据这个收益序列可以得到一条资金曲线。为了简单起见，我们就任选一只股票每天的收益率作为原始数据，来计算上文提到的各种策略评价指标。在\b<span class=\"exturl\" data-url=\"aHR0cDovL2Jicy5waW5nZ3Uub3JnL2xpbmt0by5waHA/dXJsPWh0dHA6Ly95dWNlemhlLmNvbS9wcm9kdWN0P25hbWU9dHJhZGluZy1kYXRh\">http://yucezhe.com/product?name=trading-data<i class=\"fa fa-external-link-alt\"></i></span>可以下载到所有股票的历史日线数据，可以作为我们计算的原始数据。<br>数据下载下来解压缩打开后，里面有所有股票和几个常见指数的数据。<br>打开其中一个股票文件之后是下图这个样子，每一行是每一天的数据：<br><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/31.png\"> 数据有以下的字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">【code】 股票的代码，上证股票以sh开头，深证股票以sz开头</span><br><span class=\"line\">【date】 交易日期</span><br><span class=\"line\">【open】 开盘价</span><br><span class=\"line\">【high】 最高价</span><br><span class=\"line\">【low】 最低价</span><br><span class=\"line\">【close】 收盘价</span><br><span class=\"line\">【change】 涨跌幅，复权之后的真实涨跌幅，保证准确</span><br><span class=\"line\">【volume】 成交量</span><br><span class=\"line\">【money】 成交额</span><br><span class=\"line\">【traded_market_value】 流通市值</span><br><span class=\"line\">【market_value】 总市值</span><br><span class=\"line\">【turnover】 换手率，成交量/流通股本</span><br><span class=\"line\">【adjust_price】 后复权价，复权开始时间为股票上市日，精确到小数点后10位</span><br><span class=\"line\">【report_type】 最近一期财务报告的类型，3-31对应一季报，6-30对应半年报，9-30对应三季报，12-31对应年报</span><br><span class=\"line\">【report_date】 最近一期财务报告实际发布的日期</span><br><span class=\"line\">【PE_TTM】 最近12个月市盈率，股价 / 最近12个月归属母公司的每股收益TTM</span><br><span class=\"line\">【PS_TTM】 最近12个月市销率， 股价 / 最近12个月每股营业收入</span><br><span class=\"line\">【PC_TTM】 最近12个月市现率， 股价 / 最近12个月每股经营现金流</span><br><span class=\"line\">【PB】 市净率，股价 / 最近期财报每股净资产</span><br></pre></td></tr></table></figure>\n\n<p>对于我们来说，只要取【date】以及【change】就行了。下面是代码的截图，这段代码截取指定的股票在指定时间段内的收益率，计算相关指标。</p>\n<p>获取数据函数：<br><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/32.png\"><br>计算年化收益率函数：<br><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/33.png\"> </p>\n<p>计算最大回撤函数：<br><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/34.png\"> </p>\n<p>计算平均涨幅：<br><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/35.png\"> </p>\n<p>计算上涨概率：<br><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/36.png\"> </p>\n<p>计算最大连续上涨天数和最大连续下跌天数： <img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/37.png\"> </p>\n<p>计算最大单周期涨幅和最大单周期跌幅： <img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/38.png\"> </p>\n<p>计算收益波动率的函数、计算贝塔的函数： <img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/39.png\"> </p>\n<p>计算alpha的函数： <img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/40.png\"> </p>\n<p>计算夏普比函数： <img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/41.png\"> </p>\n<p>计算信息比率函数、计算股票和基准在回测期间的累计收益率并画图： <img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/42.png\"> 导入数据运行以上函数： <img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/43.png\"> </p>\n<p>把数据和代码下载下来后，修改代码中原始数据的地址（也就是选择一个股票），并选定时间段，运行代码，就可以看到输出结果了。假设我们选择万科A，并设定时间段为1991年1月1日到2015年12月31日这25年，得到如下的输出结果:  </p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/44.png\"><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/45.png\"> </p>\n<p>万科A二十几年年年化回报是15%，已经相当不错了，最大回撤为78.9756%，也就是将近跌了80%，发生在08年的股灾。最大连续下跌50天，也是有点猛…</p>\n","categories":["Quant"],"tags":["python","quant"]},{"title":"【量化小讲堂-Python、Pandas系列】数据告诉你：惊人的海龟交易法则","url":"/quant_python_pandas_turtles/","content":"<blockquote>\n<p>海龟交易法则，起源并流行于八十年代的美国，是一套简单有效的交易法则。这个法则以及使用这个法则的人的故事被写成了一本书——《海龟交易法则》。这是一本很好的量化投资入门书（也是我当年的入门书）。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>本篇文章使用Python和Pandas实现海龟交易法则，看看在中国市场效果怎么样。并希望通过这个案例，让大家学到pandas的如下功能：</p>\n<ul>\n<li>导入导出数据</li>\n<li>rolling_max() 和 expanding_max()的区别</li>\n<li>空值处理函数fillna()的使用方法</li>\n<li>资金指数的计算方法</li>\n<li>resample()的使用方法</li>\n</ul>\n<h2 id=\"海龟交易的具体规则是：\"><a href=\"#海龟交易的具体规则是：\" class=\"headerlink\" title=\"海龟交易的具体规则是：\"></a>海龟交易的具体规则是：</h2><ul>\n<li>当今天的收盘价，大于过去20个交易日中的最高价时，以收盘价买入；</li>\n<li>买入后，当收盘价小于过去10个交易日中的最低价时，以收盘价卖出。</li>\n</ul>\n<h2 id=\"对规则的一些说明：\"><a href=\"#对规则的一些说明：\" class=\"headerlink\" title=\"对规则的一些说明：\"></a>对规则的一些说明：</h2><ul>\n<li>规则基本上就是这么简单，还有一些具体的止损以及仓位控制规则，这几就不介绍了，具体可以看书。</li>\n<li>这套交易规则主要是运用于期货市场，所以还可以有卖空，比如当今天的收盘价小于过去20个交易日中的最低价时，以收盘价开空单，以此类推。</li>\n<li>上述规则针对日线，实际使用中更多的是使用分钟K线，比如5分钟K线的收盘价大于过去20根5分钟线的最高价时买入，以此类推。</li>\n</ul>\n<p>在这篇文章中，我以上证指数作为案例，假设可以买卖上证指数，来试验海龟交易法则，看看效果具体如何。</p>\n<h2 id=\"下面开始具体正文：\"><a href=\"#下面开始具体正文：\" class=\"headerlink\" title=\"下面开始具体正文：\"></a>下面开始具体正文：</h2><p>要在上证指数上实验海龟交易法则，首先需要上证指数的数据。<br>在<span class=\"exturl\" data-url=\"aHR0cDovL2Jicy5waW5nZ3Uub3JnL2xpbmt0by5waHA/dXJsPWh0dHA6Ly95dWNlemhlLmNvbS9wcm9kdWN0P25hbWU9dHJhZGluZy1kYXRh\">这里<i class=\"fa fa-external-link-alt\"></i></span>可以下载到上证指数从1990年至今的数据，如下图所示，每一行是每一天的数据：<br><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/1-3.png\"> </p>\n<p>这个日线数据有以下的字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">【index_code】指数的代码</span><br><span class=\"line\">【date】 交易日期</span><br><span class=\"line\">【open】 开盘价</span><br><span class=\"line\">【high】 最高价</span><br><span class=\"line\">【low】 最低价</span><br><span class=\"line\">【close】 收盘价</span><br><span class=\"line\">【volume】 成交量</span><br><span class=\"line\">【money】 成交额</span><br><span class=\"line\">【change】 涨跌幅</span><br></pre></td></tr></table></figure>\n\n<p>有了原始数据之后就是代码。我本以为用pandas实现这个策略还是稍微有点复杂，结果发现非常的简单，再次赞叹下pandas的方便。下面是代码的截图，里面有详细的注释，有问题可以留言。<br><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/2-3.png\"><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/3-3.png\"><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/4-2.png\"></p>\n<p>把数据下载下来，运行代码，就可以看到输出的结果了。下面这张图展示了从1993年1月1日开始，使用海龟交易法则交易上涨指数的资金曲线与原指数的对比，由图中可见，指数从800多点涨到了现在的400点，而海龟交易法则的资金曲线，从同样的800多点，涨到了14000点。<br><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/5-2.png\"> </p>\n<p>下面这张图展示了每年上证指数和海龟交易法则资金曲线的收益，左边是上证指数的收益，可以自行把玩：<br><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/6-3.png\"> </p>\n<p><strong>思考题：</strong><br>海龟交易法则的默认参数是20，10，可以试试看其他的参数，看看会不会有更好的效果。感兴趣的，可以查看完整版本的海龟交易法则（包含atr止损），并实现它。</p>\n","categories":["Quant"],"tags":["python","quant"]},{"title":"【量化小讲堂-Python、Pandas系列】通过逐笔数据计算主力资金流数据","url":"/quant_python_pandas_fund_flow/","content":"<p>大家经常会在同花顺大智慧等行情软件，或各类财经媒体上看到主力资金流入流出这个术语。听上去也感觉很牛逼的样子，主力资金流入的股票或者行业是不是就会涨呢？</p>\n<p><strong>本期帖子就教大家如何计算一只股票每天的资金流入流出数据。</strong></p>\n<span id=\"more\"></span>\n\n<p>计算资金流数据需要股票的逐笔数据。逐笔数据记录股票每一笔的成交成交数据，是每一笔成交，只要成交就会记录。大家在免费行情软件中看到的成交明细数据，是3-5秒记录一笔的数据，并不是逐笔数据。下图是逐笔数据的截图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190422125332.png\"></p>\n<p>图中每一行记录一笔交易，以红框标记出的那行为例，记录在10:32:00秒，以16.81的价格成交了2200股，并且2200股是主动卖盘，记为S（主动买盘记为B）。</p>\n<p> <strong>这里讲一下主动买盘和主动卖盘的区别</strong>。<br> 炒过股票的人都知道，每一笔成交的双方，必定有一方下的是限价单（即会挂到五档盘口上的单子），另外一方下的是市价单（即主动去和五档盘口上的单子匹配成交的单子），如果一笔成交中的市价单是买入股票，那么这笔交易就是主动买盘，如果一笔成交中的市价单是卖出股票，那么这笔交易就是主动卖盘。 </p>\n<p><strong>有了逐笔数据，那资金流入怎么计算呢？</strong><br>说来很简单，就是这只股票当天所有买盘交易的总成交额。反之，所有卖盘交易的总成交额就是资金流出。 当一笔成交的成交量很大的时候，比如大于500手，成交这样一笔需要比较多的资金，往往认为这笔成交是由机构或者大户完成的，也就是所谓的主力。那么这只股票当天所有成交量大于500手的买盘的总成交额，即为主力资金流入，当天所有成交量大于500手的卖盘的总成交额，即为主力资金流出。（这里的500是随便设定的，也可以设定一个更加合理的数值） 有了这些概念，就可以根据逐笔数据计算资金流数据了。进入这个地址：<span class=\"exturl\" data-url=\"aHR0cDovL3l1Y2V6aGUuY29tL3Byb2R1Y3Q/bmFtZT16aHViaS1kYXRhLXB1c2g=\">http://yucezhe.com/product?name=zhubi-data-push<i class=\"fa fa-external-link-alt\"></i></span> ，点击最左边的按钮“数据样本(免费)”，即可下载到2015-05-19这一天所有股票的逐笔数据，注意数据比较大，下载起来可能会比较慢。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190422125259.png\"></p>\n<p>下面是最终输出数据的截图：<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190422125313.png\"></p>\n<p><strong>思考题：</strong><br>若有历史每天的逐笔数据，好好的研究下，应该是可以发现不少有价值的东西的。除了计算资金流数据之外，还有什么研究的思路吗？大家可以一起讨论。</p>\n","categories":["Quant"],"tags":["python","quant"]},{"title":"【量化小讲堂-Python、Pandas系列】量化投资中如何处理复权、除权问题","url":"/quant_python_pandas_authority/","content":"<p>最近惊讶的发现很多同学对如何在量化投资的实战中如何处理复权、除权等问题，其实不是非常了解，耽误很多事情，所以本文专门来详细的讲一下这个问题。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"【复权计算方法】\"><a href=\"#【复权计算方法】\" class=\"headerlink\" title=\"【复权计算方法】\"></a>【复权计算方法】</h2><p>股票会时不时的发生现金分红、送股等一系列股本变动，这会造成股价的非正常变化，导致我们不能直接通过股价来计算股票的涨跌幅。例如一个股票是10元，当他10送10的时候，它的价格会变成5元，但是我们并不能认为这个股票下跌了5 &#x2F; 10 - 1 &#x3D; 50%。  下面举一个具体的例子来说明如何计算除权价格以及复权涨跌幅： 易事特(SZ300376)在2015年6月5日的收盘价是89.00元，当天晚上每股分红0.184元，并且每10股转增4股，那么这个股票除权之后的收盘价应该是(89.00 - 0.184) * 10 &#x2F; (10 + 4) &#x3D; 63.44元。下一个交易日6月8日的收盘价是57.10，真实涨跌幅应该是57.10 &#x2F; 63.44 - 1 &#x3D; -9.993695%，而不是57.10 &#x2F; 89.00 - 1 &#x3D; -35.842697%。 其中真实涨跌幅57.10 &#x2F; 63.44 - 1 &#x3D; -9.993695%也被称为是复权涨跌幅。</p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/16.png\"> <img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/17.png\"></p>\n<h2 id=\"【复权涨跌幅最重要】\"><a href=\"#【复权涨跌幅最重要】\" class=\"headerlink\" title=\"【复权涨跌幅最重要】\"></a><strong>【复权涨跌幅最重要】</strong></h2><p>因为以上除权问题的存在，很多研究量化的同学在寻找股票数据的时候，很在意是否能得到复权之后的价格数据。我想说的是，股票的复权价格并不是最重要的，最重要的是要得到股票复权之后的涨跌幅。 若你有了股票每天的复权涨跌幅，那么知道了股票第一天的价格，通过简单的连乘计算，自然就可以计算出之后每一天的复权价，这个叫做后复权价。例如股票第一天的价格是10元，之后每天的复权涨跌幅是1%、-2%、3%…那么之后每天的复权价格分别是10 * (1+1%)、10 * (1+1%) * (1-2%)、10 * (1+1%) * (1-2%) * (1+3%)… 同样的，知道了股票最后一天的价格，那么自然也就可以计算出之前每一天的价格，这个叫做前复权价。行情软件中的前后复权价格，其实也是这么算出来的。 若股票数据中只给出了复权价格，这对计算收益的准确性是有很大影响的。例如给出的是前复权价格，那么很久之前的股票价格往往很小的数字，一般又都是精确到两位小数，所以会变成0.45，0.47这样类似的数字。例如万科A(SZ000002)在2006年2月8日的前复权收盘价是0.56，2月9日的前复权收盘价是0.48，那么2月9日的收益是0.48&#x2F;0.56 - 1 &#x3D; -14.29%，但是实际上8号、9号的真实收盘价是5.26、5.06，真实的涨幅是-3.80%，与-14.29%相差巨大。</p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/18.png\"></p>\n<h2 id=\"【同花顺、通达信等各家的复权方式不同】\"><a href=\"#【同花顺、通达信等各家的复权方式不同】\" class=\"headerlink\" title=\"【同花顺、通达信等各家的复权方式不同】\"></a>【同花顺、通达信等各家的复权方式不同】</h2><p>查看来自不同数据源的数据的时候，会发现它们的复权价格或者复权涨跌幅会有微小的差异，这往往是由不同的复权方式导致的。 例如，复权时对于分红产生的个人所得税，各家的处理方式是不一样的。同花顺、通达信中的复权是不考虑所得税的。上文提到的易事特(SZ300376)每股分红0.184元10股转4股，不考虑所得税的除权公式是(89.00 - 0.184) * 10 &#x2F; (10 + 4) 。 但是实际上，这0.184元不会全部到投资者的口袋里，而是会扣掉10%的所得税（不同投资者扣得税还不一样），所以投资者得到的分红只有0.184 * (1 - 10%)，那么更加准确的分红方式应该是：(89.00 - 0.184 * (1 - 10%)) * 10 &#x2F; (10 + 4) 。一些专业的数据库，例如wind、国泰安，就是这么复权的。</p>\n<h2 id=\"【其他】\"><a href=\"#【其他】\" class=\"headerlink\" title=\"【其他】\"></a>【其他】</h2><ul>\n<li><p>对于分钟或者更小级别的数据，我个人认为是没有必要进行复权的，直接用原始数据就可以了。复权之后反而会对数据准确性造成非常大的影响。</p>\n</li>\n<li><p>不要过分追求准确性。复权其实挺复杂的，之前的例子只提到了分红、转增，其实还有增发、配股、可转债等非常复杂的情况。所以哪怕非常贵的、非常专业的数据库，我都曾发现过它们复权计算中的错误。一开始这让我挺头疼的，但后来也释然了，不再去追究这些细小的误差。</p>\n</li>\n</ul>\n","categories":["Quant"],"tags":["python","quant"]},{"title":"优矿手把手教你入门量化投资：《量化分析师的Python日记》系列","url":"/quant_youkuang/","content":"<p>量化投资，金融投资量化的一种方式。其特点是：</p>\n<ol>\n<li>纪律性</li>\n<li>系统性</li>\n<li>套利思想</li>\n<li>概率取胜<span id=\"more\"></span></li>\n</ol>\n<p>做投资最难控制的是人的私欲，而量化投资恰好可以克服人的私欲，因为计算机没有感情。</p>\n<p>近期，很多伙伴跟哥反应，自己有心学量化、接触量化，无奈不知如何入门，也有很多是因为不熟悉python语言，因而一筹莫展，没有方向。</p>\n<p>(窃喜中- -)俺们优矿上有现成的大师系列作品，一步步教你入门的啊，全部奉上，敬请享用，不要谢我，要谢就以身相许吧～～66666</p>\n<p>【第1天：谁来给我讲讲Python？】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NGM4OTQ0M2Y5ZjA2YzI3NmY2NTFhNTI=\">https://uqer.io/community/share/54c89443f9f06c276f651a52<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第2天：再接着介绍一下Python呗】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NGM4YWYxN2Y5ZjA2YzI3NmY2NTFhNTQ=\">https://uqer.io/community/share/54c8af17f9f06c276f651a54<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第3天：一大波金融Library来袭之numpy篇】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NGNhMTVmOWY5ZjA2YzI3NmY2NTFhNTY=\">https://uqer.io/community/share/54ca15f9f9f06c276f651a56<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第4天：一大波金融Library来袭之scipy篇】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NGQ4M2JiM2Y5ZjA2YzI3NmY2NTFhNmU=\">https://uqer.io/community/share/54d83bb3f9f06c276f651a6e<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第5天：数据处理的瑞士军刀pandas】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NGZmZDk2ZWY5ZjA2YzI3NmY2NTFhYWM=\">https://uqer.io/community/share/54ffd96ef9f06c276f651aac<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第6天：数据处理的瑞士军刀pandas下篇】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NTE0YmIxMWY5ZjA2YzEyNzkwNDE1YjI=\">https://uqer.io/community/share/5514bb11f9f06c12790415b2<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第7天：Q Quant 之初出江湖】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NTE0ZmM5OGY5ZjA2YzhmMzM5MDQ0NDk=\">https://uqer.io/community/share/5514fc98f9f06c8f33904449<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第8天 Q Quant兵器谱之函数插值】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NTFjZmExZmY5ZjA2YzhmMzM5MDQ0ZmY=\">https://uqer.io/community/share/551cfa1ff9f06c8f339044ff<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第9天 Q Quant兵器谱之二叉树】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NTIzYTRhMWY5ZjA2YzhmMzM5MDQ1M2I=\">https://uqer.io/community/share/5523a4a1f9f06c8f3390453b<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第10天 Q Quant兵器谱 -之偏微分方程1】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NTMwZDlmMWY5ZjA2YzhmMzM5MDQ2NWE=\">https://uqer.io/community/share/5530d9f1f9f06c8f3390465a<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第11天 Q Quant兵器谱之偏微分方程2】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NTM0YWQzZmY5ZjA2YzhmMzM5MDQ2ODk=\">https://uqer.io/community/share/5534ad3ff9f06c8f33904689<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第12天：量化入门进阶之葵花宝典：因子如何产生和回测】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NTM4YzdkNGY5ZjA2YzNjOTIzMDY2ODQ=\">https://uqer.io/community/share/5538c7d4f9f06c3c92306684<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第13天 Q Quant兵器谱之偏微分方程3】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NTVkYzllOGY5ZjA2YzZjNzQwNGY5NmU=\">https://uqer.io/community/share/555dc9e8f9f06c6c7404f96e<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第14天：如何在优矿上做Alpha对冲模型】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NWU2NjJmOWY5ZjA2YzFlYTQ4MWY5Y2Y=\">https://uqer.io/community/share/55e662f9f9f06c1ea481f9cf<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第15天：如何在优矿上搞一个wealthfront出来】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NjcwZGEzYzIyOGU1YjhkODFmMDBhODc=\">https://uqer.io/community/share/5670da3c228e5b8d81f00a87<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【第16天：如何在优矿上一个人干掉一家公募量化团队！Alpha！Go！】<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly91cWVyLmlvL2NvbW11bml0eS9zaGFyZS81NmU2OWMxNDIyOGU1Yjg1OGNjMjU4ZmY=\">https://uqer.io/community/share/56e69c14228e5b858cc258ff<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Quant"],"tags":["quant"]},{"title":"基于Python的开源量化交易平台及组件汇总","url":"/quant_python_frame/","content":"<blockquote>\n<p>推荐几个python上现在比较好的量化框架。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>vnpy</p>\n<p>基于python的开源交易平台开发框架。项目的用户包括：私募基金，证券自营、资管，期货公司，高校的金融研究院系，个人投资者等，机构用户加起来至少20多家。 该项目拥有较为丰富的Python交易和数据API接口，基本覆盖了国内所有常规交易品种（股票、期货、期权），具体包括：CTP（vn.ctp）、飞马（vn.femas）、LTS（vn.lts）、金仕达黄金（vn.ksgold）、金仕达期权（vn.ksotp）、通联数据（vn.datayes）。<br>特点：简洁易用的事件驱动引擎（vn.event），作为事件驱动型交易程序的核心；涵盖针对如何使用API和事件驱动引擎开发交易程序的示例（vn.demo）。项目拥有开箱即用的实盘交易平台vn.trader（相比之下vn.demo仅建议学习用），整合了多种交易接口，并针对具体策略算法和功能开发提供了简洁易用的API。 </p>\n</li>\n<li><p>quantdigger</p>\n<p>一个基于python的量化回测框架。它借鉴了主流商业软件（比如TB, 金字塔）简洁的策略语法，同时避免了它们内置编程语言的局限性，使用通用语言python做为策略开发工具。和 zipline , pyalgotrade 相比，QuantDigger的策略语法更接近策略开发人员的习惯。 目前的功能包括：股票回测，期货回测。支持选股，套利，择时,组合策略。自带了一个基于matplotlib编写的简单的策略和k线显示界面，能满足广大量化爱好者基本的回测需求。设计上也兼顾了实盘交易。 </p>\n</li>\n<li><p>easyquant</p>\n<p>股票量化框架，支持行情获取以及交易，基于easytrader和easyquotation 的量化交易框架。支持华泰、佣金宝、银河以及雪球模拟盘交易。 支持新浪免费实时行情，1s推送一次，集思路分级基金以及leverfun 的免费十档行情</p>\n</li>\n<li><p>easytrader</p>\n<p>提供券商华泰&#x2F;佣金宝&#x2F;银河&#x2F;广发&#x2F;雪球的基金、股票自动程序化交易，量化交易组件，进行自动的程序化股票交易 可实现自动登录，支持命令行调用，方便其他语言适配，支持 Python3 &#x2F; Python2, Linux &#x2F; Win, 推荐使用 Python3</p>\n</li>\n<li><p>quartz</p>\n<p>一个基于Pandas的量化回测框架，核心类库引入pandas，引入pylab库后能够实现可视化结果</p>\n</li>\n<li><p>AshareQuant</p>\n<p>A股数据维护，把线上数据维护到mongodb，可以写入crontab中运行，定时更新基本面和历史日K线数据</p>\n</li>\n<li><p>vnpy_oanda</p>\n<p>基于vnpy，对Oanda进行定制的Python开源交易平台开发框架</p>\n</li>\n<li><p>ftsVob</p>\n</li>\n</ul>\n<p>基于vnpy+easyquant项目的期货交易系统<br>[1]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZucHkvdm5weQ==\">https://github.com/vnpy/vnpy<i class=\"fa fa-external-link-alt\"></i></span><br>[2]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1F1YW50RmFucy9xdWFudGRpZ2dlcg==\">https://github.com/QuantFans/quantdigger<i class=\"fa fa-external-link-alt\"></i></span><br>[3]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoaWRlbmdndWkvZWFzeXF1YW50\">https://github.com/shidenggui/easyquant<i class=\"fa fa-external-link-alt\"></i></span><br>[4]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoaWRlbmdndWkvZWFzeXRyYWRlcg==\">https://github.com/shidenggui/easytrader<i class=\"fa fa-external-link-alt\"></i></span><br>[5]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Z1Y2hlbmc4MzAvLXF1YXJ0eg==\">https://github.com/fucheng830/-quartz<i class=\"fa fa-external-link-alt\"></i></span><br>[6]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hlemhlbmtlL0FzaGFyZVF1YW50\">https://github.com/hezhenke/AshareQuant<i class=\"fa fa-external-link-alt\"></i></span><br>[7]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NuaXBlcjI0L3ZucHlfb2FuZGE=\">https://github.com/sniper24/vnpy_oanda<i class=\"fa fa-external-link-alt\"></i></span><br>[8]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3J1eWlxZi9mdHNWb2I=\">https://github.com/ruyiqf/ftsVob<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Quant"],"tags":["量化","python"]},{"title":"量化工具TA-Lib使用例子","url":"/quant_ta_lib/","content":"<p><span class=\"exturl\" data-url=\"aHR0cDovL21yamJxNy5naXRodWIuaW8vdGEtbGliLw==\">官方链接<i class=\"fa fa-external-link-alt\"></i></span> </p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> ttk</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> talib <span class=\"keyword\">as</span> ta</span><br><span class=\"line\"></span><br><span class=\"line\">series = np.random.choice([<span class=\"number\">1</span>, -<span class=\"number\">1</span>], size=<span class=\"number\">200</span>)</span><br><span class=\"line\">close = np.cumsum(series).astype(<span class=\"built_in\">float</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重叠指标</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">overlap_process</span>(<span class=\"params\">event</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(event.widget.get())</span><br><span class=\"line\">    overlap = event.widget.get()</span><br><span class=\"line\">    </span><br><span class=\"line\">    upperband, middleband, lowerband = ta.BBANDS(close, timeperiod=<span class=\"number\">5</span>, nbdevup=<span class=\"number\">2</span>, nbdevdn=<span class=\"number\">2</span>, matype=<span class=\"number\">0</span>)</span><br><span class=\"line\">    fig, axes = plt.subplots(<span class=\"number\">2</span>, <span class=\"number\">1</span>, sharex=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    ax1, ax2 = axes[<span class=\"number\">0</span>], axes[<span class=\"number\">1</span>]</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(close, <span class=\"string\">&#x27;rd-&#x27;</span>, markersize=<span class=\"number\">3</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(upperband, <span class=\"string\">&#x27;y-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(middleband, <span class=\"string\">&#x27;b-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(lowerband, <span class=\"string\">&#x27;y-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].set_title(overlap, fontproperties=<span class=\"string\">&quot;SimHei&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> overlap == <span class=\"string\">&#x27;布林线&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> overlap == <span class=\"string\">&#x27;双指数移动平均线&#x27;</span>:</span><br><span class=\"line\">        real = ta.DEMA(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> overlap == <span class=\"string\">&#x27;指数移动平均线 &#x27;</span>:</span><br><span class=\"line\">        real = ta.EMA(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> overlap == <span class=\"string\">&#x27;希尔伯特变换——瞬时趋势线&#x27;</span>:</span><br><span class=\"line\">        real = ta.HT_TRENDLINE(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> overlap == <span class=\"string\">&#x27;考夫曼自适应移动平均线&#x27;</span>:</span><br><span class=\"line\">        real = ta.KAMA(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> overlap == <span class=\"string\">&#x27;移动平均线&#x27;</span>:</span><br><span class=\"line\">        real = ta.MA(close, timeperiod=<span class=\"number\">30</span>, matype=<span class=\"number\">0</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> overlap == <span class=\"string\">&#x27;MESA自适应移动平均&#x27;</span>:</span><br><span class=\"line\">        mama, fama = ta.MAMA(close, fastlimit=<span class=\"number\">0</span>, slowlimit=<span class=\"number\">0</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(mama, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(fama, <span class=\"string\">&#x27;g-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> overlap == <span class=\"string\">&#x27;变周期移动平均线&#x27;</span>:</span><br><span class=\"line\">        real = ta.MAVP(close, periods, minperiod=<span class=\"number\">2</span>, maxperiod=<span class=\"number\">30</span>, matype=<span class=\"number\">0</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> overlap == <span class=\"string\">&#x27;简单移动平均线&#x27;</span>:</span><br><span class=\"line\">        real = ta.SMA(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> overlap == <span class=\"string\">&#x27;三指数移动平均线(T3)&#x27;</span>:</span><br><span class=\"line\">        real = ta.T3(close, timeperiod=<span class=\"number\">5</span>, vfactor=<span class=\"number\">0</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> overlap == <span class=\"string\">&#x27;三指数移动平均线&#x27;</span>:</span><br><span class=\"line\">        real = ta.TEMA(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> overlap == <span class=\"string\">&#x27;三角形加权法 &#x27;</span>:</span><br><span class=\"line\">        real = ta.TRIMA(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> overlap == <span class=\"string\">&#x27;加权移动平均数&#x27;</span>:</span><br><span class=\"line\">        real = ta.WMA(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 动量指标</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">momentum_process</span>(<span class=\"params\">event</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(event.widget.get())</span><br><span class=\"line\">    momentum = event.widget.get()</span><br><span class=\"line\">    </span><br><span class=\"line\">    upperband, middleband, lowerband = ta.BBANDS(close, timeperiod=<span class=\"number\">5</span>, nbdevup=<span class=\"number\">2</span>, nbdevdn=<span class=\"number\">2</span>, matype=<span class=\"number\">0</span>)</span><br><span class=\"line\">    fig, axes = plt.subplots(<span class=\"number\">2</span>, <span class=\"number\">1</span>, sharex=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    ax1, ax2 = axes[<span class=\"number\">0</span>], axes[<span class=\"number\">1</span>]</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(close, <span class=\"string\">&#x27;rd-&#x27;</span>, markersize=<span class=\"number\">3</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(upperband, <span class=\"string\">&#x27;y-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(middleband, <span class=\"string\">&#x27;b-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(lowerband, <span class=\"string\">&#x27;y-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].set_title(momentum, fontproperties=<span class=\"string\">&quot;SimHei&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> momentum == <span class=\"string\">&#x27;绝对价格振荡器&#x27;</span>:</span><br><span class=\"line\">        real = ta.APO(close, fastperiod=<span class=\"number\">12</span>, slowperiod=<span class=\"number\">26</span>, matype=<span class=\"number\">0</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> momentum == <span class=\"string\">&#x27;钱德动量摆动指标&#x27;</span>:</span><br><span class=\"line\">        real = ta.CMO(close, timeperiod=<span class=\"number\">14</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> momentum == <span class=\"string\">&#x27;移动平均收敛/散度&#x27;</span>:</span><br><span class=\"line\">        macd, macdsignal, macdhist = ta.MACD(close, fastperiod=<span class=\"number\">12</span>, slowperiod=<span class=\"number\">26</span>, signalperiod=<span class=\"number\">9</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(macd, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(macdsignal, <span class=\"string\">&#x27;g-&#x27;</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(macdhist, <span class=\"string\">&#x27;b-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> momentum == <span class=\"string\">&#x27;带可控MA类型的MACD&#x27;</span>:</span><br><span class=\"line\">        macd, macdsignal, macdhist = ta.MACDEXT(close, fastperiod=<span class=\"number\">12</span>, fastmatype=<span class=\"number\">0</span>, slowperiod=<span class=\"number\">26</span>, slowmatype=<span class=\"number\">0</span>, signalperiod=<span class=\"number\">9</span>, signalmatype=<span class=\"number\">0</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(macd, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(macdsignal, <span class=\"string\">&#x27;g-&#x27;</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(macdhist, <span class=\"string\">&#x27;b-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> momentum == <span class=\"string\">&#x27;移动平均收敛/散度 固定 12/26&#x27;</span>:</span><br><span class=\"line\">        macd, macdsignal, macdhist = ta.MACDFIX(close, signalperiod=<span class=\"number\">9</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(macd, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(macdsignal, <span class=\"string\">&#x27;g-&#x27;</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(macdhist, <span class=\"string\">&#x27;b-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> momentum == <span class=\"string\">&#x27;动量&#x27;</span>:</span><br><span class=\"line\">        real = ta.MOM(close, timeperiod=<span class=\"number\">10</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> momentum == <span class=\"string\">&#x27;比例价格振荡器&#x27;</span>:</span><br><span class=\"line\">        real = ta.PPO(close, fastperiod=<span class=\"number\">12</span>, slowperiod=<span class=\"number\">26</span>, matype=<span class=\"number\">0</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> momentum == <span class=\"string\">&#x27;变化率&#x27;</span>:</span><br><span class=\"line\">        real = ta.ROC(close, timeperiod=<span class=\"number\">10</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> momentum == <span class=\"string\">&#x27;变化率百分比&#x27;</span>:</span><br><span class=\"line\">        real = ta.ROCP(close, timeperiod=<span class=\"number\">10</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> momentum == <span class=\"string\">&#x27;变化率的比率&#x27;</span>:</span><br><span class=\"line\">        real = ta.ROCR(close, timeperiod=<span class=\"number\">10</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> momentum == <span class=\"string\">&#x27;变化率的比率100倍&#x27;</span>:</span><br><span class=\"line\">        real = ta.ROCR100(close, timeperiod=<span class=\"number\">10</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> momentum == <span class=\"string\">&#x27;相对强弱指数&#x27;</span>:</span><br><span class=\"line\">        real = ta.RSI(close, timeperiod=<span class=\"number\">14</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> momentum == <span class=\"string\">&#x27;随机相对强弱指标&#x27;</span>:</span><br><span class=\"line\">        fastk, fastd = ta.STOCHRSI(close, timeperiod=<span class=\"number\">14</span>, fastk_period=<span class=\"number\">5</span>, fastd_period=<span class=\"number\">3</span>, fastd_matype=<span class=\"number\">0</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(fastk, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(fastd, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> momentum == <span class=\"string\">&#x27;三重光滑EMA的日变化率&#x27;</span>:</span><br><span class=\"line\">        real = ta.TRIX(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 周期指标</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cycle_process</span>(<span class=\"params\">event</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(event.widget.get())</span><br><span class=\"line\">    cycle = event.widget.get()</span><br><span class=\"line\">    </span><br><span class=\"line\">    upperband, middleband, lowerband = ta.BBANDS(close, timeperiod=<span class=\"number\">5</span>, nbdevup=<span class=\"number\">2</span>, nbdevdn=<span class=\"number\">2</span>, matype=<span class=\"number\">0</span>)</span><br><span class=\"line\">    fig, axes = plt.subplots(<span class=\"number\">2</span>, <span class=\"number\">1</span>, sharex=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    ax1, ax2 = axes[<span class=\"number\">0</span>], axes[<span class=\"number\">1</span>]</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(close, <span class=\"string\">&#x27;rd-&#x27;</span>, markersize=<span class=\"number\">3</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(upperband, <span class=\"string\">&#x27;y-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(middleband, <span class=\"string\">&#x27;b-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(lowerband, <span class=\"string\">&#x27;y-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].set_title(cycle, fontproperties=<span class=\"string\">&quot;SimHei&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> cycle == <span class=\"string\">&#x27;希尔伯特变换——主要的循环周期&#x27;</span>:</span><br><span class=\"line\">        real = ta.HT_DCPERIOD(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> cycle == <span class=\"string\">&#x27;希尔伯特变换,占主导地位的周期阶段&#x27;</span>:</span><br><span class=\"line\">        real = ta.HT_DCPHASE(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> cycle == <span class=\"string\">&#x27;希尔伯特变换——相量组件&#x27;</span>:</span><br><span class=\"line\">        inphase, quadrature = ta.HT_PHASOR(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(inphase, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(quadrature, <span class=\"string\">&#x27;g-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> cycle == <span class=\"string\">&#x27;希尔伯特变换——正弦曲线&#x27;</span>:</span><br><span class=\"line\">        sine, leadsine = ta.HT_SINE(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(sine, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(leadsine, <span class=\"string\">&#x27;g-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> cycle == <span class=\"string\">&#x27;希尔伯特变换——趋势和周期模式&#x27;</span>:</span><br><span class=\"line\">        integer = ta.HT_TRENDMODE(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(integer, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 统计功能</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">statistic_process</span>(<span class=\"params\">event</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(event.widget.get())</span><br><span class=\"line\">    statistic = event.widget.get()</span><br><span class=\"line\">    </span><br><span class=\"line\">    upperband, middleband, lowerband = ta.BBANDS(close, timeperiod=<span class=\"number\">5</span>, nbdevup=<span class=\"number\">2</span>, nbdevdn=<span class=\"number\">2</span>, matype=<span class=\"number\">0</span>)</span><br><span class=\"line\">    fig, axes = plt.subplots(<span class=\"number\">2</span>, <span class=\"number\">1</span>, sharex=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    ax1, ax2 = axes[<span class=\"number\">0</span>], axes[<span class=\"number\">1</span>]</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(close, <span class=\"string\">&#x27;rd-&#x27;</span>, markersize=<span class=\"number\">3</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(upperband, <span class=\"string\">&#x27;y-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(middleband, <span class=\"string\">&#x27;b-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(lowerband, <span class=\"string\">&#x27;y-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].set_title(statistic, fontproperties=<span class=\"string\">&quot;SimHei&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> statistic == <span class=\"string\">&#x27;线性回归&#x27;</span>:</span><br><span class=\"line\">        real = ta.LINEARREG(close, timeperiod=<span class=\"number\">14</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> statistic == <span class=\"string\">&#x27;线性回归角度&#x27;</span>:</span><br><span class=\"line\">        real = ta.LINEARREG_ANGLE(close, timeperiod=<span class=\"number\">14</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> statistic == <span class=\"string\">&#x27;线性回归截距&#x27;</span>:</span><br><span class=\"line\">        real = ta.LINEARREG_INTERCEPT(close, timeperiod=<span class=\"number\">14</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> statistic == <span class=\"string\">&#x27;线性回归斜率&#x27;</span>:</span><br><span class=\"line\">        real = ta.LINEARREG_SLOPE(close, timeperiod=<span class=\"number\">14</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> statistic == <span class=\"string\">&#x27;标准差&#x27;</span>:</span><br><span class=\"line\">        real = ta.STDDEV(close, timeperiod=<span class=\"number\">5</span>, nbdev=<span class=\"number\">1</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> statistic == <span class=\"string\">&#x27;时间序列预测&#x27;</span>:</span><br><span class=\"line\">        real = ta.TSF(close, timeperiod=<span class=\"number\">14</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> statistic == <span class=\"string\">&#x27;方差&#x27;</span>:</span><br><span class=\"line\">        real = ta.VAR(close, timeperiod=<span class=\"number\">5</span>, nbdev=<span class=\"number\">1</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 数学变换</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">math_transform_process</span>(<span class=\"params\">event</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(event.widget.get())</span><br><span class=\"line\">    math_transform = event.widget.get()</span><br><span class=\"line\">    </span><br><span class=\"line\">    upperband, middleband, lowerband = ta.BBANDS(close, timeperiod=<span class=\"number\">5</span>, nbdevup=<span class=\"number\">2</span>, nbdevdn=<span class=\"number\">2</span>, matype=<span class=\"number\">0</span>)</span><br><span class=\"line\">    fig, axes = plt.subplots(<span class=\"number\">2</span>, <span class=\"number\">1</span>, sharex=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    ax1, ax2 = axes[<span class=\"number\">0</span>], axes[<span class=\"number\">1</span>]</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(close, <span class=\"string\">&#x27;rd-&#x27;</span>, markersize=<span class=\"number\">3</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(upperband, <span class=\"string\">&#x27;y-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(middleband, <span class=\"string\">&#x27;b-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(lowerband, <span class=\"string\">&#x27;y-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].set_title(math_transform, fontproperties=<span class=\"string\">&quot;SimHei&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> math_transform == <span class=\"string\">&#x27;反余弦&#x27;</span>:</span><br><span class=\"line\">        real = ta.ACOS(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_transform == <span class=\"string\">&#x27;反正弦&#x27;</span>:</span><br><span class=\"line\">        real = ta.ASIN(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_transform == <span class=\"string\">&#x27;反正切&#x27;</span>:</span><br><span class=\"line\">        real = ta.ATAN(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_transform == <span class=\"string\">&#x27;向上取整&#x27;</span>:</span><br><span class=\"line\">        real = ta.CEIL(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_transform == <span class=\"string\">&#x27;余弦&#x27;</span>:</span><br><span class=\"line\">        real = ta.COS(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_transform == <span class=\"string\">&#x27;双曲余弦&#x27;</span>:</span><br><span class=\"line\">        real = ta.COSH(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_transform == <span class=\"string\">&#x27;指数&#x27;</span>:</span><br><span class=\"line\">        real = ta.EXP(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_transform == <span class=\"string\">&#x27;向下取整&#x27;</span>:</span><br><span class=\"line\">        real = ta.FLOOR(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_transform == <span class=\"string\">&#x27;自然对数&#x27;</span>:</span><br><span class=\"line\">        real = ta.LN(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_transform == <span class=\"string\">&#x27;常用对数&#x27;</span>:</span><br><span class=\"line\">        real = ta.LOG10(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_transform == <span class=\"string\">&#x27;正弦&#x27;</span>:</span><br><span class=\"line\">        real = ta.SIN(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_transform == <span class=\"string\">&#x27;双曲正弦&#x27;</span>:</span><br><span class=\"line\">        real = ta.SINH(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_transform == <span class=\"string\">&#x27;平方根&#x27;</span>:</span><br><span class=\"line\">        real = ta.SQRT(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_transform == <span class=\"string\">&#x27;正切&#x27;</span>:</span><br><span class=\"line\">        real = ta.TAN(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_transform == <span class=\"string\">&#x27;双曲正切&#x27;</span>:</span><br><span class=\"line\">        real = ta.TANH(close)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 数学操作</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">math_operator_process</span>(<span class=\"params\">event</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(event.widget.get())</span><br><span class=\"line\">    math_operator = event.widget.get()</span><br><span class=\"line\">    </span><br><span class=\"line\">    upperband, middleband, lowerband = ta.BBANDS(close, timeperiod=<span class=\"number\">5</span>, nbdevup=<span class=\"number\">2</span>, nbdevdn=<span class=\"number\">2</span>, matype=<span class=\"number\">0</span>)</span><br><span class=\"line\">    fig, axes = plt.subplots(<span class=\"number\">2</span>, <span class=\"number\">1</span>, sharex=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    ax1, ax2 = axes[<span class=\"number\">0</span>], axes[<span class=\"number\">1</span>]</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(close, <span class=\"string\">&#x27;rd-&#x27;</span>, markersize=<span class=\"number\">3</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(upperband, <span class=\"string\">&#x27;y-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(middleband, <span class=\"string\">&#x27;b-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].plot(lowerband, <span class=\"string\">&#x27;y-&#x27;</span>)</span><br><span class=\"line\">    axes[<span class=\"number\">0</span>].set_title(math_operator, fontproperties=<span class=\"string\">&quot;SimHei&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> math_operator == <span class=\"string\">&#x27;指定的期间的最大值&#x27;</span>:</span><br><span class=\"line\">        real = ta.MAX(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_operator == <span class=\"string\">&#x27;指定的期间的最大值的索引&#x27;</span>:</span><br><span class=\"line\">        integer = ta.MAXINDEX(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(integer, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_operator == <span class=\"string\">&#x27;指定的期间的最小值&#x27;</span>:</span><br><span class=\"line\">        real = ta.MIN(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_operator == <span class=\"string\">&#x27;指定的期间的最小值的索引&#x27;</span>:</span><br><span class=\"line\">        integer = ta.MININDEX(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(integer, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_operator == <span class=\"string\">&#x27;指定的期间的最小和最大值&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">min</span>, <span class=\"built_in\">max</span> = ta.MINMAX(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(<span class=\"built_in\">min</span>, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(<span class=\"built_in\">max</span>, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_operator == <span class=\"string\">&#x27;指定的期间的最小和最大值的索引&#x27;</span>:</span><br><span class=\"line\">        minidx, maxidx = ta.MINMAXINDEX(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(minidx, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(maxidx, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> math_operator == <span class=\"string\">&#x27;合计&#x27;</span>:</span><br><span class=\"line\">        real = ta.SUM(close, timeperiod=<span class=\"number\">30</span>)</span><br><span class=\"line\">        axes[<span class=\"number\">1</span>].plot(real, <span class=\"string\">&#x27;r-&#x27;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">root = tk.Tk()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第一行：重叠指标</span></span><br><span class=\"line\">rowframe1 = tk.Frame(root)</span><br><span class=\"line\">rowframe1.pack(side=tk.TOP, ipadx=<span class=\"number\">3</span>, ipady=<span class=\"number\">3</span>)</span><br><span class=\"line\">tk.Label(rowframe1, text=<span class=\"string\">&quot;重叠指标&quot;</span>).pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">overlap_indicator = tk.StringVar() <span class=\"comment\"># 重叠指标</span></span><br><span class=\"line\">combobox1 = ttk.Combobox(rowframe1, textvariable=overlap_indicator)</span><br><span class=\"line\">combobox1[<span class=\"string\">&#x27;values&#x27;</span>] = [<span class=\"string\">&#x27;布林线&#x27;</span>,<span class=\"string\">&#x27;双指数移动平均线&#x27;</span>,<span class=\"string\">&#x27;指数移动平均线 &#x27;</span>,<span class=\"string\">&#x27;希尔伯特变换——瞬时趋势线&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;考夫曼自适应移动平均线&#x27;</span>,<span class=\"string\">&#x27;移动平均线&#x27;</span>,<span class=\"string\">&#x27;MESA自适应移动平均&#x27;</span>,<span class=\"string\">&#x27;变周期移动平均线&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;简单移动平均线&#x27;</span>,<span class=\"string\">&#x27;三指数移动平均线(T3)&#x27;</span>,<span class=\"string\">&#x27;三指数移动平均线&#x27;</span>,<span class=\"string\">&#x27;三角形加权法 &#x27;</span>,<span class=\"string\">&#x27;加权移动平均数&#x27;</span>]</span><br><span class=\"line\">combobox1.current(<span class=\"number\">0</span>)</span><br><span class=\"line\">combobox1.pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">combobox1.bind(<span class=\"string\">&#x27;&lt;&lt;ComboboxSelected&gt;&gt;&#x27;</span>, overlap_process)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二行：动量指标</span></span><br><span class=\"line\">rowframe2 = tk.Frame(root)</span><br><span class=\"line\">rowframe2.pack(side=tk.TOP, ipadx=<span class=\"number\">3</span>, ipady=<span class=\"number\">3</span>)</span><br><span class=\"line\">tk.Label(rowframe2, text=<span class=\"string\">&quot;动量指标&quot;</span>).pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">momentum_indicator = tk.StringVar() <span class=\"comment\"># 动量指标</span></span><br><span class=\"line\">combobox2 = ttk.Combobox(rowframe2, textvariable=momentum_indicator)</span><br><span class=\"line\">combobox2[<span class=\"string\">&#x27;values&#x27;</span>] = [<span class=\"string\">&#x27;绝对价格振荡器&#x27;</span>,<span class=\"string\">&#x27;钱德动量摆动指标&#x27;</span>,<span class=\"string\">&#x27;移动平均收敛/散度&#x27;</span>,<span class=\"string\">&#x27;带可控MA类型的MACD&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;移动平均收敛/散度 固定 12/26&#x27;</span>,<span class=\"string\">&#x27;动量&#x27;</span>,<span class=\"string\">&#x27;比例价格振荡器&#x27;</span>,<span class=\"string\">&#x27;变化率&#x27;</span>,<span class=\"string\">&#x27;变化率百分比&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;变化率的比率&#x27;</span>,<span class=\"string\">&#x27;变化率的比率100倍&#x27;</span>,<span class=\"string\">&#x27;相对强弱指数&#x27;</span>,<span class=\"string\">&#x27;随机相对强弱指标&#x27;</span>,<span class=\"string\">&#x27;三重光滑EMA的日变化率&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">combobox2.current(<span class=\"number\">0</span>)</span><br><span class=\"line\">combobox2.pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">combobox2.bind(<span class=\"string\">&#x27;&lt;&lt;ComboboxSelected&gt;&gt;&#x27;</span>, momentum_process)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第三行：周期指标</span></span><br><span class=\"line\">rowframe3 = tk.Frame(root)</span><br><span class=\"line\">rowframe3.pack(side=tk.TOP, ipadx=<span class=\"number\">3</span>, ipady=<span class=\"number\">3</span>)</span><br><span class=\"line\">tk.Label(rowframe3, text=<span class=\"string\">&quot;周期指标&quot;</span>).pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">cycle_indicator = tk.StringVar() <span class=\"comment\"># 周期指标</span></span><br><span class=\"line\">combobox3 = ttk.Combobox(rowframe3, textvariable=cycle_indicator)</span><br><span class=\"line\">combobox3[<span class=\"string\">&#x27;values&#x27;</span>] = [<span class=\"string\">&#x27;希尔伯特变换——主要的循环周期&#x27;</span>,<span class=\"string\">&#x27;希尔伯特变换——主要的周期阶段&#x27;</span>,<span class=\"string\">&#x27;希尔伯特变换——相量组件&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;希尔伯特变换——正弦曲线&#x27;</span>,<span class=\"string\">&#x27;希尔伯特变换——趋势和周期模式&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">combobox3.current(<span class=\"number\">0</span>)</span><br><span class=\"line\">combobox3.pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">combobox3.bind(<span class=\"string\">&#x27;&lt;&lt;ComboboxSelected&gt;&gt;&#x27;</span>, cycle_process)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第四行：统计功能</span></span><br><span class=\"line\">rowframe4 = tk.Frame(root)</span><br><span class=\"line\">rowframe4.pack(side=tk.TOP, ipadx=<span class=\"number\">3</span>, ipady=<span class=\"number\">3</span>)</span><br><span class=\"line\">tk.Label(rowframe4, text=<span class=\"string\">&quot;统计功能&quot;</span>).pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">statistic_indicator = tk.StringVar() <span class=\"comment\"># 统计功能</span></span><br><span class=\"line\">combobox4 = ttk.Combobox(rowframe4, textvariable=statistic_indicator)</span><br><span class=\"line\">combobox4[<span class=\"string\">&#x27;values&#x27;</span>] = [<span class=\"string\">&#x27;贝塔系数；投资风险与股市风险系数&#x27;</span>,<span class=\"string\">&#x27;皮尔逊相关系数&#x27;</span>,<span class=\"string\">&#x27;线性回归&#x27;</span>,<span class=\"string\">&#x27;线性回归角度&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;线性回归截距&#x27;</span>,<span class=\"string\">&#x27;线性回归斜率&#x27;</span>,<span class=\"string\">&#x27;标准差&#x27;</span>,<span class=\"string\">&#x27;时间序列预测&#x27;</span>,<span class=\"string\">&#x27;方差&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">combobox4.current(<span class=\"number\">0</span>)</span><br><span class=\"line\">combobox4.pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">combobox4.bind(<span class=\"string\">&#x27;&lt;&lt;ComboboxSelected&gt;&gt;&#x27;</span>, statistic_process)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第五行：数学变换</span></span><br><span class=\"line\">rowframe5 = tk.Frame(root)</span><br><span class=\"line\">rowframe5.pack(side=tk.TOP, ipadx=<span class=\"number\">3</span>, ipady=<span class=\"number\">3</span>)</span><br><span class=\"line\">tk.Label(rowframe5, text=<span class=\"string\">&quot;数学变换&quot;</span>).pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">math_transform = tk.StringVar() <span class=\"comment\"># 数学变换</span></span><br><span class=\"line\">combobox5 = ttk.Combobox(rowframe5, textvariable=math_transform_process)</span><br><span class=\"line\">combobox5[<span class=\"string\">&#x27;values&#x27;</span>] = [<span class=\"string\">&#x27;反余弦&#x27;</span>,<span class=\"string\">&#x27;反正弦&#x27;</span>,<span class=\"string\">&#x27;反正切&#x27;</span>,<span class=\"string\">&#x27;向上取整&#x27;</span>,<span class=\"string\">&#x27;余弦&#x27;</span>,<span class=\"string\">&#x27;双曲余弦&#x27;</span>,<span class=\"string\">&#x27;指数&#x27;</span>,<span class=\"string\">&#x27;向下取整&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;自然对数&#x27;</span>,<span class=\"string\">&#x27;常用对数&#x27;</span>,<span class=\"string\">&#x27;正弦&#x27;</span>,<span class=\"string\">&#x27;双曲正弦&#x27;</span>,<span class=\"string\">&#x27;平方根&#x27;</span>,<span class=\"string\">&#x27;正切&#x27;</span>,<span class=\"string\">&#x27;双曲正切&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">combobox5.current(<span class=\"number\">0</span>)</span><br><span class=\"line\">combobox5.pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">combobox5.bind(<span class=\"string\">&#x27;&lt;&lt;ComboboxSelected&gt;&gt;&#x27;</span>, math_transform_process)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第六行：数学操作</span></span><br><span class=\"line\">rowframe6 = tk.Frame(root)</span><br><span class=\"line\">rowframe6.pack(side=tk.TOP, ipadx=<span class=\"number\">3</span>, ipady=<span class=\"number\">3</span>)</span><br><span class=\"line\">tk.Label(rowframe6, text=<span class=\"string\">&quot;数学操作&quot;</span>).pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">math_operator = tk.StringVar() <span class=\"comment\"># 数学操作</span></span><br><span class=\"line\">combobox6 = ttk.Combobox(rowframe6, textvariable=math_operator_process)</span><br><span class=\"line\">combobox6[<span class=\"string\">&#x27;values&#x27;</span>] = [<span class=\"string\">&#x27;指定期间的最大值&#x27;</span>,<span class=\"string\">&#x27;指定期间的最大值的索引&#x27;</span>,<span class=\"string\">&#x27;指定期间的最小值&#x27;</span>,<span class=\"string\">&#x27;指定期间的最小值的索引&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;指定期间的最小和最大值&#x27;</span>,<span class=\"string\">&#x27;指定期间的最小和最大值的索引&#x27;</span>,<span class=\"string\">&#x27;合计&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">combobox6.current(<span class=\"number\">0</span>)</span><br><span class=\"line\">combobox6.pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">combobox6.bind(<span class=\"string\">&#x27;&lt;&lt;ComboboxSelected&gt;&gt;&#x27;</span>, math_operator_process)</span><br><span class=\"line\"></span><br><span class=\"line\">root.mainloop()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["Quant"],"tags":["python","quant"]},{"title":"量化策略研究学习","url":"/quant_start/","content":"<p>如果是普通用户，又不懂编程，那么国内做的最好的当属果仁网（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly93d3cuZ3Vvcm4uY29t\">http://www.guorn.com/<i class=\"fa fa-external-link-alt\"></i></span>）,雪球上很有大V都是果仁的用户，像持有封基、银行螺丝钉等。</p>\n<span id=\"more\"></span>\n\n<p><strong>更多量化策略研究学习：</strong></p>\n<p><strong>量化基础–新手入门</strong><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41LjYzMjA4Mzg2NzgxMzM0\">什么是量化投资？<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41LjYzMjA4Mjc5NjI3MTc5\">什么是量化策略<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41LjYzMjA4MDkzNDQ3MTky\">量化投资与传统投资的区别<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41LjYzMjEwNzgxNTEzMzE5\">量化选股之多因子选股模型<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41LjYzMjExMDQwNDgzNDMw\">量化择时–择时的原则<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41LjYzMjE3MDMwOTA3MTI2\">量化择时–双均线（MA）、DMA、TRIX、MACD择时<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41LjYzMjExOTkxNTc4MDAy\">量化择时–PE择时<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41LjYzMjEwMjMxOTgxOTE4\">量化评估–年化收益、最大回撤、阿尔法、贝塔、夏普比率解释<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC4zLjUyMjIzNTU1ODEzNDc3\">果仁量化平台视频教程汇总<i class=\"fa fa-external-link-alt\"></i></span> </p>\n<p><strong>量化进阶–自定义指标</strong><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41LjYzMjE3NTA3Mzc5MDM4\">什么是自定义指标<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC4zLjMyODg2MTcxMzg1NDE5\">果仁量化平台自定义函数列表<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC4xMDM5NC41NjE0MTU5NTIyNTU3Ng==\">自定义指标示例列表（持续更新）<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC4zLjU0NDcxODM3NTg2NjM2\">果仁自定义指标筛选股票示例–如何实现通达信红宝书公式<i class=\"fa fa-external-link-alt\"></i></span> </p>\n<p><strong>量化高级–策略与应用</strong><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41LjY0MzQxMDcxNzg5Mzgz\">彼得.林奇策略<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41LjY0MzQxNjg2NDE4OTQ4\">约翰•邓普顿策略<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41LjY0MzQxNTM2MTUxODcy\">海龟策略<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41LjY0NDkzNTA4NDM5NTgz\">【量化策略研究】均值回归入门<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><strong>量化高手–牛人分享</strong><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC45NjMuMzQxODcwMDM3Nzg4MTM=\">什么是α，β收益，量化投资的策略创建与分析<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC40MDcxLjM2MDI3MjE4Nzc1MTAz\">量化策略学习与反思<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41LjUyNDExMzM3MzY3NjI0\">物理学博士带给你的一种“更有效的择时方法”<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC41MjguNTI0MTgzNDA0NzgzOTY=\">阿尔法对冲策略：拒坐“过山车” 追求绝对收益<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC45NjMuNTI1Nzc2NjI0NDg1Mzk=\">从科学和哲学角度漫谈 没有逻辑的策略 的该怎么相信<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC45NjMuNTc0MjkxMzY5MTg5NTE=\">量化投资金杯之一 –小市值策略是否是投资金杯？<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC45NjMuNTY2Mzg0NTY2MzM3NTI=\">量化投资金杯之二–小成交额策略是否是投资金杯？<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZ3Vvcm4uY29tL2ZvcnVtL3Bvc3QvcC45NjMuNjMxMjE0OTgzNzAzNDI=\">关于策略拟合的若干问题的解答<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Quant"],"tags":["量化","quant"]},{"title":"Git上传时忽略不想上传的文件","url":"/git_gitignore/","content":"<p>在进行协作开发代码管理的过程中，常常会遇到某些临时文件、配置文件、或者生成文件等，这些文件由于不同的开发端会不一样，如果使用<code>git add</code> . 将所有文件纳入git库中，那么会出现频繁的改动和push，这样会引起开发上的不便。</p>\n<span id=\"more\"></span>\n\n<p>Git可以很方便的帮助我们解决这个问题，那就是建立项目文件过滤规则。</p>\n<p>git中提供两种过滤机制，一种是全局过滤机制，即对所有的git都适用；另一种是针对某个项目使用的过滤规则。个人倾向于第二种。</p>\n<p>以我的一个项目为例，该项目用<code>.net</code>开发，<code>.config</code>文件、包括生成的<code>bin/Debug</code>,<code>bin/Release</code>文件等，我希望不加入git管理。</p>\n<p>在代码目录下建立<code>.gitignore</code>文件：<code>vim .gitignore</code> ,内容如下：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">#过滤数据库文件、sln解决方案文件、配置文件</span><br><span class=\"line\">*.mdb</span><br><span class=\"line\">*.ldb</span><br><span class=\"line\">*.sln</span><br><span class=\"line\">*.config</span><br><span class=\"line\">#过滤文件夹Debug,Release,obj</span><br><span class=\"line\">Debug/</span><br><span class=\"line\">Release/</span><br><span class=\"line\">obj/</span><br></pre></td></tr></table></figure>\n\n<p>然后调用<code>git add .</code> ，执行 <code>git commit</code>即可。</p>\n<p>问题：<code>.gitignore</code>只适用于尚未添加到git库的文件。如果已经添加了，则需用<code>git rm</code>移除后再重新<code>commit</code>。</p>\n","categories":["Tool"],"tags":["git","gitignore"]},{"title":"Git代码行统计命令集","url":"/git_count/","content":"<p>统计某人的代码提交量，包括增加，删除：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> –author=”$(git config –get user.name)” –pretty=tformat: –numstat | gawk <span class=\"string\">&#x27;&#123; add += $1 ; subs += $2 ; loc += $1 - $2 &#125; END &#123; printf ”added lines: %s removed lines : %s total lines: %s\\n”,add,subs,loc &#125;’  -</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>仓库提交者排名前 5（如果看全部，去掉 head 管道即可）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> –pretty=’%aN’ | <span class=\"built_in\">sort</span> | <span class=\"built_in\">uniq</span> -c | <span class=\"built_in\">sort</span> -k1 -n -r | <span class=\"built_in\">head</span> -n 5</span><br></pre></td></tr></table></figure>\n\n<p>仓库提交者（邮箱）排名前 5：这个统计可能不会太准，因为很多人有不同的邮箱，但会使用相同的名字</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> –pretty=format:%ae | gawk – <span class=\"string\">&#x27;&#123; ++c[$0]; &#125; END &#123; for(cc in c) printf ”%5d %s\\n”,c[cc],cc; &#125;’ | sort -u -n -r | head -n 5</span></span><br></pre></td></tr></table></figure>\n\n<p>贡献者统计：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> –pretty=’%aN’ | <span class=\"built_in\">sort</span> -u | <span class=\"built_in\">wc</span> -l</span><br></pre></td></tr></table></figure>\n\n<p>提交数统计：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> –oneline | <span class=\"built_in\">wc</span> -l</span><br></pre></td></tr></table></figure>\n\n<p>添加或修改的代码行数：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> –<span class=\"built_in\">stat</span>|perl -ne ’END &#123; <span class=\"built_in\">print</span> <span class=\"variable\">$c</span> &#125; <span class=\"variable\">$c</span> += <span class=\"variable\">$1</span> <span class=\"keyword\">if</span> /(\\d+) insertions/;</span><br></pre></td></tr></table></figure>\n\n<p><code>git log</code> 参数说明：</p>\n<ul>\n<li><p>–author 指定作者</p>\n</li>\n<li><p>–stat 显示每次更新的文件修改统计信息，会列出具体文件列表</p>\n</li>\n<li><p>–shortstat 统计每个commit 的文件修改行数，包括增加，删除，但不列出文件列表</p>\n</li>\n<li><p>–numstat 统计每个commit 的文件修改行数，包括增加，删除，并列出文件列表</p>\n</li>\n<li><p>-p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新。例如：<code>git log -p  -2</code></p>\n</li>\n<li><p>–name-only 仅在提交信息后显示已修改的文件清单</p>\n</li>\n<li><p>–name-status 显示新增、修改、删除的文件清单</p>\n</li>\n<li><p>–abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符</p>\n</li>\n<li><p>–relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）</p>\n</li>\n<li><p>–graph 显示 ASCII 图形表示的分支合并历史</p>\n</li>\n<li><p>–pretty 使用其他格式显示历史提交信息。可用的选项包括 <code>oneline，short，full，fuller 和 format（后跟指定格式）</code>例如： <code>git log –pretty=oneline ; git log –pretty=short ; git log –pretty=full ; git log –pretty=fuller</code></p>\n</li>\n<li><p>–pretty&#x3D;tformat:   可以定制要显示的记录格式，这样的输出便于后期编程提取分析。例如：<code>git log –pretty=format:””%h – %an, %ar : %s””</code><br>下面列出了常用的格式占位符写法及其代表的意义。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">选项       说明</span><br><span class=\"line\">%H      提交对象（commit）的完整哈希字串</span><br><span class=\"line\">%h      提交对象的简短哈希字串</span><br><span class=\"line\">%T      树对象（tree）的完整哈希字串</span><br><span class=\"line\">%t      树对象的简短哈希字串</span><br><span class=\"line\">%<span class=\"keyword\">P</span>      父对象（parent）的完整哈希字串</span><br><span class=\"line\">%<span class=\"keyword\">p</span>      父对象的简短哈希字串</span><br><span class=\"line\">%<span class=\"keyword\">an</span>     作者（author）的名字</span><br><span class=\"line\">%ae     作者的电子邮件地址</span><br><span class=\"line\">%ad     作者修订日期（可以用 -date= 选项定制格式）</span><br><span class=\"line\">%<span class=\"keyword\">ar</span>     作者修订日期，按多久以前的方式显示</span><br><span class=\"line\">%<span class=\"keyword\">cn</span>     提交者(committer)的名字</span><br><span class=\"line\">%<span class=\"keyword\">ce</span>     提交者的电子邮件地址</span><br><span class=\"line\">%<span class=\"keyword\">cd</span>     提交日期</span><br><span class=\"line\">%<span class=\"keyword\">cr</span>     提交日期，按多久以前的方式显示</span><br><span class=\"line\">%s      提交说明</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>–since  限制显示输出的范围，<br>例如：<code>git log –since=2.weeks</code> 显示最近两周的提交<br>选项 说明</p>\n<ul>\n<li>-(n)    仅显示最近的 n 条提交</li>\n<li>–since, –after 仅显示指定时间之后的提交。</li>\n<li>–until, –before 仅显示指定时间之前的提交。</li>\n<li>–author 仅显示指定作者相关的提交。</li>\n<li>–committer 仅显示指定提交者相关的提交。</li>\n</ul>\n</li>\n</ul>\n<p>一些例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一分钟之前的所有 log</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> –until=1.minute.ago</span><br><span class=\"line\"><span class=\"comment\"># 一天之内的log</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> –since=1.day.ago </span><br><span class=\"line\"><span class=\"comment\"># 一个小时之内的 log </span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> –since=1.hour.ago</span><br><span class=\"line\"><span class=\"comment\"># 一个月之前到半个月之前的log</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> –since=<span class=\"string\">&#x27;.month.ago&#x27;</span> –until=2.weeks.ago </span><br><span class=\"line\"><span class=\"comment\"># 某个时间段的 log</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> –since ==2013-08.01 –until=2013-09-07</span><br><span class=\"line\"><span class=\"comment\"># 看看某一个文件的相关历史记录</span></span><br><span class=\"line\">git blame index.html –<span class=\"built_in\">date</span> short</span><br></pre></td></tr></table></figure>\n","categories":["Tool"],"tags":["git"]},{"title":"Git安装","url":"/git_install/","content":"<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><h3 id=\"Ubuntu12-04下\"><a href=\"#Ubuntu12-04下\" class=\"headerlink\" title=\"Ubuntu12.04下\"></a>Ubuntu12.04下</h3><p>可以使用<code>apt-get</code>方式安装，也可以下载源代码安装，我们这里使用apt-get安装。</p>\n<p>但由于直接使用<code>sudo apt-get install git</code>安装的版本较老，因此我们参考中给出的PPA源。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:git-core/ppa</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>安装完成后，检查是否安装成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p>显示 <code>git version 2.1.1</code>，表明安装成功。</p>\n<h3 id=\"CentOS6-6下\"><a href=\"#CentOS6-6下\" class=\"headerlink\" title=\"CentOS6.6下\"></a>CentOS6.6下</h3><p>在CentOS5的时代，由于yum源中没有git，所以需要预先安装一系列的依赖包。但在CentOS6的yum源中已经有git的版本了，可以直接使用yum源进行安装。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install git</span><br></pre></td></tr></table></figure>\n\n<p>但是yum源中安装的git版本是<code>1.7.1</code>，太老了，Github等需要的Git版本最低都不能低于<code>1.7.2</code> 。所以我们一般不用上面的方法。而是下载git源码，编译安装。</p>\n<p>编译安装的步骤是：</p>\n<p>（1）首先先更新系统</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum update</span><br></pre></td></tr></table></figure>\n\n<p>（2）安装依赖的包</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gccperl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure>\n\n<p>（3）下载git源码并解压缩</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/git/git/archive/v2.5.1.zip</span><br><span class=\"line\">unzip v2.5.1.zip</span><br><span class=\"line\"><span class=\"built_in\">cd</span> git-2.5.1</span><br></pre></td></tr></table></figure>\n\n<p>（4）编译安装</p>\n<p>将其安装在“&#x2F;usr&#x2F;local&#x2F;git”目录下。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">make prefix=/usr/local/git all</span><br><span class=\"line\">sudo make prefix=/usr/local/git install</span><br></pre></td></tr></table></figure>\n\n<p>（5）此时你如果使用<code>git –version</code> 查看git版本的话，发现git仍然是1.7.1版本。这是因为它默认使用了”&#x2F;usr&#x2F;bin”下的git。</p>\n<p>你可以用下面的命令查看git所在的路径：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">whereis git</span><br><span class=\"line\">git: /usr/bin/git /usr/local/git /usr/share/man/man1/git.1.gz</span><br></pre></td></tr></table></figure>\n\n<p>（6）我们要把编译安装的git路径放到环境变量里，让它替换”&#x2F;usr&#x2F;bin”下的git。为此我们可以修改“&#x2F;etc&#x2F;profile”文件（或者<code>/etc/bashrc</code>文件）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>然后在文件的最后一行，添加下面的内容，然后保存退出。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/local/git/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n\n<p>（7）使用<code>source</code>命令应用修改。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>（8）然后再次使用<code>git –version</code>查看git版本，发现输出2.5.1，表明安装成功。</p>\n<h2 id=\"设置Git\"><a href=\"#设置Git\" class=\"headerlink\" title=\"设置Git\"></a>设置Git</h2><p>（1）设置用户名和email。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;Your Name&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;youremail@domain.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>此时，Home目录下会新建一个<code>.gitconfig</code>文件</p>\n<h2 id=\"为GitHub账号添加SSH-Keys\"><a href=\"#为GitHub账号添加SSH-Keys\" class=\"headerlink\" title=\"为GitHub账号添加SSH Keys\"></a>为GitHub账号添加SSH Keys</h2><p>以公钥认证方式访问SSH协议的Git服务器时无需输入口令，而且更安全。（访问HTTP协议的Git服务器时，比如提交修改，每次都需要输入口令。）</p>\n<p>（1）创建SSH key</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail@163.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>系统会提示key的保存位置（一般是~&#x2F;.ssh目录）和指定口令，保持默认，连续三次回车即可。</p>\n<p>（2）Copy SSH Key</p>\n<p>然后用vim打开该文件，id_rsa.pub文件内的内容，粘帖到github帐号管理的添加SSH key界面中。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p>（3）添加到GitHub</p>\n<p>登录<code>github-&gt; Accounting settings图标-&gt; SSH key-&gt; Add SSH key-&gt; 填写SSH key的名称（可以起一个自己容易区分的）</code>，然后将拷贝的<code>~/.ssh/id_rsa.pub</code>文件内容粘帖-&gt; add key”按钮添加。</p>\n<p>（4）测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n","categories":["Tool"],"tags":["git"]},{"title":"Git常用命令","url":"/git_order/","content":"<blockquote>\n<p>Git 常用的命令汇总</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"创建新仓库\"><a href=\"#创建新仓库\" class=\"headerlink\" title=\"创建新仓库\"></a>创建新仓库</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"检出仓库\"><a href=\"#检出仓库\" class=\"headerlink\" title=\"检出仓库\"></a>检出仓库</h2><p>有冲突的话合并这些 冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在合并改动之前，也可以使用如下命令查看：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure>\n\n<p>串创建一个本地仓库的克隆版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> /path/to/repositoty</span><br></pre></td></tr></table></figure>\n\n<p>如果是远程服务器上的仓库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> username@host:/path/to/repository</span><br></pre></td></tr></table></figure>\n\n<p>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git fetch origin</span><br><span class=\"line\">git reset –hard origin/master</span><br></pre></td></tr></table></figure>\n\n<p>你的本地仓库由 <code>git</code> 维护的三棵“树”组成。第一个是你的 <code>工作目录</code>，它持有实际件；第二个是 <code>缓存区（Index）</code>，它像个缓存区域，临时保存你的改动；最后是 <code>HEAD</code>，指向你最近一次提交后的结果。</p>\n<h2 id=\"添加与提交\"><a href=\"#添加与提交\" class=\"headerlink\" title=\"添加与提交\"></a>添加与提交</h2><p>你可以计划改动（把它们添加到缓存区），使用如下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add &lt;filename&gt;</span><br><span class=\"line\">git add *</span><br></pre></td></tr></table></figure>\n\n<p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -m “代码提交信息”</span><br></pre></td></tr></table></figure>\n\n<p>现在，你的改动已经提交到了 <code>HEAD</code>，但是还没到你的远端仓库。推送改动<br>你的改动现在已经在本地仓库的 <code>HEAD</code> 中了。执行如下命令以将这些改动提交到远端仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>可以把 master 换成你想要推送的任何分支。如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如此你就能够将你的改动推送到所添加的服务器上去</p>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，<code>master</code> 是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上<br>创建一个叫做“feature_x”的分支，并切换过去：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout -b feature_x</span><br></pre></td></tr></table></figure>\n\n<p>切换回主分支：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure>\n\n<p>再把新建的分支删掉：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -d feature_x</span><br></pre></td></tr></table></figure>\n\n<p>除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push origin &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新与合并\"><a href=\"#更新与合并\" class=\"headerlink\" title=\"更新与合并\"></a>更新与合并</h2><p>要更新你的本地仓库至最新改动，执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<p>以在你的工作目录中 获取（fetch） 并合并（merge） 远端的改动。<br>要合并其他分支到你的当前分支（例如 master），执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n\n<p>两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些文件来人肉合并这些 冲突（conflicts）了。改完之后，你需要执行如下命令以将它们标记为合并成功：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在合并改动之前，也可以使用如下命令查看：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"替换本地改动\"><a href=\"#替换本地改动\" class=\"headerlink\" title=\"替换本地改动\"></a>替换本地改动</h2><p>假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout — &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n<p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git fetch origin</span><br><span class=\"line\">git reset –hard origin/master</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从命令行创建一个新的仓库\"><a href=\"#从命令行创建一个新的仓库\" class=\"headerlink\" title=\"从命令行创建一个新的仓库\"></a>从命令行创建一个新的仓库</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> README.md</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;first commit&quot;</span></span><br><span class=\"line\">git remote add origin http://dadanliao.com/quantitative/test.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从命令行推送已经创建的仓库\"><a href=\"#从命令行推送已经创建的仓库\" class=\"headerlink\" title=\"从命令行推送已经创建的仓库\"></a>从命令行推送已经创建的仓库</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote add origin http://dadanliao.com/quantitative/test.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"辅助功能\"><a href=\"#辅助功能\" class=\"headerlink\" title=\"辅助功能\"></a>辅助功能</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git version <span class=\"comment\"># 查看当前git版本信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">help</span> <span class=\"comment\"># 获取全部命令帮助信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">help</span> &lt;<span class=\"built_in\">command</span>&gt; <span class=\"comment\"># 获取指定命令帮助信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config user.name <span class=\"string\">&quot;Your Name Comes Here&quot;</span> <span class=\"comment\"># 设置当前项目git用户名</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;Your Name Comes Here&quot;</span> <span class=\"comment\"># 设置全局项目git用户名</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config user.email you@yourdomain.example.com <span class=\"comment\"># 设置当前项目git电子邮件</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email you@yourdomain.example.com <span class=\"comment\"># 设置全局项目git电子邮件</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --list <span class=\"comment\"># 显示当前项目设置参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global --list <span class=\"comment\"># 显示全局项目设置参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config core.fileMode <span class=\"literal\">false</span>  <span class=\"comment\"># 让git忽略掉文件权限检查</span></span><br><span class=\"line\"></span><br><span class=\"line\">git init <span class=\"comment\"># 初始化git仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\">git status <span class=\"comment\"># 查看当前本地库状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">git status -uno <span class=\"comment\"># 查看当前本地库有哪几个文件冲突</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">help</span> &lt;<span class=\"built_in\">command</span>&gt; <span class=\"comment\"># 显示command的help</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看、添加、提交、删除、找回，重置修改文件\"><a href=\"#查看、添加、提交、删除、找回，重置修改文件\" class=\"headerlink\" title=\"查看、添加、提交、删除、找回，重置修改文件\"></a>查看、添加、提交、删除、找回，重置修改文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git show  <span class=\"comment\"># 显示某次提交的内容 git show $id</span></span><br><span class=\"line\"></span><br><span class=\"line\">git co -- &lt;file&gt; <span class=\"comment\"># 抛弃工作区修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">git co . <span class=\"comment\"># 抛弃工作区修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add &lt;file&gt; <span class=\"comment\"># 将工作文件修改提交到本地暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add . <span class=\"comment\"># 将所有修改过的工作文件提交暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add &lt;fileName1&gt; &lt;fileName2&gt; <span class=\"comment\"># 将工作文件修改提交到本地暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add &lt;folderPath&gt; <span class=\"comment\"># 添加指定目录到索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add . <span class=\"comment\"># 将所有修改过的工作文件提交暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">git add --all <span class=\"comment\"># 添加所有文件到索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> &lt;file&gt; <span class=\"comment\"># 从版本库中删除文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> &lt;file&gt; --cached <span class=\"comment\"># 从版本库中删除文件，但不删除文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">git clean -f  <span class=\"comment\"># 删除 untracked files</span></span><br><span class=\"line\"></span><br><span class=\"line\">git clean -fd <span class=\"comment\"># 连 untracked 的目录也一起删掉</span></span><br><span class=\"line\"></span><br><span class=\"line\">git clean -xfd <span class=\"comment\"># 连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在用上述 git clean 前，墙裂建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删</span></span><br><span class=\"line\">git clean -nxfd</span><br><span class=\"line\"></span><br><span class=\"line\">git clean -nf</span><br><span class=\"line\"></span><br><span class=\"line\">git clean -nfd</span><br><span class=\"line\"></span><br><span class=\"line\">git reset &lt;file&gt; <span class=\"comment\"># 从暂存区恢复到工作文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset -- . <span class=\"comment\"># 从暂存区恢复到工作文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard <span class=\"comment\"># 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">git ci &lt;file&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">git ci .</span><br><span class=\"line\"></span><br><span class=\"line\">git ci -a <span class=\"comment\"># 将git add, git rm和git ci等操作都合并在一起做</span></span><br><span class=\"line\"></span><br><span class=\"line\">git ci -am <span class=\"string\">&quot;some comments&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">git ci --amend <span class=\"comment\"># 修改最后一次提交记录</span></span><br><span class=\"line\"></span><br><span class=\"line\">git revert &lt;<span class=\"variable\">$id</span>&gt; <span class=\"comment\"># 恢复某次提交的状态，恢复动作本身也创建次提交对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">git revert HEAD <span class=\"comment\"># 恢复最后一次提交的状态</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看文件diff\"><a href=\"#查看文件diff\" class=\"headerlink\" title=\"查看文件diff\"></a>查看文件diff</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git diff &lt;file&gt; <span class=\"comment\"># 比较当前文件和暂存区文件差异 git diff</span></span><br><span class=\"line\"></span><br><span class=\"line\">git diff &lt;id1&gt;&lt;id1&gt;&lt;id2&gt; <span class=\"comment\"># 比较两次提交之间的差异</span></span><br><span class=\"line\"></span><br><span class=\"line\">git diff &lt;branch1&gt;..&lt;branch2&gt; <span class=\"comment\"># 在两个分支之间比较</span></span><br><span class=\"line\"></span><br><span class=\"line\">git diff --staged <span class=\"comment\"># 比较暂存区和版本库差异</span></span><br><span class=\"line\"></span><br><span class=\"line\">git diff --cached <span class=\"comment\"># 比较暂存区和版本库差异</span></span><br><span class=\"line\"></span><br><span class=\"line\">git diff --<span class=\"built_in\">stat</span> <span class=\"comment\"># 仅仅比较统计信息</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看提交记录\"><a href=\"#查看提交记录\" class=\"headerlink\" title=\"查看提交记录\"></a>查看提交记录</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> git <span class=\"built_in\">log</span> &lt;file&gt; <span class=\"comment\"># 查看该文件每次提交记录</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p &lt;file&gt; <span class=\"comment\"># 查看每次详细修改内容的diff</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p -2 <span class=\"comment\"># 查看最近两次详细修改内容的diff</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span> <span class=\"comment\"># 查看提交统计信息</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tig\"><a href=\"#tig\" class=\"headerlink\" title=\"tig\"></a>tig</h2><p>Mac上可以使用<code>tig</code>代替<code>diff</code>和<code>log</code>，<code>brew install tig</code></p>\n<h2 id=\"Git-本地分支管理\"><a href=\"#Git-本地分支管理\" class=\"headerlink\" title=\"Git 本地分支管理\"></a>Git 本地分支管理</h2><p>查看、切换、创建和删除分支</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git br -r <span class=\"comment\"># 查看远程分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git br &lt;new_branch&gt; <span class=\"comment\"># 创建新的分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git br -v <span class=\"comment\"># 查看各个分支最后提交信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">git br --merged <span class=\"comment\"># 查看已经被合并到当前分支的分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git br --no-merged <span class=\"comment\"># 查看尚未被合并到当前分支的分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git co &lt;branch&gt; <span class=\"comment\"># 切换到某个分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git co -b &lt;new_branch&gt; <span class=\"comment\"># 创建新的分支，并且切换过去</span></span><br><span class=\"line\"></span><br><span class=\"line\">git co -b &lt;new_branch&gt; &lt;branch&gt; <span class=\"comment\"># 基于branch创建新的new_branch</span></span><br><span class=\"line\"></span><br><span class=\"line\">git co <span class=\"variable\">$id</span> <span class=\"comment\"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span></span><br><span class=\"line\"></span><br><span class=\"line\">git co <span class=\"variable\">$id</span> -b &lt;new_branch&gt; <span class=\"comment\"># 把某次历史提交记录checkout出来，创建成一个分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout &lt;localBranchName&gt; <span class=\"comment\"># 切换到名为localBranchName的本地分支上</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout &lt;remoteBranchName&gt; <span class=\"comment\"># 切换到名为remoteBranchName的远程分支上，此时未新建分支，而是处于一个名为no branch的临时分支上，还需要使用git branch -b 来创建一个新分支并将该临时分支挂接到新分支上</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -b &lt;branchName&gt; <span class=\"comment\"># 创建一个名为branchName的新分支，并切换到该分支上</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout &lt;fileName&gt; <span class=\"comment\"># 将一个文件恢复至修改前的版本。</span></span><br><span class=\"line\"></span><br><span class=\"line\">git br -d &lt;branch&gt; <span class=\"comment\"># 删除某个分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git br -D &lt;branch&gt; <span class=\"comment\"># 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span></span><br><span class=\"line\">分支合并和rebase</span><br><span class=\"line\"></span><br><span class=\"line\">git merge &lt;branch&gt; <span class=\"comment\"># 将branch分支合并到当前分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git merge origin/master --no-ff <span class=\"comment\"># 不要Fast-Foward合并，这样可以生成merge提交</span></span><br><span class=\"line\"></span><br><span class=\"line\">git rebase master &lt;branch&gt; <span class=\"comment\"># 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git补丁管理-方便在多台机器上开发同步时用\"><a href=\"#Git补丁管理-方便在多台机器上开发同步时用\" class=\"headerlink\" title=\"Git补丁管理(方便在多台机器上开发同步时用)\"></a>Git补丁管理(方便在多台机器上开发同步时用)</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git diff &gt; ../sync.patch <span class=\"comment\"># 生成补丁</span></span><br><span class=\"line\"></span><br><span class=\"line\">git apply ../sync.patch <span class=\"comment\"># 打补丁</span></span><br><span class=\"line\"></span><br><span class=\"line\">git apply --check ../sync.patch <span class=\"comment\"># 测试补丁能否成功</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git暂存管理\"><a href=\"#Git暂存管理\" class=\"headerlink\" title=\"Git暂存管理\"></a>Git暂存管理</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git stash <span class=\"comment\"># 暂存</span></span><br><span class=\"line\"></span><br><span class=\"line\">git stash list <span class=\"comment\"># 列所有stash</span></span><br><span class=\"line\"></span><br><span class=\"line\">git stash apply <span class=\"comment\"># 恢复暂存的内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">git stash drop <span class=\"comment\"># 删除暂存区</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git远程分支管理\"><a href=\"#Git远程分支管理\" class=\"headerlink\" title=\"Git远程分支管理\"></a>Git远程分支管理</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull <span class=\"comment\"># 抓取远程仓库所有分支更新并合并到本地</span></span><br><span class=\"line\"></span><br><span class=\"line\">git pull --no-ff <span class=\"comment\"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span></span><br><span class=\"line\"></span><br><span class=\"line\">git fetch origin <span class=\"comment\"># 抓取远程仓库更新</span></span><br><span class=\"line\"></span><br><span class=\"line\">git merge origin/master <span class=\"comment\"># 将远程主分支合并到本地当前分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git co --track origin/branch <span class=\"comment\"># 跟踪某个远程分支创建相应的本地分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; <span class=\"comment\"># 基于远程分支创建本地分支，功能同上</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push <span class=\"comment\"># push所有分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push origin master <span class=\"comment\"># 将本地主分支推到远程主分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push -u origin master <span class=\"comment\"># 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push origin &lt;local_branch&gt; <span class=\"comment\"># 创建远程分支， origin是远程仓库名</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; <span class=\"comment\"># 创建远程分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push origin :&lt;remote_branch&gt; <span class=\"comment\">#先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git远程仓库管理\"><a href=\"#Git远程仓库管理\" class=\"headerlink\" title=\"Git远程仓库管理\"></a>Git远程仓库管理</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote -v <span class=\"comment\"># 查看远程服务器地址和仓库名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote show origin <span class=\"comment\"># 查看远程服务器仓库状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@ github:robbin/robbin_site.git <span class=\"comment\"># 添加远程仓库地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote set-url origin git@ github.com:robbin/robbin_site.git <span class=\"comment\"># 设置远程仓库地址(用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建远程仓库\"><a href=\"#创建远程仓库\" class=\"headerlink\" title=\"创建远程仓库\"></a>创建远程仓库</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --bare robbin_site robbin_site.git <span class=\"comment\"># 用带版本的项目创建纯版本仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\">scp -r my_project.git git@ git.csdn.net:~ <span class=\"comment\"># 将纯仓库上传到服务器上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> robbin_site.git &amp;&amp; <span class=\"built_in\">cd</span> robbin_site.git &amp;&amp; git --bare init <span class=\"comment\"># 在服务器创建纯仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@ github.com:robbin/robbin_site.git <span class=\"comment\"># 设置远程仓库地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push -u origin master <span class=\"comment\"># 客户端首次提交</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push -u origin develop <span class=\"comment\"># 首次将本地develop分支提交到远程develop分支，并且track</span></span><br><span class=\"line\"></span><br><span class=\"line\">git remote set-head origin master <span class=\"comment\"># 设置远程仓库的HEAD指向master分支也可以命令设置跟踪远程库和本地库</span></span><br><span class=\"line\"></span><br><span class=\"line\">git branch --set-upstream master origin/master</span><br><span class=\"line\"></span><br><span class=\"line\">git branch --set-upstream develop origin/develop</span><br><span class=\"line\"></span><br><span class=\"line\">git branch <span class=\"comment\"># 查看现在本地分支情况</span></span><br><span class=\"line\"></span><br><span class=\"line\">git branch -r <span class=\"comment\"># 查看服务器端分支情况</span></span><br><span class=\"line\"></span><br><span class=\"line\">git branch &lt;branchName&gt; <span class=\"comment\"># 创建一个名为branchName的新分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git branch -d &lt;branchName&gt; <span class=\"comment\"># 删除一个名为branchName的旧分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">git branch -m &lt;oldBranchName&gt; &lt;newBranchName&gt; <span class=\"comment\"># 将名为oldBranchName的分支名称修改为newBranchName</span></span><br><span class=\"line\"></span><br><span class=\"line\">git branch -m &lt;newBranchName&gt; <span class=\"comment\"># 将正在工作分支名称修改为newBranchName</span></span><br></pre></td></tr></table></figure>\n","categories":["Tool"],"tags":["git"]},{"title":"Git忽略规则及.gitignore规则不生效的解决办法","url":"/git_gitignore_unuse/","content":"<p>在<code>git</code>中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 <code>.gitignore</code> 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如：</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 此为注释 – 将被 Git 忽略</span><br><span class=\"line\"></span><br><span class=\"line\">*.<span class=\"keyword\">a</span>       # 忽略所有 .<span class=\"keyword\">a</span> 结尾的文件</span><br><span class=\"line\"></span><br><span class=\"line\">!lib.<span class=\"keyword\">a</span>    # 但 lib.<span class=\"keyword\">a</span> 除外</span><br><span class=\"line\"></span><br><span class=\"line\">/TODO     # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class=\"line\"></span><br><span class=\"line\">build/    # 忽略 build/ 目录下的所有文件</span><br><span class=\"line\"></span><br><span class=\"line\">doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure>\n\n<p>规则很简单，不做过多解释，但是有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是<code>.gitignore</code>只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改<code>.gitignore</code>是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> -r --cached .</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;update .gitignore&#x27;</span></span><br></pre></td></tr></table></figure>\n","categories":["Tool"],"tags":["git"]},{"title":"Git恢复版本","url":"/git_reset/","content":"<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看历史记录</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"comment\"># 回滚至某个版本</span></span><br><span class=\"line\">git reset –hard f093b6ed512f761a346e2e5c0f00230e448c217c</span><br><span class=\"line\"><span class=\"comment\"># 回滚</span></span><br><span class=\"line\">git reset –hard &lt;commit_id&gt;</span><br><span class=\"line\"><span class=\"comment\"># 线上回滚</span></span><br><span class=\"line\">git push origin HEAD –force</span><br><span class=\"line\"><span class=\"comment\"># 根据–soft –mixed –hard，会对working tree和index和HEAD进行重置:</span></span><br><span class=\"line\">git reset –mixed：</span><br><span class=\"line\">        此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息。</span><br><span class=\"line\">git reset –soft：</span><br><span class=\"line\">         回退到某个版本，只回退了commit信息，不会恢复到index file一级。如果还要提交，直接commit。</span><br><span class=\"line\">git reset –hard：</span><br><span class=\"line\">        彻底回退到某个版本，本地的源码也会变为上一个版本的内容。</span><br></pre></td></tr></table></figure>\n","categories":["Tool"],"tags":["git"]},{"title":"Git无法pull仓库refusing to merge unrelated histories","url":"/git_pull_refusing/","content":"<p>把Git在最新2.9.2，合并pull两个不同的项目，出现的问题如何去解决<code>fatal: refusing to merge unrelated histories</code></p>\n<p>我在Github新建一个仓库，写了License，然后把本地一个写了很久仓库上传。</p>\n<p>先pull，因为两个仓库不同，发现<code>refusing to merge unrelated histories</code>，无法pull</p>\n<p>因为他们是两个不同的项目，要把两个不同的项目合并，git需要添加一句代码，在<code>git pull</code>，这句代码是在<code>git 2.9.2</code>版本发生的，最新的版本需要添加<code>--allow-unrelated-histories</code></p>\n<p>假如我们的源是<code>origin</code>，分支是<code>master</code>，那么我们 需要这样写<code>git pull origin master --allow-unrelated-histories</code>需要知道，我们的源可以是本地的路径。</p>\n","categories":["Tool"],"tags":["git"]},{"title":"Git本地版本控制分支工作流","url":"/git_branch/","content":"<p>首次创建时候使用。创建+切换分支</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout -b work</span><br></pre></td></tr></table></figure>\n\n<p>去自己的工作分支</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout work</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>添加并提交工作分支全部修改</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -a</span><br></pre></td></tr></table></figure>\n\n<p>回到主分支</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure>\n\n<p>获取远程最新的修改，此时不会产生冲突</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<p>回到工作分支</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout work</span><br></pre></td></tr></table></figure>\n\n<p>用rebase合并主干的修改，如果有冲突在此时解决</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git rebase master</span><br></pre></td></tr></table></figure>\n\n<p>回到主分支</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure>\n\n<p>合并工作分支的修改，此时不会产生冲突。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git merge work</span><br></pre></td></tr></table></figure>\n\n<p>提交到远程主干</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>在master分支上进行了任何提交，新分支合并时就会出现冲突，切记，切记。</p>\n<p>Git鼓励大量使用分支(命令介绍)：<br>查看分支：<code>git branch</code><br>创建分支：<code>git branch &lt;name&gt;</code><br>切换分支：<code>git checkout &lt;name&gt;</code><br>创建+切换分支：<code>git checkout -b &lt;name&gt;</code><br>合并某分支到当前分支：<code>git merge &lt;name&gt;</code><br>本地文件修改(手工merge)完成后,要添加并提交,使得本地版本处于clean的状态.</p>\n<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>\n<p>合并后冲突解决办法</p>\n<ol>\n<li>提交全部<code>git commit -a</code></li>\n<li>如果不想提交全部,那么可以通过添加 <code>-i</code> 选项<br>  <code>git commit file/to/path -i -m “merge”</code></li>\n</ol>\n","categories":["Tool"],"tags":["git"]},{"title":"Git查看、删除、重命名远程分支和tag","url":"/git_tag_use/","content":"<p>这篇文章记录我在使用git的过程中碰到远程分支和tag的相关内容，提纲：</p>\n<ol>\n<li>查看远程分支</li>\n<li>删除远程分支和tag</li>\n<li>删除不存在对应远程分支的本地分支</li>\n<li>重命名远程分支</li>\n<li>把本地tag推送到远程</li>\n<li>获取远程tag<span id=\"more\"></span></li>\n</ol>\n<h2 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h2><p>加上-a参数可以查看远程分支，远程分支会用红色表示出来（如果你开了颜色支持的话）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git branch -a</span><br><span class=\"line\">  master</span><br><span class=\"line\">  remote</span><br><span class=\"line\">  tungway</span><br><span class=\"line\">  v1.52</span><br><span class=\"line\">* zrong</span><br><span class=\"line\">  remotes/origin/master</span><br><span class=\"line\">  remotes/origin/tungway</span><br><span class=\"line\">  remotes/origin/v1.52</span><br><span class=\"line\">  remotes/origin/zrong</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除远程分支和tag\"><a href=\"#删除远程分支和tag\" class=\"headerlink\" title=\"删除远程分支和tag\"></a>删除远程分支和tag</h2><p>在<code>Git v1.7.0</code> 之后，可以使用这种语法删除远程分支：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git push origin --delete</span><br></pre></td></tr></table></figure>\n\n<p>删除tag这么用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push origin --delete tag</span><br></pre></td></tr></table></figure>\n\n<p>否则，可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push origin :</span><br></pre></td></tr></table></figure>\n\n<p>这是删除tag的方法，推送一个空tag到远程tag：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag -d git </span><br><span class=\"line\">push origin :refs/tags/ </span><br></pre></td></tr></table></figure>\n\n<p>两种语法作用完全相同。</p>\n<h2 id=\"删除不存在对应远程分支的本地分支\"><a href=\"#删除不存在对应远程分支的本地分支\" class=\"headerlink\" title=\"删除不存在对应远程分支的本地分支\"></a>删除不存在对应远程分支的本地分支</h2><p>假设这样一种情况：</p>\n<ol>\n<li>我创建了本地分支b1并pull到远程分支 <code>origin/b1</code>；</li>\n<li>其他人在本地使用fetch或pull创建了本地的b1分支；</li>\n<li>我删除了 <code>origin/b1</code> 远程分支；</li>\n<li>其他人再次执行fetch或者pull并不会删除这个他们本地的 <code>b1</code> 分支，运行 <code>git branch -a</code> 也不能看出这个branch被删除了，如何处理？</li>\n</ol>\n<p>使用下面的代码查看b1的状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git remote show origin</span><br><span class=\"line\">* remote origin</span><br><span class=\"line\">  Fetch URL: git@github.com:xxx/xxx.git</span><br><span class=\"line\">  Push  URL: git@github.com:xxx/xxx.git</span><br><span class=\"line\">  HEAD branch: master</span><br><span class=\"line\">  Remote branches:</span><br><span class=\"line\">    master                 tracked</span><br><span class=\"line\">    refs/remotes/origin/b1 stale (use <span class=\"string\">&#x27;git remote prune&#x27;</span> to remove)</span><br><span class=\"line\">  Local branch configured <span class=\"keyword\">for</span> <span class=\"string\">&#x27;git pull&#x27;</span>:</span><br><span class=\"line\">    master merges with remote master</span><br><span class=\"line\">  Local ref configured <span class=\"keyword\">for</span> <span class=\"string\">&#x27;git push&#x27;</span>:</span><br><span class=\"line\">    master pushes to master (up to <span class=\"built_in\">date</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这时候能够看到b1是stale的，使用 <code>git remote prune origin</code> 可以将其从本地版本库中去除。 更简单的方法是使用这个命令，它在fetch之后删除掉没有与远程分支对应的本地分支：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git fetch -p</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重命名远程分支\"><a href=\"#重命名远程分支\" class=\"headerlink\" title=\"重命名远程分支\"></a>重命名远程分支</h2><p>在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支。 例如下面的例子中，我需要把 devel 分支重命名为 develop 分支：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git branch -av</span><br><span class=\"line\">* devel                             752bb84 Merge pull request <span class=\"comment\">#158 from Gwill/devel</span></span><br><span class=\"line\">  master                            53b27b8 Merge pull request <span class=\"comment\">#138 from tdlrobin/master</span></span><br><span class=\"line\">  zrong                             2ae98d8 modify CCFileUtils, <span class=\"built_in\">export</span> getFileData</span><br><span class=\"line\">  remotes/origin/HEAD               -&gt; origin/master</span><br><span class=\"line\">  remotes/origin/add_build_script   d4a8c4f Merge branch <span class=\"string\">&#x27;master&#x27;</span> into add_build_script</span><br><span class=\"line\">  remotes/origin/devel              752bb84 Merge pull request <span class=\"comment\">#158 from Gwill/devel</span></span><br><span class=\"line\">  remotes/origin/devel_qt51         62208f1 update .gitignore</span><br><span class=\"line\">  remotes/origin/master             53b27b8 Merge pull request <span class=\"comment\">#138 from tdlrobin/master</span></span><br><span class=\"line\">  remotes/origin/zrong              2ae98d8 modify CCFileUtils, <span class=\"built_in\">export</span> getFileData</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>删除远程分支：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git push --delete origin devel</span><br><span class=\"line\">To git@github.com:zrong/quick-cocos2d-x.git</span><br><span class=\"line\"> - [deleted]         devel</span><br></pre></td></tr></table></figure>\n\n<p>重命名本地分支：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch -m devel develop</span><br></pre></td></tr></table></figure>\n\n<p>推送本地分支：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git push origin develop</span><br><span class=\"line\">Counting objects: 92, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (48/48), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (58/58), 1.38 MiB, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 58 (delta 34), reused 12 (delta 5)</span><br><span class=\"line\">To git@github.com:zrong/quick-cocos2d-x.git</span><br><span class=\"line\"> * [new branch]      develop -&gt; develop</span><br></pre></td></tr></table></figure>\n\n<p>然而，在 github 上操作的时候，我在删除远程分支时碰到这个错误：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git push --delete origin devel</span><br><span class=\"line\">remote: error: refusing to delete the current branch: refs/heads/devel</span><br><span class=\"line\">To git@github.com:zrong/quick-cocos2d-x.git</span><br><span class=\"line\"> ! [remote rejected] devel (deletion of the current branch prohibited)</span><br><span class=\"line\">error: failed to push some refs to <span class=\"string\">&#x27;git@github.com:zrong/quick-cocos2d-x.git&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这是由于在 github 中，devel 是项目的默认分支。要解决此问题，这样操作：</p>\n<ol>\n<li>进入 github 中该项目的 Settings 页面；</li>\n<li>设置 Default Branch 为其他的分支（例如 master）；</li>\n<li>重新执行删除远程分支命令。</li>\n</ol>\n<h2 id=\"把本地tag推送到远程\"><a href=\"#把本地tag推送到远程\" class=\"headerlink\" title=\"把本地tag推送到远程\"></a>把本地tag推送到远程</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取远程tag\"><a href=\"#获取远程tag\" class=\"headerlink\" title=\"获取远程tag\"></a>获取远程tag</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git fetch origin tag</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYWthbmRyYWNhcmRzLmNvbS9tYWthbmRyYS82MjEtZ2l0LWRlbGV0ZS1hLWJyYW5jaC1sb2NhbC1vci1yZW1vdGU=\">https://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMDAzNTA1L2hvdy1kby1pLWRlbGV0ZS1hLWdpdC1icmFuY2gtYm90aC1sb2NhbGx5LWFuZC1pbi1naXRodWI=\">http://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-in-github<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9kZWVwbmlnaHR0d28vYXJjaGl2ZS8yMDExLzA2LzE4LzIwODQ0MzguaHRtbA==\">http://www.cnblogs.com/deepnighttwo/archive/2011/06/18/2084438.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNDA0MDc1NC9kZWxldGluZy1yZW1vdGUtbWFzdGVyLWJyYW5jaC1yZWZ1c2VkLWR1ZS10by1iZWluZy1jdXJyZW50LWJyYW5jaA==\">http://stackoverflow.com/questions/14040754/deleting-remote-master-branch-refused-due-to-being-current-branch<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3dlbGkuaXRleWUuY29tL2Jsb2cvMTQ0MTU4Mg==\">http://weli.iteye.com/blog/1441582<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Tool"],"tags":["git"]},{"title":"为Github帐号添加SSH keys","url":"/git_ssh_key/","content":"<p>使用<code>git clone</code>命令从<code>github</code>上同步<code>github</code>上的代码库时，如果使用SSH链接，而你的<code>SSH key</code>没有添加到github帐号设置中，系统会报下面的错误：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">Permission denied (publickey). fatal: The remote end hung <span class=\"keyword\">up</span> unexpectedly</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>这时需要在本地创建SSH key，然后将生成的SSH key文件内容添加到github帐号上去。 创建SSH key的方法很简单，执行如下命令就可以：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;yaozihao@yaozihao.cn&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后系统提示输入文件保存位置等信息，连续敲三次回车即可，生成的SSH key文件保存在</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p>然后用文本编辑工具打开该文件，我用的是vim,所以命令是：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p>接着拷贝<code>.ssh/id_rsa.pub</code>文件内的所以内容，将它粘帖到github帐号管理中的添加SSH key界面中。 打开github帐号管理中的添加SSH key界面的步骤如下：</p>\n<ol>\n<li>登录github</li>\n<li>点击右上方的Accounting settings图标</li>\n<li>选择 SSH key</li>\n<li>点击 Add SSH key 在出现的界面中填写SSH key的名称，填一个你自己喜欢的名称即可，然后将上面拷贝的<code>~/.ssh/id_rsa.pub</code>文件内容粘帖到key一栏，在点击“add key”按钮就可以了。添加过程github会提示你输入一次你的github密码</li>\n</ol>\n<p>添加完成后再次执行<code>git clone</code>就可以成功克隆github上的代码库了。</p>\n","categories":["Tool"]},{"title":"当从Git上Pull遇到问题时的几种处理方法","url":"/git_pull_err/","content":"<p>用<code>git pull</code>的时候，经常会遇到这样的错误：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">fatal: early EOF</span><br><span class=\"line\">fatal: index-pack failed</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>有几处设置可以尝试着去解决这个问题。首先找到<code>gitconfig</code>文件。它的路径在：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">*[git installed path]* /etc/gitconfig</span><br><span class=\"line\">*[mac]* ~/.gitconfig</span><br></pre></td></tr></table></figure>\n\n<p>以管理员模式打开这个文件，在<code>[core]</code>部分加上这一句：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">compression = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>这代表不压缩，会引起一定的性能问题。如果之后不再出现以上的错误，可以再去掉这一行。</p>\n<p>如果还不行，有可能是因为存在Git上的工程太大了，这时候需要把本地的限制调高一些。还是在<code>[core]</code>部分，加上这两行：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">packedGitLimit = <span class=\"number\">512</span><span class=\"keyword\">m</span> </span><br><span class=\"line\">packedGitWindowSize = <span class=\"number\">512</span><span class=\"keyword\">m</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>[pack]</code>部分加上这三行：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">deltaCacheSize = <span class=\"number\">2047</span><span class=\"keyword\">m</span> </span><br><span class=\"line\">packSizeLimit = <span class=\"number\">2047</span><span class=\"keyword\">m</span> </span><br><span class=\"line\">windowMemory = <span class=\"number\">2047</span><span class=\"keyword\">m</span></span><br></pre></td></tr></table></figure>\n\n<p>大小根据你的实际情况来填写。</p>\n<p>改完了记得保存。</p>\n<p>一般这么折腾一下，基本可以解决问题。</p>\n<p>或者在客户端执行，改为最大50M</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config –global http.postBuffer 52428800</span><br></pre></td></tr></table></figure>\n\n<p>当然其实能通过ssh提交来解决，所以实在没办法，我使用ssh来提交，而不用之前的http方法，最后证明可行。</p>\n","categories":["Tool"]},{"title":"推荐git常用的工具","url":"/git_tool/","content":"<p>工欲善其事，必先利其器。 作为一名开发人员，你不可能不知道git，无论你是开发自己的开源项目还是和团队一起进行大规模产品的开发，git都已经是源代码管理工具的首选。当然，那些hardcore developer会说，command line才是最好的工具，但并不是所有的时候command line都是高效的（不服？在command line里面做个compare试试你就知道了）。小编日常用的最多的也是command line，但是总还是会把几个好用的GUI Git客户端放在手边备着。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"GitHub-for-Desktop\"><a href=\"#GitHub-for-Desktop\" class=\"headerlink\" title=\"GitHub for Desktop\"></a>GitHub for Desktop</h2><p>全球开发人员交友俱乐部提供的强大工具，功能完善，使用方便。对于使用GitHub的开发人员来说是非常便捷的工具。界面干净，用起来非常顺手，上面的这条timeline非常漂亮，也可以直接提交PR。 唯一让我失望的是GitHub for Desktop不带三方合并工具，你必须自己手动解决冲突才可以。 – 免费 – 同时支持 Windows 和 Mac：对于需要经常在不同的操作系统间切换的开发人员来说非常方便。 – 漂亮的界面：作为每天盯着看的工具，颜值是非常重要的 – 支持Pull Request：直接从客户端提交PR，很方便 – Timeline 支持：直接在时间线上显示每次提交的时间点和大小 – 支持git LFS：存储大文件更加节省空间和高效 – 不支持三方合并：需要借助第三方工具才行 <strong>推荐合并工具</strong> Beyond Compare 3 一款方便merge的工具</p>\n<h2 id=\"Source-Tree\"><a href=\"#Source-Tree\" class=\"headerlink\" title=\"Source Tree\"></a>Source Tree</h2><p>SourceTree是老牌的Git GUI管理工具了，也号称是最好用的Git GUI工具。我的体验是确实强大，功能丰富，基本操作和高级操作都设计得非常流畅，适合初学者上手。 这个工具很有特色的一个功能就是支持Git Flow，你可以一键创建Git Flow的工作流。Git Flow是非常高效的团队协作模型和流程，Git的一大特色就是灵活轻量的分支，但如何在自己的团队中用好这个功能来匹配自己的研发流程是个问题。内置Git Flow让那些不太熟悉的开发人员也可以很快上手，并且将研发的业务流程固化在工具中，可以说是非常贴心的设计。 在 Windows 环境下，SourceTree是多语言的，但是不知道为什么我的Mac版总是显示英文。 – 免费 – 功能强大：无论你是新手还是重度用户，SourceTree 都会让你觉得很顺手。对于非常重度用户，Source Tree还支持自定义脚本的执行。 – 同时支持 Windows 和 Mac 操作系统 – 同时支持 Git 和 Mercurial 两种 VCS – 内置GitHub, BitBucket 和 Stash 的支持：直接绑定帐号即可操作远程repo</p>\n<h2 id=\"TortoiseGit\"><a href=\"#TortoiseGit\" class=\"headerlink\" title=\"TortoiseGit\"></a>TortoiseGit</h2><p>对这只<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b3J0b2lzZWdpdC5vcmcv\">小乌龟<i class=\"fa fa-external-link-alt\"></i></span>估计没有开发人员会不认识，SVN的超广泛使用也使得这个超好用的Svn客户端成了几乎每个开发人员的桌面必备软件。小乌龟只提供Windows版本，提供中文版支持的，对于中国的开发者来说者绝对是福音。 小乌龟的文件管理器右键菜单的操作方式对于新手来说非常的容易上手，而且容易理解。 – 免费 – 只支持Windows操作系统：与文件管理器的良好集成 – 中文界面 – 与TortoiseSVN一脉相承的操作体验</p>\n","categories":["Tool"]},{"title":"12款Git代码托管系统","url":"/git_code_system/","content":"<blockquote>\n<p>常见的12款Git代码托管系统。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Gitlab-——-Ruby-开发\"><a href=\"#Gitlab-——-Ruby-开发\" class=\"headerlink\" title=\"Gitlab —— Ruby 开发\"></a>Gitlab —— Ruby 开发</h2><p>GitLab是一个利用 Ruby on Rails 开发的开源应用程序，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。</p>\n<p>开源中国的 Git@OSC 就是基于 GitLab 开发的。</p>\n<h2 id=\"Gitblit-——-Java-开发\"><a href=\"#Gitblit-——-Java-开发\" class=\"headerlink\" title=\"Gitblit —— Java 开发\"></a>Gitblit —— Java 开发</h2><p>Gitblit 是一个纯 Java 库用来管理、查看和处理 Git 资料库。相当于 Git 的 Java 管理工具。</p>\n<h2 id=\"GitBucket-——-Scala-开发\"><a href=\"#GitBucket-——-Scala-开发\" class=\"headerlink\" title=\"GitBucket —— Scala 开发\"></a>GitBucket —— Scala 开发</h2><p>GitBucket是一个用Scala语言编写的易安装的Github克隆，你只需要把它的war文件扔到tomcat中，然后启动tomcat就直接可以访问了！</p>\n<h2 id=\"Gogs-——-Go-语言（国人开发）\"><a href=\"#Gogs-——-Go-语言（国人开发）\" class=\"headerlink\" title=\"Gogs —— Go 语言（国人开发）\"></a>Gogs —— Go 语言（国人开发）</h2><p>Gogs(Go Git Service) 是一个由 Go 语言编写的自助 Git 托管服务。</p>\n<h2 id=\"Gitonomy-——-PHP-开发\"><a href=\"#Gitonomy-——-PHP-开发\" class=\"headerlink\" title=\"Gitonomy —— PHP 开发\"></a>Gitonomy —— PHP 开发</h2><p>Gitonomy 是一个 Git 仓库管理解决方案，相当于一个 Git 服务器并为你提供基于 Web 的管理和浏览。</p>\n<h2 id=\"Gitorious-——-Ruby-开发\"><a href=\"#Gitorious-——-Ruby-开发\" class=\"headerlink\" title=\"Gitorious —— Ruby 开发\"></a>Gitorious —— Ruby 开发</h2><p>Gitorious 是一个基于 Git 版本控制系统的Web项目托管平台。基于 Ruby on Rails 开发。</p>\n<h2 id=\"ViewGit-——-PHP-开发\"><a href=\"#ViewGit-——-PHP-开发\" class=\"headerlink\" title=\"ViewGit —— PHP 开发\"></a>ViewGit —— PHP 开发</h2><p>ViewGit 是一个 Git 版本控制系统的 Web 接口，用来查看资源库中的信息，ViewGit 安装和升级都非常简单。</p>\n<h2 id=\"Git-Manager-——-PHP-开发\"><a href=\"#Git-Manager-——-PHP-开发\" class=\"headerlink\" title=\"Git Manager —— PHP 开发\"></a>Git Manager —— PHP 开发</h2><p>Git Manager 是 Git 的 Web 接口，可用于创建和管理 Git 资料库、用户和访问组。基于 Apache 的认证机制 (HTTP or LDAP) 并使用 MySQL 数据库来存储资料库、用户和组的关系数据。同时包含 ViewGit 资料库查看工具。</p>\n<h2 id=\"Git-Web-Access-——-ASP-NET-开发\"><a href=\"#Git-Web-Access-——-ASP-NET-开发\" class=\"headerlink\" title=\"Git Web Access —— ASP.NET 开发\"></a>Git Web Access —— ASP.NET 开发</h2><p>Git Web Access 是一套 ASP.NET 开发的基于 Web 的 Git 访问系统。</p>\n<h2 id=\"Gitalist-——-Perl-开发\"><a href=\"#Gitalist-——-Perl-开发\" class=\"headerlink\" title=\"Gitalist —— Perl 开发\"></a>Gitalist —— Perl 开发</h2><p>Gitalist 是一个基于浏览器的 Git 资料库浏览器</p>\n<p>主要特点：</p>\n<p>支持多库<br>支持多分支<br>提交的比较<br>Atom feeds<br>Color coded commit history<br>Gitweb.cgi URL compatibility</p>\n<h2 id=\"CODE-——-Python-开发\"><a href=\"#CODE-——-Python-开发\" class=\"headerlink\" title=\"CODE —— Python 开发\"></a>CODE —— Python 开发</h2><p>Douban CODE 是豆瓣开发的一个基于 git 版本控制系统的协作平台。</p>\n<p>CODE —— C: Community O: Original D: Developer E: Eldamar</p>\n<p>目前 CODE 仅开放了一个框架，支持：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">clone</span> &amp; push project</span><br><span class=\"line\">create project</span><br><span class=\"line\">create user</span><br></pre></td></tr></table></figure>\n\n<p>准备环境</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">MySQL</span><br><span class=\"line\">Memcached</span><br><span class=\"line\">Python &gt;= <span class=\"number\">2.7</span></span><br><span class=\"line\">pip &gt;= <span class=\"number\">1.4</span>.<span class=\"number\">1</span></span><br><span class=\"line\">virtualenv</span><br><span class=\"line\">git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Gitiles-——-Java-开发\"><a href=\"#Gitiles-——-Java-开发\" class=\"headerlink\" title=\"Gitiles —— Java 开发\"></a>Gitiles —— Java 开发</h2><p>Gitiles 是一个基于 JGit 的简单 Git 仓库浏览器，其重点是简单。</p>\n","categories":["Tool"],"tags":["tool","git"]},{"title":"linux和windows共享文件的samba安装配置","url":"/samba_install/","content":"<blockquote>\n<p>使用 samba 可以Linux和UNIX系统上通过SMB（Server Messages Block，信息服务块）协议和Windows系统进行信息共享，进行文件传递。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><h3 id=\"centos\"><a href=\"#centos\" class=\"headerlink\" title=\"centos\"></a>centos</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install samba</span><br><span class=\"line\">yum install samba-client</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update </span><br><span class=\"line\">sudo apt-get install -y samba samba-client</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建共享文件\"><a href=\"#创建共享文件\" class=\"headerlink\" title=\"创建共享文件\"></a>创建共享文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /home/zihao/share</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 777 /home/zihao/share</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备份后修改配置文件\"><a href=\"#备份后修改配置文件\" class=\"headerlink\" title=\"备份后修改配置文件\"></a>备份后修改配置文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">cp</span> /etc/samba/smb.conf  /etc/samba/smb.conf_backup</span><br><span class=\"line\">sudo vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>\n\n<p>搜寻这一行文字</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">; security = user</span><br></pre></td></tr></table></figure>\n\n<p>用下面这几行取代</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">security = user</span><br><span class=\"line\">username <span class=\"keyword\">map</span> = /etc/samba/smbusers</span><br></pre></td></tr></table></figure>\n\n<p>在配置文件最后面添加如下内容：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">//[共享名]</span><br><span class=\"line\">[Share]</span><br><span class=\"line\">//说明：comment是对该共享的描述，可以是任意字符串。</span><br><span class=\"line\">comment = Shared Folder with username <span class=\"built_in\">and</span> password</span><br><span class=\"line\">//path用来指定共享目录的路径。可以用%<span class=\"keyword\">u</span>、%<span class=\"keyword\">m</span>这样的宏来代替路径里的unix用户和客户机的Netbios名，用宏表示主要用于[homes] 共享域。</span><br><span class=\"line\">path = /home/ zihao/share</span><br><span class=\"line\">//说明：public用来指定该共享是否允许guest账户访问。</span><br><span class=\"line\">public = yes</span><br><span class=\"line\">//说明：writable用来指定该共享路径是否可写。</span><br><span class=\"line\">writable = yes</span><br><span class=\"line\">//说明：valid users用来指定允许访问该共享资源的用户。</span><br><span class=\"line\">valid users =  zihao</span><br><span class=\"line\">create mask = <span class=\"number\">0755</span></span><br><span class=\"line\">directory mask = <span class=\"number\">0755</span></span><br><span class=\"line\">//说明：available用来指定该共享资源是否可用。</span><br><span class=\"line\">available = yes</span><br><span class=\"line\">//说明：browseable用来指定该共享是否可以浏览。</span><br><span class=\"line\">browseable = yes</span><br></pre></td></tr></table></figure>\n\n<p>然后顺便把这里改一下，找到<code>[global]</code>把 <code>workgroup = MSHOME</code> 改成</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">workgroup = WORKGROUP</span><br><span class=\"line\">display charset = UTF-8</span><br><span class=\"line\">unix charset = UTF-8</span><br><span class=\"line\">dos charset = cp936</span><br></pre></td></tr></table></figure>\n\n<p>后面的三行是为了防止出现中文目录乱码的情况。其中根据你的local，<code>UTF-8</code> 有可能需要改成 <code>cp936</code>。自己看着办吧。</p>\n<p>现在要添加  <code>zihao</code> 这个网络访问帐户。如果系统中当前没有这个帐户，那么</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo useradd zihao</span><br></pre></td></tr></table></figure>\n\n<p>要注意，上面只是增加了 <code>zihao</code> 这个用户，却没有给用户赋予本机登录密码。所以这个用户将只能从远程访问，不能从本机登录。而且<code>samba</code>的登录密码可以和本机登录密码不一样。</p>\n<h2 id=\"新增网络使用者的帐号\"><a href=\"#新增网络使用者的帐号\" class=\"headerlink\" title=\"新增网络使用者的帐号\"></a>新增网络使用者的帐号</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo smbpasswd -a zihao</span><br><span class=\"line\">sudo vim /etc/samba/smbusers</span><br></pre></td></tr></table></figure>\n\n<p>在新建立的文件内加入下面这一行并保存</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">zihao = <span class=\"string\">&quot;network username&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果将来需要更改  zihao 的网络访问密码，也用这个命令更改</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo smbpasswd -a  zihao</span><br></pre></td></tr></table></figure>\n\n<p>删除网络使用者的帐号的命令把上面的 <code>-a</code> 改成 <code>-x</code></p>\n<p>这是非常关键的一步： 添加允许访问<code>samba</code>的账户（会让你设置对<br>应账户的密码）； 有了这一步之后，不仅对应账户的home目录可以直接访问了，而且在这个路径下的文件你也具备读写权限。这一组命令还包括：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbpasswd     -a  增加用户（要增加的用户必须已经是系统用户）</span><br><span class=\"line\">smbpasswd     -d 冻结用户，就是这个用户不能再登陆了</span><br><span class=\"line\">smbpasswd     -e   恢复用户</span><br><span class=\"line\">smbpasswd     -n   把用户的密码设置成空，要在global中写入null passwords -<span class=\"literal\">true</span></span><br><span class=\"line\">smbpasswd     -x    删除用户</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重启服务\"><a href=\"#重启服务\" class=\"headerlink\" title=\"重启服务\"></a>重启服务</h2><p>centos</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>\n\n<p>ubuntu</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo service smbd restart</span><br></pre></td></tr></table></figure>\n\n<p>cent OS7是通过systemctl 工具来启动了，方法如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> smb.service</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nmb.service</span><br><span class=\"line\">systemctl restart smb.service</span><br><span class=\"line\">systemctl restart nmb.service</span><br></pre></td></tr></table></figure>\n\n<p>可以查看安装包信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep samba</span><br></pre></td></tr></table></figure>\n\n<p>最后退出重新登录或者重新启动一下机器。</p>\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p>远程访问测试：</p>\n<h3 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h3><p>假如直接linux直接连接linux的<code>samba</code>可参考<code>man</code>和<code>–help</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbclient -L //127.0.0.1 -U  zihao</span><br><span class=\"line\">这样可以列出你可以访问的目录及文件</span><br><span class=\"line\">smbclient //127.0.0.1/ zihao -U  zihao</span><br><span class=\"line\">这样了可以访问你的个人目录了</span><br><span class=\"line\">smbclient -L //127.0.0.1 -N</span><br><span class=\"line\">列出不须密码可以访问的目录及文件</span><br><span class=\"line\">smbclient  //127.0.0.1/Document -N</span><br><span class=\"line\">匿名访问 Document目录</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h3><p>打开<code>Finder</code> 快捷键 <code>command +k</code></p>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>开始-》运行-》输入：<code>\\\\Samba</code>服务器的ip<br>格式</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb://server/printer</span><br><span class=\"line\">smb://workgroup/server/printer</span><br><span class=\"line\">smb://username:password@server/printer</span><br><span class=\"line\">smb://username:password@workgroup/server/printer</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>smb适用于内网，192，10 网段。</p>\n<p>公网因为其所使用的端口号139，445 ，查看方式 <code>netstat -anpl | grep mbd</code>均为高危端口号所以可能被部分运营商判断为高危端口，而进行了默认屏蔽。</p>\n<p>虚拟机的配置方式请看另一个<a href=\"/samba_install\">文章</a></p>\n","categories":["Tool"],"tags":["mac","linux","samba"]},{"title":"SS(shardowsocks)+FS(Final speed)带你飞","url":"/shardowsocks_final_speed/","content":"<p>早期我曾通过goagent、xx-net勉强能浏览google学术等（你懂的） 网站，但至今很久没用过了，主要原因这东西是免费的访问速度、稳定性都很受限，当有限资源满足不了现代人类的欲望时，他们会寻求捷径以获得更多资源，我亦如此。三十而立了，越来越有欲望自己搞点什么，结合自己三十年来学到的东西，不追求利益就出于兴趣玩玩，于是乎有了需要查询的需求，于是乎我做了这件事情，留此文。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1、租用服务器资源\"><a href=\"#1、租用服务器资源\" class=\"headerlink\" title=\"1、租用服务器资源\"></a>1、租用服务器资源</h2><p>在<code>gigsgiscloud</code>上租用了个最便宜的香港vps，2刀一月。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">OS：CentOS 6 </span><br><span class=\"line\">Men: 512M </span><br><span class=\"line\">bandwith:500G/Mon （完全足够） </span><br><span class=\"line\">disk: 30G</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、服务端软件安装\"><a href=\"#2、服务端软件安装\" class=\"headerlink\" title=\"2、服务端软件安装\"></a>2、服务端软件安装</h2><p>root用户（ssh）登陆vps<br>一键安装SS：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x shadowsocks.sh</span><br><span class=\"line\">./shadowsocks.sh 2&gt;&amp;1 | <span class=\"built_in\">tee</span> shadowsocks.log</span><br></pre></td></tr></table></figure>\n\n<p>安装成功提示：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">Congratulations, shadowsocks install completed!</span><br><span class=\"line\">Your Server IP:your_server_ip</span><br><span class=\"line\">Your Server Por<span class=\"variable\">t:8989</span></span><br><span class=\"line\">Your Password:your_password</span><br><span class=\"line\">Your Local IP:<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\">Your Local Por<span class=\"variable\">t:1080</span></span><br><span class=\"line\">Your Encryption Method:aes-<span class=\"number\">256</span>-cfb</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome <span class=\"keyword\">to</span> visi<span class=\"variable\">t:http</span>://teddysun.<span class=\"keyword\">com</span>/<span class=\"number\">342</span>.htmlEnjoy it!</span><br></pre></td></tr></table></figure>\n\n<p>用户配置文件：</p>\n<p>路径<code>/etc/shadowsocks.json</code></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;server&quot;</span>:<span class=\"string\">&quot;your_server_ip&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;server_port&quot;</span>:<span class=\"number\">8989</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;local_address&quot;</span>:<span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;local_port&quot;</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;password&quot;</span>:<span class=\"string\">&quot;yourpassword&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;timeout&quot;</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;method&quot;</span>:<span class=\"string\">&quot;aes-256-cfb&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;fast_open&quot;</span>: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时可以配置多用户。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">启动：/etc/init.d/shadowsocks start</span><br><span class=\"line\">停止：/etc/init.d/shadowsocks <span class=\"keyword\">stop</span></span><br><span class=\"line\">重启：/etc/init.d/shadowsocks restart</span><br><span class=\"line\">状态：/etc/init.d/shadowsocks status</span><br></pre></td></tr></table></figure>\n\n<p>一键安装FS，不要装成了XS，XS是收费的：<br>root用户执行以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -f install_fs.sh</span><br><span class=\"line\">wget  https://github.com/dupontjoy/customization/raw/master/Rules/Shadowsocks/Finalspeed/install_fs.sh</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x install_fs.sh</span><br><span class=\"line\">./install_fs.sh 2&gt;&amp;1 | <span class=\"built_in\">tee</span> install.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动：</span></span><br><span class=\"line\">sh /fs/start.sh</span><br><span class=\"line\"><span class=\"comment\"># 停止：</span></span><br><span class=\"line\">sh /fs/stop.sh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、客户端配置\"><a href=\"#3、客户端配置\" class=\"headerlink\" title=\"3、客户端配置\"></a>3、客户端配置</h2><p>下载SS客户端：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL3NoYWRvd3NvY2tzL3dpa2kvUG9ydHMtYW5kLUNsaWVudHMjd2luZG93cw==\">https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients#windows<i class=\"fa fa-external-link-alt\"></i></span> </p>\n<p>下载安装FS客户端：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWJjbGl0ZS5jbi9yZWRpcmVjdC9hSFIwY0RvdkwyWnpMbVF4YzIwdWJtVjBMMlpwYm1Gc2MzQmxaV1F2Wm1sdVlXeHpjR1ZsWkY5cGJuTjBZV3hzTVM0d0xtVjRaUT09\">https://www.abclite.cn/redirect/aHR0cDovL2ZzLmQxc20ubmV0L2ZpbmFsc3BlZWQvZmluYWxzcGVlZF9pbnN0YWxsMS4wLmV4ZQ==<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>SS+FS配置<br>注：SS上要配两个服务器，一个连接VPS，一个做FS代理的，如图，密码为<code>/etc/shadowsocks.json</code> 配置文件中的密码</p>\n<h2 id=\"4、使用chrome浏览\"><a href=\"#4、使用chrome浏览\" class=\"headerlink\" title=\"4、使用chrome浏览\"></a>4、使用chrome浏览</h2><p>配置chrome套接字代理：<code>127.0.0.1</code> 端口1083，还可<code>swichsharp</code>扩展让浏览器在代理非代理模式间快捷切换。<br>此时若可访问谷歌，且FS显示端口xxx连接成功，代表加速成功，FS着实强大，在与香港<code>ping</code>值达到<code>300-500ms</code>的情况下依然可跑满网络，如此，奔跑吧骚年。<br>注：以上仅vps每月2刀的租用费用，其他软件都免费。</p>\n<p>Reference：<br><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3RyOTk5X2NuL2FydGljbGUvZGV0YWlscy81MTI4MDgzNA==\">http://blog.csdn.net/str999_cn&#x2F;article&#x2F;details&#x2F;51280834<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY21za3kuY29tL2ZpbmFsc3BlZWQv\">https://www.cmsky.com/finalspeed/<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuc2luYS5jb20uY24vcy9ibG9nX2QzMDY4NmY3MDEwMnZ4dDEuaHRtbA==\">http://blog.sina.com.cn/s/blog_d30686f70102vxt1.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Tool"],"tags":["shardowsocks"]},{"title":"Ubuntu环境vm-tool搭建win10下与linux虚拟机Ubuntu建立共享文件夹","url":"/samba_vm_tool/","content":"<p>有两种方式。<br>1：<a href=\"/samba_install\">samba</a><br>2：vm-tool</p>\n<p>本次主要介绍<code>vmtool</code>的共享功能。</p>\n<ol>\n<li>使用ssh连接系统，需要先安装 <code>apt-get install openssh</code></li>\n<li>查看进程：<code>ps -ef | grep beam</code></li>\n<li>在win10下与linux虚拟机Ubuntu建立共享文件夹：<span id=\"more\"></span></li>\n</ol>\n<h2 id=\"安装vmtools-for-linux\"><a href=\"#安装vmtools-for-linux\" class=\"headerlink\" title=\"安装vmtools for linux\"></a>安装vmtools for linux</h2><p>选择vmware workstation程序菜单中VM &gt;install VMware tools…<br>启动Ubuntu，终端上执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /mnt/cdrom</span><br><span class=\"line\">mount /dev/cdrom /mnt/cdrom</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># vmtools的安装文件放在vmware虚拟的cdrom中，首先要mount上这个光驱才能找到安装文件</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /mnt/cdrom</span><br><span class=\"line\">tar -zxvf VMwareTools-5.0.0-12124.i386.tar.gz -C /tmp</span><br><span class=\"line\"><span class=\"comment\"># 把安装文件解压到/tmp， VMwareTools-5.0.0-12124.i386.tar.gz，虚拟机自带的，不同版本不一样</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /tmp/vmware-tools-distrib</span><br><span class=\"line\">./vmware-install.pl</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>安装默认配置vmware tools就可以正常工作，安提示输入yes&#x2F;No。回车键选择默认配置，20分钟左右。<br>安装完以后，vmware会添加一个vmhgfs的模块到内核中，可以使用lsmod查看 ，没有的话，建立共享文件夹就会不成功。不过可以从win7下复制文件到虚拟机下，拖动也可以。</p>\n<h2 id=\"设置win7下共享的目录：\"><a href=\"#设置win7下共享的目录：\" class=\"headerlink\" title=\"设置win7下共享的目录：\"></a>设置win7下共享的目录：</h2><p>在虚拟机桌面，选择<code>vmware workstation</code>程序菜单中 <code>VM&gt;Settings&gt;Options&gt;Shared Folders &gt;Properties</code><br>点击对话框右下的“add”按钮，点击“下一步”</p>\n<p>在文本框“name”中输入共享目录的名字（这里填写的目录名以后在ghost computer的linux系统中将显示出同样的目录名），假设为share；在<code>host folder</code>中填入<code>host computer</code>中windows系统想要共享出来的目录.</p>\n<p>下一个对话框是选择共享的方式:<br>Enable this share是指这个共享长期有效，目录可读写；Read-only方式是指这个共享长期有效，目录只读；<br>Disable after this session方式是指下次ghost computer被关闭或挂起后，共享将会失效。<br>一般情况下选择Enable this share然后点击“完成”</p>\n<p>自此，shared folder设置完毕</p>\n<h2 id=\"shared-folder目录的使用\"><a href=\"#shared-folder目录的使用\" class=\"headerlink\" title=\"shared folder目录的使用\"></a>shared folder目录的使用</h2><p>切换到<code>ghost computer</code>的linux系统，执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /mnt/hgfs</span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到share的目录，并且可以用cp等指令实现windows到linux，linux到windows的读写操作了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install open-vm-tools-dkms</span><br><span class=\"line\">sudo mount  -t  vmhgfs  .host:/   /mnt/hgfs</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决每次都要挂载的方法\"><a href=\"#解决每次都要挂载的方法\" class=\"headerlink\" title=\"解决每次都要挂载的方法\"></a>解决每次都要挂载的方法</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#为了每次开机自动挂载共享目录，终端下输入：</span></span><br><span class=\"line\">sudo gedit /etc/init.d/open-vm-tools</span><br><span class=\"line\"><span class=\"comment\">#末尾增加一行： </span></span><br><span class=\"line\">sudo mount -t vmhgfs .host:/ /mnt/hgfs </span><br><span class=\"line\"><span class=\"comment\">#（host:/ 处有空格）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#或者编辑 /etc/fstab，添加下面一行</span></span><br><span class=\"line\">.host:/shared     /mnt/hgfs       vmhgfs     defaults  0  0 （按需写）</span><br><span class=\"line\">tips:</span><br></pre></td></tr></table></figure>\n\n<p>ubuntu下提示命令用错了，安装了<code>open vm tools</code>以后要用：<code>vmhgfs-fuse .host:/ /mnt/hgfs</code></p>\n","categories":["Tool"],"tags":["linux","ubuntu","samba"]},{"title":"windows如何连接samba服务器","url":"/samba_windows/","content":"<p>上一篇<a href=\"/samba_vm_tool\">博客</a>已经讲了怎么在centos下安装samba服务器，这篇文章主要讲如何在windows下连接。</p>\n<p>点击开始—&gt;输入运行(快捷键 win+r)—&gt; 填写<code>170.168.1.1</code> (你的linux服务器ip)—&gt;输入刚刚设置的samba服务器账号密码，连接成功。</p>\n<p>可将该磁盘映射到本机，方便访问。</p>\n<p>点开计算机—-&gt;映射网络驱动器—&gt;在文件夹位置选择要映射的文件夹。</p>\n<span id=\"more\"></span>\n","categories":["Tool"],"tags":["samba","windows"]},{"title":"www.0xroot.cn/demo.html源码分享","url":"/something_have_fun/","content":"<blockquote>\n<p>一个小bug引起的博文。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p><strong>完整 HTML 代码如下：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">var</span> total=“”;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000000</span>;i++)</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    total= total+i.<span class=\"property\">toString</span> ();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    history.<span class=\"property\">pushState</span> (<span class=\"number\">0</span>,<span class=\"number\">0</span>,total);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>demo：（温馨提示：请保存浏览器其它窗口的编辑任务）<br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4weHJvb3QuY24vZGVtby5odG1s\">www.0xroot.cn/demo.html<i class=\"fa fa-external-link-alt\"></i></span> (点击一下，又不会怀孕！)</p>\n<p><strong>接来下会发生什么？</strong><br>点开以后，我的状态是这样的……………..<br>如果你是 PC 端用户，点开链接以后，电脑 CPU 内存极有可能一路狂飙直至浏览器崩溃卡死！<br>如果你是移动端（安卓、iPhone）用户，点开链接以后你的浏览器会闪退！<br>在微博、微信客户端点开链接同样会闪退。<br>iPhone 用 Safari 打开之后链接之后，手机注销重启了！…</p>\n<p><strong>思考</strong><br>这是 Bug 还是 0day？为什么会有这一现象？如何实现的？</p>\n","categories":["Tool"]},{"title":"解决Mac发热问题，you-get加mpv看电影","url":"/mac_you_get_mpv/","content":"<p>安装教程：</p>\n<ul>\n<li>mpv : <span class=\"exturl\" data-url=\"aHR0cDovL3NvbmdjaGVud2VuLmNvbS90ZWNoLzIwMTUvMDUvMDkvbXB2LXBsYXllci8=\">http://songchenwen.com/tech/2015/05/09/mpv-player/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>you-get : <span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3UtZ2V0Lm9yZy8=\">https://you-get.org/<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>简单说下用法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mpv http://www.douyutv.com/56040</span><br></pre></td></tr></table></figure>\n\n<p>这种情况下是直接调用的 youtube-dl 来观看在线视频（这个是在使用 brew 安装 mpv 时就已经安装好了）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">you-get -p mpv http://www.bilibili.com/video/av3458634/</span><br></pre></td></tr></table></figure>\n\n<p>这种情况是调用 <code>you-get</code> 来观看在线视频</p>\n","categories":["Tool"]},{"title":"三条命令搭建shadowsock服务器","url":"/shadowsock_three_command/","content":"<blockquote>\n<p>使用自己部署Shadowsocks服务器，实现代理上网。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"shadowSocks客户端\"><a href=\"#shadowSocks客户端\" class=\"headerlink\" title=\"shadowSocks客户端\"></a>shadowSocks客户端</h2><p>vps 环境 ubuntu 14.10</p>\n<p>安装docker</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install docker.io</span><br></pre></td></tr></table></figure>\n\n<p>下载shadow sock 镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull oddrationale/docker-shadowsocks</span><br></pre></td></tr></table></figure>\n\n<p>运行镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 7777:1984 -v /etc/hosts:/etc/hosts oddrationale/docker-shadowsocks -s 0.0.0.0 -p 1984 -k superzhan -m aes-256-cfb</span><br></pre></td></tr></table></figure>\n\n<p><code>7777</code> 是<code>shadow sock</code> 连接端口。<br><code>superzhan</code> 是<code>shadow sock</code> 的连接密码<br><code>aes-256-cfb</code> 连接协议</p>\n<h2 id=\"shadowSocks服务器端\"><a href=\"#shadowSocks服务器端\" class=\"headerlink\" title=\"shadowSocks服务器端\"></a>shadowSocks服务器端</h2><p>ShadowSocks有服务器端和客户端，有技术能力的，可以自行搭建服务器端，一般可通过购买海外VPS之后进行搭建，没有技术能力的，可以购买商业ShadowSocks帐号。</p>\n<p>有网友做了个服务器端一键安装ShadowSocks的脚本，使用root用户登录，运行以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x shadowsocks-libev.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./shadowsocks-libev.sh 2&gt;&amp;1 | <span class=\"built_in\">tee</span> shadowsocks-libev.log</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，得到的服务器端口：8989，客户端端口：1080，密码为自己设定的密码。</p>\n<p>卸载方法：使用 root 用户登录，运行以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">./shadowsocks-libev.sh uninstall</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后即已后台启动 shadowsocks ，运行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ps -ef | grep ss-server | grep -v ps | grep -v grep</span><br></pre></td></tr></table></figure>\n\n<p>可以查看进程是否存在。此脚本安装完成后，会将 shadowsocks-libev 加入开机自启动。</p>\n<p>使用命令：<br>启动：<code>/etc/init.d/shadowsocks start</code></p>\n<p>停止：<code>/etc/init.d/shadowsocks stop</code></p>\n<p>重启：<code>/etc/init.d/shadowsocks restart</code></p>\n<p>查看状态：<code>/etc/init.d/shadowsocks status</code></p>\n<p>修改端口和加密方式：编辑修改配置文件 <code>/etc/shadowsocks-libev/config.json</code></p>\n<p>每隔1小时重启服务：<code>crontab -u root -e</code> 输入 <code>0 */1 * * * /etc/init.d/shadowsocks restart</code></p>\n","categories":["Tool"],"tags":["shadowsock"]},{"title":"直接Mark！开源的DevOps开发工具箱","url":"/mark_devops/","content":"<p>DevOps是一组过程、方法与系统的统称，用于促进开发（应用程序&#x2F;软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。在DevOps的整个流程中，使用一些开源工具可以促进开发与运维之间的沟通，有利于项目的管理，甚至可以达到事半功倍的效果。 本文作者Richard Kraaijenhagen是<span class=\"exturl\" data-url=\"aHR0cDovL293bGluLmNvbS8=\">Owlin<i class=\"fa fa-external-link-alt\"></i></span>创始人，全栈工程师，数据科学家。他收集了DevOps开发可能用到的所有工具，并且把它们按照职责进行分类，本文摘取了部分工具分享给大家，这些工具也可以用于日常软件方面的开发，所以，大家直接Mark吧！</p>\n<span id=\"more\"></span>\n\n<h2 id=\"包-amp-产品管理工具\"><a href=\"#包-amp-产品管理工具\" class=\"headerlink\" title=\"包&amp;产品管理工具\"></a><strong>包&amp;产品管理工具</strong></h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Nob2NvbGF0ZXkvY2hvY29sYXRleQ==\">Chocolatey<i class=\"fa fa-external-link-alt\"></i></span>：Chocolatey是Windows下一款开源的命令行包管理软件 ，简单说这就是Windows的apt-get；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3plZWYudG8vY2xpY2s/bHBpZD00ODczODcma2V5PWZfTzRaMl9ab1FYSUFWLURjMkdaelBlYWItbWZCMEdDQmJvJnRhcmdldF91cmw9aHR0cHM6Ly9naXRodWIuY29tL2pvcmRhbnNpc3NlbC9mcG0=\">FPM<i class=\"fa fa-external-link-alt\"></i></span>：全称是Effing package management，该死的软件包管理器，极大的缓解了多个平台构建软件包(deb,rpm,等)的痛苦；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3J1c3Nzcy9IZXJk\">Herd<i class=\"fa fa-external-link-alt\"></i></span>：是一个基于Twitter <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xnL211cmRlcg==\">Murder<i class=\"fa fa-external-link-alt\"></i></span>的文件分布系统；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZncmVobS92YWdyYW50LWNhY2hpZXI=\">Vagrant Cachier<i class=\"fa fa-external-link-alt\"></i></span>：Vagrant的一个插件，用于缓存包方面的管理；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dpeHRvb2xzZXQvd2l4NA==\">WiX Toolset<i class=\"fa fa-external-link-alt\"></i></span>：提供一组最强大的工具集来帮助你创建Windows安装包。该工具集从XML源代码构建你的Windows安装程序包，可以无缝集成到构建过程；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2JveHN0YXJ0ZXIub3JnLw==\">Boxstarter<i class=\"fa fa-external-link-alt\"></i></span>：利用Chocolatey包管理工具来自动化安装软件和创建可重复、脚本化的Windows环境；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iaXRidWNrZXQub3JnL3Njb3JlYmlnL2VsaXRh\">Elita<i class=\"fa fa-external-link-alt\"></i></span>：Elita是一个利用git和salt进行持续部署（部署作为服务）和API-driven基础设施的引擎&#x2F;框架；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21mb2VtbWVsL2ZpZw==\">Fig<i class=\"fa fa-external-link-alt\"></i></span>：主要用来跟Docker一起来实现的快速隔离的开发环境；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wdWxwcHJvamVjdC5vcmcv\">Pulp<i class=\"fa fa-external-link-alt\"></i></span>：Pulp是一个用来管理软件库以及相关内容的平台；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2plZGk0ZXZlci92ZWV3ZWU=\">Veewee<i class=\"fa fa-external-link-alt\"></i></span>：Veewee是一个开源工具，用来创建和配置轻量级、可再生、便捷式虚拟机环境。</li>\n</ul>\n<h2 id=\"日志-amp-监控\"><a href=\"#日志-amp-监控\" class=\"headerlink\" title=\"日志&amp;监控\"></a><strong>日志&amp;监控</strong></h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hcnRpbnJ1c2V2L2Ftb25vbmU=\">AmonOne<i class=\"fa fa-external-link-alt\"></i></span>：现代化的自托管服务器监控工具；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0RpZXRlcmJlL2FudGhyYWNpdGU=\">Anthracite<i class=\"fa fa-external-link-alt\"></i></span>：一个事件&#x2F;日志改变&#x2F;管理应用程序；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1N0YWNrU3Rvcm0vY29sbGVjdGQz\">collectd3<i class=\"fa fa-external-link-alt\"></i></span>：是一个可视化的collectd系统性能统计工具；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NvbGxlY3RkLm9yZy8=\">collectd<i class=\"fa fa-external-link-alt\"></i></span>：是一个守护(daemon)进程，用来收集系统性能和提供各种存储方式来存储不同值的机制；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0JyaWdodGNvdmVPUy9EaWFtb25k\">Diamond<i class=\"fa fa-external-link-alt\"></i></span>：是一个基于Python的守护程序，主要用来收集系统指标，并且把它们发布到Graphite（或其它）工具中；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VycmJpdC9lcnJiaXQ=\">Errbit<i class=\"fa fa-external-link-alt\"></i></span>：是一个用于收集和管理程序错误的开源工具；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3NlbnN1YXBwLm9yZy8=\">Sensu<i class=\"fa fa-external-link-alt\"></i></span>：一个开源的监控框架；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xvZ3N0YXNoLm5ldC8=\">Logstash<i class=\"fa fa-external-link-alt\"></i></span>：是一个应用程序日志、事件的传输、处理、管理和搜索的平台。你可以用它来统一对应用程序日志进行收集管理，提供Web接口用于查询和统计；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xvZ2lvLm9yZy8=\">log.io<i class=\"fa fa-external-link-alt\"></i></span>：一个实时的开源日志监控工具；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2Zub3JkbWV0cmljLmlvLw==\">FnordMetric<i class=\"fa fa-external-link-alt\"></i></span>：是一个基于redis&#x2F;ruby的实时事件跟踪应用，是个收集和可视化时间序列数据的框架，用户可以在几分钟内创建漂亮的实时分析仪表盘；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0c3kvbG9nc3Rlcg==\">Logster<i class=\"fa fa-external-link-alt\"></i></span>：是一个工具，读取日志文件然后创建Graphite 或 Ganglia可用的指标数据。比如你可能使用logster来图形化在你的Web Server日志中的HTTP响应发生数量；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VsYXN0aWNzZWFyY2gva2liYW5hLw==\">Kibana<i class=\"fa fa-external-link-alt\"></i></span>：是一个为Logstash和ElasticSearch提供的日志分析的Web接口。可使用它对日志进行高效的搜索、可视化、分析等各种操作；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL21tb25pdC5jb20vbW9uaXQv\">Monit<i class=\"fa fa-external-link-alt\"></i></span>：是一款功能非常丰富的进程、文件、目录和设备的监测软件，用于Unix平台。 它可以自动修复那些已经停止运作的程序，适合处理那些由于多种原因导致的软件错误；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvZGFoYWxlL21ldHJpY3Mv\">Metrics<i class=\"fa fa-external-link-alt\"></i></span>：这并不是Java库，而是基于Go的一个轻量级的检测器；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2dyYXBoaXRlLnJlYWR0aGVkb2NzLm9yZy9lbi9sYXRlc3Qv\">Graphite<i class=\"fa fa-external-link-alt\"></i></span>：是一个用于采集网站实时信息并进行统计的开源项目，可用于采集多种网站服务运行状态信息；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2dhbmdsaWEuaW5mby8=\">Ganglia<i class=\"fa fa-external-link-alt\"></i></span>：Ganglia是一个跨平台可扩展的、高性能计算系统下的分布式监控系统，如集群和网格；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2VydmVyZGVuc2l0eS5jb20v\">Server Density<i class=\"fa fa-external-link-alt\"></i></span>：一个跨平台的监控系统；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JvdW5kYXJ5L2ZvbHNvbQ==\">Folsom<i class=\"fa fa-external-link-alt\"></i></span>：Folsom是一款受 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvZGFoYWxlL21ldHJpY3Mv\">Coda Hale’s metrics<i class=\"fa fa-external-link-alt\"></i></span>启发的、基于Erlang的度量系统；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NvbWNhc3QvY21i\">CMB (Cloud Message Bus)<i class=\"fa fa-external-link-alt\"></i></span>：是一个高可用、横向扩展的队列和通知服务，兼容AWS SQS和SNS；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL25pY29sYXJnby5naXRodWIuaW8vZ2xhbmNlcy8=\">Glances<i class=\"fa fa-external-link-alt\"></i></span>：是一款用于Linux、BSD的开源命令行系统监视工具，它使用Python语言开发，能够监视CPU、负载、内存、磁盘I&#x2F;O、网络流量、文件系统、系统温度等信息。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Z6YW5pbm90dG8vdXB0aW1l\">Uptime<i class=\"fa fa-external-link-alt\"></i></span>：使用Node.js、MongoDB和Twitter Bootstrap开发的远程监控系统；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNpbmdhLm9yZy8=\">Icinga<i class=\"fa fa-external-link-alt\"></i></span>：Nagios的扩展版本；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3BhY2tldGJlYXQuY29tLw==\">Packetbeat<i class=\"fa fa-external-link-alt\"></i></span>：?是开源应用监控和包跟踪系统；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3R3aXR0ZXIuZ2l0aHViLmlvL3ppcGtpbi8=\">Zipkin<i class=\"fa fa-external-link-alt\"></i></span>：是Twitter的一个开源项目，允许开发者收集Twitter各个服务上的监控数据，并提供查询接口；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZWFkbWFuc3NuaXRjaC5jb20v\">Dead Man???s Snitch<i class=\"fa fa-external-link-alt\"></i></span>：是一款监控Heroku Scheduler、计划的监视工具；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0c3kvc3RhdHNkLw==\">Statsd<i class=\"fa fa-external-link-alt\"></i></span>：是一个Node.js的daemon程序，简单，轻巧。使用的UDP协议，可以和Graphite图片渲染应用结合；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3JpZW1hbm4uaW8v\">Riemann<i class=\"fa fa-external-link-alt\"></i></span>：一个网络监控系统；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NvZGFicmV3L3B1cHBldC1kYXNoYm9hcmQ=\">Puppet Dashboard<i class=\"fa fa-external-link-alt\"></i></span>：Puppet Dashboard是一个Web接口，为Puppet提供节点分类和报告功能，是一个开源的配置管理工具；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2pteHRyYW5zL2pteHRyYW5z\">jmxtrans<i class=\"fa fa-external-link-alt\"></i></span>：jmxtrans是一款非常强大的工具，使用它可以轻易生成基于json的配置文章，然后再以你想要的格式输出；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0N1ZS9zY2FsZXM=\">Scales<i class=\"fa fa-external-link-alt\"></i></span>：跟踪服务器状态和统计指标，使你全面掌握服务器状态，还可以发送指标到Graphite来图像呈现或者向文件写入崩溃信息；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy56YWJiaXguY29tLw==\">Zabbix<i class=\"fa fa-external-link-alt\"></i></span>：是一个基于Web界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ncmF5bG9nMi5vcmcv\">Graylog 2<i class=\"fa fa-external-link-alt\"></i></span>：Graylog2是一个用来将系统日志syslog保存到MongoDB中的工具。</li>\n</ul>\n<h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a><strong>进程管理</strong></h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N1YnN0YWNrL2JvdW5jeQ==\">Bouncy<i class=\"fa fa-external-link-alt\"></i></span>：可以作为HTTP路由主机；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3N1cGVydmlzb3JkLm9yZy8=\">Supervisor<i class=\"fa fa-external-link-alt\"></i></span>：是一个客户端服务器系统，允许用户监控和控制类Unix操作系统上的进程数；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2dvZHJiLmNvbS8=\">God<i class=\"fa fa-external-link-alt\"></i></span>：由Ruby实现的进程监控框架。</li>\n</ul>\n<h2 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a><strong>服务发现</strong></h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hhc2hpY29ycC9jb25zdWw=\">Consul<i class=\"fa fa-external-link-alt\"></i></span>：简化了分布式环境中的服务的注册和发现流程，通过HTTP或者DNS接口发现。支持外部SaaS 提供者等；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvcmVvcy9ldGNk\">etcd<i class=\"fa fa-external-link-alt\"></i></span>：是一个高可用的Key&#x2F;Value存储系统，主要用于分享配置和服务发现；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3pvb2tlZXBlci5hcGFjaGUub3JnLw==\">Apache ZooKeeper<i class=\"fa fa-external-link-alt\"></i></span>：是Apache Hadoop的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3pldHRpby93ZWF2ZQ==\">Weave<i class=\"fa fa-external-link-alt\"></i></span>：创建一个虚拟网络并连接到部署在多个主机上的Docker容器。</li>\n</ul>\n<h2 id=\"持续集成和交付\"><a href=\"#持续集成和交付\" class=\"headerlink\" title=\"持续集成和交付\"></a><strong>持续集成和交付</strong></h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2J1aWxkYm90Lm5ldC8=\">Buildbot<i class=\"fa fa-external-link-alt\"></i></span>：是一个系统的自动化编译&#x2F;测试周期最需要的软件，以验证代码的变化。通过自动重建和测试每次发生了变化的东西，在建设迅速查明之前，减少不必要的失败；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NhYm90YXBwLmNvbS8=\">Cabot<i class=\"fa fa-external-link-alt\"></i></span>：是一个开源，自我托管的监控工具；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2plbmtpbnMtY2kub3JnLw==\">Jenkins<i class=\"fa fa-external-link-alt\"></i></span>：是基于Java开发的一种持续集成工具，用于监控持续重复的工作；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWJvdC5naXRodWIuY29tLw==\">Hubot<i class=\"fa fa-external-link-alt\"></i></span>：基于脚本具有很高的灵活性，任何人都可以编写自己的脚本来扩展基本功能；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2h1ZHNvbi1jaS5vcmcv\">Hudson<i class=\"fa fa-external-link-alt\"></i></span>：是一个可扩展的持续集成引擎，主要用于：持续、自动地构建&#x2F;测试软件项目、监控一些定时执行的任务；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Rob3VnaHR3b3Jrcy9jcnVpc2Vjb250cm9sLnJi\">CruiseControl.rb<i class=\"fa fa-external-link-alt\"></i></span>：是一个持续集成服务器，它可以让团队里的每个人随时了解项目的健康状况和进度；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsY3kvT3BzQm90\">OpsBot<i class=\"fa fa-external-link-alt\"></i></span>：是一个开源的、可插入的改善通信的机器人。</li>\n</ul>\n<p>希望这些工具能够给开发者带来实实在在的帮助，想要查看更多工具，大家可以 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYtb3BzLXRvb2xzLnplZWYuY29tL3JpY2hhcmQua3JhYXllbmhhZ2VuI2Jsb2NrXzQxNjg1X3Byb2Nlc3MtbWFuYWdlbWVudA==\">访问原文<i class=\"fa fa-external-link-alt\"></i></span>，原文中的工具列表会持续更新。 最后，再跟大家分享一个 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5kZXZvcHNib29rbWFya3MuY29tLw==\">DevOps BookMarks<i class=\"fa fa-external-link-alt\"></i></span>，这里面涉及了DevOps方方面面的工具和内容，有兴趣的同学可以前去学习。</p>\n","categories":["Tool"]},{"title":"i18n语言码和对应的语言库","url":"/i18n_library/","content":"<blockquote>\n<p>i18n语言码和对应的语言库表格</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<table>\n<thead>\n<tr>\n<th>语言码</th>\n<th>语言名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>af</td>\n<td>Afrikaans</td>\n</tr>\n<tr>\n<td>am</td>\n<td>Amharic</td>\n</tr>\n<tr>\n<td>ar</td>\n<td>Arabic</td>\n</tr>\n<tr>\n<td>az</td>\n<td>Azerbaijani</td>\n</tr>\n<tr>\n<td>be</td>\n<td>Belarusian</td>\n</tr>\n<tr>\n<td>bg</td>\n<td>Bulgarian</td>\n</tr>\n<tr>\n<td>bh</td>\n<td>Bihari</td>\n</tr>\n<tr>\n<td>bn</td>\n<td>Bengali</td>\n</tr>\n<tr>\n<td>br</td>\n<td>Breton</td>\n</tr>\n<tr>\n<td>bs</td>\n<td>Bosnian</td>\n</tr>\n<tr>\n<td>ca</td>\n<td>Catalan</td>\n</tr>\n<tr>\n<td>co</td>\n<td>Corsican</td>\n</tr>\n<tr>\n<td>cs</td>\n<td>捷克语</td>\n</tr>\n<tr>\n<td>cy</td>\n<td>威尔士语</td>\n</tr>\n<tr>\n<td>da</td>\n<td>Danish</td>\n</tr>\n<tr>\n<td>de</td>\n<td>German</td>\n</tr>\n<tr>\n<td>de-AT</td>\n<td>German (Austria)</td>\n</tr>\n<tr>\n<td>de-CH</td>\n<td>German (Switzerland)</td>\n</tr>\n<tr>\n<td>de-DE</td>\n<td>German (Germany)</td>\n</tr>\n<tr>\n<td>el</td>\n<td>希腊语</td>\n</tr>\n<tr>\n<td>en</td>\n<td>英语</td>\n</tr>\n<tr>\n<td>en-AU</td>\n<td>English (Australia)</td>\n</tr>\n<tr>\n<td>en-CA</td>\n<td>English (Canada)</td>\n</tr>\n<tr>\n<td>en-GB</td>\n<td>English (UK)</td>\n</tr>\n<tr>\n<td>en-NZ</td>\n<td>English (New Zealand)</td>\n</tr>\n<tr>\n<td>en-US</td>\n<td>English (US)</td>\n</tr>\n<tr>\n<td>en-ZA</td>\n<td>English (South Africa)</td>\n</tr>\n<tr>\n<td>eo</td>\n<td>Esperanto</td>\n</tr>\n<tr>\n<td>es</td>\n<td>Spanish</td>\n</tr>\n<tr>\n<td>es-419</td>\n<td>Spanish (Latin America)</td>\n</tr>\n<tr>\n<td>et</td>\n<td>Estonian</td>\n</tr>\n<tr>\n<td>eu</td>\n<td>Basque</td>\n</tr>\n<tr>\n<td>fa</td>\n<td>Persian</td>\n</tr>\n<tr>\n<td>fi</td>\n<td>Finnish</td>\n</tr>\n<tr>\n<td>fil</td>\n<td>Filipino</td>\n</tr>\n<tr>\n<td>fo</td>\n<td>Faroese</td>\n</tr>\n<tr>\n<td>fr</td>\n<td>French</td>\n</tr>\n<tr>\n<td>fr-CA</td>\n<td>法语（加拿大）</td>\n</tr>\n<tr>\n<td>fr-CH</td>\n<td>French (Switzerland)</td>\n</tr>\n<tr>\n<td>fr-FR</td>\n<td>法语（法国）</td>\n</tr>\n<tr>\n<td>fy</td>\n<td>Frisian</td>\n</tr>\n<tr>\n<td>ga</td>\n<td>Irish</td>\n</tr>\n<tr>\n<td>gd</td>\n<td>Scots Gaelic</td>\n</tr>\n<tr>\n<td>gl</td>\n<td>Galician</td>\n</tr>\n<tr>\n<td>gn</td>\n<td>Guarani</td>\n</tr>\n<tr>\n<td>gu</td>\n<td>Gujarati</td>\n</tr>\n<tr>\n<td>ha</td>\n<td>Hausa</td>\n</tr>\n<tr>\n<td>haw</td>\n<td>Hawaiian</td>\n</tr>\n<tr>\n<td>he</td>\n<td>Hebrew</td>\n</tr>\n<tr>\n<td>hi</td>\n<td>Hindi</td>\n</tr>\n<tr>\n<td>hr</td>\n<td>Croatian</td>\n</tr>\n<tr>\n<td>hu</td>\n<td>Hungarian</td>\n</tr>\n<tr>\n<td>hy</td>\n<td>Armenian</td>\n</tr>\n<tr>\n<td>ia</td>\n<td>Interlingua</td>\n</tr>\n<tr>\n<td>id</td>\n<td>Indonesian</td>\n</tr>\n<tr>\n<td>is</td>\n<td>Icelandic</td>\n</tr>\n<tr>\n<td>it</td>\n<td>Italian</td>\n</tr>\n<tr>\n<td>it-CH</td>\n<td>Italian (Switzerland)</td>\n</tr>\n<tr>\n<td>it-IT</td>\n<td>Italian (Italy)</td>\n</tr>\n<tr>\n<td>ja</td>\n<td>日语</td>\n</tr>\n<tr>\n<td>jw</td>\n<td>爪哇语</td>\n</tr>\n<tr>\n<td>ka</td>\n<td>Georgian</td>\n</tr>\n<tr>\n<td>kk</td>\n<td>Kazakh</td>\n</tr>\n<tr>\n<td>km</td>\n<td>Cambodian</td>\n</tr>\n<tr>\n<td>kn</td>\n<td>Kannada</td>\n</tr>\n<tr>\n<td>ko</td>\n<td>韩语</td>\n</tr>\n<tr>\n<td>ku</td>\n<td>Kurdish</td>\n</tr>\n<tr>\n<td>ky</td>\n<td>Kyrgyz</td>\n</tr>\n<tr>\n<td>la</td>\n<td>拉丁语</td>\n</tr>\n<tr>\n<td>ln</td>\n<td>Lingala</td>\n</tr>\n<tr>\n<td>lo</td>\n<td>Laothian</td>\n</tr>\n<tr>\n<td>lt</td>\n<td>Lithuanian</td>\n</tr>\n<tr>\n<td>lv</td>\n<td>Latvian</td>\n</tr>\n<tr>\n<td>mk</td>\n<td>Macedonian</td>\n</tr>\n<tr>\n<td>ml</td>\n<td>Malayalam</td>\n</tr>\n<tr>\n<td>mn</td>\n<td>Mongolian</td>\n</tr>\n<tr>\n<td>mo</td>\n<td>Moldavian</td>\n</tr>\n<tr>\n<td>mr</td>\n<td>Marathi</td>\n</tr>\n<tr>\n<td>ms</td>\n<td>Malay</td>\n</tr>\n<tr>\n<td>mt</td>\n<td>Maltese</td>\n</tr>\n<tr>\n<td>nb</td>\n<td>Norwegian (Bokmal)</td>\n</tr>\n<tr>\n<td>ne</td>\n<td>Nepali</td>\n</tr>\n<tr>\n<td>nl</td>\n<td>Dutch</td>\n</tr>\n<tr>\n<td>nn</td>\n<td>Norwegian (Nynorsk)</td>\n</tr>\n<tr>\n<td>no</td>\n<td>Norwegian</td>\n</tr>\n<tr>\n<td>oc</td>\n<td>Occitan</td>\n</tr>\n<tr>\n<td>om</td>\n<td>Oromo</td>\n</tr>\n<tr>\n<td>or</td>\n<td>Oriya</td>\n</tr>\n<tr>\n<td>pa</td>\n<td>Punjabi</td>\n</tr>\n<tr>\n<td>pl</td>\n<td>Polish</td>\n</tr>\n<tr>\n<td>ps</td>\n<td>Pashto</td>\n</tr>\n<tr>\n<td>pt</td>\n<td>Portuguese</td>\n</tr>\n<tr>\n<td>pt-BR</td>\n<td>Portuguese (Brazil)</td>\n</tr>\n<tr>\n<td>pt-PT</td>\n<td>Portuguese (Portugal)</td>\n</tr>\n<tr>\n<td>qu</td>\n<td>Quechua</td>\n</tr>\n<tr>\n<td>rm</td>\n<td>Romansh</td>\n</tr>\n<tr>\n<td>ro</td>\n<td>Romanian</td>\n</tr>\n<tr>\n<td>ru</td>\n<td>Russian</td>\n</tr>\n<tr>\n<td>sd</td>\n<td>Sindhi</td>\n</tr>\n<tr>\n<td>sh</td>\n<td>Serbo-Croatian</td>\n</tr>\n<tr>\n<td>si</td>\n<td>Sinhalese</td>\n</tr>\n<tr>\n<td>sk</td>\n<td>Slovak</td>\n</tr>\n<tr>\n<td>sl</td>\n<td>Slovenian</td>\n</tr>\n<tr>\n<td>sn</td>\n<td>Shona</td>\n</tr>\n<tr>\n<td>so</td>\n<td>Somali</td>\n</tr>\n<tr>\n<td>sq</td>\n<td>Albanian</td>\n</tr>\n<tr>\n<td>sr</td>\n<td>Serbian</td>\n</tr>\n<tr>\n<td>st</td>\n<td>Sesotho</td>\n</tr>\n<tr>\n<td>su</td>\n<td>Sundanese</td>\n</tr>\n<tr>\n<td>sv</td>\n<td>Swedish</td>\n</tr>\n<tr>\n<td>sw</td>\n<td>Swahili</td>\n</tr>\n<tr>\n<td>ta</td>\n<td>Tamil</td>\n</tr>\n<tr>\n<td>te</td>\n<td>Telugu</td>\n</tr>\n<tr>\n<td>tg</td>\n<td>Tajik</td>\n</tr>\n<tr>\n<td>th</td>\n<td>Thai</td>\n</tr>\n<tr>\n<td>ti</td>\n<td>Tigrinya</td>\n</tr>\n<tr>\n<td>tk</td>\n<td>Turkmen</td>\n</tr>\n<tr>\n<td>to</td>\n<td>Tonga</td>\n</tr>\n<tr>\n<td>tr</td>\n<td>Turkish</td>\n</tr>\n<tr>\n<td>tt</td>\n<td>Tatar</td>\n</tr>\n<tr>\n<td>tw</td>\n<td>Twi</td>\n</tr>\n<tr>\n<td>ug</td>\n<td>Uighur</td>\n</tr>\n<tr>\n<td>uk</td>\n<td>Ukrainian</td>\n</tr>\n<tr>\n<td>ur</td>\n<td>Urdu</td>\n</tr>\n<tr>\n<td>uz</td>\n<td>Uzbek</td>\n</tr>\n<tr>\n<td>vi</td>\n<td>Vietnamese</td>\n</tr>\n<tr>\n<td>xh</td>\n<td>Xhosa</td>\n</tr>\n<tr>\n<td>yi</td>\n<td>Yiddish</td>\n</tr>\n<tr>\n<td>yo</td>\n<td>Yoruba</td>\n</tr>\n<tr>\n<td>zh</td>\n<td>中文</td>\n</tr>\n<tr>\n<td>zh-CN</td>\n<td>中文（简体）</td>\n</tr>\n<tr>\n<td>zh-TW</td>\n<td>中文（繁体）</td>\n</tr>\n<tr>\n<td>zu</td>\n<td>Zulu</td>\n</tr>\n</tbody></table>\n","categories":["Tool"]},{"title":"ERROR 1819 (HY000): Your password does not satisfy the current policy requirements","url":"/mysql_password_error/","content":"<p>为了加强安全性，MySQL5.7为root用户随机生成了一个密码，在error log中，关于error log的位置，如果安装的是RPM包，则默认是<code>/var/log/mysqld.log</code>。</p>\n<p>一般可通过log_error设置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select @@log_error;</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">| @@log_error         |</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">| /var/log/mysqld.log |</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>可通过<code>grep “password” /var/log/mysqld.log</code>命令获取MySQL的临时密码</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">2016-01-19T05:16:36.218234Z 1 [Note] A temporary password is generated <span class=\"keyword\">for</span> root@localhost: waQ,qR%be2(5</span><br></pre></td></tr></table></figure>\n\n<p>用该密码登录到服务端后，必须马上修改密码，不然会报如下错误：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select user();</span><br><span class=\"line\">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br></pre></td></tr></table></figure>\n\n<p>如果只是修改为一个简单的密码，会报以下错误：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt;  ALTER USER USER() IDENTIFIED BY <span class=\"string\">&#x27;12345678&#x27;</span>;</span><br><span class=\"line\">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br></pre></td></tr></table></figure>\n\n<p>这个其实与validate_password_policy的值有关。</p>\n<p>validate_password_policy有以下取值：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">Policy\tTests Performed</span><br><span class=\"line\">0?or?LOW\tLength</span><br><span class=\"line\">1?or?MEDIUM\tLength; numeric, lowercase/uppercase, and special characters</span><br><span class=\"line\">2?or?STRONG\tLength; numeric, lowercase/uppercase, and special characters; dictionary file</span><br></pre></td></tr></table></figure>\n\n<p>默认是1，即MEDIUM，所以刚开始设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。</p>\n<p>有时候，只是为了自己测试，不想密码设置得那么复杂，譬如说，我只想设置root的密码为123456。</p>\n<p>必须修改两个全局参数：</p>\n<p>首先，修改<code>validate_password_policy</code>参数的值</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> global validate_password_policy=0;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>这样，判断密码的标准就基于密码的长度了。这个由<code>validate_password_length</code>参数来决定。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select @@validate_password_length;</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| @@validate_password_length |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">|                          8 |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p><code>validate_password_length</code>参数默认为8，它有最小值的限制，最小值为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">validate_password_number_count</span><br><span class=\"line\">+ validate_password_special_char_count</span><br><span class=\"line\">+ (2 * validate_password_mixed_case_count)</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>validate_password_number_count</code>指定了密码中数据的长度，<code>validate_password_special_char_count</code>指定了密码中特殊字符的长度，<code>validate_password_mixed_case_count</code>指定了密码中大小字母的长度。</p>\n<p>这些参数，默认值均为1，所以<code>validate_password_length</code>最小值为4，如果你显性指定<code>validate_password_length</code>的值小于4，尽管不会报错，但<code>validate_password_length</code>的值将设为4。如下所示：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select @@validate_password_length;</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| @@validate_password_length |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">|                          8 |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">set</span> global validate_password_length=1;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @@validate_password_length;</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| @@validate_password_length |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">|                          4 |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">1 row <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>如果修改了validate_password_number_count，validate_password_special_char_count，validate_password_mixed_case_count中任何一个值，则validate_password_length将进行动态修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select @@validate_password_length;</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| @@validate_password_length |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">|                          4 |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @@validate_password_mixed_case_count;</span><br><span class=\"line\">+--------------------------------------+</span><br><span class=\"line\">| @@validate_password_mixed_case_count |</span><br><span class=\"line\">+--------------------------------------+</span><br><span class=\"line\">|                                    1 |</span><br><span class=\"line\">+--------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; set global validate_password_mixed_case_count=2;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @@validate_password_mixed_case_count;</span><br><span class=\"line\">+--------------------------------------+</span><br><span class=\"line\">| @@validate_password_mixed_case_count |</span><br><span class=\"line\">+--------------------------------------+</span><br><span class=\"line\">|                                    2 |</span><br><span class=\"line\">+--------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @@validate_password_length;</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| @@validate_password_length |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">|                          6 |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>当然，前提是validate_password插件必须已经安装，MySQL5.7是默认安装的。</p>\n<p>那么如何验证validate_password插件是否安装呢？可通过查看以下参数，如果没有安装，则输出将为空。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW VARIABLES LIKE <span class=\"string\">&#x27;validate_password%&#x27;</span>;</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">| Variable_name                        | Value |</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">| validate_password_dictionary_file    |       |</span><br><span class=\"line\">| validate_password_length             | 6     |</span><br><span class=\"line\">| validate_password_mixed_case_count   | 2     |</span><br><span class=\"line\">| validate_password_number_count       | 1     |</span><br><span class=\"line\">| validate_password_policy             | LOW   |</span><br><span class=\"line\">| validate_password_special_char_count | 1     |</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">6 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>","categories":["Web","Db"],"tags":["linux","mysql","db"]},{"title":"Mongodb衍伸的互联网思考","url":"/mongodb_cluster_question/","content":"<blockquote>\n<p>引子：如何使用三台服务器搭建高可用mongodb集群。</p>\n</blockquote>\n<p>从技术角度出发，基本上聊完这个话题就可以清晰地知道对mongodb的掌握程度。</p>\n<p>mongodb副本集故障转移功能得益于它的选举机制，采用了bully算法。一般分布式集群都会有一个所谓的主节点。比如常用的mysql经常会申明一个主节点，其他的都为从节点。这样一个问题就是当主节点挂掉，我们就需要手工操作，上架一个新的主节点或者从从节点恢复数据等手段，并不太灵活。</p>\n<p>而mongodb采用的架构模式为不指定主节点，一旦主节点挂掉了，其他从节点自动接替变为主节点。一个副本集包含三个节点，主节点、从节点、仲裁节点。之间会有心跳检测（可以理解为不断地ping—-ping），当主节点down掉，会提升secondary为新的primary，仲裁节点升为新的副节点。oplogSize和更换服务器时间为容灾关键点。</p>\n<p>一个简单充分实现的集群方式为下图所示。主写副读仲裁心跳。根据各负责的相关工作内容分担压力可最优放置在不同服务器。</p>\n<p>但是此引题优解方式：<br>因为当三台服务器撑不住，主节点挂掉，从节点一旦升为主节点，同时接受读写的压力和同步数据到新从节点，那么肯定也是支撑不住服务的，所以分析最终结果要最少四台服务器参与到集群中容灾。O(∩_∩)O。</p>\n<p>数据库的发展经历了人工管理阶段，文件系统阶段，数据库系统阶段。从第三范式到反第三范式。无不体现了互联的一种发展趋势。而当关系数据库越来越庞大的时候，又出现了各种nosql数据库，比如基于内存的memcache，redis。内存缓存模式。</p>\n<p>其实仍然是‘分而治之’的思想（map reduce）。</p>\n<p>根据业界的理论来讲，写代码重要的是理解思想，深入底层原理和设计模式以及算法，酱紫更有利于写出优质别人能看懂的代码。</p>\n","categories":["Web","Db"],"tags":["mongodb","db"]},{"title":"Mysql用户管理和权限设置","url":"/mysql_user_permissions/","content":"<h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt;use mysql;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select host,user,password from user ;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; create user  zx_root   IDENTIFIED by &#x27;xxxxx&#x27;;</span><br><span class=\"line\">//identified by 会将纯文本密码加密作为散列值存储</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt;rename   user  feng  to   newuser;</span><br><span class=\"line\">//mysql 5之后可以使用，之前需要使用update 更新user表</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt;drop user newuser;   </span><br><span class=\"line\">//mysql5之前删除用户时必须先使用revoke 删除用户权限，然后删除用户，mysql5之后drop 命令可以删除用户的同时删除用户的相关权限</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更改密码\"><a href=\"#更改密码\" class=\"headerlink\" title=\"更改密码\"></a>更改密码</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; set password for zx_root=password(&#x27;xxxxxx&#x27;);</span><br><span class=\"line\">mysql&gt; update mysql.user set password=password(&#x27;xxxx&#x27;) where user=&#x27;otheruser&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看用户权限\"><a href=\"#查看用户权限\" class=\"headerlink\" title=\"查看用户权限\"></a>查看用户权限</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show grants for zx_root;</span><br></pre></td></tr></table></figure>\n<h4 id=\"赋予权限\"><a href=\"#赋予权限\" class=\"headerlink\" title=\"赋予权限\"></a>赋予权限</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; grant select on dmc_db.*  to zx_root;</span><br></pre></td></tr></table></figure>\n<h4 id=\"回收权限\"><a href=\"#回收权限\" class=\"headerlink\" title=\"回收权限\"></a>回收权限</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; revoke  select on dmc_db.*  from  zx_root;  //如果权限不存在会报错</span><br></pre></td></tr></table></figure>\n<p>上面的命令也可使用多个权限同时赋予和回收，权限之间使用逗号分隔</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; grant select，update，delete  ，insert  on dmc_db.*  to  zx_root;</span><br></pre></td></tr></table></figure>\n<h4 id=\"刷新权限\"><a href=\"#刷新权限\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h4><p>如果想立即看到结果使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">flush  privileges ;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令更新\"><a href=\"#命令更新\" class=\"headerlink\" title=\"命令更新\"></a>命令更新</h3><p>设置权限时必须给出一下信息</p>\n<ul>\n<li>1，要授予的权限</li>\n<li>2，被授予访问权限的数据库或表</li>\n<li>3，用户名</li>\n</ul>\n<p>grant和revoke可以在几个层次上控制访问权限</p>\n<ul>\n<li>1，整个服务器，使用 grant ALL  和revoke  ALL</li>\n<li>2，整个数据库，使用on  database.*</li>\n<li>3，特点表，使用on  database.table</li>\n<li>4，特定的列</li>\n<li>5，特定的存储过程</li>\n</ul>\n<p>user表中host列的值的意义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">%            匹配所有主机</span><br><span class=\"line\">localhost    localhost不会被解析成IP地址，直接通过UNIXsocket连接</span><br><span class=\"line\">127.0.0.1    会通过TCP/IP协议连接，并且只能在本机访问；</span><br><span class=\"line\">::1          ::1就是兼容支持ipv6的，表示同ipv4的127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"grant-普通数据用户\"><a href=\"#grant-普通数据用户\" class=\"headerlink\" title=\"grant 普通数据用户\"></a>grant 普通数据用户</h4><p>查询、插入、更新、删除数据库中所有表数据的权利。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant select on testdb.* to common_user@’%’</span><br><span class=\"line\">grant insert on testdb.* to common_user@’%’</span><br><span class=\"line\">grant update on testdb.* to common_user@’%’</span><br><span class=\"line\">grant delete on testdb.* to common_user@’%’</span><br></pre></td></tr></table></figure>\n\n<p>或者，用一条 MySQL 命令来替代：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant select, insert, update, delete on testdb.* to common_user@’%’</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"grant-创建、修改、删除-MySQL-数据表结构权限\"><a href=\"#grant-创建、修改、删除-MySQL-数据表结构权限\" class=\"headerlink\" title=\"grant 创建、修改、删除 MySQL 数据表结构权限\"></a>grant 创建、修改、删除 MySQL 数据表结构权限</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant create on testdb.* to developer@’192.168.0.%’;</span><br><span class=\"line\">grant alter on testdb.* to developer@’192.168.0.%’;</span><br><span class=\"line\">grant drop on testdb.* to developer@’192.168.0.%’;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"grant-操作-MySQL-外键权限\"><a href=\"#grant-操作-MySQL-外键权限\" class=\"headerlink\" title=\"grant 操作 MySQL 外键权限\"></a>grant 操作 MySQL 外键权限</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant references on testdb.* to developer@’192.168.0.%’;</span><br></pre></td></tr></table></figure>\n<h4 id=\"grant-操作-MySQL-临时表权限\"><a href=\"#grant-操作-MySQL-临时表权限\" class=\"headerlink\" title=\"grant 操作 MySQL 临时表权限\"></a>grant 操作 MySQL 临时表权限</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant create temporary tables on testdb.* to developer@’192.168.0.%’;</span><br></pre></td></tr></table></figure>\n<h4 id=\"grant-操作-MySQL-索引权限\"><a href=\"#grant-操作-MySQL-索引权限\" class=\"headerlink\" title=\"grant 操作 MySQL 索引权限\"></a>grant 操作 MySQL 索引权限</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant index on testdb.* to developer@’192.168.0.%’;</span><br></pre></td></tr></table></figure>\n<h4 id=\"grant-操作-MySQL-视图、查看视图源代码权限\"><a href=\"#grant-操作-MySQL-视图、查看视图源代码权限\" class=\"headerlink\" title=\"grant 操作 MySQL 视图、查看视图源代码权限\"></a>grant 操作 MySQL 视图、查看视图源代码权限</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant create view on testdb.* to developer@’192.168.0.%’;</span><br><span class=\"line\">grant show view on testdb.* to developer@’192.168.0.%’;</span><br></pre></td></tr></table></figure>\n<h4 id=\"grant-操作-MySQL-存储过程、函数权限\"><a href=\"#grant-操作-MySQL-存储过程、函数权限\" class=\"headerlink\" title=\"grant 操作 MySQL 存储过程、函数权限\"></a>grant 操作 MySQL 存储过程、函数权限</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant create routine on testdb.* to developer@’192.168.0.%’; — now, can show procedure status</span><br><span class=\"line\">grant alter routine on testdb.* to developer@’192.168.0.%’; — now, you can drop a procedure</span><br><span class=\"line\">grant execute on testdb.* to developer@’192.168.0.%’;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"grant-普通-DBA-管理某个-MySQL-数据库的权限\"><a href=\"#grant-普通-DBA-管理某个-MySQL-数据库的权限\" class=\"headerlink\" title=\"grant 普通 DBA 管理某个 MySQL 数据库的权限\"></a>grant 普通 DBA 管理某个 MySQL 数据库的权限</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant all privileges on testdb to dba@’localhost’</span><br></pre></td></tr></table></figure>\n<p>其中，关键字 “privileges” 可以省略。</p>\n<p>grant 高级 DBA 管理 MySQL 中所有数据库的权限。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant all on *.* to dba@’localhost’</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"权限层次\"><a href=\"#权限层次\" class=\"headerlink\" title=\"权限层次\"></a>权限层次</h3><p>MySQL grant 权限，分别可以作用在多个层次上。</p>\n<ol>\n<li>grant 作用在整个 MySQL 服务器上：<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant select on *.* to dba@localhost; — dba 可以查询 MySQL 中所有数据库中的表。</span><br><span class=\"line\">grant all on *.* to dba@localhost; — dba 可以管理 MySQL 中的所有数据库</span><br></pre></td></tr></table></figure></li>\n<li>grant 作用在单个数据库上：<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant select on testdb.* to dba@localhost; — dba 可以查询 testdb 中的表。</span><br></pre></td></tr></table></figure></li>\n<li>grant 作用在单个数据表上：<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant select, insert, update, delete on testdb.orders to dba@localhost;</span><br></pre></td></tr></table></figure></li>\n<li>grant 作用在表中的列上：<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant select(id, se, rank) on testdb.apache_log to dba@localhost;</span><br></pre></td></tr></table></figure></li>\n<li>grant 作用在存储过程、函数上：<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant execute on procedure testdb.pr_add to ’dba’@’localhost’</span><br><span class=\"line\">grant execute on function testdb.fn_add to ’dba’@’localhost’</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>注意：<br>修改完权限以后 一定要刷新服务，或者重启服务，刷新服务用：FLUSH PRIVILEGES。</p>\n","categories":["Web","Db"],"tags":["mysql","db"]},{"title":"mysql修改其他机器可以连接的权限","url":"/mysql_other_permission/","content":"<p>通过HeidiSQL连接MYSQL数据库报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL Error (1130): Host ‘192.168.1.126’ is not allowed to connect to this MySQL server</span><br></pre></td></tr></table></figure>\n\n<p>说明所连接的用户帐号没有远程连接的权限，只能在本机(localhost)登录。<br>需更改 mysql 数据库里的<code>user</code>表里的<code>host</code>项把localhost改成%</p>\n<p>首先按下面的步骤登录Mysql服务器，登录mysql需要切换到dos下的mysql的bin目录，进行如下操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt;use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;update user set host = ‘%’ where user =’root’;</span><br><span class=\"line\">MariaDB [mysql]&gt; update user set host = ‘%’ where host = ‘localhost’;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\">Rows matched: 0 Changed: 0 Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;flush privileges;</span><br><span class=\"line\">mysql&gt;select host, user from user;</span><br><span class=\"line\">mysql&gt;quit</span><br></pre></td></tr></table></figure>\n\n<p>OK。远程连接成功！</p>\n","categories":["Web","Db"],"tags":["mysql","db"]},{"title":"mysql导入导出sql文件","url":"/mysql_mysqldump/","content":"<h3 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h3><h4 id=\"导出全库备份到本地的目录\"><a href=\"#导出全库备份到本地的目录\" class=\"headerlink\" title=\"导出全库备份到本地的目录\"></a>导出全库备份到本地的目录</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --lock-all-tables --add-drop-database -A &gt; db.all.sql</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导出指定库到本地的目录\"><a href=\"#导出指定库到本地的目录\" class=\"headerlink\" title=\"导出指定库到本地的目录\"></a>导出指定库到本地的目录</h4><p>例如mysql库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --databases mysql &gt; db.sql</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导出某个库的表到本地的目录\"><a href=\"#导出某个库的表到本地的目录\" class=\"headerlink\" title=\"导出某个库的表到本地的目录\"></a>导出某个库的表到本地的目录</h4><p>例如mysql库的user表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --tables mysql user&gt; db.table.sql</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导出指定库的表-仅数据-到本地的目录\"><a href=\"#导出指定库的表-仅数据-到本地的目录\" class=\"headerlink\" title=\"导出指定库的表(仅数据)到本地的目录\"></a>导出指定库的表(仅数据)到本地的目录</h4><p>例如mysql库的user表,带过滤条件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --no-create-db --no-create-info --tables mysql user --where=&quot;host=&#x27;localhost&#x27;&quot;&gt; db.table.sql</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导出某个库的所有表结构\"><a href=\"#导出某个库的所有表结构\" class=\"headerlink\" title=\"导出某个库的所有表结构\"></a>导出某个库的所有表结构</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -u$USER -p$PASSWD -h127.0.0.1 -P3306 --routines --default-character-set=utf8 --no-data --databases mysql &gt; db.nodata.sql</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导出某个查询sql的数据为txt格式文件到本地的目录\"><a href=\"#导出某个查询sql的数据为txt格式文件到本地的目录\" class=\"headerlink\" title=\"导出某个查询sql的数据为txt格式文件到本地的目录\"></a>导出某个查询sql的数据为txt格式文件到本地的目录</h4><p>(各数据值之间用”制表符”分隔)<br>例如sql为’select user,host,password from mysql.user;’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8 --skip-column-names -B -e &#x27;select user,host,password from mysql.user;&#x27; &gt; mysql_user.txt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导出某个查询sql的数据为txt格式文件到MySQL服务器\"><a href=\"#导出某个查询sql的数据为txt格式文件到MySQL服务器\" class=\"headerlink\" title=\"导出某个查询sql的数据为txt格式文件到MySQL服务器\"></a>导出某个查询sql的数据为txt格式文件到MySQL服务器</h4><p>登录MySQL，将默认的制表符换成逗号(适应csv格式文件)，指定的路径，mysql要有写的权限。最好用tmp目录,文件用完之后,再删除!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT user,host,password FROM mysql.user INTO OUTFILE &#x27;/tmp/mysql_user.csv&#x27; FIELDS TERMINATED BY &#x27;,&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><h4 id=\"恢复全库数据到MySQL\"><a href=\"#恢复全库数据到MySQL\" class=\"headerlink\" title=\"恢复全库数据到MySQL\"></a>恢复全库数据到MySQL</h4><p>因为包含mysql库的权限表,导入完成需要执行<code>FLUSH PRIVILEGES;</code>命令</p>\n<p>第一种方法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8 &lt; db.all.sql</span><br></pre></td></tr></table></figure>\n\n<p>第二种方法:<br>登录MySQL,执行source命令,后面的文件名要用绝对路径.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; source /tmp/db.all.sql;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"恢复某个库的数据-mysql库的user表\"><a href=\"#恢复某个库的数据-mysql库的user表\" class=\"headerlink\" title=\"恢复某个库的数据(mysql库的user表)\"></a>恢复某个库的数据(mysql库的user表)</h4><p>第一种方法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8 mysql &lt; db.table.sql</span><br></pre></td></tr></table></figure>\n\n<p>第二种方法:<br>登录MySQL,执行source命令,后面的文件名要用绝对路径.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8</span><br><span class=\"line\">.......</span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\">mysql&gt; source /tmp/db.table.sql;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"恢复MySQL服务器上面的txt格式文件\"><a href=\"#恢复MySQL服务器上面的txt格式文件\" class=\"headerlink\" title=\"恢复MySQL服务器上面的txt格式文件\"></a>恢复MySQL服务器上面的txt格式文件</h4><p>需要FILE权限,各数据值之间用”制表符”分隔</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8</span><br><span class=\"line\">......</span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\">mysql&gt; LOAD DATA INFILE &#x27;/tmp/mysql_user.txt&#x27; INTO TABLE user ;</span><br></pre></td></tr></table></figure>\n<h4 id=\"恢复MySQL服务器上面的csv格式文件\"><a href=\"#恢复MySQL服务器上面的csv格式文件\" class=\"headerlink\" title=\"恢复MySQL服务器上面的csv格式文件\"></a>恢复MySQL服务器上面的csv格式文件</h4><p>需要FILE权限,各数据值之间用”逗号”分隔</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8</span><br><span class=\"line\">......</span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\">mysql&gt; LOAD DATA INFILE &#x27;/tmp/mysql_user.csv&#x27; INTO TABLE user FIELDS TERMINATED BY &#x27;,&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"恢复本地的txt或csv文件到MySQL\"><a href=\"#恢复本地的txt或csv文件到MySQL\" class=\"headerlink\" title=\"恢复本地的txt或csv文件到MySQL\"></a>恢复本地的txt或csv文件到MySQL</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u$USER -p$PASSWD -h127.0.0.1 -P3306 --default-character-set=utf8</span><br><span class=\"line\">......</span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\"># txt</span><br><span class=\"line\">mysql&gt; LOAD DATA LOCAL INFILE &#x27;/tmp/mysql_user.csv&#x27; INTO TABLE user;</span><br><span class=\"line\"># csv</span><br><span class=\"line\">mysql&gt; LOAD DATA LOCAL INFILE &#x27;/tmp/mysql_user.csv&#x27; INTO TABLE user FIELDS TERMINATED BY &#x27;,&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>关于MySQL连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">-u$USER 用户名</span><br><span class=\"line\">-p$PASSWD 密码</span><br><span class=\"line\">-h127.0.0.1 如果连接远程服务器,请用对应的主机名或者IP地址替换</span><br><span class=\"line\">-P3306 端口</span><br><span class=\"line\">–default-character-set=utf8 指定字符集</span><br><span class=\"line\">关于mysql参数</span><br><span class=\"line\">–skip-column-names 不显示数据列的名字</span><br><span class=\"line\">-B 以批处理的方式运行mysql程序.查询结果将显示为制表符间隔格式.</span><br><span class=\"line\">-e 执行命令后,退出</span><br><span class=\"line\">关于mysqldump参数</span><br><span class=\"line\">-A 全库备份</span><br><span class=\"line\">–routines 备份存储过程和函数</span><br><span class=\"line\">–default-character-set=utf8 设置字符集</span><br><span class=\"line\">–lock-all-tables 全局一致性锁</span><br><span class=\"line\">–add-drop-database 在每次执行建表语句之前,先执行DROP TABLE IF EXIST语句</span><br><span class=\"line\">–no-create-db 不输出CREATE DATABASE语句</span><br><span class=\"line\">–no-create-info 不输出CREATE TABLE语句</span><br><span class=\"line\">–databases 将后面的参数都解析为库名</span><br><span class=\"line\">–tables 第一个参数为库名 后续为表名</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于LOAD-DATA语法\"><a href=\"#关于LOAD-DATA语法\" class=\"headerlink\" title=\"关于LOAD DATA语法\"></a>关于LOAD DATA语法</h3><p>如果LOAD DATA语句不带LOCAL关键字,就在MySQL的服务器上直接读取文件,且要具有FILE权限。<br>如果带LOCAL关键字,就在客户端本地读取数据文件,通过网络传到MySQL。<br>LOAD DATA语句,同样被记录到binlog,不过是内部的机制。</p>\n","categories":["Web","Db"],"tags":["mysql","db"]},{"title":"MySQL按照汉字的拼音排序","url":"/mysql_order_cn/","content":"<p>按照汉字的拼音排序，用的比较多是在人名的排序中，按照姓氏的拼音字母，从A到Z排序；</p>\n<p>如果存储姓名的字段采用的是GBK字符集，那就好办了，因为GBK内码编码时本身就采用了拼音排序的方法（常用一级汉字3755个采用拼音排序，二级汉字就不是了，但考虑到人名等都是常用汉字，因此只是针对一级汉字能正确排序也够用了）。</p>\n<p>直接在查询语句后面添加<code>order by name asc;</code>查询结果按照姓氏的升序排序；</p>\n<p>如果存储姓名的字段采用的是utf8字符集，需要在排序的时候对字段进行转码；</p>\n<p>对于的代码是<code>order by convert(name using gbk) asc;</code><br>同样，查询的结果也是按照姓氏的升序排序；</p>\n","categories":["Web","Db"],"tags":["mysql","db"]},{"title":"PostgreSQL mac 环境下初识篇","url":"/postgresql_mac/","content":"<p>在mac环境下，可以使用 brew 来安装， 也可以直接下载app安装。</p>\n<h2 id=\"初始化数据库\"><a href=\"#初始化数据库\" class=\"headerlink\" title=\"初始化数据库\"></a>初始化数据库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">initdb /usr/local/var/postgres</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动或停止数据库\"><a href=\"#启动或停止数据库\" class=\"headerlink\" title=\"启动或停止数据库\"></a>启动或停止数据库</h2><h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start</span><br></pre></td></tr></table></figure>\n<h3 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pg_ctl -D /usr/local/var/postgres stop -s -m fast</span><br></pre></td></tr></table></figure>\n\n<p>如果先嫌麻烦，可以加入开机自动启动</p>\n<p>ln -sfv &#x2F;usr&#x2F;local&#x2F;opt&#x2F;postgresql&#x2F;*.plist ~&#x2F;Library&#x2F;LaunchAgents</p>\n<h2 id=\"操作数据库\"><a href=\"#操作数据库\" class=\"headerlink\" title=\"操作数据库\"></a>操作数据库</h2><p>pgAdmin 是一个可视化数据库服务器管理工具。</p>\n<p>SQL Shell (psql ) 控制台数据库管理入口。</p>\n<p>在安装的过程中，会自动为系统生成一个账号PostgreSQL，密码随机，这里你要重设一个密码。</p>\n<h3 id=\"重设密码\"><a href=\"#重设密码\" class=\"headerlink\" title=\"重设密码\"></a>重设密码</h3><p>控制台下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo passwd -d postgres</span><br><span class=\"line\">password  -d 为删除指定用户密码</span><br></pre></td></tr></table></figure>\n<p>然后设置新密码:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo -u postgres passwd</span><br></pre></td></tr></table></figure>\n<p>然后你就可以用 postgres 用户在服务器上通过 pgAdmin 或者 psql 来操作数据库了 。</p>\n<h3 id=\"psql-的简单操作\"><a href=\"#psql-的简单操作\" class=\"headerlink\" title=\"psql 的简单操作\"></a>psql 的简单操作</h3><p>点击 SQL Shell (psql) 启动控制台应用 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Server [localhost]:    //第一步 ，默认本地 ，直接回车即可 ，远程数据库 ，请输入远程服务器IP</span><br><span class=\"line\">Database [postgres]:   //第二步 ，执行数据库 ， postgresql 安装时已经默认安装 postgres 数据库 ，直接回车进入此库</span><br><span class=\"line\">Port [5432]:           //第三步 ，默认绑定 5432 端口 ，如果你有修改请这里指定 ，否则默认连接此端口(注意防火墙放行端口)</span><br><span class=\"line\">Username [postgres]:   //第四步 ，默认使用 postgres 用户登录数据库 ，没有指定用户的话 ，直接回车</span><br><span class=\"line\">psql (9.4.1)</span><br><span class=\"line\">Type &quot;help&quot; for help 。</span><br><span class=\"line\">postgres=#     //看到这一步 ，已经成功进入 postgres 数据库 。</span><br></pre></td></tr></table></figure>\n\n<p>或者你可以用下面一条命令来登录PostgreSQL</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">psql -U postgres -d postgres -h 127.0.0.1 -p 5432</span><br><span class=\"line\">//参数说明: -U 指定用户    -d 指定数据库   -h 数据库服务器ip    -p 端口</span><br></pre></td></tr></table></figure>\n<p>如果你的系统登录用户名和PostgreSQL数据库操作用户名相同的话，可以省略 -U 参数 。</p>\n<p>如果你的Mac 命令控制台不支持psql，那么需要你手动添加到全局变量里:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">locate psql | grep /bin</span><br><span class=\"line\">/Library/PostgreSQL/9.4/bin/psql</span><br></pre></td></tr></table></figure>\n<p>编辑.bash_profile文件或.bashrc文件，添加命令别名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">alias psql=/Library/PostgreSQL/9.4/bin/psql</span><br></pre></td></tr></table></figure>\n<p>然后让 .bash_profile 生效即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">source .bash_profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"psql-控制台简单的操作命令\"><a href=\"#psql-控制台简单的操作命令\" class=\"headerlink\" title=\"psql 控制台简单的操作命令\"></a>psql 控制台简单的操作命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\h select。</span><br><span class=\"line\">\\? 查看psql命令列表。</span><br><span class=\"line\">\\l 列出所有数据库。</span><br><span class=\"line\">\\c [database_name]：连接其他数据库。</span><br><span class=\"line\">\\d 列出当前数据库的所有表格。</span><br><span class=\"line\">\\d [table_name]：列出某一张表格的结构。</span><br><span class=\"line\">\\du 列出所有用户。</span><br><span class=\"line\">\\e 打开文本编辑器。</span><br><span class=\"line\">\\conninfo 列出当前数据库和连接的信息。</span><br><span class=\"line\">\\q  退出</span><br><span class=\"line\">\\password  设置命令</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"操作sql\"><a href=\"#操作sql\" class=\"headerlink\" title=\"操作sql\"></a>操作sql</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 创建新表 </span><br><span class=\"line\">CREATE TABLE user_tbl(name VARCHAR(20), signup_date DATE);</span><br><span class=\"line\"># 插入数据 </span><br><span class=\"line\">INSERT INTO user_tbl(name, signup_date) VALUES(&#x27;张三&#x27;, &#x27;2013-12-22&#x27;);</span><br><span class=\"line\"># 选择记录 </span><br><span class=\"line\">SELECT * FROM user_tbl;</span><br><span class=\"line\"># 更新数据 </span><br><span class=\"line\">UPDATE user_tbl set name = &#x27;李四&#x27; WHERE name = &#x27;张三&#x27;;</span><br><span class=\"line\"># 删除记录 </span><br><span class=\"line\">DELETE FROM user_tbl WHERE name = &#x27;李四&#x27; ;</span><br><span class=\"line\"># 添加栏位 </span><br><span class=\"line\">ALTER TABLE user_tbl ADD email VARCHAR(40);</span><br><span class=\"line\"># 更新结构 </span><br><span class=\"line\">ALTER TABLE user_tbl ALTER COLUMN signup_date SET NOT NULL;</span><br><span class=\"line\"># 更名栏位 </span><br><span class=\"line\">ALTER TABLE user_tbl RENAME COLUMN signup_date TO signup;</span><br><span class=\"line\"># 删除栏位 </span><br><span class=\"line\">ALTER TABLE user_tbl DROP COLUMN email;</span><br><span class=\"line\"># 表格更名 </span><br><span class=\"line\">ALTER TABLE user_tbl RENAME TO backup_tbl;</span><br><span class=\"line\"># 删除表格 </span><br><span class=\"line\">DROP TABLE IF EXISTS backup_tbl;</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建一个 PostgreSQL 用户</span><br><span class=\"line\"></span><br><span class=\"line\">createuser username -P</span><br><span class=\"line\">#Enter password for new role:</span><br><span class=\"line\">#Enter it again:</span><br><span class=\"line\">上面的 username 是用户名，回车输入 2 次用户密码后即用户创建完成。更多用户创建信息可以 “createuser –help” 查看。</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建数据库</span><br><span class=\"line\"></span><br><span class=\"line\">createdb dbname -O username -E UTF8 -e</span><br><span class=\"line\">上面创建了一个名为 dbname 的数据库，并指定 username 为改数据库的拥有者（owner），数据库的编码（encoding）是 UTF8，参数 “-e” 是指把数据库执行操作的命令显示出来。</span><br><span class=\"line\"></span><br><span class=\"line\">更多数据库创建信息可以 “createdb –help” 查看。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><p>psql -U username -d dbname -h 127.0.0.1</p>\n<h3 id=\"数据的导出\"><a href=\"#数据的导出\" class=\"headerlink\" title=\"数据的导出\"></a>数据的导出</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pg_dump -U postgres(用户名) (-t 表名) 数据库名(缺省时同用户名) &gt; 路径/文件名.sql</span><br><span class=\"line\"> [html] view plain copy</span><br><span class=\"line\">$ pg_dump -U postgres -t system_calls wangye &gt; ./test.sql</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">$ 9.1 test.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据的导入\"><a href=\"#数据的导入\" class=\"headerlink\" title=\"数据的导入\"></a>数据的导入</h3><p>导入数据时首先创建数据库再用psql导入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ createdb newdatabase</span><br><span class=\"line\">$ psql -d newdatabase -U postgres -f mydatabase.sql // sql 文件在当前路径下</span><br><span class=\"line\">$ psql -d databaename(数据库名) -U username(用户名) -f &lt; 路径/文件名.sql // sql 文件不在当前路径下</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"赋予用户超级权限\"><a href=\"#赋予用户超级权限\" class=\"headerlink\" title=\"赋予用户超级权限\"></a>赋予用户超级权限</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo -u postgres psql</span><br><span class=\"line\">CREATE USER root WITH SUPERUSER;</span><br></pre></td></tr></table></figure>","categories":["Web","Db"],"tags":["mac","db","PostgreSQL"]},{"title":"Redis常用命令","url":"/redis_order/","content":"<h3 id=\"Key\"><a href=\"#Key\" class=\"headerlink\" title=\"Key\"></a>Key</h3><hr>\n<p>Key命令速查：</p>\n<h4 id=\"DEL\"><a href=\"#DEL\" class=\"headerlink\" title=\"DEL\"></a>DEL</h4><p>删除给定的一个或多个 key，不存在的 key 会被忽略，返回值：被删除 key 的数量</p>\n<h4 id=\"DUMP\"><a href=\"#DUMP\" class=\"headerlink\" title=\"DUMP\"></a>DUMP</h4><p>序列化给定 key，返回被序列化的值，使用 RESTORE 命令可以将这个值反序列化为 Redis 键</p>\n<h4 id=\"EXISTS\"><a href=\"#EXISTS\" class=\"headerlink\" title=\"EXISTS\"></a>EXISTS</h4><p>检查给定key是否存在</p>\n<h4 id=\"EXPIRE\"><a href=\"#EXPIRE\" class=\"headerlink\" title=\"EXPIRE\"></a>EXPIRE</h4><p>为给定key设置有效时间，接受时间点</p>\n<h4 id=\"EXPIREAT\"><a href=\"#EXPIREAT\" class=\"headerlink\" title=\"EXPIREAT\"></a>EXPIREAT</h4><p>为给定key设置有效时间，接受时间戳timestamp</p>\n<h4 id=\"KEYS\"><a href=\"#KEYS\" class=\"headerlink\" title=\"KEYS\"></a>KEYS</h4><p>查找所有符合给定模式 pattern 的 key；KEYS <code>*</code> 匹配数据库中所有 key；<code>KEYS h*llo</code> 匹配 hello，hallo等。<code>KEYS h[ae]llo</code>匹配hello和hallo</p>\n<h4 id=\"MIGRATE\"><a href=\"#MIGRATE\" class=\"headerlink\" title=\"MIGRATE\"></a>MIGRATE</h4><p>将 key 原子性地从当前实例传送到目标实例的指定数据库上，一旦传送成功， key 保证会出现在目标实例上，而当前实例上的 key 会被删除。执行的时候会阻塞进行迁移的两个实例</p>\n<h4 id=\"MOVE\"><a href=\"#MOVE\" class=\"headerlink\" title=\"MOVE\"></a>MOVE</h4><p>将当前数据库的 key 移动到给定的数据库 db 当中</p>\n<h4 id=\"OBJECT\"><a href=\"#OBJECT\" class=\"headerlink\" title=\"OBJECT\"></a>OBJECT</h4><p>从内部察看给定 key 的 Redis 对象</p>\n<h4 id=\"PERSIST\"><a href=\"#PERSIST\" class=\"headerlink\" title=\"PERSIST\"></a>PERSIST</h4><p>移除给定 key 的有效时间</p>\n<h4 id=\"PEXPIRE\"><a href=\"#PEXPIRE\" class=\"headerlink\" title=\"PEXPIRE\"></a>PEXPIRE</h4><p>以毫秒为单位设置 key 的有效时间</p>\n<h4 id=\"EXPIREAT-1\"><a href=\"#EXPIREAT-1\" class=\"headerlink\" title=\"EXPIREAT\"></a>EXPIREAT</h4><p>以毫秒为单位设置 key 的有效时间(timespan)</p>\n<h4 id=\"PTTL\"><a href=\"#PTTL\" class=\"headerlink\" title=\"PTTL\"></a>PTTL</h4><p>以毫秒为单位返回key的剩余有效时间</p>\n<h4 id=\"RANDOMKEY\"><a href=\"#RANDOMKEY\" class=\"headerlink\" title=\"RANDOMKEY\"></a>RANDOMKEY</h4><p>从当前数据库中随机返回(已使用的)一个key</p>\n<h4 id=\"RENAME\"><a href=\"#RENAME\" class=\"headerlink\" title=\"RENAME\"></a>RENAME</h4><p>将Key改名</p>\n<h4 id=\"RENAMENX\"><a href=\"#RENAMENX\" class=\"headerlink\" title=\"RENAMENX\"></a>RENAMENX</h4><p>当且仅当 newkey 不存在时，将 key 改名为 newkey</p>\n<h4 id=\"RESTORE\"><a href=\"#RESTORE\" class=\"headerlink\" title=\"RESTORE\"></a>RESTORE</h4><p>反序列化给定的序列化值，并将它和给定的 key 关联</p>\n<h4 id=\"SORT\"><a href=\"#SORT\" class=\"headerlink\" title=\"SORT\"></a>SORT</h4><p>返回或保存给定列表、集合、有序集合 key 中经过排序的元素</p>\n<h4 id=\"TTL\"><a href=\"#TTL\" class=\"headerlink\" title=\"TTL\"></a>TTL</h4><p>以秒为单位，返回给定 key 的剩余有效时间</p>\n<h4 id=\"TYPE\"><a href=\"#TYPE\" class=\"headerlink\" title=\"TYPE\"></a>TYPE</h4><p>返回 key 所储存的值的类型</p>\n<h4 id=\"SCAN\"><a href=\"#SCAN\" class=\"headerlink\" title=\"SCAN\"></a>SCAN</h4><p>增量迭代</p>\n<hr>\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><hr>\n<p>String命令速查：</p>\n<h4 id=\"APPEND\"><a href=\"#APPEND\" class=\"headerlink\" title=\"APPEND\"></a>APPEND</h4><p>将值追加到指定key的值末尾，如果key不存在，则相当于增加操作。</p>\n<h4 id=\"BITCOUNT\"><a href=\"#BITCOUNT\" class=\"headerlink\" title=\"BITCOUNT\"></a>BITCOUNT</h4><p>计算给定字符串中，被设置为 1 的Bit位的数量。</p>\n<h4 id=\"BITOP\"><a href=\"#BITOP\" class=\"headerlink\" title=\"BITOP\"></a>BITOP</h4><p>对一个或多个保存二进制位的字符串 key 进行位元操作</p>\n<h4 id=\"DECR\"><a href=\"#DECR\" class=\"headerlink\" title=\"DECR\"></a>DECR</h4><p>将 key 中储存的数字值减一。Key不存在，则将值置0，key类型不正确返回一个错误。</p>\n<h4 id=\"DECRBY\"><a href=\"#DECRBY\" class=\"headerlink\" title=\"DECRBY\"></a>DECRBY</h4><p>将key所储存的值减去指定数量</p>\n<h4 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h4><p>返回key所关联的字符串值，如果Key储存的值不是字符串类型，返回一个错误。</p>\n<h4 id=\"GETBIT\"><a href=\"#GETBIT\" class=\"headerlink\" title=\"GETBIT\"></a>GETBIT</h4><p>对key所储存的字符串值，获取指定偏移量上的位</p>\n<h4 id=\"GETRANGE\"><a href=\"#GETRANGE\" class=\"headerlink\" title=\"GETRANGE\"></a>GETRANGE</h4><p>返回key中字符串值的子字符串，字符串的截取范围由start和end两个偏移量决定</p>\n<h4 id=\"GETSET\"><a href=\"#GETSET\" class=\"headerlink\" title=\"GETSET\"></a>GETSET</h4><p>将给定key的值设为value，并返回key的旧值。非字符串报错。</p>\n<h4 id=\"INCR\"><a href=\"#INCR\" class=\"headerlink\" title=\"INCR\"></a>INCR</h4><p>将 key 中储存的数字值增一。不能转换为数字则报错。</p>\n<h4 id=\"INCRBY\"><a href=\"#INCRBY\" class=\"headerlink\" title=\"INCRBY\"></a>INCRBY</h4><p>将key所储存的值加上指定增量</p>\n<h4 id=\"INCRBYFLOAT\"><a href=\"#INCRBYFLOAT\" class=\"headerlink\" title=\"INCRBYFLOAT\"></a>INCRBYFLOAT</h4><p>为key中所储存的值加上指定的浮点数增量</p>\n<h4 id=\"MGET\"><a href=\"#MGET\" class=\"headerlink\" title=\"MGET\"></a>MGET</h4><p>返回所有(一个或多个)给定key的值</p>\n<h4 id=\"MSET\"><a href=\"#MSET\" class=\"headerlink\" title=\"MSET\"></a>MSET</h4><p>同时设置一个或多个key-value对</p>\n<h4 id=\"MSETNX\"><a href=\"#MSETNX\" class=\"headerlink\" title=\"MSETNX\"></a>MSETNX</h4><p>同时设置一个或多个key-value对，若一个key已被占用，则全部的执行取消。</p>\n<h4 id=\"PSETEX\"><a href=\"#PSETEX\" class=\"headerlink\" title=\"PSETEX\"></a>PSETEX</h4><p>以毫秒为单位设置 key 的有效时间</p>\n<h4 id=\"SET\"><a href=\"#SET\" class=\"headerlink\" title=\"SET\"></a>SET</h4><p>将字符串值value关联到key</p>\n<h4 id=\"SETBIT\"><a href=\"#SETBIT\" class=\"headerlink\" title=\"SETBIT\"></a>SETBIT</h4><p>对key所储存的字符串值，设置或清除指定偏移量上的位(bit)</p>\n<h4 id=\"SETEX\"><a href=\"#SETEX\" class=\"headerlink\" title=\"SETEX\"></a>SETEX</h4><p>将值value关联到 key，并将key的有效时间(秒)</p>\n<h4 id=\"SETNX\"><a href=\"#SETNX\" class=\"headerlink\" title=\"SETNX\"></a>SETNX</h4><p>当key未被使用时，设置为指定值</p>\n<h4 id=\"SETRANGE\"><a href=\"#SETRANGE\" class=\"headerlink\" title=\"SETRANGE\"></a>SETRANGE</h4><p>用value参数覆写(overwrite)给定key所储存的字符串值，从偏移量 offset 开始</p>\n<h4 id=\"STRLEN\"><a href=\"#STRLEN\" class=\"headerlink\" title=\"STRLEN\"></a>STRLEN</h4><p>返回key所储存的字符串值的长度</p>\n<hr>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><hr>\n<p>Hash命令速查：</p>\n<h4 id=\"HDEL\"><a href=\"#HDEL\" class=\"headerlink\" title=\"HDEL\"></a>HDEL</h4><p>删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略。</p>\n<h4 id=\"HEXISTS\"><a href=\"#HEXISTS\" class=\"headerlink\" title=\"HEXISTS\"></a>HEXISTS</h4><p>查看哈希表 key 中，给定域 field 是否存在</p>\n<h4 id=\"HGET\"><a href=\"#HGET\" class=\"headerlink\" title=\"HGET\"></a>HGET</h4><p>返回哈希表 key 中给定域 field 的值</p>\n<h4 id=\"HGETALL\"><a href=\"#HGETALL\" class=\"headerlink\" title=\"HGETALL\"></a>HGETALL</h4><p>返回哈希表 key 中，所有的域和值</p>\n<h4 id=\"HINCRBY\"><a href=\"#HINCRBY\" class=\"headerlink\" title=\"HINCRBY\"></a>HINCRBY</h4><p>为哈希表 key 中的域 field 的值加上指定增量</p>\n<h4 id=\"HINCRBYFLOAT\"><a href=\"#HINCRBYFLOAT\" class=\"headerlink\" title=\"HINCRBYFLOAT\"></a>HINCRBYFLOAT</h4><p>为哈希表 key 中的域 field 加上指定的浮点数增量</p>\n<h4 id=\"HKEYS\"><a href=\"#HKEYS\" class=\"headerlink\" title=\"HKEYS\"></a>HKEYS</h4><p>返回哈希表 key 中的所有域</p>\n<h4 id=\"HLEN\"><a href=\"#HLEN\" class=\"headerlink\" title=\"HLEN\"></a>HLEN</h4><p>返回哈希表 key 中域的数量</p>\n<h4 id=\"HMGET\"><a href=\"#HMGET\" class=\"headerlink\" title=\"HMGET\"></a>HMGET</h4><p>返回哈希表 key 中，一个或多个给定域的值</p>\n<h4 id=\"HMSET\"><a href=\"#HMSET\" class=\"headerlink\" title=\"HMSET\"></a>HMSET</h4><p>同时将多个 field-value (域-值)对设置到哈希表 key 中</p>\n<h4 id=\"HSET\"><a href=\"#HSET\" class=\"headerlink\" title=\"HSET\"></a>HSET</h4><p>将哈希表 key 中的域 field 的值设为 value</p>\n<h4 id=\"HSETNX\"><a href=\"#HSETNX\" class=\"headerlink\" title=\"HSETNX\"></a>HSETNX</h4><p>当且仅当域 field 不存在时，将哈希表 key 中的域 field 的值设置为 value</p>\n<h4 id=\"HVALS\"><a href=\"#HVALS\" class=\"headerlink\" title=\"HVALS\"></a>HVALS</h4><p>返回哈希表 key 中所有域的值</p>\n<h4 id=\"HSCAN\"><a href=\"#HSCAN\" class=\"headerlink\" title=\"HSCAN\"></a>HSCAN</h4><p>增量迭代</p>\n<hr>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><hr>\n<p>List命令速查：</p>\n<h4 id=\"BLPOP\"><a href=\"#BLPOP\" class=\"headerlink\" title=\"BLPOP\"></a>BLPOP</h4><p>它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止</p>\n<h4 id=\"BRPOP\"><a href=\"#BRPOP\" class=\"headerlink\" title=\"BRPOP\"></a>BRPOP</h4><p>与BLPOP同义，弹出位置不同</p>\n<h4 id=\"BRPOPLPUSH\"><a href=\"#BRPOPLPUSH\" class=\"headerlink\" title=\"BRPOPLPUSH\"></a>BRPOPLPUSH</h4><p>当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时</p>\n<h4 id=\"LINDEX\"><a href=\"#LINDEX\" class=\"headerlink\" title=\"LINDEX\"></a>LINDEX</h4><p>返回列表 key 中，下标为 index 的元素</p>\n<h4 id=\"LINSERT\"><a href=\"#LINSERT\" class=\"headerlink\" title=\"LINSERT\"></a>LINSERT</h4><p>将值 value 插入到列表 key 当中</p>\n<h4 id=\"LLEN\"><a href=\"#LLEN\" class=\"headerlink\" title=\"LLEN\"></a>LLEN</h4><p>返回列表 key 的长度</p>\n<h4 id=\"LPOP\"><a href=\"#LPOP\" class=\"headerlink\" title=\"LPOP\"></a>LPOP</h4><p>移除并返回列表 key 的头元素</p>\n<h4 id=\"LPUSH\"><a href=\"#LPUSH\" class=\"headerlink\" title=\"LPUSH\"></a>LPUSH</h4><p>将一个或多个值 value 插入到列表 key 的表头</p>\n<h4 id=\"LPUSHX\"><a href=\"#LPUSHX\" class=\"headerlink\" title=\"LPUSHX\"></a>LPUSHX</h4><p>将值 value 插入到列表 key 的表头，当且仅当 key 存在并且是一个列表</p>\n<h4 id=\"LRANGE\"><a href=\"#LRANGE\" class=\"headerlink\" title=\"LRANGE\"></a>LRANGE</h4><p>返回列表 key 中指定区间内的元素，区间以偏移量 start 和 stop 指定</p>\n<h4 id=\"LREM\"><a href=\"#LREM\" class=\"headerlink\" title=\"LREM\"></a>LREM</h4><p>根据参数 count 的值，移除列表中与参数 value 相等的元素</p>\n<h4 id=\"LSET\"><a href=\"#LSET\" class=\"headerlink\" title=\"LSET\"></a>LSET</h4><p>将列表 key 下标为 index 的元素的值设置为 value</p>\n<h4 id=\"LTRIM\"><a href=\"#LTRIM\" class=\"headerlink\" title=\"LTRIM\"></a>LTRIM</h4><p>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除</p>\n<h4 id=\"RPOP\"><a href=\"#RPOP\" class=\"headerlink\" title=\"RPOP\"></a>RPOP</h4><p>移除并返回列表 key 的尾元素</p>\n<h4 id=\"RPOPLPUSH\"><a href=\"#RPOPLPUSH\" class=\"headerlink\" title=\"RPOPLPUSH\"></a>RPOPLPUSH</h4><p>命令 RPOPLPUSH 在一个原子时间内，执行两个动作：1、将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。2、将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。</p>\n<h4 id=\"RPUSH\"><a href=\"#RPUSH\" class=\"headerlink\" title=\"RPUSH\"></a>RPUSH</h4><p>将一个或多个值 value 插入到列表 key 的表尾</p>\n<h4 id=\"RPUSHX\"><a href=\"#RPUSHX\" class=\"headerlink\" title=\"RPUSHX\"></a>RPUSHX</h4><p>将值 value 插入到列表 key 的表尾，当且仅当 key 存在并且是一个列表</p>\n<hr>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><hr>\n<p>Set命令速查</p>\n<h4 id=\"SADD\"><a href=\"#SADD\" class=\"headerlink\" title=\"SADD\"></a>SADD</h4><p>将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略</p>\n<h4 id=\"SCARD\"><a href=\"#SCARD\" class=\"headerlink\" title=\"SCARD\"></a>SCARD</h4><p>返回集合 key 的集合中元素的数量</p>\n<h4 id=\"SDIFF\"><a href=\"#SDIFF\" class=\"headerlink\" title=\"SDIFF\"></a>SDIFF</h4><p>返回一个集合的全部成员，该集合是所有给定集合之间的差集</p>\n<h4 id=\"SDIFFSTORE\"><a href=\"#SDIFFSTORE\" class=\"headerlink\" title=\"SDIFFSTORE\"></a>SDIFFSTORE</h4><p>这个命令的作用和 SDIFF 类似，但它将结果保存到新集合，而不是简单地返回结果集</p>\n<h4 id=\"SINTER\"><a href=\"#SINTER\" class=\"headerlink\" title=\"SINTER\"></a>SINTER</h4><p>返回一个集合的全部成员，该集合是所有给定集合的交集</p>\n<h4 id=\"SINTERSTORE\"><a href=\"#SINTERSTORE\" class=\"headerlink\" title=\"SINTERSTORE\"></a>SINTERSTORE</h4><p>与SINTER类似，不过可以指定保存到新集合</p>\n<h4 id=\"SISMEMBER\"><a href=\"#SISMEMBER\" class=\"headerlink\" title=\"SISMEMBER\"></a>SISMEMBER</h4><p>判断 member 元素是否集合 key 的成员</p>\n<h4 id=\"SMEMBERS\"><a href=\"#SMEMBERS\" class=\"headerlink\" title=\"SMEMBERS\"></a>SMEMBERS</h4><p>返回集合 key 中的所有成员</p>\n<h4 id=\"SMOVE\"><a href=\"#SMOVE\" class=\"headerlink\" title=\"SMOVE\"></a>SMOVE</h4><p>将 member 元素从一个集合移动到另一个集合</p>\n<h4 id=\"SPOP\"><a href=\"#SPOP\" class=\"headerlink\" title=\"SPOP\"></a>SPOP</h4><p>移除并返回集合中的一个随机元素</p>\n<h4 id=\"SRANDMEMBER\"><a href=\"#SRANDMEMBER\" class=\"headerlink\" title=\"SRANDMEMBER\"></a>SRANDMEMBER</h4><p>仅仅返回随机元素，而不对集合进行任何改动，与SPOP的区别在于不移除</p>\n<h4 id=\"SREM\"><a href=\"#SREM\" class=\"headerlink\" title=\"SREM\"></a>SREM</h4><p>移除集合 key 中的一个或多个 member 元素，不存在的 member 元素会被忽略</p>\n<h4 id=\"SUNION\"><a href=\"#SUNION\" class=\"headerlink\" title=\"SUNION\"></a>SUNION</h4><p>返回一个集合的全部成员，该集合是所有给定集合的并集</p>\n<h4 id=\"SUNIONSTORE\"><a href=\"#SUNIONSTORE\" class=\"headerlink\" title=\"SUNIONSTORE\"></a>SUNIONSTORE</h4><p>与SUNION类似，不过可以指定保存到新集合</p>\n<h4 id=\"SSCAN\"><a href=\"#SSCAN\" class=\"headerlink\" title=\"SSCAN\"></a>SSCAN</h4><p>增量迭代</p>\n<hr>\n<h3 id=\"SortedSet\"><a href=\"#SortedSet\" class=\"headerlink\" title=\"SortedSet\"></a>SortedSet</h3><hr>\n<p>SortedSet命令速查：</p>\n<h4 id=\"ZADD\"><a href=\"#ZADD\" class=\"headerlink\" title=\"ZADD\"></a>ZADD</h4><p>将一个或多个 member 元素及其 score 值加入到有序集 key 当中</p>\n<h4 id=\"ZCARD\"><a href=\"#ZCARD\" class=\"headerlink\" title=\"ZCARD\"></a>ZCARD</h4><p>返回有序集 key 的基数</p>\n<h4 id=\"ZCOUNT\"><a href=\"#ZCOUNT\" class=\"headerlink\" title=\"ZCOUNT\"></a>ZCOUNT</h4><p>返回有序集 key 中， score 值在 min 和 max 之间(包括 score 值等于 min 或 max )的成员的数量</p>\n<h4 id=\"ZINCRBY\"><a href=\"#ZINCRBY\" class=\"headerlink\" title=\"ZINCRBY\"></a>ZINCRBY</h4><p>为有序集 key 的成员 member 的 score 值加上指定增量</p>\n<h4 id=\"ZRANGE\"><a href=\"#ZRANGE\" class=\"headerlink\" title=\"ZRANGE\"></a>ZRANGE</h4><p>返回有序集 key 中，指定区间内的成员(小到大排列)</p>\n<h4 id=\"ZRANGEBYSCORE\"><a href=\"#ZRANGEBYSCORE\" class=\"headerlink\" title=\"ZRANGEBYSCORE\"></a>ZRANGEBYSCORE</h4><p>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员</p>\n<h4 id=\"ZRANK\"><a href=\"#ZRANK\" class=\"headerlink\" title=\"ZRANK\"></a>ZRANK</h4><p>返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递增(从小到大)顺序排列</p>\n<h4 id=\"ZREM\"><a href=\"#ZREM\" class=\"headerlink\" title=\"ZREM\"></a>ZREM</h4><p>移除有序集 key 中的一个或多个成员，不存在的成员将被忽略</p>\n<h4 id=\"ZREMRANGEBYRANK\"><a href=\"#ZREMRANGEBYRANK\" class=\"headerlink\" title=\"ZREMRANGEBYRANK\"></a>ZREMRANGEBYRANK</h4><p>移除有序集 key 中，指定排名(rank)区间内的所有成员</p>\n<h4 id=\"ZREMRANGEBYSCORE\"><a href=\"#ZREMRANGEBYSCORE\" class=\"headerlink\" title=\"ZREMRANGEBYSCORE\"></a>ZREMRANGEBYSCORE</h4><p>移除有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员</p>\n<h4 id=\"ZREVRANGE\"><a href=\"#ZREVRANGE\" class=\"headerlink\" title=\"ZREVRANGE\"></a>ZREVRANGE</h4><p>返回有序集 key 中，指定区间内的成员，成员位置按score大到小排列</p>\n<h4 id=\"ZREVRANGEBYSCORE\"><a href=\"#ZREVRANGEBYSCORE\" class=\"headerlink\" title=\"ZREVRANGEBYSCORE\"></a>ZREVRANGEBYSCORE</h4><p>返回有序集 key 中， score 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。成员按 score 值递减(从大到小)排列</p>\n<h4 id=\"ZREVRANK\"><a href=\"#ZREVRANK\" class=\"headerlink\" title=\"ZREVRANK\"></a>ZREVRANK</h4><p>返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递减(从大到小)排序</p>\n<h4 id=\"ZSCORE\"><a href=\"#ZSCORE\" class=\"headerlink\" title=\"ZSCORE\"></a>ZSCORE</h4><p>返回有序集 key 中，成员 member 的 score 值</p>\n<h4 id=\"ZUNIONSTORE\"><a href=\"#ZUNIONSTORE\" class=\"headerlink\" title=\"ZUNIONSTORE\"></a>ZUNIONSTORE</h4><p>计算给定的一个或多个有序集的并集，其中给定 key 的数量必须以 numkeys 参数指定，并将该并集(结果集)储存到新集合</p>\n<h4 id=\"ZINTERSTORE\"><a href=\"#ZINTERSTORE\" class=\"headerlink\" title=\"ZINTERSTORE\"></a>ZINTERSTORE</h4><p>计算给定的一个或多个有序集的交集，其中给定 key 的数量必须以 numkeys 参数指定，并将该交集(结果集)储存到新集合</p>\n<h4 id=\"ZSCAN\"><a href=\"#ZSCAN\" class=\"headerlink\" title=\"ZSCAN\"></a>ZSCAN</h4><p>增量迭代</p>\n<hr>\n<h3 id=\"Pub-x2F-Sub\"><a href=\"#Pub-x2F-Sub\" class=\"headerlink\" title=\"Pub&#x2F;Sub\"></a>Pub&#x2F;Sub</h3><hr>\n<p>Pub&#x2F;Sub命令速查：</p>\n<h4 id=\"PSUBSCRIBE\"><a href=\"#PSUBSCRIBE\" class=\"headerlink\" title=\"PSUBSCRIBE\"></a>PSUBSCRIBE</h4><p>订阅一个或多个符合给定模式的频道</p>\n<h4 id=\"PUBLISH\"><a href=\"#PUBLISH\" class=\"headerlink\" title=\"PUBLISH\"></a>PUBLISH</h4><p>将信息 message 发送到指定的频道</p>\n<h4 id=\"PUBSUB\"><a href=\"#PUBSUB\" class=\"headerlink\" title=\"PUBSUB\"></a>PUBSUB</h4><p>PUBSUB 是一个查看订阅与发布系统状态的内省命令</p>\n<h4 id=\"PUNSUBSCRIBE\"><a href=\"#PUNSUBSCRIBE\" class=\"headerlink\" title=\"PUNSUBSCRIBE\"></a>PUNSUBSCRIBE</h4><p>指示客户端退订所有给定模式</p>\n<h4 id=\"SUBSCRIBE\"><a href=\"#SUBSCRIBE\" class=\"headerlink\" title=\"SUBSCRIBE\"></a>SUBSCRIBE</h4><p>订阅给定的一个或多个频道的信息</p>\n<h4 id=\"UNSUBSCRIBE\"><a href=\"#UNSUBSCRIBE\" class=\"headerlink\" title=\"UNSUBSCRIBE\"></a>UNSUBSCRIBE</h4><p>指示客户端退订给定的频道</p>\n<hr>\n<h3 id=\"Transaction\"><a href=\"#Transaction\" class=\"headerlink\" title=\"Transaction\"></a>Transaction</h3><hr>\n<p>Transaction命令速查：</p>\n<h4 id=\"DISCARD\"><a href=\"#DISCARD\" class=\"headerlink\" title=\"DISCARD\"></a>DISCARD</h4><p>取消事务，放弃执行事务块内的所有命令</p>\n<h4 id=\"EXEC\"><a href=\"#EXEC\" class=\"headerlink\" title=\"EXEC\"></a>EXEC</h4><p>执行所有事务块内的命令</p>\n<h4 id=\"MULTI\"><a href=\"#MULTI\" class=\"headerlink\" title=\"MULTI\"></a>MULTI</h4><p>标记一个事务块的开始</p>\n<h4 id=\"UNWATCH\"><a href=\"#UNWATCH\" class=\"headerlink\" title=\"UNWATCH\"></a>UNWATCH</h4><p>取消 WATCH 命令对所有 key 的监视</p>\n<h4 id=\"WATCH\"><a href=\"#WATCH\" class=\"headerlink\" title=\"WATCH\"></a>WATCH</h4><p>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断</p>\n<hr>\n<h3 id=\"Script\"><a href=\"#Script\" class=\"headerlink\" title=\"Script\"></a>Script</h3><hr>\n<p>script命令速查：</p>\n<h4 id=\"EVAL\"><a href=\"#EVAL\" class=\"headerlink\" title=\"EVAL\"></a>EVAL</h4><p>通过内置的 Lua 解释器，可以使用 EVAL 命令对 Lua 脚本进行求值</p>\n<h4 id=\"VALSHA\"><a href=\"#VALSHA\" class=\"headerlink\" title=\"VALSHA\"></a>VALSHA</h4><p>根据给定的 sha1 校验码，对缓存在服务器中的脚本进行求值</p>\n<h4 id=\"SCRIPT-EXISTS\"><a href=\"#SCRIPT-EXISTS\" class=\"headerlink\" title=\"SCRIPT EXISTS\"></a>SCRIPT EXISTS</h4><p>给定一个或多个脚本的 SHA1 校验和，返回一个包含 0 和 1 的列表，表示校验和所指定的脚本是否已经被保存在缓存当中</p>\n<h4 id=\"SCRIPT-FLUSH\"><a href=\"#SCRIPT-FLUSH\" class=\"headerlink\" title=\"SCRIPT FLUSH\"></a>SCRIPT FLUSH</h4><p>清除所有 Lua 脚本缓存</p>\n<h4 id=\"SCRIPT-KILL\"><a href=\"#SCRIPT-KILL\" class=\"headerlink\" title=\"SCRIPT KILL\"></a>SCRIPT KILL</h4><p>停止当前正在运行的 Lua 脚本，当且仅当这个脚本没有执行过任何写操作时，这个命令才生效。这个命令主要用于终止运行时间过长的脚本</p>\n<h4 id=\"SCRIPT-LOAD\"><a href=\"#SCRIPT-LOAD\" class=\"headerlink\" title=\"SCRIPT LOAD\"></a>SCRIPT LOAD</h4><p>将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本</p>\n<hr>\n<h3 id=\"Connection\"><a href=\"#Connection\" class=\"headerlink\" title=\"Connection\"></a>Connection</h3><hr>\n<p>connection命令速查:</p>\n<h4 id=\"AUTH\"><a href=\"#AUTH\" class=\"headerlink\" title=\"AUTH\"></a>AUTH</h4><p>通过设置配置文件中 requirepass 项的值，可以使用密码来保护 Redis 服务器</p>\n<h4 id=\"ECHO\"><a href=\"#ECHO\" class=\"headerlink\" title=\"ECHO\"></a>ECHO</h4><p>打印一个特定的信息 message ，测试时使用。</p>\n<h4 id=\"PING\"><a href=\"#PING\" class=\"headerlink\" title=\"PING\"></a>PING</h4><p>使用客户端向 Redis 服务器发送一个 PING ，如果服务器运作正常的话，会返回一个 PONG，通常用于测试与服务器的连接是否仍然生效，或者用于测量延迟值</p>\n<h4 id=\"QUIT\"><a href=\"#QUIT\" class=\"headerlink\" title=\"QUIT\"></a>QUIT</h4><p>请求服务器关闭与当前客户端的连接</p>\n<h4 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a>SELECT</h4><p>切换到指定的数据库，数据库索引号 index 用数字值指定，以 0 作为起始索引值</p>\n<hr>\n<h3 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h3><hr>\n<p>server命令速查：</p>\n<h4 id=\"BGREWRITEAOF\"><a href=\"#BGREWRITEAOF\" class=\"headerlink\" title=\"BGREWRITEAOF\"></a>BGREWRITEAOF</h4><p>执行一个 AOF文件 重写操作。重写会创建一个当前 AOF 文件的体积优化版本。</p>\n<h4 id=\"BGSAVE\"><a href=\"#BGSAVE\" class=\"headerlink\" title=\"BGSAVE\"></a>BGSAVE</h4><p>在后台异步(Asynchronously)保存当前数据库的数据到磁盘</p>\n<h4 id=\"CLIENT-GETNAME\"><a href=\"#CLIENT-GETNAME\" class=\"headerlink\" title=\"CLIENT GETNAME\"></a>CLIENT GETNAME</h4><p>返回 CLIENT SETNAME 命令为连接设置的名字</p>\n<h4 id=\"CLIENT-KILL\"><a href=\"#CLIENT-KILL\" class=\"headerlink\" title=\"CLIENT KILL\"></a>CLIENT KILL</h4><p>关闭地址为 ip:port 的客户端</p>\n<h4 id=\"CLIENT-LIST\"><a href=\"#CLIENT-LIST\" class=\"headerlink\" title=\"CLIENT LIST\"></a>CLIENT LIST</h4><p>以人类可读的格式，返回所有连接到服务器的客户端信息和统计数据</p>\n<h4 id=\"CLIENT-SETNAME\"><a href=\"#CLIENT-SETNAME\" class=\"headerlink\" title=\"CLIENT SETNAME\"></a>CLIENT SETNAME</h4><p>为当前连接分配一个名字</p>\n<h4 id=\"CONFIG-GET\"><a href=\"#CONFIG-GET\" class=\"headerlink\" title=\"CONFIG GET\"></a>CONFIG GET</h4><p>CONFIG GET 命令用于取得运行中的 Redis 服务器的配置参数</p>\n<h4 id=\"CONFIG-RESETSTAT\"><a href=\"#CONFIG-RESETSTAT\" class=\"headerlink\" title=\"CONFIG RESETSTAT\"></a>CONFIG RESETSTAT</h4><p>重置 INFO 命令中的某些统计数据</p>\n<h4 id=\"CONFIG-REWRITE\"><a href=\"#CONFIG-REWRITE\" class=\"headerlink\" title=\"CONFIG REWRITE\"></a>CONFIG REWRITE</h4><p>CONFIG REWRITE 命令对启动 Redis 服务器时所指定的 redis.conf 文件进行改写</p>\n<h4 id=\"CONFIG-SET\"><a href=\"#CONFIG-SET\" class=\"headerlink\" title=\"CONFIG SET\"></a>CONFIG SET</h4><p>CONFIG SET 命令可以动态地调整 Redis 服务器的配置而无须重启</p>\n<h4 id=\"DBSIZE\"><a href=\"#DBSIZE\" class=\"headerlink\" title=\"DBSIZE\"></a>DBSIZE</h4><p>返回当前数据库的 key 的数量</p>\n<h4 id=\"DEBUG-OBJECT\"><a href=\"#DEBUG-OBJECT\" class=\"headerlink\" title=\"DEBUG OBJECT\"></a>DEBUG OBJECT</h4><p>DEBUG OBJECT 是一个调试命令，它不应被客户端所使用</p>\n<h4 id=\"DEBUG-SEGFAULT\"><a href=\"#DEBUG-SEGFAULT\" class=\"headerlink\" title=\"DEBUG SEGFAULT\"></a>DEBUG SEGFAULT</h4><p>执行一个不合法的内存访问从而让 Redis 崩溃，仅在开发时用于 BUG 模拟</p>\n<h4 id=\"FLUSHALL\"><a href=\"#FLUSHALL\" class=\"headerlink\" title=\"FLUSHALL\"></a>FLUSHALL</h4><p>清空整个 Redis 服务器的数据(删除所有数据库的所有 key )</p>\n<h4 id=\"FLUSHDB\"><a href=\"#FLUSHDB\" class=\"headerlink\" title=\"FLUSHDB\"></a>FLUSHDB</h4><p>清空当前数据库中的所有 key</p>\n<h4 id=\"INFO\"><a href=\"#INFO\" class=\"headerlink\" title=\"INFO\"></a>INFO</h4><p>返回关于 Redis 服务器的各种信息和统计数值</p>\n<h4 id=\"LASTSAVE\"><a href=\"#LASTSAVE\" class=\"headerlink\" title=\"LASTSAVE\"></a>LASTSAVE</h4><p>返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示</p>\n<h4 id=\"MONITOR\"><a href=\"#MONITOR\" class=\"headerlink\" title=\"MONITOR\"></a>MONITOR</h4><p>实时打印出 Redis 服务器接收到的命令，调试用</p>\n<h4 id=\"PSYNC\"><a href=\"#PSYNC\" class=\"headerlink\" title=\"PSYNC\"></a>PSYNC</h4><p>用于复制功能的内部命令</p>\n<h4 id=\"SAVE\"><a href=\"#SAVE\" class=\"headerlink\" title=\"SAVE\"></a>SAVE</h4><p>SAVE 命令执行一个同步保存操作，将当前 Redis 实例的所有数据快照(snapshot)以 RDB 文件的形式保存到硬盘。 一般来说，在生产环境很少执行 SAVE 操作，因为它会阻塞所有客户端，保存数据库的任务通常由 BGSAVE 命令异步地执行。然而，如果负责保存数据的后台子进程不幸出现问题时， SAVE 可以作为保存数据的最后手段来使用。</p>\n<h4 id=\"SHUTDOWN\"><a href=\"#SHUTDOWN\" class=\"headerlink\" title=\"SHUTDOWN\"></a>SHUTDOWN</h4><p>SHUTDOWN 命令执行以下操作： 停止所有客户端 如果有至少一个保存点在等待，执行 SAVE 命令 如果 AOF 选项被打开，更新 AOF 文件 关闭 redis 服务器(server)</p>\n<h4 id=\"SLAVEOF\"><a href=\"#SLAVEOF\" class=\"headerlink\" title=\"SLAVEOF\"></a>SLAVEOF</h4><p>SLAVEOF 命令用于在 Redis 运行时动态地修改复制(replication)功能的行为</p>\n<h4 id=\"SLOWLOG\"><a href=\"#SLOWLOG\" class=\"headerlink\" title=\"SLOWLOG\"></a>SLOWLOG</h4><p>Slow log 是 Redis 用来记录查询执行时间的日志系统</p>\n<h4 id=\"SYNC\"><a href=\"#SYNC\" class=\"headerlink\" title=\"SYNC\"></a>SYNC</h4><p>用于复制功能的内部命令</p>\n<h4 id=\"TIME\"><a href=\"#TIME\" class=\"headerlink\" title=\"TIME\"></a>TIME</h4><p>返回当前服务器时间</p>\n","categories":["Web","Db"],"tags":["db","redis"]},{"title":"Solr的一些查询参数","url":"/solr_query/","content":"<ul>\n<li><p>fl: 是逗号分隔的列表，用来指定文档结果中应返回的 Field 集。默认为 “*”，指所有的字段。</p>\n</li>\n<li><p>defType: 指定query parser，常用defType&#x3D;lucene, defType&#x3D;dismax, defType&#x3D;edismax</p>\n</li>\n<li><p>q: query。</p>\n</li>\n<li><p>q.alt: 当q字段为空时，用于设置缺省的query，通常设置q.alt为*:*。</p>\n</li>\n<li><p>qf: query fields，指定solr从哪些field中搜索。</p>\n</li>\n<li><p>pf: 用于指定一组field，当query完全匹配pf指定的某一个field时，来进行boost。简言之pf的作用是boosting phrases over words。</p>\n</li>\n<li><p>fq: filter query，过虑查询。</p>\n</li>\n<li><p>mm: minimal should match。Solr支持三种查询clause，即“必须出现”， “不能出现”和“可以出现”，分别对应于AND, -, OR。在默认情况下，使用OR这个clause。mm用于设置在使用OR这个clause时，需要出现最少的满足条件的clause数量，详见这里。</p>\n</li>\n<li><p>ps: Phrase Slop. Amount of slop on phrase queries built for “pf” fields (affects boosting). ps is about pf parameter. ps?affects boosting, if you play with ps value, numFound and result set do not change. But the order of result set change. This is about the phrase query that is constructed out of the entire “q” param. ps is slop applied to the phrases created from the entire query for evaluating pf boosts. ps will only (potentially) change the ranked ordering of your result set, by loosening what a “phrase match” means to the pf boost.<br>ps的例子：<br>Lets say your query is apache solr. (without quotation marks)<br>Lets say these three documents contains all of these words and returned.<br>1-) solr is built on the top of apache lucene.<br>2-) apache solr is fast, mature and popular.<br>3-) solr is hosted under apache umbrella.<br>Even if you don’t use pf and ps parameters, those documents will be in result set anyway. Lets say that they appear in this order 1,2,3.<br>Then we include pf and ps parameter, q&#x3D;apache solr&amp;pf&#x3D;title^1.2&amp;ps&#x3D;1<br>Second document is boosted, lets say it comes first now. The order is changed. The documents – that have the all query words close each other – are boosted. Again the same three documents are returned.</p>\n</li>\n<li><p>qs: Query Phrase Slop. Amount of slop on phrase queries explicitly included in the user’s query string (in qf fields; affects matching). qs affects matching. If you play with qs, numFound changes. This parameter is about when you have explicit phrase query in your raw query. i.e. &amp;q&#x3D;”apache lucene” . qs is slop applied to phrases explicitly in the &amp;q with double quotes. qs will (potentially) change your result set.</p>\n</li>\n<li><p>tie: tie breaker。</p>\n</li>\n<li><p>bq: 对某个field的value进行boost，例如brand:IBM^5.0。</p>\n</li>\n<li><p>bf: Function (with optional boosts) that will be included in the user’s query to influence the score. Any function supported natively by Solr can be used, along with a boost value, e.g.: recip(rord(myfield),1,2,3)^1.5</p>\n</li>\n<li><p>wt: writer type，指定输出格式，可以有 xml, json, php, phps。</p>\n</li>\n<li><p>q.op: 覆盖schema.xml的defaultOperator（有空格时用”AND”还是用”OR”操作逻辑）。</p>\n</li>\n<li><p>df: 默认的查询字段。</p>\n</li>\n<li><p>qt: query type，指定那个类型来处理查询请求，一般不用指定，默认是standard。</p>\n</li>\n</ul>\n<p><strong>参考</strong></p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuYXBhY2hlLm9yZy9zb2xyL1NpbXBsZUZhY2V0UGFyYW1ldGVycw==\">http://wiki.apache.org/solr/SimpleFacetParameters<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuYXBhY2hlLm9yZy9zb2xyL0hpZXJhcmNoaWNhbEZhY2V0aW5nI1Bpdm90X0ZhY2V0cw==\">http://wiki.apache.org/solr/HierarchicalFaceting#Pivot_Facets<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3MubHVjaWR3b3Jrcy5jb20vZGlzcGxheS9zb2xyL1RoZStTdGF0cytDb21wb25lbnQ=\">http://docs.lucidworks.com/display/solr/The+Stats+Component<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3MubHVjaWR3b3Jrcy5jb20vZGlzcGxheS9zb2xyL0ZhY2V0aW5n\">http://docs.lucidworks.com/display/solr/Faceting<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Web","Db"],"tags":["db","solr"]},{"title":"Mysql创建数据库，同时创建用户","url":"/mysql_create_database_user/","content":"<p>MySql中添加用户,新建数据库,用户授权,删除用户,修改密码(注意每行后边都跟个;表示一个命令语句结束):</p>\n<h2 id=\"新建用户\"><a href=\"#新建用户\" class=\"headerlink\" title=\"新建用户\"></a>新建用户</h2><h3 id=\"登录MYSQL\"><a href=\"#登录MYSQL\" class=\"headerlink\" title=\"登录MYSQL\"></a>登录MYSQL</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">密码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; insert into mysql.user(Host,User,Password) values(&quot;localhost&quot;,&quot;test&quot;,password(&quot;1234&quot;));</span><br></pre></td></tr></table></figure>\n<p>样就创建了一个名为：<code>test</code> 密码为：<code>1234</code> 的用户。<br>注意：此处的”localhost”，是指该用户只能在本地登录，不能在另外一台机器上远程登录。如果想远程登录的话，将”localhost”改为”%”，表示在任何一台电脑上都可以登录。也可以指定某台机器可以远程登录。</p>\n<h3 id=\"然后登录一下：\"><a href=\"#然后登录一下：\" class=\"headerlink\" title=\"然后登录一下：\"></a>然后登录一下：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; exit;</span><br><span class=\"line\">@&gt; mysql -u test -p</span><br><span class=\"line\">@&gt; 输入密码</span><br><span class=\"line\">mysql&gt; 登录成功</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为用户授权\"><a href=\"#为用户授权\" class=\"headerlink\" title=\"为用户授权\"></a>为用户授权</h3><p>授权格式：<code>grant 权限 on 数据库.* to 用户名@登录主机 identified by “密码”</code>;</p>\n<h4 id=\"登录MYSQL（有ROOT权限），这里以ROOT身份登录：\"><a href=\"#登录MYSQL（有ROOT权限），这里以ROOT身份登录：\" class=\"headerlink\" title=\"登录MYSQL（有ROOT权限），这里以ROOT身份登录：\"></a>登录MYSQL（有ROOT权限），这里以ROOT身份登录：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@&gt; mysql -u root -p</span><br><span class=\"line\">@&gt; 密码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"首先为用户创建一个数据库-testDB-：\"><a href=\"#首先为用户创建一个数据库-testDB-：\" class=\"headerlink\" title=\"首先为用户创建一个数据库(testDB)：\"></a>首先为用户创建一个数据库(testDB)：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database testDB;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"授权test用户拥有testDB数据库的所有权限（某个数据库的所有权限）：\"><a href=\"#授权test用户拥有testDB数据库的所有权限（某个数据库的所有权限）：\" class=\"headerlink\" title=\"授权test用户拥有testDB数据库的所有权限（某个数据库的所有权限）：\"></a>授权test用户拥有testDB数据库的所有权限（某个数据库的所有权限）：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; grant all privileges on testDB.* to test@localhost identified by &#x27;1234&#x27;;</span><br><span class=\"line\">mysql&gt; flush privileges;//刷新系统权限表</span><br></pre></td></tr></table></figure>\n<p>格式：<code>grant 权限 on 数据库.* to 用户名@登录主机 identified by “密码”</code>;</p>\n<h4 id=\"如果想指定部分权限给一用户，可以这样来写\"><a href=\"#如果想指定部分权限给一用户，可以这样来写\" class=\"headerlink\" title=\"如果想指定部分权限给一用户，可以这样来写:\"></a>如果想指定部分权限给一用户，可以这样来写:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">　　mysql&gt; grant select,update on testDB.* to test@localhost identified by &#x27;1234&#x27;;</span><br><span class=\"line\">　　mysql&gt; flush privileges; //刷新系统权限表</span><br></pre></td></tr></table></figure>\n<h4 id=\"授权test用户拥有所有数据库的某些权限\"><a href=\"#授权test用户拥有所有数据库的某些权限\" class=\"headerlink\" title=\"授权test用户拥有所有数据库的某些权限:\"></a>授权test用户拥有所有数据库的某些权限:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; grant select,delete,update,create,drop on *.* to test@&quot;%&quot; identified by &quot;1234&quot;;</span><br></pre></td></tr></table></figure>\n<p>   test用户对所有数据库都有select,delete,update,create,drop 权限。<br>　  @”%” 表示对所有非本地主机授权，不包括localhost。<br>　  对localhost授权：加上一句grant all privileges on testDB.* to test@localhost identified by ‘1234’;即可。</p>\n<ol>\n<li><p>删除用户</p>\n<p> @&gt; mysql -u root -p<br> @&gt; 密码<br> mysql&gt; Delete FROM user Where User&#x3D;’test’ and Host&#x3D;’localhost’;<br> mysql&gt; flush privileges;<br> mysql&gt; drop database testDB; &#x2F;&#x2F;删除用户的数据库</p>\n<p> &#x2F;&#x2F; 删除账户及权限：<br> drop user 用户名@’%’;<br> drop user 用户名@ localhost;</p>\n</li>\n<li><p>修改指定用户密码</p>\n</li>\n</ol>\n<p>  　@&gt; mysql -u root -p<br>  　@&gt; 密码<br>  　mysql&gt; update mysql.user set password&#x3D;password(‘新密码’) where User&#x3D;”test” and Host&#x3D;”localhost”;<br>  　mysql&gt; flush privileges;<br>5. 列出所有数据库</p>\n<p>　　mysql&gt; show database;<br>6. 切换数据库</p>\n<p>　　mysql&gt; use ‘数据库名’;<br>7. 列出所有表</p>\n<p>　　mysql&gt; show tables;<br>8. 显示数据表结构</p>\n<pre><code>mysql&gt; describe 表名;\n</code></pre>\n<ol start=\"9\">\n<li><p>删除数据库和数据表</p>\n<p> mysql&gt; drop database 数据库名;<br> mysql&gt; drop table 数据表名;</p>\n</li>\n</ol>\n","categories":["Web","Db"],"tags":["mysql","db"]},{"title":"超级简单版Mysql主从","url":"/mysql_master_slave/","content":"<p>1、主从服务器分别作以下操作：<br>1.1、版本一致<br>1.2、初始化表，并在后台启动mysql<br>1.3、修改root的密码</p>\n<p>2、修改主服务器master:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#vi /etc/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin   //[必须]启用二进制日志</span><br><span class=\"line\">server-id=222      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br></pre></td></tr></table></figure>\n<p>3、修改从服务器slave:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#vi /etc/my.cnf</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin   //[不是必须]启用二进制日志</span><br><span class=\"line\">server-id=226      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br></pre></td></tr></table></figure>\n<p>4、重启两台服务器的mysql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/etc/init.d/mysql restart</span><br></pre></td></tr></table></figure>\n<p>5、在主服务器上建立帐户并授权slave:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#/usr/local/mysql/bin/mysql -uroot -pmttang</span><br><span class=\"line\">mysql&gt;GRANT REPLICATION SLAVE ON *.* to ‘mysync’@’%’ identified by ‘q123456’; //一般不用root帐号，&amp;ldquo;%&amp;rdquo;表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.145.226，加强安全。</span><br></pre></td></tr></table></figure>\n<p>6、登录主服务器的mysql，查询master的状态</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt;show master status;</span><br><span class=\"line\">+——————+———-+————–+——————+</span><br><span class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class=\"line\">+——————+———-+————–+——————+</span><br><span class=\"line\">| mysql-bin.000004 |      308 |              |                  |</span><br><span class=\"line\">+——————+———-+————–+——————+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化</p>\n<p>7、配置从服务器Slave：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt;change master to master_host=’192.168.145.222′,master_user=’mysync’,master_password=’q123456′,</span><br><span class=\"line\">master_log_file=’mysql-bin.000004′,master_log_pos=308;   //注意不要断开，308数字前后无单引号。</span><br><span class=\"line\"></span><br><span class=\"line\">Mysql&gt;start slave;    //启动从服务器复制功能</span><br></pre></td></tr></table></figure>\n<p>8、检查从服务器复制功能状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status\\G</span><br><span class=\"line\"></span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\"></span><br><span class=\"line\">Slave_IO_State: Waiting for master to send event</span><br><span class=\"line\">Master_Host: 192.168.2.222  //主服务器地址</span><br><span class=\"line\">Master_User: mysync   //授权帐户名，尽量避免使用root</span><br><span class=\"line\">Master_Port: 3306    //数据库端口，部分版本没有此行</span><br><span class=\"line\">Connect_Retry: 60</span><br><span class=\"line\">Master_Log_File: mysql-bin.000004</span><br><span class=\"line\">Read_Master_Log_Pos: 600     //#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos</span><br><span class=\"line\">Relay_Log_File: ddte-relay-bin.000003</span><br><span class=\"line\">Relay_Log_Pos: 251</span><br><span class=\"line\">Relay_Master_Log_File: mysql-bin.000004</span><br><span class=\"line\">Slave_IO_Running: Yes    //此状态必须YES</span><br><span class=\"line\">Slave_SQL_Running: Yes     //此状态必须YES</span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n<p>注：Slave_IO及Slave_SQL进程必须正常运行，即YES状态，否则都是错误的状态(如：其中一个NO均属错误)。</p>\n<p>以上操作过程，主从服务器配置完成。</p>\n<p>9、主从服务器测试：</p>\n<p>主服务器Mysql，建立数据库，并在这个库中建表插入一条数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; create database hi_db;</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; use hi_db;</span><br><span class=\"line\">Database changed</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;  create table hi_tb(id int(3),name char(10));</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; insert into hi_tb values(001,’bobu’);</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+——————–+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+——————–+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| hi_db                |</span><br><span class=\"line\">| mysql                |</span><br><span class=\"line\">| test                 |</span><br><span class=\"line\">+——————–+</span><br><span class=\"line\">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>从服务器Mysql查询：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\"></span><br><span class=\"line\">+——————–+</span><br><span class=\"line\">| Database               |</span><br><span class=\"line\">+——————–+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| hi_db                 |       //I’M here，大家看到了吧</span><br><span class=\"line\">| mysql                 |</span><br><span class=\"line\">| test          |</span><br><span class=\"line\"></span><br><span class=\"line\">+——————–+</span><br><span class=\"line\">4 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; use hi_db</span><br><span class=\"line\">Database changed</span><br><span class=\"line\">mysql&gt; select * from hi_tb;           //查看主服务器上新增的具体数据</span><br><span class=\"line\">+——+——+</span><br><span class=\"line\">| id   | name |</span><br><span class=\"line\">+——+——+</span><br><span class=\"line\">|    1 | bobu |</span><br><span class=\"line\">+——+——+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>10、完成：<br>编写一shell脚本，用nagios监控slave的两个yes（Slave_IO及Slave_SQL进程），如发现只有一个或零个yes，就表明主从有问题了，发短信警报吧。</p>\n<p>11、介绍几个命令：</p>\n<p>在master上输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">show processlist\\G;</span><br></pre></td></tr></table></figure>\n<p>从服务器别忘了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">START SLAVE;</span><br><span class=\"line\">SHOW SLAVE STATUS\\G</span><br><span class=\"line\">SHOW MASTER STATUS\\G</span><br></pre></td></tr></table></figure>","categories":["Web","Db"],"tags":["mysql","db"]},{"title":"阿里云Vps上Mysql挂掉的解决办法","url":"/vps_mysql/","content":"<p>用阿里云的vps用作blog服务器，系统很稳定，已经100多天一直运行正常，大概从上个月开始发现blog的mysql会有时挂掉，会收到短信通知。之前没太追究，重新启动了mysql解决的。今天上午又收到短信，已经第三次了。</p>\n<p>查了一下日志，三次基本都是一样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">130728  6:50:14 [Note] Plugin &#x27;FEDERATED&#x27; is disabled.</span><br><span class=\"line\">130728  6:50:14 InnoDB: The InnoDB memory heap is disabled</span><br><span class=\"line\">130728  6:50:14 InnoDB: Mutexes and rw_locks use GCC atomic builtins</span><br><span class=\"line\">130728  6:50:14 InnoDB: Compressed tables use zlib 1.2.3.4</span><br><span class=\"line\">130728  6:50:14 InnoDB: Initializing buffer pool, size = 128.0M</span><br><span class=\"line\">InnoDB: mmap(137363456 bytes) failed; errno 12</span><br><span class=\"line\">130728  6:50:14 InnoDB: Completed initialization of buffer pool</span><br><span class=\"line\">130728  6:50:14 InnoDB: Fatal error: cannot allocate memory for the buffer pool</span><br><span class=\"line\">130728  6:50:14 [ERROR] Plugin &#x27;InnoDB&#x27; init function returned error.</span><br><span class=\"line\">130728  6:50:14 [ERROR] Plugin &#x27;InnoDB&#x27; registration as a STORAGE ENGINE failed.</span><br><span class=\"line\">130728  6:50:14 [ERROR] Unknown/unsupported storage engine: InnoDB</span><br><span class=\"line\">130728  6:50:14 [ERROR] Aborting</span><br><span class=\"line\">130728  6:50:14 [Note] /usr/sbin/mysqld: Shutdown complete</span><br></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<ol>\n<li><p>在 <code>/etc/mysql/my.cnf</code> 的 <code>mysqld</code> 下增加下面一句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">innodb_buffer_pool_size = 64M</span><br></pre></td></tr></table></figure>\n<p>还要设置一下swap分区，因为我的vps是没有swap分区的，通过<code>fdisk -l</code> 和 <code>1mount</code> 看不到swap的信息，需要手动添加一下。</p>\n</li>\n<li><p>添加swap分区的步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">2.1) dd if=/dev/zero of=/swapfile bs=1M count=1024</span><br><span class=\"line\">2.2) mkswap /swapfile</span><br><span class=\"line\">2.3) swapon /swapfile</span><br><span class=\"line\">2.4) 添加这行： `/swapfile swap swap defaults 0 0` 到 `/etc/fstab`</span><br></pre></td></tr></table></figure>\n<p>目前已经设置了<code>swap</code>分区，并重启了<code>mysql</code>，后续观察一下看看还会不会出现吧。</p>\n</li>\n</ol>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDI4NDUzMi9hbWF6b24tZWMyLW15c3FsLWFib3J0aW5nLXN0YXJ0LWJlY2F1c2UtaW5ub2RiLW1tYXAteC1ieXRlcy1mYWlsZWQtZXJybm8tMTI=\">http://stackoverflow.com/questions/10284532/amazon-ec2-mysql-aborting-start-because-innodb-mmap-x-bytes-failed-errno-12<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>补充，经过近2个月观察，没再发生down掉的情况。</p>\n","categories":["Web","Db"],"tags":["linux","mysql"]},{"title":"网络请求全流程","url":"/network_process/","content":"<p>在我看来，不管是前端开发还是后端开发的工程师都应该了解这个过程，了解这个过程可以让你整体把握整个软件的运行流程，同时可以让你更好地理解一些前后端优化、SEO，甚至一些网络安全的问题。要想讲清楚“网络请求的整个过程”的话，其中涉及到的网络基础、HTTP协议、浏览器的工作原理等都应该是必备的知识储备，接下来的文章中，我也会在讲清楚整个请求过程的同时穿插补充这些相关知识，已经对这些知识有了解和深入研究的同学可以权当复习了。</p>\n<h1 id=\"DNS解析\"><a href=\"#DNS解析\" class=\"headerlink\" title=\"DNS解析\"></a>DNS解析</h1><p>当我们在客户端（浏览器）的地址栏输入一个网址并敲回车的时候，首先会执行的一步操作的就是DNS解析（也叫域名解析）。那什么是DNS解析呢？又为什么要进行DNS解析呢？带着这两个问题，我们来看看DNS解析。</p>\n<h2 id=\"DNS（域名系统）\"><a href=\"#DNS（域名系统）\" class=\"headerlink\" title=\"DNS（域名系统）\"></a>DNS（域名系统）</h2><p><strong>1.DNS是什么？</strong></p>\n<blockquote>\n<p>DNS：Domain Name System（域名系统），互联网上作为域名和IP地址<strong>相互映射</strong>的一个分布式<strong>数据库</strong>。注意，我加粗了两个词“相互映射”和“数据库”，稍后再解释为什么要加粗它俩。</p>\n</blockquote>\n<p><strong>2.为什么要DNS解析？</strong> 看了DNS的概念，有些同学可能觉着更加迷惑了，不要着急，咱们从DNS解析的过程方面来更好地了解它。要讲DNS的解析过程，首先咱们得先来了解一下计算机之间是怎样进行通信的。</p>\n<h2 id=\"两台电脑之间通信\"><a href=\"#两台电脑之间通信\" class=\"headerlink\" title=\"两台电脑之间通信\"></a>两台电脑之间通信</h2><p>有两台电脑A和B，A电脑想向B电脑发送一条信息，那该怎么办呢？ 其实很简单，就像邮递员（假设为电脑A）要给某栋大楼内的某个房间的客户（假设为电脑B）送邮件一样，邮递员要想把邮件送到客户手上，那他必须知道客户的大楼名称（或者说地址）以及客户在这栋大楼内的房间号。在互联网的世界中也是一样，电脑A想向电脑B发送一条信息，电脑A就得知道电脑B的<strong>MAC地址</strong>和<strong>IP地址</strong>。 <strong>补充1：MAC地址</strong></p>\n<blockquote>\n<p>以太网规定，连入网络的所有设备，都必须具有“网卡”接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做MAC地址。</p>\n</blockquote>\n<p>就是说要想上网就得有块叫做“网卡”的东西，电脑的网卡很好理解，大家经常接触；而像路由器，交换机，手机，平板等联网的设备都有“网卡”这个东西。而两台设备（也可以理解为电脑）之间的通信就相当于两块网卡之间的通信，而这个网卡就是MAC地址，MAC地址就相当于“送邮件”例子中的客户房间号（啰嗦了一下，怕新手看不懂）。</p>\n<blockquote>\n<p>而每块网卡出厂的时候，都有一个全世界独一无二的MAC地址，长度是48个二进制位，通常用12个十六进制数表示。 前6个十六进制数是厂商编号，后6个是该厂商的网卡流水号。有了MAC地址，就可以定位网卡和数据包的路径了。</p>\n</blockquote>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/1.png\"></p>\n<p>MAC地址图片</p>\n<p>至于IP地址就不用再补充了吧，既然学计算机了，肯定知道IP地址。IP地址就相当于“送邮件”例子中的大楼名称（或者说地址）。 <strong>总结：A电脑想向B电脑发送一条信息，首先A电脑要知道B电脑的MAC地址和IP地址，这其中IP地址一般是已知的，而MAC地址是未知的。这时候就需要通过ARP协议来确定B电脑的MAC地址，这其实也包括两种情况（不做详细介绍，更多了解请看阮一峰的<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTIvMDUvaW50ZXJuZXRfcHJvdG9jb2xfc3VpdGVfcGFydF9pLmh0bWw=\">互联网协议入门（一）<i class=\"fa fa-external-link-alt\"></i></span>）。只要拿到了电脑B的IP地址和MAC地址，两台电脑就可以通信了。</strong></p>\n<h2 id=\"域名出现\"><a href=\"#域名出现\" class=\"headerlink\" title=\"域名出现\"></a>域名出现</h2><p>上面讲到一台电脑要想和另一台通信就需要知道另一台电脑的IP地址和MAC地址，MAC地址未知但可以通过ARP协议去获取，而IP地址是事先知道的，所以就可以通信了。但是，大家都知道IP地址这个东西是个由32位二进制组成的网络地址（IPv4），即使习惯上把它表示为四段十进制的形式（如202.201.112.232），也是不好记忆的，所以神通广大的人类就发明了<strong>域名</strong>来代替IP地址，其实就是给IP地址起了一个别名，这样就解决了IP地址不好记忆的问题了。</p>\n<blockquote>\n<p>任何一个域名都对应一个或者多个ip地址，但是大部分都是一个域名对应一个ip地址。</p>\n</blockquote>\n<h2 id=\"DNS小结\"><a href=\"#DNS小结\" class=\"headerlink\" title=\"DNS小结\"></a>DNS小结</h2><p>现在咱们再来看最初的问题:</p>\n<blockquote>\n<p>DNS：Domain Name System（域名系统），互联网上作为域名和IP地址<strong>相互映射</strong>的一个分布式<strong>数据库</strong>。</p>\n</blockquote>\n<p>现在应该明白了吧，域名系统就是储存IP地址和域名映射的一个数据库。而DNS解析，就是通过这个数据库去查找到可以使两台联网设备进行通信的IP地址的一个过程。当然这个过程是非常的繁琐的，想继续深入研究的同学可以查看阮一峰的<a href=\"https://yaozihao.com/dns/\">DNS 原理入门</a>，现在你可以回答最初前面提到的那个问题了。 DNS是什么？ 又为什么需要DNS解析？</p>\n<h1 id=\"HTTP请求\"><a href=\"#HTTP请求\" class=\"headerlink\" title=\"HTTP请求\"></a>HTTP请求</h1><p>当两台联网设备通过IP地址和MAC地址完成了“链接”之后，接下来就是通信了，而通信就需要传输数据（哪怕只是一个没有数据的请求）。要想传输数据，就需要建立一个传输数据的链接（注意，我前面的链接加了引号，是因为那个时候两台电脑并为真正意义是的链接，只是找到对方了）。而这就牵扯到了另一个面试官常问的问题<strong>TCP的三次握手</strong>和<strong>TCP的四次挥手</strong>。 <strong>补充2：端口</strong> 首先来说，UDP和TCP都是传输层的协议，不同点就是传输的方式不同（简单的说，后面会详细说明他们的不同点）。 咱们在前面多次提到过通过IP地址和MAC地址可以建立两台电脑的“链接”，那么链接以后，应该怎样就行数据的传输呢？传输的数据是哪一个程序需要的呢（例如：同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？）？于是人们发明了一个叫做“端口”的参数来区别不同程序之间的通信。</p>\n<blockquote>\n<p>“端口”是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。</p>\n</blockquote>\n<p>这样就可以进行数据的传输了。</p>\n<h2 id=\"UDP协议\"><a href=\"#UDP协议\" class=\"headerlink\" title=\"UDP协议\"></a>UDP协议</h2><p>UDP协议简单来说就是在数据包中插入一段数据用来标记端口信息，然后将数据发送出去，至于发送出去的数据包有没有被目标设备接收到，它就不管了。以这种方式发送数据包的有点就是<strong>简单</strong>，<strong>容易实现</strong>，但是缺点就是<strong>可靠性差</strong>，因为通过UDP协议发送出去的数据包无法确定发送的数据包是否到达目标设备。</p>\n<h2 id=\"TCP协议\"><a href=\"#TCP协议\" class=\"headerlink\" title=\"TCP协议\"></a>TCP协议</h2><p>而TCP协议就是为了解决UDP协议的缺点而诞生的，它虽然实现上比UDP协议复杂，但是可靠性好，可以保证数据被发送到目标设备上。</p>\n<h3 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h3><p>TCP协议是如何保证可靠性的呢？就是通过三次与目标设备的通信来确定数据包发送成功。以浏览器和服务器的通信来打比方：</p>\n<blockquote>\n<p>浏览器：你好服务器，我是 <strong>浏览器A</strong>。 服务器：你好 <em>浏览器A_，我是 <strong>服务器B</strong>。 浏览器：_服务器B</em> 你好。</p>\n</blockquote>\n<p><strong>官方描述</strong></p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/2.png\"></p>\n<p>TCP三次握手</p>\n<blockquote>\n<ol>\n<li>第一次握手：建立连接时，客户端发送syn包（syn&#x3D;j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。</li>\n<li>第二次握手：服务器收到syn包，必须确认客户的SYN（ack&#x3D;j+1），同时自己也发送一个SYN包（syn&#x3D;k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</li>\n<li>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack&#x3D;k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</li>\n</ol>\n</blockquote>\n<p>完成三次握手，客户端与服务器开始传送数据。这样就保证了，每次传送数据都会准确到达目标设备了。</p>\n<h3 id=\"TCP四次挥手\"><a href=\"#TCP四次挥手\" class=\"headerlink\" title=\"TCP四次挥手\"></a>TCP四次挥手</h3><p>当数据包发送完毕需要断开连接的时候，就需要TCP的四次挥手来保证链接的合理断开。再次以浏览器和服务器的通信打比方：</p>\n<blockquote>\n<p>主动结束方：你好，我的数据发送完毕了，我要进入准备断开的状态了。（此时它虽然不再发送数据了，但是可以接受数据） 另一方：我知道了，我还没有发送完毕的，你等着吧。 另一方：我也发送完毕了，可以断开链接了。（此时它也进入准备断开的状态） 主动结束方：好的，那断开吧。</p>\n</blockquote>\n<p><strong>官方描述</strong></p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/3333422-b751ca9b4892959e.jpg\"></p>\n<p>TCP四次挥手</p>\n<blockquote>\n<p>1.客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送。 2.服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。 3.服务器B关闭与客户端A的连接，发送一个FIN给客户端A。 4.客户端A发回ACK报文确认，并将确认序号设置为收到序号加1。</p>\n</blockquote>\n<h3 id=\"TCP为什么建立链接是三次，关闭链接是四次呢？\"><a href=\"#TCP为什么建立链接是三次，关闭链接是四次呢？\" class=\"headerlink\" title=\"TCP为什么建立链接是三次，关闭链接是四次呢？\"></a>TCP为什么建立链接是三次，关闭链接是四次呢？</h3><p>这是前端面试中在设计HTTP协议问题时，经常会被问的一个问题。其实也不难理解，因为服务端的listen状态下的socket当收到SYN报文的建连请求后，它可以把ACK和SYN（ACK起应答作用，而SYN起同步作用）放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你可以未必会马上会关闭SOCKET,也即你可能还需要发送一些数据给对方之后，再发送FIN报文给对方来表示你同意现在可以关闭连接了，所以它这里的ACK报文和FIN报文多数情况下都是分开发送的。 通过TCP协议使得两台设备成功链接，并成功发送了数据，接下来，就需要服务器端来处理数据了。</p>\n<h1 id=\"服务器处理数据并返回响应\"><a href=\"#服务器处理数据并返回响应\" class=\"headerlink\" title=\"服务器处理数据并返回响应\"></a>服务器处理数据并返回响应</h1><p>当服务器成功的接受到了浏览器发送的数据之后，接下来就是根据浏览器发送过来的数据就行后台程序的处理。这个过程就是在运行后端代码，当程序运行完成以后就产生了返回数据包，然后服务器端在通过TCP协议将数据包发送回浏览器。 这个过程和前面相比是不是很简单，其实不然，这个过程也相当复杂，只不过不是本文的重点就不详细介绍了，贴上一张Struts2的处理流程图，自己体会一下服务器端的某一个小阶段吧。</p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/4.png\"></p>\n<p>Struts2流程图</p>\n<h1 id=\"浏览器解析数据并呈现\"><a href=\"#浏览器解析数据并呈现\" class=\"headerlink\" title=\"浏览器解析数据并呈现\"></a>浏览器解析数据并呈现</h1><p>当服务器返回数据包以后，接下来的工作就交给浏览器自己去处理这些数据，最后展示在页面上。这个过程涉及到了浏览器的运行原理的相关只是，本人也不是很懂，所以只是大概记录一下。</p>\n<h2 id=\"浏览器的组成\"><a href=\"#浏览器的组成\" class=\"headerlink\" title=\"浏览器的组成\"></a>浏览器的组成</h2><p><strong>1. 用户界面：</strong>包括地址栏、后退&#x2F;前进按钮、书签目录等，也就是你所看到的除了用来显示你所请求页面的主窗口之外的其他部分。 <strong>2. 浏览器引擎：</strong>用来查询及操作渲染引擎的接口。 <strong>3. 渲染引擎：</strong>用来显示请求的内容，例如，如果请求内容为html，它负责解析html及css，并将解析后的结果显示出来。 <strong>4. 网络：</strong>用来完成网络调用，例如http请求，它具有平台无关的接口，可以在不同平台上工作。 <strong>5. UI后端：</strong>用来绘制类似组合选择框及对话框等基本组件，具有不特定于某个平台的通用接口，底层使用操作系统的用户接口。 <strong>6. JS解释器：</strong>用来解释执行JS代码。 <strong>7. 数据存储：</strong>属于持久层，浏览器需要在硬盘中保存类似cookie的各种数据，HTML5定义了web database技术，这是一种轻量级完整的客户端存储技术</p>\n<h2 id=\"渲染的流程\"><a href=\"#渲染的流程\" class=\"headerlink\" title=\"渲染的流程\"></a>渲染的流程</h2><p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/5.png\"></p>\n<p>渲染主流程</p>\n<p>可以简单的描述为以下四部分： 1.解析HTML以构建DOM树 2.构建render树 3.布局render树 4.绘制render树 但实际上渲染的过程是这样的： 1.在浏览器进行渲染的时候，渲染引擎首先会解析HTML代码，然后将标签转化为<strong>DOM树</strong>上的一个个对应节点（我们可以在chorme的Elements面板中查看到）。 2.接着，渲染引擎解析外部CSS文件及style标签中的样式信息。这些样式信息以及HTML中的可见性指令将被用来构建另一棵树—<strong>render树</strong>。Render树由一些包含有颜色和大小等属性的矩形组成，它们将被按照正确的顺序显示到屏幕上。 3.Render树构建好了之后，将会执行布局过程，它将确定每个节点在屏幕上的确切坐标。 4.然后就是绘制，即遍历render树，并使用UI后端层绘制每个节点。 值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。 <strong>补充WEBKIT渲染引擎和GECKO渲染引擎</strong></p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/6.png\"></p>\n<p>WEBKIT渲染引擎流程图</p>\n<p><img data-src=\"http://www.yaozihao.cn/wp-content/uploads/2017/04/7.png\"></p>\n<p>GECKO渲染引擎流程图</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>到这里基本上整个网络请求的过程就结束了，你在浏览器地址框输入了域名并回车，然后通过<strong>DNS解析</strong>找到相应的IP地址；然后通过<strong>HTTP协议建立了链接</strong>，找到了目标服务器的位置；接着就是<strong>TCP三次握手</strong>建立可靠链接，发送数据，<strong>服务器处理数据</strong>，<strong>TCP四次挥手</strong>断开链接；最后浏览器根据返回的数据<strong>解析渲染呈现页面</strong>。</p>\n","categories":["Web","Theory"]},{"title":"二进制和十进制转换","url":"/binary_decimal/","content":"<h3 id=\"正整数的十进制转换二进制\"><a href=\"#正整数的十进制转换二进制\" class=\"headerlink\" title=\"正整数的十进制转换二进制\"></a>正整数的十进制转换二进制</h3><p><strong>要点：除二取余，倒序排列</strong><br><strong>解释：将一个十进制数除以二，得到的商再除以二，依此类推直到商等于一或零时为止，倒取将除得的余数，即换算为二进制数的结果</strong></p>\n<p>例如把52换算成二进制数</p>\n<p>52除以2得到的余数依次为：0、0、1、0、1、1，倒序排列，所以52对应的二进制数就是110100。 由于计算机内部表示数的字节单位都是定长的，以2的幂次展开，或者8位，或者16位，或者32位….。 于是，一个二进制数用计算机表示时，位数不足2的幂次时，高位上要补足若干个0。本文都以8位为例。<br>那么：<br>(52)10&#x3D;(00110100)2</p>\n<h3 id=\"负整数转换为二进制\"><a href=\"#负整数转换为二进制\" class=\"headerlink\" title=\"负整数转换为二进制\"></a>负整数转换为二进制</h3><p><strong>要点：取反加一</strong><br><strong>解释：将该负整数对应的正整数先转换成二进制，然后对其“取补”，再对取补后的结果加1即可</strong></p>\n<p>例如要把-52换算成二进制：</p>\n<ol>\n<li>先取得52的二进制：00110100</li>\n<li>对所得到的二进制数取反：11001011</li>\n<li>将取反后的数值加一即可：11001100</li>\n</ol>\n<p>即：(-52)10&#x3D;(11001100)2</p>\n<h3 id=\"小数转换为二进制\"><a href=\"#小数转换为二进制\" class=\"headerlink\" title=\"小数转换为二进制\"></a>小数转换为二进制</h3><p><strong>要点：乘二取整，正序排列</strong><br><strong>解释：对被转换的小数乘以2，取其整数部分(0或1)作为二进制小数部分，取其小数部分，再乘以2，又取其整数部分作为二进制小数部分，****然后取小数部分，再乘以2，直到小数部分为0或者已经去到了足够位数。每次取的整数部分，按先后次序排列，就构成了二进制小数的序列</strong></p>\n<p>例如把0.2转换为二进制，</p>\n<p>0.2乘以2，取整后小数部分再乘以2，运算4次后得到的整数部分依次为0、0、1、1，结果又变成了0.2， 若果0.2再乘以2后会循环刚开始的4次运算，所以0.2转换二进制后将是0011的循环，</p>\n<p>即：(0.2)10&#x3D;(0.0011 0011 0011 …..)2</p>\n<p>循环的书写方法为在循环序列的第一位和最后一位分别加一个点标注 </p>\n<h3 id=\"二进制转换为十进制\"><a href=\"#二进制转换为十进制\" class=\"headerlink\" title=\"二进制转换为十进制\"></a>二进制转换为十进制</h3><p><strong>整数二进制用数值乘以2的幂次依次相加，小数二进制用数值乘以2的负幂次然后依次相加！</strong><br><strong>比如将二进制110转换为十进制：</strong><br><strong>首先补齐位数，00000110，首位为0，则为正整数，那么将二进制中的三位数分别于下边对应的值相乘后相加得到的值为换算为十进制的结果</strong>  </p>\n<p><strong>如果二进制数补足位数之后首位为1，那么其对应的整数为负，那么需要先取反然后再换算</strong><br>比如11111001，首位为1，那么需要先对其取反，即：-00000110 00000110,对应的十进制为6，因此11111001对应的十进制即为-6 换算公式可表示为: 11111001&#x3D;-00000110  &#x3D;-6<br><strong>如果将二进制0.110转换为十进制：</strong><br><strong>将二进制中的三位数分别于下边对应的值相乘后相加得到的值为换算为十进制的结果</strong></p>\n","categories":["Web","Theory"],"tags":["进制"]},{"title":"DNS原理入门","url":"/dns/","content":"<p>DNS 是互联网核心协议之一。不管是上网浏览，还是编程开发，都需要了解一点它的知识。</p>\n<p>本文详细介绍DNS的原理，以及如何运用工具软件观察它的运作。我的目标是，读完此文后，你就能完全理解DNS。<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419173802.png\"></p>\n<h2 id=\"DNS-是什么？\"><a href=\"#DNS-是什么？\" class=\"headerlink\" title=\"DNS 是什么？\"></a>DNS 是什么？</h2><p>DNS （Domain Name System 的缩写）的作用非常简单，就是根据域名查出IP地址。你可以把它想象成一本巨大的电话本。 举例来说，如果你要访问域名<code>math.stackexchange.com</code>，首先要通过DNS查出它的IP地址是<code>151.101.129.69</code>。</p>\n<h2 id=\"查询过程\"><a href=\"#查询过程\" class=\"headerlink\" title=\"查询过程\"></a>查询过程</h2><p>虽然只需要返回一个IP地址，但是DNS的查询过程非常复杂，分成多个步骤。 工具软件<code>dig</code>可以显示整个查询过程。</p>\n<p><code>$ dig math.stackexchange.com</code></p>\n<p>上面的命令会输出六段信息。<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419173855.png\"></p>\n<ul>\n<li>第一段是查询参数和统计。</li>\n<li>第二段是查询内容。上面结果表示，查询域名<code>math.stackexchange.com</code>的<code>A</code>记录，<code>A</code>是address的缩写。 </li>\n<li>第三段是DNS服务器的答复。 上面结果显示，<code>math.stackexchange.com</code>有四个<code>A</code>记录，即四个IP地址。<code>600</code>是TTL值（Time to live 的缩写），表示缓存时间，即600秒之内不用重新查询。 </li>\n<li>第四段显示<code>stackexchange.com</code>的NS记录（Name Server的缩写），即哪些服务器负责管理<code>stackexchange.com</code>的DNS记录。上面结果显示<code>stackexchange.com</code>共有四条NS记录，即四个域名服务器，向其中任一台查询就能知道<code>math.stackexchange.com</code>的IP地址是什么。</li>\n<li>第五段是上面四个域名服务器的IP地址，这是随着前一段一起返回的。 </li>\n<li>第六段是DNS服务器的一些传输信息。上面结果显示，本机的DNS服务器是<code>192.168.1.253</code>，查询端口是53（DNS服务器的默认端口），以及回应长度是305字节。 如果不想看到这么多内容，可以使用<code>+short</code>参数。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ dig +short math.stackexchange.com</span><br><span class=\"line\"></span><br><span class=\"line\">151.101.129.69</span><br><span class=\"line\">151.101.65.69</span><br><span class=\"line\">151.101.193.69</span><br><span class=\"line\">151.101.1.69</span><br></pre></td></tr></table></figure>\n\n<p>上面命令只返回<code>math.stackexchange.com</code>对应的4个IP地址（即<code>A</code>记录）。</p>\n<h2 id=\"DNS服务器\"><a href=\"#DNS服务器\" class=\"headerlink\" title=\"DNS服务器\"></a>DNS服务器</h2><p>下面我们根据前面这个例子，一步步还原，本机到底怎么得到域名<code>math.stackexchange.com</code>的IP地址。</p>\n<p>首先，本机一定要知道DNS服务器的IP地址，否则上不了网。通过DNS服务器，才能知道某个域名的IP地址到底是什么。<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419173946.png\"></p>\n<p>DNS服务器的IP地址，有可能是动态的，每次上网时由网关分配，这叫做DHCP机制；也有可能是事先指定的固定地址。Linux系统里面，DNS服务器的IP地址保存在<code>/etc/resolv.conf</code>文件。 上例的DNS服务器是<code>192.168.1.253</code>，这是一个内网地址。有一些公网的DNS服务器，也可以使用，其中最有名的就是Google的<a href=\"https://developers.google.com/speed/public-dns/\"><code>8.8.8.8</code></a>和Level 3的<a href=\"https://www.tummy.com/articles/famous-dns-server/\"><code>4.2.2.2</code></a>。 本机只向自己的DNS服务器查询，<code>dig</code>命令有一个<code>@</code>参数，显示向其他DNS服务器查询的结果。</p>\n<p><code>$ dig @4.2.2.2 math.stackexchange.com</code></p>\n<p>上面命令指定向DNS服务器<code>4.2.2.2</code>查询。</p>\n<h2 id=\"域名的层级\"><a href=\"#域名的层级\" class=\"headerlink\" title=\"域名的层级\"></a>域名的层级</h2><p>DNS服务器怎么会知道每个域名的IP地址呢？答案是分级查询。 请仔细看前面的例子，每个域名的尾部都多了一个点。<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419174057.png\"></p>\n<p>比如，域名<code>math.stackexchange.com</code>显示为<code>math.stackexchange.com.</code>。<br>这不是疏忽，而是所有域名的尾部，实际上都有一个根域名。 </p>\n<p>举例来说，<code>www.example.com</code>真正的域名是<code>www.example.com.root</code>，简写为<code>www.example.com.</code>。因为，根域名<code>.root</code>对于所有域名都是一样的，所以平时是省略的。<br>根域名的下一级，叫做”顶级域名”（top-level domain，缩写为TLD），比如<code>.com</code>、<code>.net</code>；再下一级叫做”次级域名”（second-level domain，缩写为SLD），比如<code>www.example.com</code>里面的<code>.example</code>，这一级域名是用户可以注册的；再下一级是主机名（host），比如<code>www.example.com</code>里面的<code>www</code>，又称为”三级域名”，这是用户在自己的域里面为服务器分配的名称，是用户可以任意分配的。 总结一下，域名的层级结构如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">主机名.次级域名.顶级域名.根域名 # 即 host.sld.tld.root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"根域名服务器\"><a href=\"#根域名服务器\" class=\"headerlink\" title=\"根域名服务器\"></a>根域名服务器</h2><p>DNS服务器根据域名的层级，进行分级查询。 需要明确的是，每一级域名都有自己的NS记录，NS记录指向该级域名的域名服务器。这些服务器知道下一级域名的各种记录。 所谓”分级查询”，就是从根域名开始，依次查询每一级域名的NS记录，直到查到最终的IP地址，过程大致如下。</p>\n<ol>\n<li>从”根域名服务器”查到”顶级域名服务器”的NS记录和A记录（IP地址）</li>\n<li>从”顶级域名服务器”查到”次级域名服务器”的NS记录和A记录（IP地址）</li>\n<li>从”次级域名服务器”查出”主机名”的IP地址</li>\n</ol>\n<p>仔细看上面的过程，你可能发现了，没有提到DNS服务器怎么知道”根域名服务器”的IP地址。回答是”根域名服务器”的NS记录和IP地址一般是不会变化的，所以内置在DNS服务器里面。<br>下面是内置的根域名服务器IP地址的一个例子<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419174122.png\"></p>\n<p>上面列表中，列出了根域名（<code>.root</code>）的三条NS记录<code>A.ROOT-SERVERS.NET</code>、<code>B.ROOT-SERVERS.NET</code>和<code>C.ROOT-SERVERS.NET</code>，以及它们的IP地址（即<code>A</code>记录）<code>198.41.0.4</code>、<code>192.228.79.201</code>、<code>192.33.4.12</code>。 </p>\n<p>另外，可以看到所有记录的TTL值是3600000秒，相当于1000小时。也就是说，每1000小时才查询一次根域名服务器的列表。 </p>\n<p>目前，世界上一共有十三组根域名服务器，从<code>A.ROOT-SERVERS.NET</code>一直到<code>M.ROOT-SERVERS.NET</code>。</p>\n<h2 id=\"分级查询的实例\"><a href=\"#分级查询的实例\" class=\"headerlink\" title=\"分级查询的实例\"></a>分级查询的实例</h2><p><code>dig</code>命令的<code>+trace</code>参数可以显示DNS的整个分级查询过程。</p>\n<p><code>$ dig +trace math.stackexchange.com</code></p>\n<p>上面命令的第一段列出根域名<code>.</code>的所有NS记录，即所有根域名服务器。<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419174137.png\"></p>\n<p>根据内置的根域名服务器IP地址，DNS服务器向所有这些IP地址发出查询请求，询问<code>math.stackexchange.com</code>的顶级域名服务器<code>com.</code>的NS记录。最先回复的根域名服务器将被缓存，以后只向这台服务器发请求。<br>接着是第二段。<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419174151.png\"></p>\n<p>上面结果显示<code>.com</code>域名的13条NS记录，同时返回的还有每一条记录对应的IP地址。<br>然后，DNS服务器向这些顶级域名服务器发出查询请求，询问<code>math.stackexchange.com</code>的次级域名<code>stackexchange.com</code>的NS记录。<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419174202.png\"></p>\n<p>上面结果显示<code>stackexchange.com</code>有四条NS记录，同时返回的还有每一条NS记录对应的IP地址。<br>然后，DNS服务器向上面这四台NS服务器查询<code>math.stackexchange.com</code>的主机名。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419174240.png\"></p>\n<p>上面结果显示，<code>math.stackexchange.com</code>有4条<code>A</code>记录，即这四个IP地址都可以访问到网站。并且还显示，最先返回结果的NS服务器是<code>ns-463.awsdns-57.com</code>，IP地址为<code>205.251.193.207</code>。</p>\n<h2 id=\"NS-记录的查询\"><a href=\"#NS-记录的查询\" class=\"headerlink\" title=\"NS 记录的查询\"></a>NS 记录的查询</h2><p><code>dig</code>命令可以单独查看每一级域名的NS记录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ dig ns com </span><br><span class=\"line\">$ dig ns stackexchange.com</span><br></pre></td></tr></table></figure>\n\n<p><code>+short</code>参数可以显示简化的结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ dig +short ns com </span><br><span class=\"line\">$ dig +short ns stackexchange.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DNS的记录类型\"><a href=\"#DNS的记录类型\" class=\"headerlink\" title=\"DNS的记录类型\"></a>DNS的记录类型</h2><p>域名与IP之间的对应关系，称为”记录”（record）。根据使用场景，”记录”可以分成不同的类型（type），前面已经看到了有<code>A</code>记录和<code>NS</code>记录。 常见的DNS记录类型如下。</p>\n<p>（1）<code>A</code>：地址记录（Address），返回域名指向的IP地址。<br>（2）<code>NS</code>：域名服务器记录（Name Server），返回保存下一级域名信息的服务器地址。该记录只能设置为域名，不能设置为IP地址。<br>（3）<code>MX</code>：邮件记录（Mail eXchange），返回接收电子邮件的服务器地址。<br>（4）<code>CNAME</code>：规范名称记录（Canonical Name），返回另一个域名，即当前查询的域名是另一个域名的跳转，详见下文。<br>（5）<code>PTR</code>：逆向查询记录（Pointer Record），只用于从IP地址查询域名，详见下文。</p>\n<p>一般来说，为了服务的安全可靠，至少应该有两条<code>NS</code>记录，而<code>A</code>记录和<code>MX</code>记录也可以有多条，这样就提供了服务的冗余性，防止出现单点失败。 <code>CNAME</code>记录主要用于域名的内部跳转，为服务器配置提供灵活性，用户感知不到。举例来说，<code>facebook.github.io</code>这个域名就是一个<code>CNAME</code>记录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ dig facebook.github.io</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">facebook.github.io. 3370    IN  CNAME   github.map.fastly.net.</span><br><span class=\"line\">github.map.fastly.net.  600 IN  A   103.245.222.133</span><br></pre></td></tr></table></figure>\n\n<p>上面结果显示，<code>facebook.github.io</code>的CNAME记录指向<code>github.map.fastly.net</code>。也就是说，用户查询<code>facebook.github.io</code>的时候，实际上返回的是<code>github.map.fastly.net</code>的IP地址。这样的好处是，变更服务器IP地址的时候，只要修改<code>github.map.fastly.net</code>这个域名就可以了，用户的<code>facebook.github.io</code>域名不用修改。 </p>\n<p>由于<code>CNAME</code>记录就是一个替换，所以域名一旦设置<code>CNAME</code>记录以后，就不能再设置其他记录了（比如<code>A</code>记录和<code>MX</code>记录），这是为了防止产生冲突。举例来说，<code>foo.com</code>指向<code>bar.com</code>，而两个域名各有自己的<code>MX</code>记录，如果两者不一致，就会产生问题。由于顶级域名通常要设置<code>MX</code>记录，所以一般不允许用户对顶级域名设置<code>CNAME</code>记录。 <code>PTR</code>记录用于从IP地址反查域名。<code>dig</code>命令的<code>-x</code>参数用于查询<code>PTR</code>记录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ dig -x 192.30.252.153</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">;; ANSWER SECTION:</span><br><span class=\"line\">153.252.30.192.in-addr.arpa. 3600 IN    PTR pages.github.com.</span><br></pre></td></tr></table></figure>\n<p>上面结果显示，<code>192.30.252.153</code>这台服务器的域名是<code>pages.github.com</code>。 逆向查询的一个应用，是可以防止垃圾邮件，即验证发送邮件的IP地址，是否真的有它所声称的域名。 <code>dig</code>命令可以查看指定的记录类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ dig a github.com</span><br><span class=\"line\">$ dig ns github.com</span><br><span class=\"line\">$ dig mx github.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他DNS工具\"><a href=\"#其他DNS工具\" class=\"headerlink\" title=\"其他DNS工具\"></a>其他DNS工具</h2><p>除了<code>dig</code>，还有一些其他小工具也可以使用。<br><strong>（1）host 命令</strong><br><code>host</code>命令可以看作<code>dig</code>命令的简化版本，返回当前请求域名的各种记录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ host github.com</span><br><span class=\"line\"></span><br><span class=\"line\">github.com has address 192.30.252.121</span><br><span class=\"line\">github.com mail is handled by 5 ALT2.ASPMX.L.GOOGLE.COM.</span><br><span class=\"line\">github.com mail is handled by 10 ALT4.ASPMX.L.GOOGLE.COM.</span><br><span class=\"line\">github.com mail is handled by 10 ALT3.ASPMX.L.GOOGLE.COM.</span><br><span class=\"line\">github.com mail is handled by 5 ALT1.ASPMX.L.GOOGLE.COM.</span><br><span class=\"line\">github.com mail is handled by 1 ASPMX.L.GOOGLE.COM.</span><br><span class=\"line\"></span><br><span class=\"line\">$ host facebook.github.com</span><br><span class=\"line\"></span><br><span class=\"line\">facebook.github.com is an alias for github.map.fastly.net.</span><br><span class=\"line\">github.map.fastly.net has address 103.245.222.133</span><br></pre></td></tr></table></figure>\n\n<p><code>host</code>命令也可以用于逆向查询，即从IP地址查询域名，等同于<code>dig -x</code> 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ host 192.30.252.153</span><br><span class=\"line\"></span><br><span class=\"line\">153.252.30.192.in-addr.arpa domain name pointer pages.github.com.</span><br></pre></td></tr></table></figure>\n<p><strong>（2）nslookup 命令</strong><br><code>nslookup</code>命令用于互动式地查询域名记录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ nslookup</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; facebook.github.io</span><br><span class=\"line\">Server:     192.168.1.253</span><br><span class=\"line\">Address:    192.168.1.253#53</span><br><span class=\"line\"></span><br><span class=\"line\">Non-authoritative answer:</span><br><span class=\"line\">facebook.github.io  canonical name = github.map.fastly.net.</span><br><span class=\"line\">Name:   github.map.fastly.net</span><br><span class=\"line\">Address: 103.245.222.133</span><br></pre></td></tr></table></figure>\n\n<p><strong>（3）whois 命令</strong><br><code>whois</code>命令用来查看域名的注册情况。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ whois github.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGV0ZWtlZW4ubmV0L2Rucy10aGUtZ29vZC1wYXJ0cw==\">DNS: The Good Parts<i class=\"fa fa-external-link-alt\"></i></span>, by Pete Keen</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pbnRlZ3JhbGlzdC5jby51ay9wb3N0cy9kbnNiYXNpY3MuaHRtbA==\">DNS 101<i class=\"fa fa-external-link-alt\"></i></span>, by Mark McDonnell</li>\n</ul>\n","categories":["Web","Theory"],"tags":["DNS"]},{"title":"同源策略和跨域访问","url":"/origin_cross_domain/","content":"<h2 id=\"什么是同源策略\"><a href=\"#什么是同源策略\" class=\"headerlink\" title=\"什么是同源策略\"></a>什么是同源策略</h2><p>理解跨域首先必须要了解同源策略。同源策略是浏览器上为安全性考虑实施的非常重要的安全策略。</p>\n<h3 id=\"何谓同源\"><a href=\"#何谓同源\" class=\"headerlink\" title=\"何谓同源:\"></a>何谓同源:</h3><p>URL由协议、域名、端口和路径组成，如果两个URL的协议、域名和端口相同，则表示他们同源。</p>\n<h3 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略:\"></a>同源策略:</h3><p>浏览器的同源策略，限制了来自不同源的”document”或脚本，对当前”document”读取或设置某些属性。<br>从一个域上加载的脚本不允许访问另外一个域的文档属性。</p>\n<p>举个例子：<br>比如一个恶意网站的页面通过iframe嵌入了银行的登录页面（二者不同源），如果没有同源限制，恶意网页上的javascript脚本就可以在用户登录银行的时候获取用户名和密码。</p>\n<p>在浏览器中，<code>&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;、&lt;link&gt;</code>等标签都可以加载跨域资源，而不受同源限制，但浏览器限制了JavaScript的权限使其不能读、写加载的内容。<br>另外同源策略只对网页的HTML文档做了限制，对加载的其他静态资源如javascript、css、图片等仍然认为属于同源。</p>\n<p>代码示例（<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwLyVFNSU5MiU4Q2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MSVFNyU5NCVCMSVFNCVCQSU4RSVFNyVBQiVBRiVFNSU4RiVBMyVFNCVCOCU4RCVFNSU5MCU4QyVFOCU4MCU4QyVFNCVCOCU4RCVFNSU5MCU4QyVFNiVCQSU5MCVFRiVCQyU4OSVFRiVCQyU5QQ==\">http://localhost:8080/和http://localhost:8081由于端口不同而不同源）：<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL3Rlc3QuaHRtbA==\">http://localhost:8080/test.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;&lt;title&gt;test same origin policy&lt;/title&gt;&lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;iframe id=“test” src=“http://localhost:8081/test2.html”&gt;&lt;/iframe&gt;</span><br><span class=\"line\">        &lt;script type=“text/javascript”&gt;</span><br><span class=\"line\">            document.getElementById(“test”).contentDocument.body.innerHTML = “write somthing”;</span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgxL3Rlc3QyLmh0bWw=\">http://localhost:8081/test2.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;&lt;title&gt;test same origin policy&lt;/title&gt;&lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        Testing.</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在Firefox中会得到如下错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Error: Permission denied to access property ‘body’</span><br></pre></td></tr></table></figure>\n\n<p>Document对象的domain属性存放着装载文档的服务器的主机名，可以设置它。<br>例如来自”blog.csdn.net”和来自”bbs.csdn.net”的页面，都将document.domain设置为”csdn.net”，则来自两个子域名的脚本即可相互访问。<br>出于安全的考虑，不能设置为其他主domain，比如 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jc2RuLm5ldC8=\">http://www.csdn.net/<i class=\"fa fa-external-link-alt\"></i></span> 不能设置为sina.com</p>\n<h2 id=\"Ajax跨域\"><a href=\"#Ajax跨域\" class=\"headerlink\" title=\"Ajax跨域\"></a>Ajax跨域</h2><p>Ajax (XMLHttpRequest)请求受到同源策略的限制。<br>Ajax通过XMLHttpRequest能够与远程的服务器进行信息交互，另外XMLHttpRequest是一个纯粹的javascript对象，这样的交互过程，是在后台进行的，用户不易察觉。<br>因此，XMLHTTP实际上已经突破了原有的javascript的安全限制。</p>\n<p>举个例子：</p>\n<p>假设某网站引用了其它站点的javascript，这个站点被compromise并在javascript中加入获取用户输入并通过ajax提交给其他站点，这样就可以源源不断收集信息。<br>或者某网站因为存在漏洞导致XSS注入了javascript脚本，这个脚本就可以通过ajax获取用户信息并通过ajax提交给其他站点，这样就可以源源不断收集信息。<br>如果我们又想利用XMLHTTP的无刷新异步交互能力，又不愿意公然突破javascript的安全策略，可以选择的方案就是给XMLHTTP加上严格的同源限制。<br>这样的安全策略，很类似于Applet的安全策略。IFrame的限制还仅仅是不能访问跨域HTMLDOM中的数据，而XMLHTTP则根本上限制了跨域请求的提交。（实际上下面提到了CORS已经放宽了限制）</p>\n<p>随着Ajax技术和网络服务的发展，对跨域的要求也越来越强烈。下面介绍Ajax的跨域技术。</p>\n<h3 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h3><p>JSONP技术实际和Ajax没有关系。我们知道<code>&lt;script&gt;</code>标签可以加载跨域的javascript脚本，并且被加载的脚本和当前文档属于同一个域。因此在文档中可以调用&#x2F;访问脚本中的数据和函数。如果javascript脚本中的数据是动态生成的，那么只要在文档中动态创建<code>&lt;script&gt;</code>标签就可以实现和服务端的数据交互。<br>JSONP就是利用<code>&lt;script&gt;</code>标签的跨域能力实现跨域数据的访问，请求动态生成的JavaScript脚本同时带一个callback函数名作为参数。其中callback函数本地文档的JavaScript函数，服务器端动态生成的脚本会产生数据，并在代码中以产生的数据为参数调用callback函数。当这段脚本加载到本地文档时，callback函数就被调用。</p>\n<p>第一个站点的测试页面（<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL3Rlc3QuaHRtbCVFRiVCQyU4OSVFRiVCQyU5QQ==\">http://localhost:8080/test.html）：<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=“http://localhost:8081/test_data.js”&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        function test_handler(data) &#123;</span><br><span class=\"line\">            console.log(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>服务器端的javascript脚本（<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgxL3Rlc3RfZGF0YS5qcyVFRiVCQyU4OSVFRiVCQyU5QQ==\">http://localhost:8081/test_data.js）：<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">test_handler(‘&#123;“data”: “something”&#125;’);</span><br></pre></td></tr></table></figure>\n<p>为了动态实现JSONP请求，可以使用javascript动态插入<code>&lt;script&gt;</code>标签：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=“text/javascript”&gt;</span><br><span class=\"line\">        // this shows dynamic script insertion</span><br><span class=\"line\">        var script = document.createElement(‘script’);</span><br><span class=\"line\">        script.setAttribute(‘src’, url);</span><br><span class=\"line\">        // load the script</span><br><span class=\"line\">        document.getElementsByTagName(‘head’)[0].appendChild(script);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>JSONP协议封装了上述步骤，jQuery中统一是现在AJAX中(其中data type为JSONP)：<br><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL3Rlc3Q/Y2FsbGJhY2s9dGVzdF9oYW5kbGVy\">http://localhost:8080/test?callback=test_handler<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>为了支持JSONP协议，服务器端必须提供特别的支持，另外JSONP只支持GET请求。</p>\n<h3 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h3><p>使用代理方式跨域更加直接，因为SOP的限制是浏览器实现的。如果请求不是从浏览器发起的，就不存在跨域问题了。<br>使用本方法跨域步骤如下：</p>\n<ol>\n<li>把访问其它域的请求替换为本域的请求</li>\n<li>本域的请求是服务器端的动态脚本负责转发实际的请求</li>\n</ol>\n<p>各种服务器的Reverse Proxy功能都可以非常方便的实现请求的转发，如Apache httpd + mod_proxy。<br>Eg.<br>为了通过Ajax从 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==\">http://localhost:8080<i class=\"fa fa-external-link-alt\"></i></span> 访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgxL2FwaQ==\">http://localhost:8081/api<i class=\"fa fa-external-link-alt\"></i></span> ，可以将请求发往 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaQ==\">http://localhost:8080/api<i class=\"fa fa-external-link-alt\"></i></span> 。<br>然后利用Apache Web服务器的Reverse Proxy功能做如下配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ProxyPass /api http://localhost:8081/api</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><p>Cross origin resource sharing</p>\n<blockquote>\n<p>“Cross-origin resource sharing (CORS) is a mechanism that allows a web page to make XMLHttpRequests to another domain. Such “cross-domain” requests would otherwise be forbidden by web browsers, per the same origin security policy. CORS defines a way in which the browser and the server can interact to determine whether or not to allow the cross-origin request. It is more powerful than only allowing same-origin requests, but it is more secure than simply allowing all such cross-origin requests.” —-Wikipedia[3]</p>\n</blockquote>\n<p>通过在HTTP Header中加入扩展字段，服务器在相应网页头部加入字段表示允许访问的domain和HTTP method，客户端检查自己的域是否在允许列表中，决定是否处理响应。<br>实现的基础是JavaScript不能够操作HTTP Header。某些浏览器插件实际上是具有这个能力的。</p>\n<p>服务器端在HTTP的响应头中加入（页面层次的控制模式）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: example.com</span><br><span class=\"line\">Access-Control-Request-Method: GET, POST</span><br><span class=\"line\">Access-Control-Allow-Headers: Content-Type, Authorization, Accept, Range, Origin</span><br><span class=\"line\">Access-Control-Expose-Headers: Content-Range</span><br><span class=\"line\">Access-Control-Max-Age: 3600</span><br></pre></td></tr></table></figure>\n<p>多个域名之间用逗号分隔，表示对所示域名提供跨域访问权限。<code>*</code>表示允许所有域名的跨域访问。</p>\n<p>客户端可以有两种行为：</p>\n<ol>\n<li>发送OPTIONS请求，请求Access-Control信息。如果自己的域名在允许的访问列表中，则发送真正的请求，否则放弃请求发送。</li>\n<li>直接发送请求，然后检查response的Access-Control信息，如果自己的域名在允许的访问列表中，则读取response body，否则放弃。<br>本质上服务端的response内容已经到达本地，JavaScript决定是否要去读取。</li>\n</ol>\n<p>Support: [Javascript Web Applications]</p>\n<ul>\n<li>IE &gt;&#x3D; 8 (需要安装caveat)</li>\n<li>Firefox &gt;&#x3D; 3</li>\n<li>Safari 完全支持</li>\n<li>Chrome 完全支持</li>\n<li>Opera 不支持</li>\n</ul>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>测试页面 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL3Rlc3QzLmh0bWw=\">http://localhost:8080/test3.html<i class=\"fa fa-external-link-alt\"></i></span> 使用<code>jquery</code>发送Ajax请求。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">        &lt;head&gt;&lt;title&gt;testing cross sop&lt;/title&gt;&lt;/head&gt;</span><br><span class=\"line\">        &lt;body&gt;</span><br><span class=\"line\">            Testing.</span><br><span class=\"line\">            &lt;script src=“jquery-2.0.0.min.js”&gt;&lt;/script&gt;</span><br><span class=\"line\">            &lt;script type=‘text/javascript’&gt;</span><br><span class=\"line\">                $.ajax(&#123;</span><br><span class=\"line\">                    url: ‘http://localhost:8000/hello’,</span><br><span class=\"line\">                    success: function(data) &#123;</span><br><span class=\"line\">                        alert(data);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    error: function() &#123;</span><br><span class=\"line\">                        alert(‘error’);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &lt;/script&gt;</span><br><span class=\"line\">        &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>测试Restful API(<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDAwL2hlbGxvLyU3Qm5hbWUlN0Q=\">http://localhost:8000/hello/{name}<i class=\"fa fa-external-link-alt\"></i></span>) 使用<code>bottle.py</code>来host。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from bottle import route, run, response</span><br><span class=\"line\">@route(‘/hello’)</span><br><span class=\"line\">def index():</span><br><span class=\"line\">return ‘Hello World.’</span><br><span class=\"line\">run(host=’localhost’, port=8000)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试1：\"><a href=\"#测试1：\" class=\"headerlink\" title=\"测试1：\"></a>测试1：</h4><p>测试正常的跨域请求的行为。</p>\n<p>测试结果：</p>\n<ol>\n<li>跨域GET请求已经发出，请求header中带有<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Origin    http://localhost:8080</span><br></pre></td></tr></table></figure></li>\n<li>服务器端正确给出response</li>\n<li>javascript拒绝读取数据，在firebug中发现reponse为空，并且触发error回调</li>\n</ol>\n<h4 id=\"测试2：\"><a href=\"#测试2：\" class=\"headerlink\" title=\"测试2：\"></a>测试2：</h4><p>测试支持CORS的服务器的跨域请求行为。<br>对Restful API做如下改动，在response中加入header：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">def index():</span><br><span class=\"line\">#Add CORS header#</span><br><span class=\"line\">response.set_header(“Access-Control-Allow-Origin”, “http://localhost:8080”)</span><br><span class=\"line\">return ‘Hello World.’</span><br></pre></td></tr></table></figure>\n\n<p>测试结果：</p>\n<ol>\n<li>跨域GET请求已经发出，请求header中带有<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Origin    http://localhost:8080</span><br></pre></td></tr></table></figure></li>\n<li>服务器端正确给出response</li>\n<li>客户端正常获取数据</li>\n</ol>\n<h4 id=\"测试3：\"><a href=\"#测试3：\" class=\"headerlink\" title=\"测试3：\"></a>测试3：</h4><p>测试OPTIONS请求获取CORS信息。<br>对客户端的Ajax请求增加header：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">          url: ‘http://localhost:8000/hello’,</span><br><span class=\"line\">          headers: &#123;‘Content-Type’: ‘text/html’&#125;,</span><br><span class=\"line\">          success: function(data) &#123;</span><br><span class=\"line\">              alert(data);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          error: function() &#123;</span><br><span class=\"line\">              alert(‘error’);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;);</span><br></pre></td></tr></table></figure>\n<p>对Restful API做如下改动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@route(‘/hello’, method = [‘OPTIONS’, ‘GET’])</span><br><span class=\"line\">def index():</span><br><span class=\"line\">if request.method == ‘OPTIONS’:</span><br><span class=\"line\">return ”</span><br><span class=\"line\">return ‘Hello World.’</span><br></pre></td></tr></table></figure>\n\n<p>测试结果：</p>\n<ol>\n<li>Ajax函数会首先发送OPTIONS请求</li>\n<li>针对OPTIONS请求服务器</li>\n<li>客户端发现没有CORS header后不会发送GET请求</li>\n</ol>\n<h4 id=\"测试4：\"><a href=\"#测试4：\" class=\"headerlink\" title=\"测试4：\"></a>测试4：</h4><p>增加服务器端对OPTIONS方法的处理。<br>对Restful API做如下改动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@route(‘/hello’, method = [‘OPTIONS’, ‘GET’])</span><br><span class=\"line\">def index():</span><br><span class=\"line\">response.headers[‘Access-Control-Allow-Origin’] = ‘http://localhost:8080’</span><br><span class=\"line\">response.headers[‘Access-Control-Allow-Methods’] = ‘GET, OPTIONS’</span><br><span class=\"line\">response.headers[‘Access-Control-Allow-Headers’] = ‘Origin, Accept, Content-Type’</span><br><span class=\"line\">if request.method == ‘OPTIONS’:</span><br><span class=\"line\">return ”</span><br><span class=\"line\">return ‘Hello World.’</span><br></pre></td></tr></table></figure>\n\n<p>测试结果：</p>\n<ol>\n<li>Ajax函数会首先发送OPTIONS请求</li>\n<li>针对OPTIONS请求服务器</li>\n<li>客户端匹配CORS header中的allow headers and orgin后会正确发送GET请求并获取结果<br>测试发现，<code>Access-Control-Allow-Headers</code>是必须的。</li>\n</ol>\n<p>CORS协议提升了Ajax的跨域能力，但也增加了风险。一旦网站被注入脚本或XSS攻击，将非常方便的获取用户信息并悄悄传递出去。</p>\n<h2 id=\"Cookie-同源策略\"><a href=\"#Cookie-同源策略\" class=\"headerlink\" title=\"Cookie 同源策略\"></a>Cookie 同源策略</h2><p>Cookie中的同源只关注域名，忽略协议和端口。所以 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MC8=\">https://localhost:8080/<i class=\"fa fa-external-link-alt\"></i></span> 和 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgxLw==\">http://localhost:8081/<i class=\"fa fa-external-link-alt\"></i></span> 的Cookie是共享的。</p>\n<h2 id=\"Flash-x2F-SilverLight跨域\"><a href=\"#Flash-x2F-SilverLight跨域\" class=\"headerlink\" title=\"Flash&#x2F;SilverLight跨域\"></a>Flash&#x2F;SilverLight跨域</h2><p>浏览器的各种插件也存在跨域需求。通常是通过在服务器配置<code>crossdomain.xml</code>，设置本服务允许哪些域名的跨域访问。<br>客户端会首先请求此文件，如果发现自己的域名在访问列表里，就发起真正的请求，否则不发送请求。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=”1.0″?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE cross-domain-policy SYSTEM “http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd”&gt;</span><br><span class=\"line\">&lt;cross-domain-policy&gt;</span><br><span class=\"line\">&lt;allow-access-from domain=”*”/&gt;</span><br><span class=\"line\">&lt;allow-http-request-headers-from domain=”*” headers=”*”/&gt;</span><br><span class=\"line\">&lt;/cross-domain-policy&gt;</span><br></pre></td></tr></table></figure>\n\n<p>通常<code>crossdomain.xml</code>放置在网站根目录。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>互联网的发展催生了跨域访问的需求，各种跨域方法和协议满足了需求但也增加了各种风险。尤其是XSS和CSRF等攻击的盛行也得益于此。<br>了解这些技术背景有助于在实际项目中熟练应用并规避各种安全风险。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p>[1] 白帽子讲Web安全: <span class=\"exturl\" data-url=\"aHR0cDovL2Jvb2suZG91YmFuLmNvbS9zdWJqZWN0LzEwNTQ2OTI1Lw==\">http://book.douban.com/subject/10546925/<i class=\"fa fa-external-link-alt\"></i></span><br>[2] 使用 JSONP 实现跨域通信: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pYm0uY29tL2RldmVsb3BlcndvcmtzL2NuL3dlYi93YS1hai1qc29ucDEv\">http://www.ibm.com/developerworks/cn/web/wa-aj-jsonp1/<i class=\"fa fa-external-link-alt\"></i></span><br>[3] Cross-origin resource sharing: <span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9zcy1PcmlnaW5fUmVzb3VyY2VfU2hhcmluZw==\">http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing<i class=\"fa fa-external-link-alt\"></i></span><br>[4] Cross-domain policy for Flash movies: <span class=\"exturl\" data-url=\"aHR0cDovL2tiMi5hZG9iZS5jb20vY3BzLzE0Mi90bl8xNDIxMy5odG1s\">http://kb2.adobe.com/cps/142/tn_14213.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Web","Theory"]},{"title":"字符编码简介","url":"/character_encoding/","content":"<p>字符编码是计算机技术的基石，想要熟练使用计算机，懂得一点字符编码的知识，还是很有必要的。</p>\n<h2 id=\"ASCII码\"><a href=\"#ASCII码\" class=\"headerlink\" title=\"ASCII码\"></a>ASCII码</h2><p>我们知道，在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。</p>\n<p>上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码，一直沿用至今。</p>\n<p>ASCII码一共规定了128个字符的编码，比如空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。</p>\n<h2 id=\"非ASCII编码\"><a href=\"#非ASCII编码\" class=\"headerlink\" title=\"非ASCII编码\"></a>非ASCII编码</h2><p>英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用ASCII码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的é的编码为130（二进制10000010）。这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。</p>\n<p>但是，这里又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样。比如，130在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (?)，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，0—127表示的符号是一样的，不一样的只是128—255的这一段。</p>\n<p>至于亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右。一个字节只能表示256种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示256×256&#x3D;65536个符号。</p>\n<p>中文编码的问题需要专文讨论，这篇笔记不涉及。这里只指出，虽然都是用多个字节表示一个符号，但是GB类的汉字编码与后文的Unicode和UTF-8是毫无关系的。</p>\n<h2 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h2><p>正如上一节所说，世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。</p>\n<p>可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是Unicode，就像它的名字都表示的，这是一种所有符号的编码。</p>\n<p>Unicode当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字“严”。具体的符号对应表，可以查询unicode.org，或者专门的汉字对应表。</p>\n<h2 id=\"Unicode的问题\"><a href=\"#Unicode的问题\" class=\"headerlink\" title=\"Unicode的问题\"></a>Unicode的问题</h2><p>需要注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。</p>\n<p>比如，汉字“严”的unicode是十六进制数4E25，转换成二进制数足足有15位（100111000100101），也就是说这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。</p>\n<p>这里就有两个严重的问题，第一个问题是，如何才能区别unicode和ascii？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。</p>\n<p>它们造成的结果是：</p>\n<p>出现了unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示unicode。<br>unicode在很长一段时间内无法推广，直到互联网的出现。</p>\n<h2 id=\"UTF-8\"><a href=\"#UTF-8\" class=\"headerlink\" title=\"UTF-8\"></a>UTF-8</h2><p>互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种unicode的实现方式。其他实现方式还包括UTF-16和UTF-32，不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。</p>\n<p>UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p>\n<p>UTF-8的编码规则很简单，只有二条：</p>\n<p>对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。<br>对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。<br>下表总结了编码规则，字母x表示可用编码的位。</p>\n<p>Unicode符号范围 | UTF-8编码方式<br>(十六进制) | （二进制）<br>——————–+———————————————<br>0000 0000-0000 007F | 0xxxxxxx<br>0000 0080-0000 07FF | 110xxxxx 10xxxxxx<br>0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx<br>0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx<br>下面，还是以汉字“严”为例，演示如何实现UTF-8编码。</p>\n<p>已知“严”的unicode是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800-0000 FFFF），因此“严”的UTF-8编码需要三个字节，即格式是“1110xxxx 10xxxxxx 10xxxxxx”。然后，从“严”的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，“严”的UTF-8编码是“11100100 10111000 10100101”，转换成十六进制就是E4B8A5。</p>\n<h2 id=\"Unicode与UTF-8之间的转换\"><a href=\"#Unicode与UTF-8之间的转换\" class=\"headerlink\" title=\"Unicode与UTF-8之间的转换\"></a>Unicode与UTF-8之间的转换</h2><p>通过上一节的例子，可以看到“严”的Unicode码是4E25，UTF-8编码是E4B8A5，两者是不一样的。它们之间的转换可以通过程序实现。</p>\n<p>在Windows平台下，有一个最简单的转化方法，就是使用内置的记事本小程序Notepad.exe。打开文件后，点击“文件”菜单中的“另存为”命令，会跳出一个对话框，在最底部有一个“编码”的下拉条。</p>\n<p>里面有四个选项：ANSI，Unicode，Unicode big endian 和 UTF-8。</p>\n<p>ANSI是默认的编码方式。对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（只针对Windows简体中文版，如果是繁体中文版会采用Big5码）。<br>Unicode编码指的是UCS-2编码方式，即直接用两个字节存入字符的Unicode码。这个选项用的little endian格式。<br>Unicode big endian编码与上一个选项相对应。我在下一节会解释little endian和big endian的涵义。<br>UTF-8编码，也就是上一节谈到的编码方法。<br>选择完”编码方式“后，点击”保存“按钮，文件的编码方式就立刻转换好了。</p>\n<h2 id=\"Little-endian和Big-endian\"><a href=\"#Little-endian和Big-endian\" class=\"headerlink\" title=\"Little endian和Big endian\"></a>Little endian和Big endian</h2><p>上一节已经提到，Unicode码可以采用UCS-2格式直接存储。以汉字”严“为例，Unicode码是4E25，需要用两个字节存储，一个字节是4E，另一个字节是25。存储的时候，4E在前，25在后，就是Big endian方式；25在前，4E在后，就是Little endian方式。</p>\n<p>这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位。</p>\n<p>因此，第一个字节在前，就是”大头方式“（Big endian），第二个字节在前就是”小头方式“（Little endian）。</p>\n<p>那么很自然的，就会出现一个问题：计算机怎么知道某一个文件到底采用哪一种方式编码？</p>\n<p>Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做”零宽度非换行空格“（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。</p>\n<p>如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>下面，举一个实例。</p>\n<p>打开”记事本“程序Notepad.exe，新建一个文本文件，内容就是一个”严“字，依次采用ANSI，Unicode，Unicode big endian 和 UTF-8编码方式保存。</p>\n<p>然后，用文本编辑软件UltraEdit中的”十六进制功能“，观察该文件的内部编码方式。</p>\n<p>ANSI：文件的编码就是两个字节“D1 CF”，这正是“严”的GB2312编码，这也暗示GB2312是采用大头方式存储的。<br>Unicode：编码是四个字节“FF FE 25 4E”，其中“FF FE”表明是小头方式存储，真正的编码是4E25。<br>Unicode big endian：编码是四个字节“FE FF 4E 25”，其中“FE FF”表明是大头方式存储。<br>UTF-8：编码是六个字节“EF BB BF E4 B8 A5”，前三个字节“EF BB BF”表示这是UTF-8编码，后三个“E4B8A5”就是“严”的具体编码，它的存储顺序与编码顺序是一致的</p>\n","categories":["Web","Theory"]},{"title":"面向对象的基础一","url":"/object_oriented_programming_one/","content":"<p>如果希望一步步将面向对象的思想，设计模式熟练掌握。</p>\n<p>以下基础知识可能需要常常遍历，直到滚瓜烂熟。</p>\n<p>对象是一个自包含的实体，用一组可识别的特性和行为来表示。将一组事物的共性抽离出来。</p>\n<p>类就是具有相同的属性和功能的对象的抽象的集合。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class  Cat&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  public function Shout()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return “喵”;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个猫的类。有一个方法返回叫声。</p>\n<p><code>class</code> 是表示定义类的关键字，<code>Cat</code> 就是类的名称，<code>Shout</code>就是类的方法。</p>\n<p>注意点（通常的规范，具体请遵从公司规定）：</p>\n<p>第一，类名首字母大写，多个单词则各个首字母大写。</p>\n<p>第二，对外公开的方法需要用<code>public</code>修饰符。</p>\n<p>怎么用这个类呢？很简单，实例化一下就可以了。</p>\n<p>实例，就是一个真实的对象，而实例化就是创建对象的过程，使用new关键字来创建。说白了，你就当一个new出来的是个新的存在的class就完事了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$cat = new Cat();</span><br><span class=\"line\"></span><br><span class=\"line\">return $cat-&gt;Shout();</span><br></pre></td></tr></table></figure>\n<p>着重提出构造方法，其他的魔术方法都差不多的意思，自行脑补。</p>\n<p>构造方法，又叫构造函数，其实就是对类进行初始化。如果实在php5版本以后使用魔术方法__construct(),4以前的版本构造方法与类同名。无返回值，在new的时候调用。也就是说在new一个类的时候默认就会执行这个类中的构造方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Cat&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private $name=”;</span><br><span class=\"line\"></span><br><span class=\"line\">  public function __construct($name)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;name=$name;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public function Shout()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return “我的名字是”+$name+”喵”;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在实例化的时候，传入一个名字，构造函数自动执行，将名字赋值给了私有变量。然后我们调用叫的方法，返回私有变量$name，你会发现返回的是赋值过后的$name。</p>\n","categories":["Web","Theory"]},{"title":"面向对象的基础三","url":"/object_oriented_programming_three/","content":"<h2 id=\"面向对象之封装\"><a href=\"#面向对象之封装\" class=\"headerlink\" title=\"面向对象之封装\"></a>面向对象之封装</h2><p>每个对象都包含它能进行操作所需要的所有信息，这个特性称为封装，因此对象不必依赖其他对象来完成自己的操作。这样方法和属性包装在类中，通过类的实例来实现。</p>\n<p>封装的好处：</p>\n<ol>\n<li><p>良好的封装能够减少耦合（耦合的意思就是两个单元之间紧密配合与相互影响）。</p>\n</li>\n<li><p>类内部的实现可以自由地修改。</p>\n</li>\n<li><p>类具有清晰的对外接口。</p>\n</li>\n</ol>\n<p>解释封装的意思就是将单独的单元或者称之为模块写成一个方法，便于调用。此方法只负责单一的功能。</p>\n<h2 id=\"面向对象之继承\"><a href=\"#面向对象之继承\" class=\"headerlink\" title=\"面向对象之继承\"></a>面向对象之继承</h2><p>继承理解起来也很容易，工作方式就是定义子类和父类，或叫做基类和派生类，其种子类继承父类的所有特性，子类不但继承了父类的特性，还可以定义新的特性，还可以以自己的方式实现父类的功能（方法重写）。如果需要调用父类的构造函数，则可以使用：parent::父类函数 或 父类名::父类函数。默认情况下会自动调用父类的构造方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">class Fruit &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  public function __construct($name)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    echo ‘水果’.$name.’创建了’;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Apple extends Fruit &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  public function __construct($name)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  parent::__construct($name);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$apple = new Apple(“苹果”);</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出 水果苹果创建了</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>继承是有缺点的，就是父类变化，子类不得不变，继承会破坏包装，父类实现细节暴漏给子类，这样就增加了两大类之间的耦合性（藕断丝连，尽管两个类分开，但如果关系密切，一方的改变就会影响另一方，就是耦合性高的表现）。</p>\n<h2 id=\"面向对象之多态\"><a href=\"#面向对象之多态\" class=\"headerlink\" title=\"面向对象之多态\"></a>面向对象之多态</h2><p>多态去理解的话就是不同的对象可以执行相同的动作，但要通过他们自己的实现代码来执行。多态的原理只有对象继承最末端的方法实现会被调用。</p>\n<p>多态这个概念，在Java中指的是变量可以指向的对象的类型，可是变量声明类型的子类。对象一旦创建，它的类型是不变的，多态的是变量。</p>\n<p>在PHP5中，变量的类型是不确定的，一个变量可以指向任何类型的数值、字符串、对象、资源等。我们无法说PHP5中多态的是变量。</p>\n<p>我们只能说在PHP5中，多态应用在方法参数的类型提示位置。</p>\n<p>一个类的任何子类对象都可以满足以当前类型作为类型提示的类型要求。所有实现这个接口的类，都可以满足以接口类型作为类型提示的方法参数要求。简单的说，一个类拥有其父类、和已实现接口的身份。</p>\n<h3 id=\"通过实现接口实现多态\"><a href=\"#通过实现接口实现多态\" class=\"headerlink\" title=\"通过实现接口实现多态\"></a>通过实现接口实现多态</h3><p>下面的例子中，UserAdmin类的静态方法，要求一个User类型的参数。</p>\n<p>在后面的使用中，传递了一个实现了User接口的类NormalUser的实例。代码成功运行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?</span><br><span class=\"line\"></span><br><span class=\"line\">interface User&#123; // User接口</span><br><span class=\"line\"></span><br><span class=\"line\">  public function  getName();</span><br><span class=\"line\"></span><br><span class=\"line\">  public function setName($_name);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class NormalUser implements User &#123; // 实现接口的类.</span><br><span class=\"line\">  private $name;</span><br><span class=\"line\">  public function getName()&#123;</span><br><span class=\"line\">    return $this-&gt;name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public function setName($_name)&#123;</span><br><span class=\"line\">    $this-&gt;name = $_name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class UserAdmin&#123; //操作.</span><br><span class=\"line\">  public static function  ChangeUserName(User $_user,$_userName)&#123;</span><br><span class=\"line\">    $_user-&gt;setName($_userName);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$normalUser = new NormalUser();</span><br><span class=\"line\">UserAdmin::ChangeUserName($normalUser,&quot;Tom&quot;);//这里传入的是 NormalUser的实例.</span><br><span class=\"line\">echo $normalUser-&gt;getName();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tom</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过继承关系实现多态\"><a href=\"#通过继承关系实现多态\" class=\"headerlink\" title=\"通过继承关系实现多态\"></a>通过继承关系实现多态</h3><p>下面是类和子类的关系。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?</span><br><span class=\"line\"></span><br><span class=\"line\">classUser&#123; // User接口</span><br><span class=\"line\"></span><br><span class=\"line\">     public function getName()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">classNormalUser extendsUser &#123; // 继承自User类</span><br><span class=\"line\"></span><br><span class=\"line\">private  $name;</span><br><span class=\"line\"></span><br><span class=\"line\">  public function getName()&#123;</span><br><span class=\"line\">      return  $this-&gt;name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   public function setName($_name)&#123;</span><br><span class=\"line\">      $this-&gt;name = $_name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class UserAdmin&#123; //操作.</span><br><span class=\"line\">     public static function  ChangeUserName(User $_user,$_userName)&#123;</span><br><span class=\"line\">       $_user-&gt;setName($_userName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$normalUser= newNormalUser();</span><br><span class=\"line\">UserAdmin::ChangeUserName($normalUser,&quot;Tom&quot;);//这里传入的是 NormalUser的实例.</span><br><span class=\"line\">echo$normalUser-&gt;getName();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Tom</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>1、当一个父类知道所有的子类都有一个方法，但是父类不能确定该方法如何写，可以让子类去覆盖它的方法,方法覆盖(重写)，必须要求子类的方法名和参数个数完全一致<br>2、如果子类要去调用父类的某个方法(protected&#x2F;public)，可以使用 <code>父类名::方法名</code> 或者 <code>parent::方法名</code><br>3、在实现方法重写的时候，访问修饰符可以不一样，但是子类方法的访问权限必须大于等于父类方法的访问权限（即不能缩小父类方法的访问权限）<br>如父类<code>public function cry()&#123;&#125;</code> 子类 <code>protected function cry()&#123;&#125;</code> 则会报错<br>但是子类的访问权限可以放大，如：<br>父类<code>private function cry()&#123;&#125;</code> 子类 <code>protected function cry()&#123;&#125;</code> 可以正确执行</p>\n","categories":["Web","Theory"]},{"title":"面向对象的基础二","url":"/object_oriented_programming_two/","content":"<p>方法重载：方法重载提供了创建同名的多个方法的能力，但这些方法需使用不同的参数类型。所有的方法都可以重载。</p>\n<p>大白话解释就是。在子类中写一个与父类中相同的方法名，那么调用的时候，调用的就是在子类中重新写的方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Cat&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private  $name = “”;</span><br><span class=\"line\"></span><br><span class=\"line\">  public function Cat($name)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;name = $name;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法重载可不再改变原方法基础上新增功能。</p>\n<p>PHP中有三种访问修饰符，分别是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public（公共的、默认）</span><br><span class=\"line\">protected（受保护的）</span><br><span class=\"line\">private（私有的）</span><br><span class=\"line\"></span><br><span class=\"line\">public（公共的、默认）在PHP5中如果类没有指定成员的访问修饰符，默认就是public的访问权限。</span><br><span class=\"line\">protected（受保护的）被声明为protected的成员，只允许该类的子类进行访问。</span><br><span class=\"line\">private（私有的 ） 被定义为private的成员，对于类内部所有成员都可见，没有访问限制。对类外部不允许访问。</span><br></pre></td></tr></table></figure>\n<p>访问受保护属性,报致命错误。</p>\n","categories":["Web","Theory"]},{"title":"面向对象的基础五","url":"/object_oriented_programming_five/","content":"<h2 id=\"接口的定义和规范\"><a href=\"#接口的定义和规范\" class=\"headerlink\" title=\"接口的定义和规范\"></a>接口的定义和规范</h2><p>接口是把隐式公共方法和属性组合起来，以封装特定的功能的一个集合。一旦类实现了接口，类就可以支持接口所指定的所有属性和成员。声明接口在语法上与声明抽象类完全相同，但不允许提供接口中任何成员的执行方式。</p>\n<p>所以接口不能实例化，不能有构造方法和字段；抽象方法只能是public的，不能设置为private活着protected类型；即使是abstract何final修饰符也不能修饰接口中的抽象方法。而接口中保留了静态抽象方法。</p>\n<p>实现接口必须实现接口中的所有的方法和属性。</p>\n<p>一个类可以支持多个接口，多个类也可以支持相同的接口。</p>\n<p>说白了，接口是抽象方法和静态常量定义的集合。接口是一种特殊的抽象类，这种抽象类中只包含抽象方法和静态常量。</p>\n<h2 id=\"关于抽象类和接口的区别\"><a href=\"#关于抽象类和接口的区别\" class=\"headerlink\" title=\"关于抽象类和接口的区别\"></a>关于抽象类和接口的区别</h2><p>抽象类可以给出一些成员的实现，接口却不包含成员的实现，抽象类的抽象成员可被子类部分实现，接口的成员需要实现类完全实现，一个类只能继承一个抽象类，但可以实现多个接口等。</p>\n<p>第一：类是对对象的抽象；抽象类是对类的抽象；接口是对行为的抽象。</p>\n<p>也就是说接口是对类的局部行为进行的抽象，而抽象类是对类整体的抽象。</p>\n<p>第二：如果行为跨越不同类的对象，可使用接口；对于一些相似的类对象，用继承抽象类。实现接口和继承抽象类并不冲突。</p>\n<p>第三：从设计角度讲，抽象类是从子类中发现公共的东西，泛化出父类，然后子类继承父类，而接口根本不知子类的存在，方法如何实现还不确定，预先定义。</p>\n<h2 id=\"关于接口继承S\"><a href=\"#关于接口继承S\" class=\"headerlink\" title=\"关于接口继承S\"></a>关于接口继承S</h2><p>php5中类是单继承，但是接口很特殊，一个接口可以继承自多个接口，一个接口继承其它接口时候，直接继承接口的静态常量属性和抽象方法。</p>\n<p>接口和接口之间继承要使用extends关键字。</p>\n<p>类实现接口必须实现其抽象方法，使用实现关键字implements。</p>\n","categories":["Web","Theory"]},{"title":"面向对象的基础四","url":"/object_oriented_programming_four/","content":"<p>c#允许把类和方法声明为abstract，即抽象类和抽象方法。</p>\n<p>第一：抽象类不能被实例化。</p>\n<p>第二：抽象方法是必须被子类重写的方法。抽象方法只有方法的声明，而没有方法的实现内容。</p>\n<p>第三：如果类中包含抽象方法，那么就必须定义为抽象类，不论是否还包含其他一般方法。</p>\n<p>抽象类拥有尽可能多的共同代码，拥有尽可能少的数据。</p>\n<p>抽象类通常代表一个抽象概念，它提供了一个继承的出发点，当设计一个新的抽象类时，一定使用来继承的。所以，在一个以继承关系形成的等级结构里面，树叶节点应当是具体类，而树枝节点均应当是抽象类。</p>\n<p>抽象类继承抽象类，目的是对抽象类的扩展，不能重写其中的抽象方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//定义一个抽象类</span><br><span class=\"line\"></span><br><span class=\"line\">abstract class User&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __toString()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return get_class($this);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//实例化这个类会出错</span><br><span class=\"line\"></span><br><span class=\"line\">//echo new user();</span><br><span class=\"line\"></span><br><span class=\"line\">class NormalUser extends User&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$a = new NormalUser();</span><br><span class=\"line\"></span><br><span class=\"line\">echo ‘这是类’;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $a;</span><br><span class=\"line\"></span><br><span class=\"line\">echo ‘的实例’;</span><br></pre></td></tr></table></figure>\n\n<p>单独设置一个抽象类是没有意义的，只有有了抽象方法，抽象类才有类血肉。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">abstract class User&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected ?$sal = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  //这里定义抽象方法。抽象方法没有方法体，而且方法结束使用;号。</span><br><span class=\"line\"></span><br><span class=\"line\">  abstract function getSal();</span><br><span class=\"line\"></span><br><span class=\"line\">  abstract function setSal($sal);</span><br><span class=\"line\"></span><br><span class=\"line\">  //这里定义它的__tostring方法</span><br><span class=\"line\"></span><br><span class=\"line\">  public function __toString()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return get_class($this);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//此时类继承这个抽象类必须要重写这个两个抽象方法。哪怕是&#123;&#125;空的方法体</span><br><span class=\"line\"></span><br><span class=\"line\">//注意：1.不能缺少参数。2.不能多余的参数。3.参数类型不能错误。</span><br><span class=\"line\"></span><br><span class=\"line\">class NormalUser extends ?User&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  function getSal()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function setSal($sal)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>抽象方法没有<code>&#123;&#125;</code>，而采用<code>;</code>结束。参数的数量和类型必须一致</p>\n<p>PHP5.0和5.1的类中允许静态抽象方法。在5.2以上，只有接口可以拥有静态抽象方法。</p>\n","categories":["Web","Theory"]},{"title":"数据结构（c语言版）-线性表","url":"/data_structure/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include&lt;stdlib.h&gt;  </span><br><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">// 初始化参数</span><br><span class=\"line\">#define MAX 20  </span><br><span class=\"line\">#define LISTINCREMENT 10 </span><br><span class=\"line\"></span><br><span class=\"line\">#define OVERFLOW -2</span><br><span class=\"line\"></span><br><span class=\"line\">#define TRUE 1</span><br><span class=\"line\">#define FALSE 0</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">    int *elem; // 存储空间的基地址</span><br><span class=\"line\">    int length; // 当前线性表的长度</span><br><span class=\"line\">    int listsize; // 当前分配的存储容量</span><br><span class=\"line\">&#125; SqList;</span><br><span class=\"line\"></span><br><span class=\"line\">// 初始化线性表</span><br><span class=\"line\">int initSqList(SqList *L)&#123;</span><br><span class=\"line\">    // 开辟空间，将地址赋予指针</span><br><span class=\"line\">    L-&gt;elem = (int *) malloc(MAX * sizeof(int));</span><br><span class=\"line\">    if(!L-&gt;elem) exit(OVERFLOW) ;</span><br><span class=\"line\">    L-&gt;listsize = MAX;</span><br><span class=\"line\">    printf(&quot;输入表的长度：&quot;);  </span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;L-&gt;length);  </span><br><span class=\"line\">    printf(&quot;输入%d个数：&quot;,L-&gt;length);  </span><br><span class=\"line\">    for(int i=0;i&lt;L-&gt;length;i++)&#123;</span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;L-&gt;elem[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 列表</span><br><span class=\"line\">int traverse(SqList *L)&#123;</span><br><span class=\"line\">    //遍历  </span><br><span class=\"line\">    printf(&quot;表中数据为：&quot;); </span><br><span class=\"line\">    for(int i=0; i &lt; L-&gt;length;i++)&#123;</span><br><span class=\"line\">        printf(&quot;%3d&quot;,L-&gt;elem[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;\\n&quot;);  </span><br><span class=\"line\">    return TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 插入</span><br><span class=\"line\">int insert(SqList *L)&#123;</span><br><span class=\"line\">    //插入元素及其要插入的位置 </span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    int e;  </span><br><span class=\"line\">    printf(&quot;输入要插入的位置及元素\\n&quot;);</span><br><span class=\"line\">    scanf(&quot;%d%d&quot;,&amp;i,&amp;e);</span><br><span class=\"line\">    printf(&quot;在顺序线性表中第%d个位置之前插入新的元素%d。\\n&quot;,i,e);</span><br><span class=\"line\">    if(i &gt; L-&gt;length+1 || i&lt;1) return FALSE;</span><br><span class=\"line\">    int *p,*q; </span><br><span class=\"line\">    q = &amp;(L-&gt;elem[i-1]);  </span><br><span class=\"line\">    p = &amp;(L-&gt;elem[L-&gt;length-1]);</span><br><span class=\"line\">    for(p ; p &gt;= q; --p) &#123;</span><br><span class=\"line\">        *(p+1) = *p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *q = e;</span><br><span class=\"line\">    ++L-&gt;length;  </span><br><span class=\"line\">    return TRUE;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 删除</span><br><span class=\"line\">int delete(SqList *L)&#123;</span><br><span class=\"line\">     // 删除元素位置或根据元素查询位置</span><br><span class=\"line\">    int i,e;</span><br><span class=\"line\">    printf(&quot;输入要删除第几个元素&quot;);  </span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;i);  </span><br><span class=\"line\">    if((i &lt; 1) || (i &gt; L-&gt;length)) return FALSE;</span><br><span class=\"line\">    int *p,*q;  </span><br><span class=\"line\">    p = &amp;(L-&gt;elem[i-1]);  </span><br><span class=\"line\">    e = *p;</span><br><span class=\"line\">    q = L-&gt;elem + L-&gt;length-1;  </span><br><span class=\"line\">    for(++p; p&lt;=q; ++p) &#123;</span><br><span class=\"line\">        // 被删除元素之后的元素左移</span><br><span class=\"line\">        *(p-1) = *p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    --L-&gt;length;</span><br><span class=\"line\">    printf(&quot;元素被删除&quot;);</span><br><span class=\"line\">    return TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 查找</span><br><span class=\"line\">int find(SqList *L)&#123;</span><br><span class=\"line\">    printf(&quot;输入查找的元素：&quot;); </span><br><span class=\"line\">    int e; </span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;e);</span><br><span class=\"line\">    for(int i = 0; i &lt; L-&gt;length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(L-&gt;elem[i] == e)&#123;</span><br><span class=\"line\">            printf(&quot;查找成功，查找元素为%d \\n&quot;,L-&gt;elem[i]);  </span><br><span class=\"line\">            return TRUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;查找失败 \\n&quot;);  </span><br><span class=\"line\">    return FALSE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;  </span><br><span class=\"line\">    SqList L;</span><br><span class=\"line\">    initSqList(&amp;L);</span><br><span class=\"line\">    traverse(&amp;L);</span><br><span class=\"line\">    find(&amp;L);</span><br><span class=\"line\">    insert(&amp;L);</span><br><span class=\"line\">    traverse(&amp;L);</span><br><span class=\"line\">    delete(&amp;L);</span><br><span class=\"line\">    traverse(&amp;L);</span><br><span class=\"line\">    return 0;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>注意点：<br>1.SqList &amp;L 为引用，SqList *L 为指针，在c语言中其实是没有引用这个概念的，只有指针概念，所以本实例使用指针操作，如：int initSqList(SqList *L)。<br>2.在C语言中，箭头(-&gt;)是指针操作符，点(.)是结构操作符。如果L是一个结构实例的指针，要用-&gt;访问结构里面的变量，而不能用点；如果L是一个结构的实例，而非指针，则只能用点而不能用-&gt;。</p>\n","categories":["Web","Theory"],"tags":["c","data_structure"]},{"title":"C-宏的一些常用使用","url":"/c_macro/","content":"<p>常用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">//定义类型的别名</span><br><span class=\"line\">typedef unsigned char byte;</span><br><span class=\"line\">typedef unsigned short word;</span><br><span class=\"line\"></span><br><span class=\"line\">//获得一个变量的地址(byte或word宽度)</span><br><span class=\"line\">#define B_PTR(var)  (byte*)((void *)(&amp;var))</span><br><span class=\"line\">#define W_PTR(var)  (word*)((void *)(&amp;var))</span><br><span class=\"line\"></span><br><span class=\"line\">//得到指定地址上的一个字节或字</span><br><span class=\"line\">#define MEN_B(arr) *((byte*)arr)</span><br><span class=\"line\">#define MEN_W(arr) *((word*)arr)</span><br><span class=\"line\"></span><br><span class=\"line\">//得到一个字的高位和低位字节</span><br><span class=\"line\">#define  WORD_LO(xxx)  ((byte) ((word)(xxx) &amp; 255)) // == &amp;0xff</span><br><span class=\"line\">#define  WORD_HI(xxx)  ((byte) ((word)(xxx) &gt;&gt; 8))  // == /256</span><br><span class=\"line\"></span><br><span class=\"line\">//获得结构体成员在结构体中偏移量</span><br><span class=\"line\">#define STRUCT_MEN_POS(type,member) (unsigned int)&amp;((type *)0)-&gt;member</span><br><span class=\"line\">//得到一个结构体中成员变量所占用的字节数</span><br><span class=\"line\">#define STRUCT_MEN_SIZE(type,member) sizeof( ((type*)0)-&gt;member )</span><br><span class=\"line\"></span><br><span class=\"line\">//返回数组元素的个数</span><br><span class=\"line\">#define ARR_SIZE(arr) sizeof(arr)/sizeof(arr[0])</span><br><span class=\"line\"></span><br><span class=\"line\">//使用#把宏参数变为一个字符串,用##把两个宏参数贴合在一起</span><br><span class=\"line\">#define STR(s) #s</span><br><span class=\"line\">#define STR2(a,b) a##b</span><br><span class=\"line\"></span><br><span class=\"line\">struct student</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char name[10];</span><br><span class=\"line\">    int age;</span><br><span class=\"line\">    int id;</span><br><span class=\"line\">&#125; my_student;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a = 23;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获得一个变量的地址: 0X28FEA8</span><br><span class=\"line\">    cout &lt;&lt; W_PTR(a) &lt;&lt;endl;</span><br><span class=\"line\">    //得到指定地址上的一个字: 23</span><br><span class=\"line\">    cout &lt;&lt; MEN_W(W_PTR(a)) &lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获得结构体成员在结构体中偏移量: 12 (要求为4的整数倍)</span><br><span class=\"line\">    cout &lt;&lt; STRUCT_MEN_POS(struct student,age) &lt;&lt; endl;</span><br><span class=\"line\">    //得到一个结构体中成员变量所占用的字节数: 10</span><br><span class=\"line\">    cout &lt;&lt; STRUCT_MEN_SIZE(struct student,name) &lt;&lt; endl; //10</span><br><span class=\"line\"></span><br><span class=\"line\">    //使用#把宏参数变为一个字符串: abc</span><br><span class=\"line\">    cout &lt;&lt; STR(abc) &lt;&lt; endl;</span><br><span class=\"line\">    //用##把两个宏参数贴合在一起: 234</span><br><span class=\"line\">    cout &lt;&lt; STR2(2,34) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Web","Back","C"],"tags":["c"]},{"title":"GoLang安装方式","url":"/go_install/","content":"<p>学习一下Go语言。学习之前，首先要搭建一下Go语言的开发环境，这篇文章主要介绍一下搭建环境的过程。</p>\n<p>一、安装Go语言依赖包</p>\n<p>Go语言部分功能是用C语言开发的，所以安装Go之前需要安装gcc，make等依赖，ubuntu下的安装命令如下：</p>\n<p>sudo apt-get install bison ed gawk gcc libc6-dev make<br>二、获取Go源码</p>\n<p>成功安装了Go语言的依赖之后，就需要下载Go语言的源码包，方法比较多：可以通过hg拷贝源码，也可以到官网上直接下载对应的源码包</p>\n<p>1、使用hg拷贝</p>\n<p>这种方式需要先安装Mercurial，Mercurial是类似git的版本管理系统，简称hg(水银)，安装命令如下：</p>\n<p>sudo apt-get install python-setuptools<br>sudo apt-get install python-dev<br>sudo apt-get install build-essential<br>sudo apt-get install mercurial<br>安装完成之后，通过下面的命令拷贝代码：</p>\n<p>cd ~&#x2F;<br>hg clone -r release <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nby5nb29nbGVjb2RlLmNvbS9oZy8=\">https://go.googlecode.com/hg/<i class=\"fa fa-external-link-alt\"></i></span> go<br>2、直接下载</p>\n<p>Go语言官方下载地址：官方</p>\n<p>由于被墙的原因，官方下载地址很难正常打开，所以我将自己下载的Ubuntu 32位的源码包放在了百度网盘上，安装环境和我一样的同学可以直接下载这个：百度网盘</p>\n<p>下载之后将压缩包解压到HOME目录下。</p>\n<p>三、配置Go环境变量</p>\n<p>在编译安装之前，还需要设置Go语言的环境变量，在Ubuntu下的配置方法如下：</p>\n<p>1、打开HOME目录下的.bashrc文件</p>\n<p>vim ~&#x2F;.bashrc<br>2、在文件的最后添加以下内容</p>\n<p>export GOROOT&#x3D;$HOME&#x2F;go<br>export GOBIN&#x3D;$GOROOT&#x2F;bin<br>export GOARCH&#x3D;386<br>export GOOS&#x3D;linux<br>export PATH&#x3D;$GOROOT&#x2F;bin:$PATH<br>export GOPATH&#x3D;$HOME&#x2F;workspace&#x2F;Go<br>3、保存设置并运行命令使其生效</p>\n<p>source ~&#x2F;.bashrc<br>四、编译Go源码包</p>\n<p>以上步骤完成之后就可以执行编译脚本了，编译Go语言的命令如下：</p>\n<p>cd $GOROOT&#x2F;src<br>.&#x2F;all.bash<br>编译会执行大概10分钟的时间，当你看到以下信息的时候，就表示安装成功了：</p>\n<p>ALL TESTS PASSED</p>\n<hr>\n<p>Installed Go for linux&#x2F;386 in &#x2F;home&#x2F;wuxianglong&#x2F;go.<br>Installed commands in &#x2F;home&#x2F;wuxianglong&#x2F;go&#x2F;bin.<br>五、Hello World!</p>\n<p>在学习一门新的语言时，我们写的第一行代码一般是Hello World，这里也不例外。在执行完上述的步骤之后，你可以在命令行输入 go 并回车，如果出现以下内容，则说明你已经安装成功了：</p>\n<p>Go is a tool for managing Go source code.</p>\n<p>Usage:</p>\n<pre><code>go command [arguments]\n</code></pre>\n<p>The commands are:</p>\n<pre><code>build       compile packages and dependencies\nclean       remove object files\nenv         print Go environment information\nfix         run go tool fix on packages\nfmt         run gofmt on package sources\nget         download and install packages and dependencies\ninstall     compile and install packages and dependencies\nlist        list packages\nrun         compile and run Go program\ntest        test packages\ntool        run specified go tool\nversion     print Go version\nvet         run go tool vet on packages\n</code></pre>\n<p>Use “go help [command]” for more information about a command.</p>\n<p>Additional help topics:</p>\n<pre><code>c           calling between Go and C\nfiletype    file types\ngopath      GOPATH environment variable\nimportpath  import path syntax\npackages    description of package lists\ntestflag    description of testing flags\ntestfunc    description of testing functions\n</code></pre>\n<p>Use “go help [topic]” for more information about that topic.<br>之后，可以写一个Hello World程序，代码如下：</p>\n<p>package main</p>\n<p>import “fmt”</p>\n<p>func main() {<br>    fmt.Printf(“Hello World!\\n”)<br>}<br>将上面的代码保存在文件hello.go中，然后在命令行执行：</p>\n<p>go run hello.go</p>\n<h1 id=\"输出结果：Hello-World\"><a href=\"#输出结果：Hello-World\" class=\"headerlink\" title=\"输出结果：Hello World!\"></a>输出结果：Hello World!</h1><p>OK！Go语言的开发环境已经安装成功了！</p>\n<p>六、其他安装方式</p>\n<p>以上介绍的Go语言安装方法是通过编译源码安装的，其实在Ubuntu下也可以通过apt-get方式安装，安装命令如下：</p>\n<p>sudo apt-get install golang<br>如果上面的命令安装出错的话，可以尝试一下下面的命令：</p>\n<p>sudo add-apt-repository ppa:gophers&#x2F;go<br>sudo apt-get update<br>sudo apt-get install golang-stable</p>\n","categories":["Web","Back","go"],"tags":["go"]},{"title":"Go的开源CMS电商框架QOR","url":"/go_cms_qor/","content":"<p>Go语言，兼具语法简单、高并发、高性能的特点，在网络编程领域受到欢迎。 （Go语言的介绍很多，就不再赘述，还不了解Go语言的的朋友可以访问官方网站<span class=\"exturl\" data-url=\"aHR0cDovL2dvbGFuZy5vcmcv\">golang.org<i class=\"fa fa-external-link-alt\"></i></span> 了解详细信息 , 记得先<strong>翻墙</strong>哦） 现在已经有许多大家熟知的开源项目使用Go语言开发，例如</p>\n<ul>\n<li>Docker，不用多说。</li>\n<li>Lantern，一个翻墙软件</li>\n<li>Beego和Revel，Go语言写的Web框架</li>\n<li>InfluxDB，一个开源分布式的时序、事件和指标数据库</li>\n<li>Gogs，搭建自己的Git服务 （以上项目都可以在<span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20v\">Github<i class=\"fa fa-external-link-alt\"></i></span>上找到）</li>\n</ul>\n<p>作为一个长年参与项目工作的程序员，在使用每一种语言工作的过程中都会寻找一些能让重复工作变简单的东西（也可以说<strong>就是懒</strong>），对于Go语言也不例外。 不像PHP、Python可以找到很多CMS项目可以快速的搭建网站，Go语言毕竟还太年轻，虽然有几个很好用的Web框架，但开源的CMS还很少，QOR就是其中之一。 QOR，官方（<span class=\"exturl\" data-url=\"aHR0cDovL2dldHFvci5jb20v\">getqor.com<i class=\"fa fa-external-link-alt\"></i></span>）的定义是:QOR是首个使用Go语言开发的电商系统、CMS的SDK。它是一组用Go编写的库，用于抽象业务应用程序，内容管理系统（CMS）和电子商务系统（EC）所需的通用功能。 根据本人的使用体验，QOR可以看作是PHP中的ThinkPHP，Python中的Django。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190422150915.png\"></p>\n<h3 id=\"QOR能做什么？\"><a href=\"#QOR能做什么？\" class=\"headerlink\" title=\"QOR能做什么？\"></a>QOR能做什么？</h3><p>首先，QOR还不算是CMS，它比起Web框架来说进行了更进一步的封装，将Web开发中常用的部分封装成用起来更简单的库。用它来创建一个基于内容管理的Web应用更加快速简单。</p>\n<h4 id=\"QOR目前可用的有9个部分（另外有3个部分官方标记为Coming-Soon，就不做介绍了）：\"><a href=\"#QOR目前可用的有9个部分（另外有3个部分官方标记为Coming-Soon，就不做介绍了）：\" class=\"headerlink\" title=\"QOR目前可用的有9个部分（另外有3个部分官方标记为Coming Soon，就不做介绍了）：\"></a>QOR目前可用的有9个部分（另外有3个部分官方标记为Coming Soon，就不做介绍了）：</h4><p><strong>Admin</strong>： 快速为您的应用程序生成一个漂亮、可跨平台运行、可配置的管理后台。用过Django的朋友很容易理解，它会生成一个管理ORM的Web界面，搭配Role和Transition可以将它自定义成灵活的管理后台。默认主题是基于谷歌Materials Design的设计理念；可同时兼容PC和移动设备。<strong>通常情况下，QOR的其他所有部分都是围绕Admin工作的。</strong> </p>\n<p><strong>Publish</strong> 分别设置预演和正式服务器，使用Publish，内容管理员就能在正式发布之前预览所更新的内容。支持在预演环境下预览，支持管理员对需要发布到正式服务器的类目进行选择。Publish可以配置成指定哪些数据类型需要先经预演服务器，再发布到正式服务器上，哪些数据允许预览或直接发布。结合Role和Transition，系统就能灵活完成内容修改和发布工作。 </p>\n<p><strong>Transition</strong> 用Transition来体现业务流程和执行业务规则。定义状态、定义事件、定义状态变化的验证条件。 </p>\n<p><strong>Media Library</strong> 支持上传文件至云端或其他位置；支持图像裁剪和调整尺寸。Media Library支持上传和动态调整图片尺寸，且有选项支持将其保存为多种尺寸和分辨率，以适配多种平台。Media Library可以配置成文件保存在文件系统或云存储系统，结合Worker，就能高效管理批量图像的导入和处理。 </p>\n<p><strong>Worker</strong> 运行批处理进程，进行批量数据处理或其他耗时的计算。 Worker本质上是长进程的调度程序。Worker提供了一个界面，用于查看一个长进程的进展，中断不完整的长进程，以及查看所有长进程的运行日志。 </p>\n<p><strong>Exchange</strong> 应用程序支持数据以CSV或者Excel文件导入和导出，是一个数据文件的出口和入口。目前支持的导入和导出文件格式包括CSV和Excel 电子表格。 </p>\n<p><strong>Internationalization(i18n)</strong> 多语言应用程序的翻译工具。 </p>\n<p><strong>Localization(l10n)</strong> 在多语言环境中智能管理你的业务对象。Localization用于管理多语言环境下的数据对象。请注意，这和简单的文字翻译（Internationalization包含了这个功能）是不一样的。 </p>\n<p><strong>Roles</strong> 给不同的人分配不同角色，不同角色对应不同的权限，灵活实现细粒度的权限控制。Roles 提供了一个健壮、可配置的架构，从而保证角色和权限的粒度控制。Roles还能对特定数据字段进行访问控制。使用Roles就能使某些功能为特定的用户&#x2F;用户类型生效；结合Transition，就能让您的应用程序完美体现组织的工作流程。</p>\n<h3 id=\"QOR应用程序结构\"><a href=\"#QOR应用程序结构\" class=\"headerlink\" title=\"QOR应用程序结构\"></a>QOR应用程序结构</h3><p><img data-src=\"http://upload-images.jianshu.io/upload_images/2855975-a791d2bc2d6f8fd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\"></p>\n<p>QOR的核心是上图中的Engine，它负责管理数据访问和数据处理的接口。 QOR通过插件方式扩展Engine，例如使用worker+exchange实现数据导入&#x2F;导出，或使用media_library实现文件上传。 对于数据库的管理，QOR默认使用GORM，当然也可以用其他ORM库替换默认的GORM。 QOR将前端完全交给开发人员，没有对前端进行任何管理，让开发人员可以自由灵活的开发前端部分。</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>QOR虽然目前Github上Star不到2000，Fork也只是接近300，但QOR的模式是挺不错的。</p>\n","categories":["Web","Back","go"],"tags":["go"]},{"title":"使用 Gogs 搭建自己的 Git 服务器","url":"/git_gogs/","content":"<p>作为个人私有云的一环（虽然是搭建在公共服务器上），一直都很想搭建一个类似 GitHub 的服务，但 GitLab 太复杂了（说句不好听的，GL 就是 Git server 中的 WordPress），别的又相当简陋，于是一直以来都只有围观的份。最近发现上半年关注的 <span class=\"exturl\" data-url=\"aHR0cDovL2dvZ3MuaW8v\">Gogs<i class=\"fa fa-external-link-alt\"></i></span> 经过几个版本迭代，已经达到基本可用的状态了。于是搭建了一个自己的服务，用来镜像自己分散在各个服务商处的代码，以及开新坑的时候托管用。这里把安装的过程和一些需要注意的地方记录一下。 安装过程分为这些步骤：</p>\n<ul>\n<li>新建用户；</li>\n<li>下载源码编译 &#x2F; 下载预编译二进制打包；</li>\n<li>运行安装；</li>\n<li>配置调整；</li>\n<li>配置 nginx 反向代理；</li>\n<li>保持服务运行；</li>\n</ul>\n<p>注意，这里默认你已经安装好了 MySQL 服务器（或 MariaDB）和 nginx，如果没有，请自行查找如何安装和配置这些依赖。当然你也可以使用 SQLite 数据库。</p>\n<h2 id=\"新建用户\"><a href=\"#新建用户\" class=\"headerlink\" title=\"新建用户\"></a>新建用户</h2><p>Gogs 默认以 git 用户运行（你应该也不会想一个能修改 ssh 配置的程序以 root 用户运行吧？）。 运行 <code>sudo adduser git</code> 新建好 git 用户。 <code>su git</code> 以 git 用户登录，到 git 用户的主目录中新建好 <code>.ssh</code> 文件夹。</p>\n<h2 id=\"下载解包\"><a href=\"#下载解包\" class=\"headerlink\" title=\"下载解包\"></a>下载解包</h2><p>我使用的是预编译的二进制包。需要从源码编译的话，请参考一般 Go 语言项目的编译。下载后解包到你喜欢的地方，例如 <code>/usr/share/gogs/</code> 或者 <code>/home/git/gogs/</code>。文件夹的内容如下。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ls /home/git/gogs/</span><br><span class=\"line\">custom  data  gogs  LICENSE  log  public  README.md  README_ZH.md  scripts  templates</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行安装\"><a href=\"#运行安装\" class=\"headerlink\" title=\"运行安装\"></a>运行安装</h2><p>首先建立好数据库。在 Gogs 目录的 <code>scripts/mysql.sql</code> 文件是数据库初始化文件。执行 <code>mysql -u root -p &lt; scripts/mysql.sql</code> （需要输入密码）即可初始化好数据库。 然后登录 MySQL 创建一个新用户 gogs，并将数据库 <code>gogs</code> 的所有权限都赋予该用户。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -p</span><br><span class=\"line\">&gt; # （输入密码）</span><br><span class=\"line\">&gt; create user &#x27;gogs&#x27;@&#x27;localhost&#x27; identified by &#x27;密码&#x27;;</span><br><span class=\"line\">&gt; grant all privileges on gogs.* to &#x27;gogs&#x27;@&#x27;localhost&#x27;;</span><br><span class=\"line\">&gt; flush privileges;</span><br><span class=\"line\">&gt; exit;</span><br></pre></td></tr></table></figure>\n\n<p>运行 <code>gogs web</code> 把 Gogs 运行起来，然后访问 <code>http://服务器IP:3000/</code> 来进行安装，填写好表单之后提交就可以了。 需要注意的是，<code>0.6.9.0903 Beta</code> 版本有个 bug，允许在关闭注册的情况下不添加管理员，这样安装完成之后将没有任何用户可以登录。所以请务必在安装界面指定一个管理员帐号。</p>\n<h2 id=\"配置调整\"><a href=\"#配置调整\" class=\"headerlink\" title=\"配置调整\"></a>配置调整</h2><p>配置文件位于 Gogs 目录的 <code>custom/conf/app.ini</code>，是 INI 格式的文本文件。详细的配置解释和默认值请参考<span class=\"exturl\" data-url=\"aHR0cDovL2dvZ3MuaW8vZG9jcy9hZHZhbmNlZC9jb25maWd1cmF0aW9uX2NoZWF0X3NoZWV0Lmh0bWw=\">官方文档<i class=\"fa fa-external-link-alt\"></i></span>，其中关键的配置大概是下面这些。</p>\n<ul>\n<li><code>RUN_USER</code> 默认是 <code>git</code>，指定 Gogs 以哪个用户运行</li>\n<li><code>ROOT</code> 所有仓库的存储根路径</li>\n<li><code>PROTOCOL</code> 如果你使用 nginx 反代的话请使用 <code>http</code>，如果直接裸跑对外服务的话随意</li>\n<li><code>DOMAIN</code> 域名。会影响 SSH clone 地址</li>\n<li><code>ROOT_URL</code> 完整的根路径，会影响访问时页面上链接的指向，以及 HTTP clone 的地址</li>\n<li><code>HTTP_ADDR</code> 监听地址，使用 nginx 的话建议 <code>127.0.0.1</code>，否则 <code>0.0.0.0</code> 也可以</li>\n<li><code>HTTP_PORT</code> 监听端口，默认 <code>3000</code></li>\n<li><code>INSTALL_LOCK</code> 锁定安装页面</li>\n<li>Mailer 相关的选项</li>\n</ul>\n<p>其中，Mailer 可以使用 Mailgun 的免费邮件发送服务，将 Mailgun 的 SMTP 配置填入到配置中就好。</p>\n<h2 id=\"nginx-反代\"><a href=\"#nginx-反代\" class=\"headerlink\" title=\"nginx 反代\"></a>nginx 反代</h2><p>在 <code>/etc/nginx/sites-available</code> 中新建一个文件，把以下内容写入文件中。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    server_name 域名或IP;</span><br><span class=\"line\">    listen 80; # 或者 443，如果你使用 HTTPS 的话</span><br><span class=\"line\">    # ssl on; 是否启用加密连接</span><br><span class=\"line\">    # 如果你使用 HTTPS，还需要填写 ssl_certificate 和 ssl_certificate_key</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123; # 如果你希望通过子路径访问，此处修改为子路径，注意以 / 开头并以 / 结束</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:3000/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后进入 <code>/etc/nginx/sites-enabled</code> 中，执行 <code>ln -s ../sites-available/配置文件名</code> 启用这个配置文件。 最后重启 nginx 就好了，Ubuntu 下是 <code>sudo service nginx restart</code>。</p>\n<h2 id=\"服务脚本\"><a href=\"#服务脚本\" class=\"headerlink\" title=\"服务脚本\"></a>服务脚本</h2><p>此处的服务脚本是针对 Debian 系的 init 脚本。</p>\n<blockquote>\n<p>本节内容于 2015年12月13日 修改：修正随时间发生变化的事实。</p>\n</blockquote>\n<p>在我写这篇文章的时候，最新版本的服务脚本似乎还<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvZ2l0cy9nb2dzL2lzc3Vlcy8xNjcx\">有点问题<i class=\"fa fa-external-link-alt\"></i></span>，可以使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvZ2l0cy9nb2dzL2Jsb2IvOThjNzE5YzM0MmQ3OTZlNGU2NTEyNzBjYTRhNDM1MjNkZjcyMTI1MS9zY3JpcHRzL2luaXQvZGViaWFuL2dvZ3M=\">这个版本<i class=\"fa fa-external-link-alt\"></i></span>来代替。最新版本的服务脚本已经可以正常使用，请在二进制下载的 <code>scripts</code> 文件夹中找到对应你使用发行版的版本。将脚本放在 <code>/etc/init.d</code> 中，文件名为 <code>gogs</code>，给予执行权限并修改相关参数，以后就可以使用 <code>sudo service gogs start</code> 来启动服务，或者其他子命令来方便地管理。</p>\n<blockquote>\n<p>本节内容于 2017 年 1 月 7 日 修改：增加 systemd 配置文件说明。</p>\n</blockquote>\n<p>我已经不再使用 init 脚本。随 Gogs 分发的 scripts 目录中带有一个开箱即用的 systemd 配置文件。将配置文件内容填充好后复制到 <code>/etc/systemd/system</code> 目录中就可以使用。尤其注意 <code>After=mysql.service</code>（对 MariaDB）或 <code>After=mysqld.service</code>（MySQL）。</p>\n","categories":["Web","Back","go"],"tags":["linux","git","go"]},{"title":"Linux 使用GVM安装并管理Go版本","url":"/linux_go_gvm_install/","content":"<h2 id=\"安装GVM\"><a href=\"#安装GVM\" class=\"headerlink\" title=\"安装GVM\"></a>安装GVM</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ zsh &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用GVM\"><a href=\"#使用GVM\" class=\"headerlink\" title=\"使用GVM\"></a>使用GVM</h2><h3 id=\"查看当前机器的Go环境\"><a href=\"#查看当前机器的Go环境\" class=\"headerlink\" title=\"查看当前机器的Go环境\"></a>查看当前机器的Go环境</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gvm list </span><br><span class=\"line\">gvm gos (installed) </span><br><span class=\"line\">system</span><br></pre></td></tr></table></figure>\n\n<p>这里只显示了一个system，这是系统原来安装的一个Go版本。</p>\n<h3 id=\"查看所有可安装的Go版本\"><a href=\"#查看所有可安装的Go版本\" class=\"headerlink\" title=\"查看所有可安装的Go版本\"></a>查看所有可安装的Go版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gvm listall </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Go\"><a href=\"#安装-Go\" class=\"headerlink\" title=\"安装 Go\"></a>安装 Go</h3><p>这里安装两个版本的Go，后面切换用。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gvm install go1.5 -B</span><br><span class=\"line\">$ gvm install go1.6 -B</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，查看一下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gvm list</span><br><span class=\"line\"></span><br><span class=\"line\">gvm gos (installed)</span><br><span class=\"line\"></span><br><span class=\"line\">   go1.5</span><br><span class=\"line\">   go1.6</span><br><span class=\"line\">   system</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换Go版本\"><a href=\"#切换Go版本\" class=\"headerlink\" title=\"切换Go版本\"></a>切换Go版本</h3><ul>\n<li>使用Go1.5</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gvm use go1.5</span><br><span class=\"line\"></span><br><span class=\"line\">$ go version</span><br><span class=\"line\">go version go1.5 linux/amd64</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用Go1.6</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gvm use go1.6</span><br><span class=\"line\"></span><br><span class=\"line\">$ go version</span><br><span class=\"line\">go version go1.6 linux/amd64</span><br></pre></td></tr></table></figure>","categories":["Web","Back","go"],"tags":["linux","go"]},{"title":"创建第一个Go语言程序Hello,Go!","url":"/go_first_hello_go/","content":"<p>建立一个用于编写Go程序的工作目录<code>go-examples</code>，其绝对路径为<code>/home/go-examples</code>.开始编写我们的第一个Go程序。</p>\n<h3 id=\"一、在go-examples下创建一个文件hello-go\"><a href=\"#一、在go-examples下创建一个文件hello-go\" class=\"headerlink\" title=\"一、在go-examples下创建一个文件hello.go\"></a>一、在<code>go-examples</code>下创建一个文件<code>hello.go</code></h3><p>复制代码代码如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//hello.go</span><br><span class=\"line\">package mainimport “fmt”//实现格式化的I/O</span><br><span class=\"line\">/*Printf someting*/</span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\">  fmt.Printf(“Hello,GO!\\n”)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来分析下这个程序：</p>\n<ul>\n<li>1、程序中的第2行这个是必须的。所有的Go文件以<code>package &lt;something&gt;</code>开头，对于独立运行的执行文件必须是<code>package main</code>；</li>\n<li>2、第4行说需要将”fmt”包加入main。不是main的其他包都被称为库，其他许多编程语言有着类似的概念。</li>\n<li>3、第1行和第4行中的<code>//</code>和<code>/*—*/</code>都是注释</li>\n<li>4、<code>package main</code> 必须首先出现，紧跟着是<code>import</code>。在Go中，<code>package</code> 总是首先出现，然后是<code>import</code>，然后是其他所有内容。当Go 程序在执行的时候，首先调用的函数是<code>main.main()</code>，这是从C 中继承而来。这里定义了这个函数；</li>\n<li>5、第8行调用了来自于fmt包的函数打印字符串到屏幕</li>\n</ul>\n<h3 id=\"二、编译和运行代码\"><a href=\"#二、编译和运行代码\" class=\"headerlink\" title=\"二、编译和运行代码\"></a>二、编译和运行代码</h3><p>编译该源文件并执行生成的可执行文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost go-examples]# go build hello.go</span><br><span class=\"line\">[root@localhost go-examples]# ls</span><br><span class=\"line\">hello hello.go</span><br><span class=\"line\">[root@localhost go-examples]# ./hello</span><br><span class=\"line\">Hello,GO!</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>go build</code>加上要编译的Go源文件名，我们即可得到一个可执行文件，默认情况下这个文件的名字为源文件名字去掉<code>.go</code>后缀。当然我们也可以通过<code>-o</code>选项来指定其他名字：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost go-examples]# go build -o firstgo hello.go</span><br><span class=\"line\">[root@localhost go-examples]# ls</span><br><span class=\"line\">firstgo hello.go</span><br></pre></td></tr></table></figure>\n<p>如果我们在<code>go-examples</code>目录下直接执行<code>go build</code>命令，后面不带文件名，我们将得到一个与目录名同名的可执行文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost go-examples]# go build</span><br><span class=\"line\">[root@localhost go-examples]# ls</span><br><span class=\"line\">go-examples hello.go</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、程序入口点-entry-point-和包-package\"><a href=\"#三、程序入口点-entry-point-和包-package\" class=\"headerlink\" title=\"三、程序入口点(entry point)和包(package)\"></a>三、程序入口点(entry point)和包(package)</h3><p>Go保持了与C家族语言一致的风格：即目标为可执行程序的Go源码中务必要有一个名为main的函数，该函数即为可执行程序的入口点。除此之外 Go还增加了一个约束：作为入口点的main函数必须在名为main的package中。正如上面<code>hellogo.go</code>源文件中的那样，在源码第 一行就声明了该文件所归属的package为main。</p>\n<p>Go去除了头文件的概念，而借鉴了很多主流语言都采用的package的源码组织方式。<code>package</code>是个逻辑概念，与文件没有一一对应的关系。 如果多个源文件都在开头声明自己属于某个名为foo的包，那这些源文件中的代码在逻辑上都归属于包foo(这些文件最好在同一个目录下，至少目前 的Go版本还无法支持不同目录下的源文件归属于同一个包)。</p>\n<p>我们看到<code>hellogo.go</code>中<code>import</code>一个名为fmt的包，并利用该包内的<code>Printf</code>函数输出”Hello, Go!”。直觉告诉我们fmt包似乎是一个标准库中的包。没错，<code>fmt</code>包提供了格式化文本输出以及读取格式化输入的相关函数，与C中的<code>printf</code>或 <code>scanf</code>等类似。我们通过<code>import</code>语句将fmt包导入我们的源文件后就可以使用该fmt包导出(export)的功能函数了(比如 Printf)。</p>\n<p>在C中，我们通过<code>static</code>来标识局部函数还是全局函数。而在Go中，包中的函数是否可以被外部调用，要看该函数名的首母是否为大写。这是一种 Go语言固化的约定：首母大写的函数被认为是导出的函数，可以被包之外的代码调用；而小写字母开头的函数则仅能在包内使用。在例子中你也看到了 <code>fmt</code>包的<code>Printf</code>函数其首母就是大写的。</p>\n<h3 id=\"四、GOPATH\"><a href=\"#四、GOPATH\" class=\"headerlink\" title=\"四、GOPATH\"></a>四、GOPATH</h3><p>把上面的<code>hellogo.go</code>稍作改造，拆分成两个文件：<code>main.go</code>和<code>hello.go</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//hello.go</span><br><span class=\"line\">package hello</span><br><span class=\"line\">import “fmt”</span><br><span class=\"line\"></span><br><span class=\"line\">func Hello(who string)&#123;</span><br><span class=\"line\">  fmt.Printf(“Hello,%s!\\n”, who)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//main.go</span><br><span class=\"line\">package main</span><br><span class=\"line\">import “hello”</span><br><span class=\"line\"></span><br><span class=\"line\">func main()&#123;</span><br><span class=\"line\">  hello.Hello(“GO”)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用<code>go build</code>编译<code>main.go</code> 结果如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost go-examples]# go build main.go</span><br><span class=\"line\">main.go:4:8: import “hello”: cannot find package</span><br></pre></td></tr></table></figure>\n<p>编译器居然提示无法找到<code>hello</code>这个<code>package</code>，而<code>hello.go</code>中明明定义了<code>package hello</code>了。这是怎么回事呢？原来<code>go compiler</code>搜索<code>package</code>的方式与我们常规理解的有不同，Go在这方面也有一套约定，这里面涉及到一个重要的环境变量：<code>GOPATH</code>。我们可以使用go help gopath来查看一下有关gopath的manual。</p>\n<p><code>Go compiler</code>的<code>package</code>搜索顺序是这样的，以搜索<code>hello</code>这个<code>package</code>为例：</p>\n<ul>\n<li>首先，<code>Go compiler</code>会在GO安装目录(<code>GOROOT</code>，这里是<code>/home/go/</code>)下查找是否有<code>src/pkg/hello</code>相关包源码；如果没有则继续；</li>\n<li>如果<code>export GOPATH=PATH1:PAHT2</code>，则<code>Go compiler</code>会依次查找是否存在<code>PATH1/src/hello</code>、<code>PATH2/src/hello</code>；配置在GOPATH中的<code>PATH1</code>和<code>PATH2</code>被称作<code>workplace</code>；</li>\n<li>如果在上述几个位置均无法找到<code>hello</code>这个<code>package</code>，则提示出错。</li>\n</ul>\n<p>在本例子中，我们尚未设置过<code>GOPATH</code>环境变量，也没有建立类似<code>PATH1/src/hello</code>这样的路径，因此<code>Go compiler</code>显然无法找到<code>hello</code>这个<code>package</code>了。我们来设置一下GOPATH变量并建立相关目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost go-examples]# export GOPATH=/home/go-examples/</span><br><span class=\"line\">[root@localhost go-examples]# mkdir src/hello -p</span><br><span class=\"line\">[root@localhost go-examples]# mv hello.go src/hello/</span><br><span class=\"line\">[root@localhost go-examples]# go build main.go</span><br><span class=\"line\">[root@localhost go-examples]# ls</span><br><span class=\"line\">main main.go src</span><br><span class=\"line\">[root@localhost go-examples]# ./main</span><br><span class=\"line\">Hello,GO!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Go-install\"><a href=\"#Go-install\" class=\"headerlink\" title=\"Go install\"></a>Go install</h3><p>将<code>main.go</code>移到<code>src/main</code>中，这样这个<code>demo project</code>显得更加合理，所有源码均在src下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost go-examples]# cd src/</span><br><span class=\"line\">[root@localhost src]# ls</span><br><span class=\"line\">hello main.go</span><br></pre></td></tr></table></figure>\n<p>Go提供了<code>install</code>命令，与<code>build</code>命令相比，<code>install</code>命令在编译源码后还会将可执行文件或库文件安装到约定的目录下。我们以main目录为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost src]# cd main/</span><br><span class=\"line\">[root@localhost main]# go install</span><br></pre></td></tr></table></figure>\n<p><code>install</code>命令执行后，我们发现main目录下没有任何变化，原先build时产生的main可执行文件也不见了踪影。别急，<code>Go install</code>也有一套自己的约定：</p>\n<ul>\n<li><code>go install</code>(在<code>src/DIR</code>下)编译出的可执行文件以其所在目录名(DIR)命名</li>\n<li><code>go install</code>将可执行文件安装到与<code>src</code>同级别的<code>bin</code>目录下，<code>bin</code>目录由<code>go install</code>自动创建</li>\n<li><code>go install</code>将可执行文件依赖的各种<code>package</code>编译后，放在与<code>src</code>同级别的<code>pkg</code>目录下</li>\n</ul>\n<p>现在我们来看看<code>bin</code>目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost go-examples]# ls</span><br><span class=\"line\">bin pkg src</span><br><span class=\"line\">[root@localhost go-examples]# ls bin/</span><br><span class=\"line\">main</span><br></pre></td></tr></table></figure>\n<p>的确出现一个<code>bin</code>目录，并且刚刚编译的程序<code>main</code>在<code>bin</code>下面。</p>\n<p><code>hello.go</code>编译后并非可执行程序，在编译main的同时，由于main依赖<code>hello package</code>，因此<code>hello</code>也被关联编译了。这与单独在<code>hello</code>目录下执行<code>install</code>的结果是一样的，我们试试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost src]# cd hello/</span><br><span class=\"line\">[root@localhost hello]# go install</span><br><span class=\"line\">[root@localhost hello]# ls /home/go-examples/</span><br><span class=\"line\">bin pkg src</span><br></pre></td></tr></table></figure>\n<p>在我们的<code>workspace</code>(go-examples目录)下出现了一个<code>pkg</code>目录，<code>pkg</code>目录下是一个名为<code>linux_386</code>的子目录，其下面有一个文件：<code>hello.a</code>。这就是我们<code>install</code>的结果。<code>hello.go</code>被编译为<code>hello.a</code>并安装到<code>pkg/linux_386</code>目录下了。</p>\n<p><code>.a</code>这个后缀名让我们想起了静态共享库，但这里的<code>.a</code>却是Go独有的文件格式，与传统的静态共享库并不兼容。但Go语言的设计者使用这个后缀名似乎是希望 这个<code>.a</code>文件也承担起Go语言中”静态共享库”的角色。我们不妨来试试，看看这个<code>hello.a</code>是否可以被<code>Go compiler</code>当作”静态共享库”来对待。我们移除<code>src</code>中的<code>hello</code>目录，然后在<code>main</code>目录下执行<code>go build</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost main]# go build</span><br><span class=\"line\">main.go:4:8: import “hello”: cannot find package</span><br></pre></td></tr></table></figure>\n<p>Go编译器提示无法找到<code>hello</code>这个包，可见目前版本的Go编译器似乎不理pkg下的<code>.a</code>文件。<span class=\"exturl\" data-url=\"aHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2dvL2lzc3Vlcy9kZXRhaWw/aWQ9Mjc3NQ==\">http://code.google.com/p/go/issues/detail?id=2775<i class=\"fa fa-external-link-alt\"></i></span> 这个issue也印证了这一点，不过后续Go版本很可能会支持链接<code>.a</code>文件。毕竟我们在使用第三方package的时候，很可能无法得到其源码，并且在每个项目中都保存一份第三方包的源码也十分不利于项目源码的后期维护。</p>\n","categories":["Web","Back","go"],"tags":["linux","go"]},{"title":"Mac系统homebrew安装Go语言以及配置","url":"/mac_homebrew_go/","content":"<h3 id=\"安装homebrew\"><a href=\"#安装homebrew\" class=\"headerlink\" title=\"安装homebrew\"></a>安装homebrew</h3><p>在终端输入命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ruby -e <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>安装后更新下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装go\"><a href=\"#安装go\" class=\"headerlink\" title=\"安装go\"></a>安装go</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install go</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/local/Cellar/go/1.11.2/bin/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建工作目录\"><a href=\"#创建工作目录\" class=\"headerlink\" title=\"创建工作目录\"></a>创建工作目录</h3><p>在用户目录创建go文件夹</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /wwwroot</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> gopath goworkspace</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置GOPATH\"><a href=\"#配置GOPATH\" class=\"headerlink\" title=\"配置GOPATH\"></a>配置GOPATH</h3><hr>\n<p>在go的1.1版本后已经开始支持 Go Module 了。自此go path 的难解问题得到处理。<br><del> vim ~&#x2F;.bash_profile </del></p>\n<p><del> ## 添加以下内容 </del><br><del>export GOPATH&#x3D;&#x2F;wwwroot&#x2F;gopath:&#x2F;wwwroot&#x2F;goworkspace</del><br><del>xport GOBIN&#x3D;</del><br><del>export PATH&#x3D;$PATH:${GOPATH&#x2F;&#x2F;:&#x2F;&#x2F;bin:}&#x2F;bin</del></p>\n<p><del> ## 有些地方建议在设置了GOPATH之后，将<code>$GOPATH/bin</code>加入PATH中，这样可以方便的运行<code>go install</code>好的二进制程序。然而，当存在GOPATH中存在多个路径时，这种写法只会将最后一个路径跟上bin。在或linux下可以通过这种方式解决：</del><br><del>## ${GOPATH&#x2F;&#x2F;:&#x2F;&#x2F;bin:}&#x2F;bin</del><br><del>## export GOPATH&#x3D;&#x2F;wwwroot&#x2F;goworkspace (换成你的)</del></p>\n<p><del> source ~&#x2F;.zshrc </del></p>\n<p><del>注：一般会给GOPATH至少配两个目录，在你需要下载开源包时（go get ****），开源包默认会找到第一个目录，会统一下到第一个目录的pkg文件夹里，我本机开发的项目全都保存在后边的GOPATH目录里，只是为了方便管理包，如何配置，看你个人喜好</del></p>\n<p>现在还需要加入启动，不然使用会报错，以后可能会取消吧。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">go: modules disabled inside GOPATH/src by GO111MODULE=auto; see <span class=\"string\">&#x27;go help modules&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">vim ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> GO111MODULE=on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /wwwroot/goworkspace</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> src pkg bin main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">touch</span> test.go</span><br></pre></td></tr></table></figure>\n\n<p>写入代码 —-start</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;Hello, world&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在命令行上面运行 <code>go run test.go</code></p>\n<p>输出<code>Hello, world</code>表示正常</p>\n","categories":["Web","Back","go"],"tags":["mac","go","brew"]},{"title":"Go mod 使用","url":"/go_mod_use/","content":"<p>go modules 是 golang 1.11 新加的特性。</p>\n<blockquote>\n<p>模块是相关Go包的集合。modules是源代码交换和版本控制的单元。 go命令直接支持使用modules，包括记录和解析对其他模块的依赖性。modules替换旧的基于GOPATH的方法来指定在给定构建中使用哪些源文件。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"如何使用-Modules-？\"><a href=\"#如何使用-Modules-？\" class=\"headerlink\" title=\"如何使用 Modules ？\"></a>如何使用 Modules ？</h2><p>1.把 golang 升级到 1.11（现在1.12 已经发布了，建议使用1.12）<br>2.设置 GO111MODULE</p>\n<p><code>GO111MODULE</code> 有三个值：<code>off</code>, <code>on</code>和<code>auto</code>（默认值）。</p>\n<ul>\n<li><code>GO111MODULE=off</code>，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找。</li>\n<li><code>GO111MODULE=on</code>，go命令行会使用modules，而一点也不会去GOPATH目录下查找。</li>\n<li><code>GO111MODULE=auto</code>，默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形：<ul>\n<li>当前目录在GOPATH&#x2F;src之外且该目录包含go.mod文件</li>\n<li>当前文件在包含go.mod文件的目录下面。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>当modules 功能启用时，依赖包的存放位置变更为$GOPATH&#x2F;pkg，允许同一个package多个版本并存，且多个项目可以共享缓存的 module。</p>\n</blockquote>\n<h2 id=\"go-mod\"><a href=\"#go-mod\" class=\"headerlink\" title=\"go mod\"></a>go mod</h2><p>golang 提供了 go mod命令来管理包。</p>\n<p>go mod 有以下命令：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>download</td>\n<td>download modules to local cache(下载依赖包)</td>\n</tr>\n<tr>\n<td>edit</td>\n<td>edit go.mod from tools or scripts（编辑go.mod)</td>\n</tr>\n<tr>\n<td>graph</td>\n<td>print module requirement graph (打印模块依赖图)</td>\n</tr>\n<tr>\n<td>init</td>\n<td>initialize new module in current directory（在当前目录初始化mod）</td>\n</tr>\n<tr>\n<td>tidy</td>\n<td>add missing and remove unused modules(拉取缺少的模块，移除不用的模块)</td>\n</tr>\n<tr>\n<td>vendor</td>\n<td>make vendored copy of dependencies(将依赖复制到vendor下)</td>\n</tr>\n<tr>\n<td>verify</td>\n<td>verify dependencies have expected content (验证依赖是否正确）</td>\n</tr>\n<tr>\n<td>why</td>\n<td>explain why packages or modules are needed(解释为什么需要依赖)</td>\n</tr>\n</tbody></table>\n<h2 id=\"如何在项目中使用\"><a href=\"#如何在项目中使用\" class=\"headerlink\" title=\"如何在项目中使用\"></a>如何在项目中使用</h2><h3 id=\"示例一：创建一个新项目\"><a href=\"#示例一：创建一个新项目\" class=\"headerlink\" title=\"示例一：创建一个新项目\"></a>示例一：创建一个新项目</h3><p>在GOPATH 目录之外新建一个目录，并使用<code>go mod init</code>初始化生成go.mod 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">(python3.7)  👍 /wwwroot/html <span class=\"built_in\">mkdir</span> hello</span><br><span class=\"line\">(python3.7)  👍 /wwwroot/html <span class=\"built_in\">cd</span> hello</span><br><span class=\"line\">(python3.7)  👍 /wwwroot/html/hello go mod init hello</span><br><span class=\"line\">go: creating new go.mod: module hello</span><br><span class=\"line\">(python3.7)  👍 /wwwroot/html/hello <span class=\"built_in\">cat</span> go.mod</span><br><span class=\"line\">module hello</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>go.mod文件一旦创建后，它的内容将会被<code>go toolchain</code>全面掌控。<code>go toolchain</code>会在各类命令执行时，比如<code>go get</code>、<code>go build</code>、<code>go mod</code>等修改和维护go.mod文件。</p>\n</blockquote>\n<p>go.mod 提供了<code>module</code>, <code>require</code>、<code>replace</code>和<code>exclude</code> 四个命令</p>\n<ul>\n<li>module 语句指定包的名字（路径）</li>\n<li>require 语句指定的依赖项模块</li>\n<li>replace 语句可以替换依赖项模块</li>\n<li>exclude 语句可以忽略依赖项模块</li>\n</ul>\n<h4 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h4><p>新建一个 <code>server.go</code> 文件，写入以下代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/labstack/echo&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    e := echo.New()</span><br><span class=\"line\">    e.GET(<span class=\"string\">&quot;/&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c echo.Context)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c.String(http.StatusOK, <span class=\"string\">&quot;Hello, World!&quot;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    e.Logger.Fatal(e.Start(<span class=\"string\">&quot;:1323&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>go run server.go</code> 运行代码会发现 go mod 会自动查找依赖自动下载：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ go run server.go</span><br><span class=\"line\">go: finding github.com/labstack/echo v3.3.10+incompatible</span><br><span class=\"line\">go: downloading github.com/labstack/echo v3.3.10+incompatible</span><br><span class=\"line\">go: finding github.com/labstack/gommon/color latest</span><br><span class=\"line\">go: finding github.com/labstack/gommon/log latest</span><br><span class=\"line\">go: finding golang.org/x/crypto/acme/autocert latest</span><br><span class=\"line\">go: finding github.com/labstack/gommon v0.2.9</span><br><span class=\"line\">go: finding golang.org/x/crypto/acme latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此处省略很多行</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">   ____    __</span><br><span class=\"line\">  / __/___/ /  ___</span><br><span class=\"line\"> / _// __/ _ \\/ _ \\</span><br><span class=\"line\">/___/\\__/_//_/\\___/ v3.3.10-dev</span><br><span class=\"line\">High performance, minimalist Go web framework</span><br><span class=\"line\">https://echo.labstack.com</span><br><span class=\"line\">____________________________________O/_______</span><br><span class=\"line\">                                    O\\</span><br><span class=\"line\">⇨ http server started on [::]:1323</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>现在查看go.mod 内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> go.mod</span><br><span class=\"line\"></span><br><span class=\"line\">module hello</span><br><span class=\"line\"></span><br><span class=\"line\">require (</span><br><span class=\"line\">\tgithub.com/labstack/echo v3.3.10+incompatible // indirect</span><br><span class=\"line\">\tgithub.com/labstack/gommon v0.2.9 // indirect</span><br><span class=\"line\">\tgolang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4 // indirect</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>go module</code> 安装 <code>package</code> 的原則是先拉最新的 <code>release tag</code>，若无tag则拉最新的commit，详见 Modules官方介绍。 <code>go</code> 会自动生成一个 go.sum 文件来记录 dependency tree：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> go.sum</span><br><span class=\"line\">github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=</span><br><span class=\"line\">github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=</span><br><span class=\"line\">github.com/labstack/echo v3.3.10+incompatible h1:pGRcYk231ExFAyoAjAfD85kQzRJCRI8bbnE7CX5OEgg=</span><br><span class=\"line\">github.com/labstack/echo v3.3.10+incompatible/go.mod h1:0INS7j/VjnFxD4E2wkz67b8cVwCLbBmJyDaka6Cmk1s=</span><br><span class=\"line\">github.com/labstack/gommon v0.2.9 h1:heVeuAYtevIQVYkGj6A41dtfT91LrvFG220lavpWhrU=</span><br><span class=\"line\">github.com/labstack/gommon v0.2.9/go.mod h1:E8ZTmW9vw5az5/ZyHWCp0Lw4OH2ecsaBP1C/NKavGG4=</span><br><span class=\"line\">... 省略很多行</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>再次执行脚本 <code>go run server.go</code> 发现跳过了检查并安装依赖的步骤。</li>\n<li>可以使用命令 <code>go list -m -u all</code> 来检查可以升级的package，使用<code>go get -u need-upgrade-package</code> 升级后会将新的依赖版本更新到go.mod</li>\n<li>也可以使用 <code>go get -u</code> 升级所有依赖</li>\n</ol>\n<h4 id=\"go-get-升级\"><a href=\"#go-get-升级\" class=\"headerlink\" title=\"go get 升级\"></a>go get 升级</h4><p>运行 <code>go get -u</code> 将会升级到最新的次要版本或者修订版本(x.y.z, z是修订版本号， y是次要版本号)<br>运行 <code>go get -u=patch</code> 将会升级到最新的修订版本<br>运行 <code>go get package@version</code> 将会升级到指定的版本号version<br>运行go get如果有版本的更改，那么go.mod文件也会更改</p>\n<h3 id=\"示例二：改造现有项目-helloword\"><a href=\"#示例二：改造现有项目-helloword\" class=\"headerlink\" title=\"示例二：改造现有项目(helloword)\"></a>示例二：改造现有项目(helloword)</h3><p>项目目录为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ tree</span><br><span class=\"line\">.</span><br><span class=\"line\">├── api</span><br><span class=\"line\">│   └── apis.go</span><br><span class=\"line\">└── server.go</span><br><span class=\"line\"></span><br><span class=\"line\">1 directory, 2 files</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>server.go 源码为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    api <span class=\"string\">&quot;./api&quot;</span>  <span class=\"comment\">// 这里使用的是相对路径</span></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/labstack/echo&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    e := echo.New()</span><br><span class=\"line\">    e.GET(<span class=\"string\">&quot;/&quot;</span>, api.HelloWorld)</span><br><span class=\"line\">    e.Logger.Fatal(e.Start(<span class=\"string\">&quot;:1323&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>api&#x2F;apis.go 源码为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> api</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/labstack/echo&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">HelloWorld</span><span class=\"params\">(c echo.Context)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c.JSON(http.StatusOK, <span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>go mod init ***</code> 初始化go.mod</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ go mod init helloworld</span><br><span class=\"line\">go: creating new go.mod: module helloworld</span><br></pre></td></tr></table></figure>\n\n<p>运行 <code>go run server.go</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">go: finding github.com/labstack/gommon/color latest</span><br><span class=\"line\">go: finding github.com/labstack/gommon/log latest</span><br><span class=\"line\">go: finding golang.org/x/crypto/acme/autocert latest</span><br><span class=\"line\">go: finding golang.org/x/crypto/acme latest</span><br><span class=\"line\">go: finding golang.org/x/crypto latest</span><br><span class=\"line\">build command-line-arguments: cannot find module <span class=\"keyword\">for</span> path _/home/gs/helloworld/api</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>首先还是会查找并下载安装依赖，然后运行脚本 server.go，这里会抛出一个错误：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">build command-line-arguments: cannot find module <span class=\"keyword\">for</span> path _/home/gs/helloworld/api</span><br></pre></td></tr></table></figure>\n\n<p>但是go.mod 已经更新：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> go.mod</span><br><span class=\"line\"></span><br><span class=\"line\">module helloworld</span><br><span class=\"line\"></span><br><span class=\"line\">require (</span><br><span class=\"line\">\tgithub.com/labstack/echo v3.3.10+incompatible // indirect</span><br><span class=\"line\">\tgithub.com/labstack/gommon v0.2.9 // indirect</span><br><span class=\"line\">\tgolang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4 // indirect</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>那为什么会抛出这个错误呢？<br>这是因为 <code>server.go</code> 中使用 <code>internal package</code> 的方法跟以前已经不同了，由于 go.mod会扫描同工作目录下所有 package 并且变更引入方法，必须将 helloworld当成路径的前缀，也就是需要写成 <code>import helloworld/api</code>，以往 <code>GOPATH/dep</code> 模式允许的 <code>import ./api</code> ，已经失效详情可以查看这个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby9pc3N1ZXMvMjY2NDU=\">issue<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<p>所以<code>server.go</code> 需要改写成：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    api <span class=\"string\">&quot;helloworld/api&quot;</span>  <span class=\"comment\">// 这是更新后的引入方法</span></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/labstack/echo&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    e := echo.New()</span><br><span class=\"line\">    e.GET(<span class=\"string\">&quot;/&quot;</span>, api.HelloWorld)</span><br><span class=\"line\">    e.Logger.Fatal(e.Start(<span class=\"string\">&quot;:1323&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个小坑：开始在golang1.11 下使用go mod 遇到过 <code>go build github.com/valyala/fasttemplate: module requires go 1.12</code> 这种错误，遇到类似这种需要升级到1.12 的问题，直接升级golang1.12 就好了。幸亏是在1.12 发布后才尝试的go mod 🤷‍♂️<br>到这里就和新创建一个项目没什么区别了</p>\n<h3 id=\"使用replace替换无法直接获取的package\"><a href=\"#使用replace替换无法直接获取的package\" class=\"headerlink\" title=\"使用replace替换无法直接获取的package\"></a>使用replace替换无法直接获取的package</h3><p>由于某些已知的原因，并不是所有的package都能成功下载，比如：<code>golang.org</code>下的包。</p>\n<p>modules 可以通过在 go.mod 文件中使用 replace 指令替换成github上对应的库，比如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">replace (</span><br><span class=\"line\">    golang.org/x/crypto v0<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">-20190313024323</span>-a1f597ede03a =&gt; github.com/golang/crypto v0<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">-20190313024323</span>-a1f597ede03a</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">replace golang.org/x/crypto v0<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">-20190313024323</span>-a1f597ede03a =&gt; github.com/golang/crypto v0<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">-20190313024323</span>-a1f597ede03a</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p>[1] Modules官方介绍: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby8=\">https://github.com/golang/go/<i class=\"fa fa-external-link-alt\"></i></span>…<br>[2] issue: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby8=\">https://github.com/golang/go/<i class=\"fa fa-external-link-alt\"></i></span>…<br>[3] 这种错误: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby8=\">https://github.com/golang/go/<i class=\"fa fa-external-link-alt\"></i></span>…<br>[4] Modules官方介绍: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby8=\">https://github.com/golang/go/<i class=\"fa fa-external-link-alt\"></i></span>…<br>[5] Golang 1.11 新功能介紹 – Modules: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlnaHRibHVlLmFzaWEvZ28=\">https://www.lightblue.asia/go<i class=\"fa fa-external-link-alt\"></i></span>…<br>[6] What are Go modules and how do I use them?: <span class=\"exturl\" data-url=\"aHR0cHM6Ly90YWxrcy5nb2RvYy5vcmcvZ2l0aHU=\">https://talks.godoc.org/githu<i class=\"fa fa-external-link-alt\"></i></span>…<br>[7] go mod doesn’t work for github.com&#x2F;gomarkdown&#x2F;markdown&#x2F;html : <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby8=\">https://github.com/golang/go/<i class=\"fa fa-external-link-alt\"></i></span>…<br>[8] 再探go modules：使用与细节: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYXBvY2U=\">https://www.cnblogs.com/apoce<i class=\"fa fa-external-link-alt\"></i></span>…<br>[9] 初窥Go module: <span class=\"exturl\" data-url=\"aHR0cHM6Ly90b255YmFpLmNvbS8yMDE4LzA3LzE=\">https://tonybai.com/2018/07/1<i class=\"fa fa-external-link-alt\"></i></span>…</p>\n","categories":["Web","Back","go"],"tags":["go"]},{"title":"Laravel之容器","url":"/php_laravel_container/","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>惯例介绍下容器的背景，回答第一个问题：什么是容器？</p>\n<p>顾名思义，容器即存放东西的地方，里面存放的可以是文本、数值，甚至是对象、接口、回调函数。</p>\n<p>那通过容器，解决了什么问题呢？</p>\n<p>通过容器最主要解决的就是“解耦” 、“依赖注入（DI）“，从而实现”控制反转（IoC）“</p>\n<h2 id=\"DI\"><a href=\"#DI\" class=\"headerlink\" title=\"DI\"></a>DI</h2><p>上面将了容器是用来解决依赖注入的，那到底什么是依赖注入呢？我们以下面的例子来说明下：</p>\n<p>我们假设有一个订单，在构造函数中我们新建了<code>OrderRepository</code>，通过仓库我们就可以对订单进行持久化了，但是突然有一天，我们想把订单的存储从数据库换到<code>redis</code>，我们这时候就必须改订单的构造函数，将<code>OrderRepository</code>换为<code>OrderRedisRepository</code>，而且可能两者的接口还不一样，改动成本非常大。如果哪天我们又想将存储换到<code>mongodb</code>，那我们又得改<code>Order</code>的构造函数，这个时候，我们可以定义一个接口<code>Repository</code>，而<code>Order</code>的构造函数接受<code>Repository</code>作为参数，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Order &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @type Repository</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private $repository;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Order constructor.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param Repository $repository</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public function __construct(Repository $repository)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">//        $this-&gt;repository = new OrderMysqlRepository();</span><br><span class=\"line\">//        $this-&gt;repository = new OrderRedisRepository();</span><br><span class=\"line\"></span><br><span class=\"line\">        $this-&gt;repository = $repository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样客户端在使用上就变成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$repository = new OrderMysqlRepository();</span><br><span class=\"line\">$order = new Order($repository);</span><br></pre></td></tr></table></figure>\n<p>上面就是依赖注入了，我们通过构造函数传参的方式将<code>$repository</code>注入到了<code>Order</code>中。</p>\n<p>了解了依赖注入，下面就到了我们今天的重点依赖反转。</p>\n<h2 id=\"依赖反转\"><a href=\"#依赖反转\" class=\"headerlink\" title=\"依赖反转\"></a>依赖反转</h2><p>上面客户端在使用的时候，还是需要手动的创建OrderMysqlRepository，有没有可能将这个创建的逻辑也从客户端抽离出来呢？看下面的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Container</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $binds;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected $instances;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function bind($abstract, $concrete)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if ($concrete instanceof \\Closure) &#123;</span><br><span class=\"line\">            $this-&gt;binds[$abstract] = $concrete;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $this-&gt;instances[$abstract] = $concrete;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function make($abstract, $parameters = [])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (isset($this-&gt;instances[$abstract])) &#123;</span><br><span class=\"line\">            return $this-&gt;instances[$abstract];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        array_unshift($parameters, $this);</span><br><span class=\"line\"></span><br><span class=\"line\">        return call_user_func_array($this-&gt;binds[$abstract], $parameters);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面就是一个简单的容器，在使用上</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public function testContainer()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $container = new Container();</span><br><span class=\"line\">    $container-&gt;bind(&#x27;order&#x27;,function(Container $c,$repository)&#123;</span><br><span class=\"line\">        return new Order($c-&gt;make($repository));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $container-&gt;bind(&#x27;Repository&#x27;,new OrderRedisRepository);</span><br><span class=\"line\">    $order = $container-&gt;make(&#x27;order&#x27;,[&#x27;Repository&#x27;]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上就是一个基本简单可用的Ioc容器了。</p>\n<p>我们可以看到IoC核心就是通过事先将一些代码片段注册到容器中，当我们需要实例化类的时候，通过容器，自动的将对象需要的参数实例化出来，并注入进去。</p>\n<h2 id=\"Laravel中的容器\"><a href=\"#Laravel中的容器\" class=\"headerlink\" title=\"Laravel中的容器\"></a>Laravel中的容器</h2><p>Laravel中容器共有15个方法，简单分类了下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419141501.png?token=ACYTD745SO6JWJ4FIZ3LUD24XFT2M\"></p>\n<h2 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h2><h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h3><p>先来看下注册，Laravel的容器支持好多种注册方式，先看最常用的bind，其函数签名是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public function bind($abstract, $concrete = null, $shared = false);</span><br></pre></td></tr></table></figure>\n<p>看到签名中有3个参数，在函数内部经过各种操作后，最终落地到存储上，形式是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$bindings = [</span><br><span class=\"line\">  &#x27;abstract&#x27; =&gt; [</span><br><span class=\"line\">      &#x27;concrete&#x27; =&gt; $concrete,</span><br><span class=\"line\">      &#x27;shared&#x27; =&gt; $shared;</span><br><span class=\"line\">   ],    </span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>bind在注册上，像之前提到过的，可以注册文本、数值，甚至是对象、接口、回调函数，下面就每种形式给出测试，</p>\n<p>先看闭包形式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public function testClosureResolution()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $container = new Container;</span><br><span class=\"line\">    $container-&gt;bind(&#x27;name&#x27;, function () &#123;</span><br><span class=\"line\">        return &#x27;Taylor&#x27;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">//          dd($container);</span><br><span class=\"line\">    $this-&gt;assertEquals(&#x27;Taylor&#x27;, $container-&gt;make(&#x27;name&#x27;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面为了测试，通过<code>dd</code>可以打印出好<code>container</code>来，我们看到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Illuminate\\Container\\Container &#123;#20</span><br><span class=\"line\">  #resolved: []</span><br><span class=\"line\">  #bindings: array:1 [</span><br><span class=\"line\">    &quot;name&quot; =&gt; array:2 [</span><br><span class=\"line\">      &quot;concrete&quot; =&gt; Closure &#123;#21</span><br><span class=\"line\">        class: &quot;LaravelContainerTest&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &quot;shared&quot; =&gt; false</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  #instances: []</span><br><span class=\"line\">  #aliases: []</span><br><span class=\"line\">  #extenders: []</span><br><span class=\"line\">  #tags: []</span><br><span class=\"line\">  #buildStack: []</span><br><span class=\"line\">  +contextual: []</span><br><span class=\"line\">  #reboundCallbacks: []</span><br><span class=\"line\">  #globalResolvingCallbacks: []</span><br><span class=\"line\">  #globalAfterResolvingCallbacks: []</span><br><span class=\"line\">  #resolvingCallbacks: []</span><br><span class=\"line\">  #afterResolvingCallbacks: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面是<code>container</code>的内部，经过<code>bind</code>后，里面的<code>bindings</code>多了我们注册过的<code>name</code>，下一步注册过了，就应该要调用<code>make</code>实例化出来，调用<code>make</code>后，<code>container</code>中<code>resolved</code>多个key</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#resolved: array:1 [</span><br><span class=\"line\">   &quot;name&quot; =&gt; true</span><br><span class=\"line\"> ]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在实现<code>make</code>的时候，通过判断是否是闭包来判断，如果是闭包，则直接调用，否则通过反射机制实例化出来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if ($concrete instanceof Closure) &#123;</span><br><span class=\"line\">   return $concrete($this, $parameters);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$reflector = new ReflectionClass($concrete);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"instance\"><a href=\"#instance\" class=\"headerlink\" title=\"instance\"></a>instance</h3><p><code>instance</code>是将我们已经实例化出来的对象、文本等注册进入容器，使用方法如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public function testSimpleInstance()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $c = new Container();</span><br><span class=\"line\">    $name = &#x27;zhuanxu&#x27;;</span><br><span class=\"line\">    $c-&gt;instance(&#x27;name&#x27;,$name);</span><br><span class=\"line\">    $this-&gt;assertEquals($name,$c-&gt;make(&#x27;name&#x27;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>instance方法将其写入到<code>instances: []</code>中</p>\n<h3 id=\"singleton\"><a href=\"#singleton\" class=\"headerlink\" title=\"singleton\"></a>singleton</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$container = new Container;</span><br><span class=\"line\">$container-&gt;singleton(&#x27;ContainerConcreteStub&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">$var1 = $container-&gt;make(&#x27;ContainerConcreteStub&#x27;);</span><br><span class=\"line\">$var2 = $container-&gt;make(&#x27;ContainerConcreteStub&#x27;);</span><br><span class=\"line\">$this-&gt;assertSame($var1, $var2);</span><br></pre></td></tr></table></figure>\n<p><code>singleton</code>是对<code>bind</code>的简单封装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public function singleton($abstract, $concrete = null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $this-&gt;bind($abstract, $concrete, true);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public function testAliases()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $container = new Container;</span><br><span class=\"line\">    $container[&#x27;foo&#x27;] = &#x27;bar&#x27;;</span><br><span class=\"line\">    $container-&gt;alias(&#x27;foo&#x27;, &#x27;baz&#x27;);</span><br><span class=\"line\">    $container-&gt;alias(&#x27;baz&#x27;, &#x27;bat&#x27;);</span><br><span class=\"line\">    $this-&gt;assertEquals(&#x27;bar&#x27;, $container-&gt;make(&#x27;foo&#x27;));</span><br><span class=\"line\">    $this-&gt;assertEquals(&#x27;bar&#x27;, $container-&gt;make(&#x27;baz&#x27;));</span><br><span class=\"line\">    $this-&gt;assertEquals(&#x27;bar&#x27;, $container-&gt;make(&#x27;bat&#x27;));</span><br><span class=\"line\">    $container-&gt;bind([&#x27;bam&#x27; =&gt; &#x27;boom&#x27;], function () &#123;</span><br><span class=\"line\">        return &#x27;pow&#x27;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $this-&gt;assertEquals(&#x27;pow&#x27;, $container-&gt;make(&#x27;bam&#x27;));</span><br><span class=\"line\">    $this-&gt;assertEquals(&#x27;pow&#x27;, $container-&gt;make(&#x27;boom&#x27;));</span><br><span class=\"line\">    $container-&gt;instance([&#x27;zoom&#x27; =&gt; &#x27;zing&#x27;], &#x27;wow&#x27;);</span><br><span class=\"line\">    $this-&gt;assertEquals(&#x27;wow&#x27;, $container-&gt;make(&#x27;zoom&#x27;));</span><br><span class=\"line\">    $this-&gt;assertEquals(&#x27;wow&#x27;, $container-&gt;make(&#x27;zing&#x27;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>alias</code>函数是通过起别名的方式来让容器<code>make</code></p>\n<h3 id=\"share\"><a href=\"#share\" class=\"headerlink\" title=\"share\"></a>share</h3><p><code>share</code>是通过闭包的形式，加上关键字<code>static</code>实现的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public function share(Closure $closure)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return function ($container) use ($closure) &#123;</span><br><span class=\"line\">        static $object;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (is_null($object)) &#123;</span><br><span class=\"line\">            $object = $closure($container);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return $object;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"extend\"></a>extend</h3><p><code>extend</code>是在当原来的容器实例化出来后，可以对其进行扩展</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public function testExtendInstancesArePreserved()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $container = new Container;</span><br><span class=\"line\">    $container-&gt;bind(&#x27;foo&#x27;, function () &#123;</span><br><span class=\"line\">        $obj = new StdClass;</span><br><span class=\"line\">        $obj-&gt;foo = &#x27;bar&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">        return $obj;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $obj = new StdClass;</span><br><span class=\"line\">    $obj-&gt;foo = &#x27;foo&#x27;;</span><br><span class=\"line\">    $container-&gt;instance(&#x27;foo&#x27;, $obj);</span><br><span class=\"line\">    $container-&gt;extend(&#x27;foo&#x27;, function ($obj, $container) &#123;</span><br><span class=\"line\">        $obj-&gt;bar = &#x27;baz&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">        return $obj;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    $container-&gt;extend(&#x27;foo&#x27;, function ($obj, $container) &#123;</span><br><span class=\"line\">        $obj-&gt;baz = &#x27;foo&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">        return $obj;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;assertEquals(&#x27;foo&#x27;, $container-&gt;make(&#x27;foo&#x27;)-&gt;foo);</span><br><span class=\"line\">    $this-&gt;assertEquals(&#x27;baz&#x27;, $container-&gt;make(&#x27;foo&#x27;)-&gt;bar);</span><br><span class=\"line\">    $this-&gt;assertEquals(&#x27;foo&#x27;, $container-&gt;make(&#x27;foo&#x27;)-&gt;baz);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h2><h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h3><p>call直接调用函数，自动注入依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public function testCallWithDependencies()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $container = new Container;</span><br><span class=\"line\">    $result = $container-&gt;call(function (StdClass $foo, $bar = []) &#123;</span><br><span class=\"line\">        return func_get_args();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;assertInstanceOf(&#x27;stdClass&#x27;, $result[0]);</span><br><span class=\"line\">    $this-&gt;assertEquals([], $result[1]);</span><br><span class=\"line\"></span><br><span class=\"line\">    $result = $container-&gt;call(function (StdClass $foo, $bar = []) &#123;</span><br><span class=\"line\">        return func_get_args();</span><br><span class=\"line\">    &#125;, [&#x27;bar&#x27; =&gt; &#x27;taylor&#x27;]);</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;assertInstanceOf(&#x27;stdClass&#x27;, $result[0]);</span><br><span class=\"line\">    $this-&gt;assertEquals(&#x27;taylor&#x27;, $result[1]);</span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">        * Wrap a function...</span><br><span class=\"line\">        */</span><br><span class=\"line\">    $result = $container-&gt;wrap(function (StdClass $foo, $bar = []) &#123;</span><br><span class=\"line\">        return func_get_args();</span><br><span class=\"line\">    &#125;, [&#x27;bar&#x27; =&gt; &#x27;taylor&#x27;]);</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;assertInstanceOf(&#x27;Closure&#x27;, $result);</span><br><span class=\"line\">    $result = $result();</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;assertInstanceOf(&#x27;stdClass&#x27;, $result[0]);</span><br><span class=\"line\">    $this-&gt;assertEquals(&#x27;taylor&#x27;, $result[1]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Web","Back","php"],"tags":["php","laravel"]},{"title":"Composer安装置顶版本号的Lumen或者Laravel","url":"/php_comoiser_install_lumen/","content":"<h3 id=\"1、服务器要求\"><a href=\"#1、服务器要求\" class=\"headerlink\" title=\"1、服务器要求\"></a><strong>1、服务器要求</strong></h3><p>Laravel&#x2F;<span class=\"exturl\" data-url=\"aHR0cDovL2xhcmF2ZWxhY2FkZW15Lm9yZy90YWdzL2x1bWVu\">Lumen<i class=\"fa fa-external-link-alt\"></i></span>框架对服务器有少许要求，当然，<span class=\"exturl\" data-url=\"aHR0cDovL2xhcmF2ZWxhY2FkZW15Lm9yZy9wb3N0LzI3NDkuaHRtbA==\">Laravel Homestead<i class=\"fa fa-external-link-alt\"></i></span>虚拟机已经满足所有这些要求，所以强烈推荐使用<span class=\"exturl\" data-url=\"aHR0cDovL2xhcmF2ZWxhY2FkZW15Lm9yZy90YWdzL2hvbWVzdGVhZA==\">Homestead<i class=\"fa fa-external-link-alt\"></i></span>作为本地<span class=\"exturl\" data-url=\"aHR0cDovL2xhcmF2ZWxhY2FkZW15Lm9yZy90YWdzLyVlNSViYyU4MCVlNSU4ZiU5MSVlNyU4ZSVhZiVlNSVhMiU4Mw==\">开发环境<i class=\"fa fa-external-link-alt\"></i></span>。 如果你没有使用Homestead，那么需要确保服务器满足以下要求：</p>\n<ul>\n<li>PHP &gt;&#x3D; 5.5.9</li>\n<li>OpenSSL PHP Extension</li>\n<li>Mbstring PHP Extension</li>\n<li>PDO PHP Extension</li>\n</ul>\n<h3 id=\"2、安装Lumen\"><a href=\"#2、安装Lumen\" class=\"headerlink\" title=\"2、安装Lumen\"></a><strong>2、<span class=\"exturl\" data-url=\"aHR0cDovL2xhcmF2ZWxhY2FkZW15Lm9yZy90YWdzLyVlNSVhZSU4OSVlOCVhMyU4NQ==\">安装<i class=\"fa fa-external-link-alt\"></i></span>Lumen</strong></h3><p>Lumen使用<span class=\"exturl\" data-url=\"aHR0cDovL2xhcmF2ZWxhY2FkZW15Lm9yZy90YWdzL2NvbXBvc2Vy\">Composer<i class=\"fa fa-external-link-alt\"></i></span>来管理依赖，所以，在使用之前，确保你已经在机器上安装了Composer。 </p>\n<p><strong>通过Lumen安装器</strong><br>首先，使用Composer下载Lumen安装器： <code>composer global require &quot;laravel/lumen-installer&quot;</code> 确保<code>~/.composer/vendor/bin</code>在系统路径PATH中，否则不能在命令行调用<code>lumen</code>命令。 安装完成后，只需简单通过<code>lumen new</code>命令就可以在当前目录下创建一个新的Lumen应用，例如，<code>lumen new blog</code>将会创建一个名为<code>blog</code>的Lumen安装目录，该目录中已经包含了所有Lumen依赖。</p>\n<p>该安装方法比通过Composer安装要快很多：<code>lumen new blog</code> </p>\n<p><strong>通过Composer Create-Project安装</strong><br>你还可以在终端中通过Composer的<code>create-project命令</code>来安装Lumen： <code>composer create-project  ``laravel/lumen blog --prefer-dist &quot;5.2.*&quot;</code></p>\n<h3 id=\"3、配置\"><a href=\"#3、配置\" class=\"headerlink\" title=\"3、配置\"></a><strong>3、<span class=\"exturl\" data-url=\"aHR0cDovL2xhcmF2ZWxhY2FkZW15Lm9yZy90YWdzLyVlOSU4NSU4ZCVlNyViZCVhZQ==\">配置<i class=\"fa fa-external-link-alt\"></i></span></strong></h3><p>Lumen框架的所有配置都存放在.env文件，安装好Lumen后，需要配置本地开发环境。</p>\n<p><strong>Application Key</strong><br>安装完Lumen后，需要设置APP_KEY为32位长的随机字符串，该key被配置在<code>.env</code>环境文件中（APP_KEY），如果你还没有将<code>.env.example</code>文件重命名为<code>.env</code>，现在立即这样做。如果key没有被设置，用户sessions和其它加密数据将会有安全隐患！</p>\n","categories":["Web","Back","php"],"tags":["php","laravel","composer"]},{"title":"dyld: Library not loaded: /usr/local/lib/libjpeg.8.dylib - homebrew php","url":"/php_library_load/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ php -v</span><br><span class=\"line\">dyld: Library not loaded: /usr/local/lib/libjpeg.8.dylib</span><br><span class=\"line\">  Referenced from: /usr/local/bin/php</span><br><span class=\"line\">  Reason: image not found</span><br><span class=\"line\">Trace/BPT trap: 5</span><br></pre></td></tr></table></figure>\n\n<p>方式一：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -c http://www.ijg.org/files/jpegsrc.v8d.tar.gz</span><br><span class=\"line\">tar xzf jpegsrc.v8d.tar.gz</span><br><span class=\"line\">cd jpeg-8d</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">cp ./.libs/libjpeg.8.dylib /usr/local/opt/jpeg/lib</span><br></pre></td></tr></table></figure>\n\n<p>方式二：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install --build-from-source php56</span><br></pre></td></tr></table></figure>","categories":["Web","Back","php"]},{"title":"Laravel5 ：数据库迁移Migrations","url":"/laravel_migration/","content":"<p>迁移是一种数据库的版本控制。可以让团队在修改数据库结构的同时，保持彼此的进度一致。它是 <code>Laravel 5</code> 最强大的功能之一。</p>\n<p>一般我们可以通过<code>phpmyadmin</code>或者<code>Navicat</code>等数据库管理工具来创建、修改数据表结构。如果就自己一个人的话还好，但是如果团队中有多个人，我们就需要导出表结构，然后传给团队中其他人，他们再把数据表结构导入他们的数据库，这时如果表中原来有数据的话就可能出现一些问题。而Laravel 5中的<code>Migrations</code>很好的避免了此问题。</p>\n<p>Migrations把表结构存储为一个PHP类，通过调用其中的方法来创建、更改数据库。Migrations存放在在 database&#x2F;migrations 目录中。初始情况下，其中包含了两个文件：***_create_users_table.php 和 ***_create_password_resets_table.php，分别是用户表和用户密码重置表。每个文件中都包含了 up() 和 down() 两个方法，一个用来创建、更改数据表，一个用来回滚操作，即撤 up() 中的操作。</p>\n<h3 id=\"创建迁移文件\"><a href=\"#创建迁移文件\" class=\"headerlink\" title=\"创建迁移文件\"></a>创建迁移文件</h3><p>使用 <code>Artisan CLI</code> 的 <code>make:migrate</code> 命令建立迁移文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\wamp\\www\\laravel5&gt;php artisan help make:migration</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\"> make:migration [--create[=&quot;...&quot;]] [--table[=&quot;...&quot;]] name</span><br><span class=\"line\"></span><br><span class=\"line\">Arguments:</span><br><span class=\"line\"> name                  The name of the migration</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\"> --create              The table to be created.</span><br><span class=\"line\"> --table               The table to migrate.</span><br><span class=\"line\"> --help (-h)           Display this help message</span><br><span class=\"line\"> --quiet (-q)          Do not output any message</span><br><span class=\"line\"> --verbose (-v|vv|vvv) Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug</span><br><span class=\"line\"> --version (-V)        Display this application version</span><br><span class=\"line\"> --ansi                Force ANSI output</span><br><span class=\"line\"> --no-ansi             Disable ANSI output</span><br><span class=\"line\"> --no-interaction (-n) Do not ask any interactive question</span><br><span class=\"line\"> --env                 The environment the command should run under.</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>–create</code> 是创建一个新表，而 <code>–table</code> 为修改指定表。如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">php artisan make:migration create_users_table --create=users //创建users表</span><br><span class=\"line\">php artisan make:migration add_votes_to_users_table --table=users //给users表增加votes字段</span><br></pre></td></tr></table></figure>\n\n<p>生成的迁移文件默认存放在 <code>database/migrations</code> 目录中，文件名会包含时间戳记，在执行迁移时用来决定顺序。</p>\n<h3 id=\"执行数据迁移\"><a href=\"#执行数据迁移\" class=\"headerlink\" title=\"执行数据迁移\"></a>执行数据迁移</h3><p>执行所有未执行的迁移</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">php artisan migrate</span><br></pre></td></tr></table></figure>\n\n<p>注意: 如果在执行迁移时发生<code>「class not found」</code>错误，试着先执行 <code>composer dump-autoload</code> 命令后再进行一次。<br>在线上环境 <code>(Production) </code>中强制执行迁移<br>有些迁移操作是具有破坏性的，意味着可能让你遗失原本保存的数据。为了防止你在上线环境执行到这些迁移命令，你会被提示要在执行迁移前进行确认。加上 <code>--force</code> 参数执行强制迁移：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">php artisan migrate --force</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回滚迁移\"><a href=\"#回滚迁移\" class=\"headerlink\" title=\"回滚迁移\"></a>回滚迁移</h3><p>回滚上一次的迁移</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">php artisan migrate:rollback</span><br></pre></td></tr></table></figure>\n<p>回滚所有迁移</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">php artisan migrate:reset</span><br></pre></td></tr></table></figure>\n<p>回滚所有迁移并且再执行一次</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">php artisan migrate:refresh</span><br><span class=\"line\">php artisan migrate:refresh --seed</span><br></pre></td></tr></table></figure>\n<p>上面是一些数据迁移的基本操作，下面是一个例子：</p>\n<p>执行数据迁移：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\wamp\\www\\laravel5&gt;php artisan migrate</span><br><span class=\"line\">Migration table created successfully.</span><br><span class=\"line\">Migrated: 2014_10_12_000000_create_users_table</span><br><span class=\"line\">Migrated: 2014_10_12_100000_create_password_resets_table</span><br></pre></td></tr></table></figure>\n<p>此时查看数据库，会发现多出了<code>migrations</code>、<code>password_resets</code>、<code>users</code>三个表，<code>migrations</code>表是用来管理数据库迁移回滚等操作的，一般不要动这个表，而<code>users</code>表和<code>password_resets</code>表就是 <code>database/migrations</code> 目录原有的两个生成的表。</p>\n<p>想修改<code>users</code>表中的<code>name</code>字段为<code>username</code>，执行回滚操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\wamp\\www\\laravel5&gt;php artisan migrate:rollback</span><br><span class=\"line\">Rolled back: 2014_10_12_100000_create_password_resets_table</span><br><span class=\"line\">Rolled back: 2014_10_12_000000_create_users_table</span><br></pre></td></tr></table></figure>\n<p>再次查看数据库，发现<code>users</code>表和<code>password_resets</code>表已经被删除。修改 <code>***_create_users_table.php</code>文件，把<code>name</code>修改为<code>username</code>，之后再次支持数据库迁移。查看数据库<code>users</code>表，发现字段名已经变成了<code>username</code>。</p>\n<h3 id=\"新建articles迁移\"><a href=\"#新建articles迁移\" class=\"headerlink\" title=\"新建articles迁移\"></a>新建articles迁移</h3><p>创建一个存放博客的数据表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\wamp\\www\\laravel5&gt;php artisan make:migration create_articles_table --create=articles</span><br><span class=\"line\">Created Migration: 2015_05_11_140813_create_articles_table</span><br></pre></td></tr></table></figure>\n<p>此时， <code>database/migrations</code> 目录中会多出一个<code>***_create_articles_table.php</code>文件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Database</span>\\<span class=\"title\">Schema</span>\\<span class=\"title\">Blueprint</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Database</span>\\<span class=\"title\">Migrations</span>\\<span class=\"title\">Migration</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateArticlesTable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Migration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Run the migrations.</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">up</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t    <span class=\"title class_\">Schema</span>::<span class=\"title function_ invoke__\">create</span>(<span class=\"string\">&#x27;articles&#x27;</span>, function(Blueprint <span class=\"variable\">$table</span>)</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t\t<span class=\"variable\">$table</span>-&gt;<span class=\"title function_ invoke__\">increments</span>(<span class=\"string\">&#x27;id&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"variable\">$table</span>-&gt;<span class=\"title function_ invoke__\">timestamps</span>();</span><br><span class=\"line\">\t    &#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Reverse the migrations.</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">down</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t    <span class=\"title class_\">Schema</span>::<span class=\"title function_ invoke__\">drop</span>(<span class=\"string\">&#x27;articles&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>up()</code> 方法中创建了一个自增ID，其中的 <code>timestamps()</code> 方法会生成 <code>created_at</code> 和 <code>updated_at</code> 两个时间列。下面向其中增加一些列：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">up</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Schema</span>::<span class=\"title function_ invoke__\">create</span>(<span class=\"string\">&#x27;articles&#x27;</span>, function(Blueprint <span class=\"variable\">$table</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$table</span>-&gt;<span class=\"title function_ invoke__\">increments</span>(<span class=\"string\">&#x27;id&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$table</span>-&gt;<span class=\"keyword\">string</span>(<span class=\"string\">&#x27;title&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$table</span>-&gt;<span class=\"title function_ invoke__\">text</span>(<span class=\"string\">&#x27;body&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$table</span>-&gt;<span class=\"title function_ invoke__\">timestamps</span>();</span><br><span class=\"line\">        <span class=\"variable\">$table</span>-&gt;<span class=\"title function_ invoke__\">timestamp</span>(<span class=\"string\">&#x27;published_at&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行数据库迁移：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">php artisan migrate</span><br></pre></td></tr></table></figure>\n<p>现在数据库就多出了一个<code>articles</code>表。现在想给表中增加一个<code>excerpt</code>字段，我们可以执行回滚，然后修改原来的文件再执行迁移，也可以创建一个新的迁移文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">php artisan make:migration add_excerpt_to_articles_table —table=articles</span><br></pre></td></tr></table></figure>\n<p>如果不加 <code>--table</code> 参数，则生成的迁移文件只包含基础代码。</p>\n<p>修改新生成的文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public function up()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Schema::table(&#x27;articles&#x27;, function(Blueprint $table)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       $table-&gt;text(&#x27;excerpt&#x27;)-&gt;nullable();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public function down()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Schema::table(&#x27;articles&#x27;, function(Blueprint $table)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $table-&gt;dropColumn(&#x27;excerpt&#x27;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次执行迁移：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">php artisan migrate</span><br></pre></td></tr></table></figure>\n<p>查看数据库，此时 <code>excerpt</code> 列已增加成功。</p>\n","categories":["Web","Back","php"],"tags":["php","laravel","migrations"]},{"title":"Laravel中resource路由详细使用方法","url":"/php_laravel_resource/","content":"<p>我的学习方式是，通过自己写一个列子，来学习某个东西，这次的 laravel 也不列外</p>\n<p>这次说下，<code>laravel</code> 下的 <code>routes::resource</code> 使用方法，因为我英文水平不是很好，遇到各种坑，后来没辙，上问答社区找大神指点，终于明白了怎么回事</p>\n<p>简单说下他的功能吧</p>\n<p>我们写一个控制器，写一个方法，就得去 <code>routes</code> 里面绑定一次，其实有时候挺麻烦的，那么这个时候，有没有一个东西，绑定控制器后，下面的方法就不需要绑定了呢？有的，这就是 <code>resource</code></p>\n<p>通过列子来学习</p>\n<p>我们新建一个控制器</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">php artisan generate:controller TestController</span><br></pre></td></tr></table></figure>\n\n<p>我们要修改下我们生成的控制器，使用命名空间<br>test 控制器代码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命名空间</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">App</span>\\<span class=\"title class_\">Controllers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">BaseController</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Display a listing of the resource.</span></span><br><span class=\"line\"><span class=\"comment\">  * GET /test</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span> Response</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;index&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Show the form for creating a new resource.</span></span><br><span class=\"line\"><span class=\"comment\">  * GET /test/create</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span> Response</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Store a newly created resource in storage.</span></span><br><span class=\"line\"><span class=\"comment\">  * POST /test</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span> Response</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">store</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Display the specified resource.</span></span><br><span class=\"line\"><span class=\"comment\">  * GET /test/&#123;id&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> int $id</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span> Response</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"><span class=\"variable\">$id</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Show the form for editing the specified resource.</span></span><br><span class=\"line\"><span class=\"comment\">  * GET /test/&#123;id&#125;/edit</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> int $id</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span> Response</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">edit</span>(<span class=\"params\"><span class=\"variable\">$id</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Update the specified resource in storage.</span></span><br><span class=\"line\"><span class=\"comment\">  * PUT /test/&#123;id&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> int $id</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span> Response</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span>(<span class=\"params\"><span class=\"variable\">$id</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Remove the specified resource from storage.</span></span><br><span class=\"line\"><span class=\"comment\">  * DELETE /test/&#123;id&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> int $id</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span> Response</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">destroy</span>(<span class=\"params\"><span class=\"variable\">$id</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，我们来新建我们的路由，<code>App\\Controllers\\TestController</code> 就是我们刚刚设置的命名空间哦</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Route</span>::<span class=\"title function_ invoke__\">resource</span>(<span class=\"string\">&#x27;test&#x27;</span>,<span class=\"string\">&#x27;App\\Controllers\\TestController&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这个时候，你的控制器就与路由绑定了，</p>\n<p>我们访问 <code>localhost/tets</code> 如果输出 index ，那么绑定就成功啦！</p>\n<p>好了，绑定好了后，我们来讲讲怎么生成 url，因为使用 <code>URL::route()</code> 都是需要输入 路由的名称的，我们这次绑定整个路由，怎么输入名称呢 ？很简单</p>\n<p>就我们之前绑定的 <code>test</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">URL::<span class=\"title function_ invoke__\">route</span>(<span class=\"string\">&#x27;test.index&#x27;</span>) <span class=\"comment\">// 首页</span></span><br><span class=\"line\">URL::<span class=\"title function_ invoke__\">route</span>(<span class=\"string\">&#x27;test.edit&#x27;</span>,<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;id&#x27;</span>=&gt;<span class=\"number\">1</span>))<span class=\"comment\">// 编辑</span></span><br></pre></td></tr></table></figure>\n\n<p>很简单吧，就是你绑定时候的 名称 连接上你的方法名，</p>\n<p>！！ 注意，在后台使用，路径要写全，如： <code>admin.test.index</code></p>\n<p>然后，<code>resource</code> 只支持下面几种方法来自动绑定</p>\n","categories":["Web","Back","php"],"tags":["php","laravel"]},{"title":"Laravel安装配置dingo/api","url":"/laravel_dingoapi/","content":"<p>安装好 laravel 后 ，</p>\n<h3 id=\"开始-安装-laravel-dingo-x2F-api\"><a href=\"#开始-安装-laravel-dingo-x2F-api\" class=\"headerlink\" title=\"开始 安装 laravel dingo&#x2F;api\"></a>开始 安装 laravel dingo&#x2F;api</h3><p>按照<code>https://github.com/dingo/api/wiki/Installation</code>上面的提示 <code>composer require dingo/api:0.10.*</code>是直接报错了， 后来干脆改成了<code>composer require dingo/api</code></p>\n<h3 id=\"打开-config-app-php\"><a href=\"#打开-config-app-php\" class=\"headerlink\" title=\"打开 config/app.php\"></a>打开 <code>config/app.php</code></h3><p>接着在 <code>providers</code> 配置里面 加上 <code>Dingo\\Api\\Provider\\LaravelServiceProvider::class</code> 如下：<code>&#39;providers&#39; =&gt; [ Dingo\\Api\\Provider\\LaravelServiceProvider::class ]</code></p>\n<h3 id=\"写入-config-x2F-api-php\"><a href=\"#写入-config-x2F-api-php\" class=\"headerlink\" title=\"写入 config&#x2F;api.php\"></a>写入 config&#x2F;api.php</h3><p><code>php artisan vendor:publish --provider=&quot;Dingo\\Api\\Provider\\LaravelServiceProvider&quot;</code>这是后就在 <code>config</code>文件夹下 多出了 一个 <code>api.php</code> 文件</p>\n<h3 id=\"配置-env-文件\"><a href=\"#配置-env-文件\" class=\"headerlink\" title=\"配置 .env 文件\"></a>配置 .env 文件</h3><p>在.env 文件夹下 增加如下 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">API_CONDITIONAL_REQUEST=false</span><br><span class=\"line\">API_STRICT=false</span><br><span class=\"line\">API_DEFAULT_FORMAT=json</span><br><span class=\"line\">API_STANDARDS_TREE=vnd</span><br><span class=\"line\">;API_PREFIX=api   // 配置域名前缀</span><br><span class=\"line\">API_DOMAIN=127.0.0.1:1024 配置域名</span><br><span class=\"line\"></span><br><span class=\"line\">API_VERSION=v1 </span><br><span class=\"line\">API_DEBUG=true</span><br></pre></td></tr></table></figure>","categories":["Web","Back","php"],"tags":["php","laravel"]},{"title":"Laravel自动加载","url":"/php_laravel_autoload/","content":"<p>Laravel使用的是<code>composer</code>的自动加载。<br>首先看 <code>vendor/autoload.PHP</code>文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// autoload.php @generated by Composer</span></span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">&#x27;/composer/autoload_real.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title class_\">ComposerAutoloaderInit5586036d8fdd45ae351f9a5ae924a5a3</span>::<span class=\"title function_ invoke__\">getLoader</span>();</span><br></pre></td></tr></table></figure>\n\n<p>代码很少，查看<code>__DIR__ . &#39;/composer/autoload_real.php&#39;</code>文件。 有一个类<code>ComposerAutoloaderInit5586036d8fdd45ae351f9a5ae924a5a3</code>，该类的名字比较奇特，主要为了防止重名。回到上面的代码，可以看到调用了<code>getLoader()</code>方法；<br>看一下部分代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"literal\">null</span> !== <span class=\"built_in\">self</span>::<span class=\"variable\">$loader</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">self</span>::<span class=\"variable\">$loader</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">spl_autoload_register</span>(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;ComposerAutoloaderInit5586036d8fdd45ae351f9a5ae924a5a3&#x27;</span>,<span class=\"string\">&#x27;loadClassLoader&#x27;</span>), <span class=\"literal\">true</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"built_in\">self</span>::<span class=\"variable\">$loader</span> = <span class=\"variable\">$loader</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">\\Composer\\Autoload\\ClassLoader</span>();</span><br><span class=\"line\"><span class=\"title function_ invoke__\">spl_autoload_unregister</span>(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;ComposerAutoloaderInit5586036d8fdd45ae351f9a5ae924a5a3&#x27;</span>,<span class=\"string\">&#x27;loadClassLoader&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>这里自动加载了当前类的<code>loadClassLoader</code>静态方法，该方法加载了<code>__DIR__ . &#39;/ClassLoader.php&#39;</code>文件，该文件中的类起到了整个框架类自动加载的作用。<br>回到<code>autoload_real.php</code>文件的<code>getLoader()</code>方法，看剩下部分代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$useStaticLoader</span> = PHP_VERSION_ID &gt;=<span class=\"number\">50600</span> &amp;&amp; !<span class=\"title function_ invoke__\">defined</span>(<span class=\"string\">&#x27;HHVM_VERSION&#x27;</span>) &amp;&amp; (!<span class=\"title function_ invoke__\">function_exists</span>(<span class=\"string\">&#x27;zend_loader_file_encoded&#x27;</span>) || !<span class=\"title function_ invoke__\">zend_loader_file_encoded</span>());</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$useStaticLoader</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">&#x27;/autoload_static.php&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">call_user_func</span>(<span class=\"title class_\">\\Composer\\Autoload\\ComposerStaticInit5586036d8fdd45ae351f9a5ae924a5a3</span>::<span class=\"title function_ invoke__\">getInitializer</span>(<span class=\"variable\">$loader</span>));</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">$map</span> = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">&#x27;/autoload_namespaces.php&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"variable\">$map</span> <span class=\"keyword\">as</span> <span class=\"variable\">$namespace</span> =&gt; <span class=\"variable\">$path</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$loader</span>-&gt;<span class=\"title function_ invoke__\">set</span>(<span class=\"variable\">$namespace</span>, <span class=\"variable\">$path</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$map</span> = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">&#x27;/autoload_psr4.php&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"variable\">$map</span> <span class=\"keyword\">as</span> <span class=\"variable\">$namespace</span> =&gt; <span class=\"variable\">$path</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$loader</span>-&gt;<span class=\"title function_ invoke__\">setPsr4</span>(<span class=\"variable\">$namespace</span>, <span class=\"variable\">$path</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$classMap</span> = <span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">&#x27;/autoload_classmap.php&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$classMap</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$loader</span>-&gt;<span class=\"title function_ invoke__\">addClassMap</span>(<span class=\"variable\">$classMap</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里主要加载一些自动加载类相关的资源。</p>\n<p>随后调用<code>$loader-&gt;register(true);</code><br>这个方法比较重要</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">register</span>(<span class=\"params\"><span class=\"variable\">$prepend</span> = <span class=\"literal\">false</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">spl_autoload_register</span>(<span class=\"keyword\">array</span>(<span class=\"variable\">$this</span>, <span class=\"string\">&#x27;loadClass&#x27;</span>), <span class=\"literal\">true</span>, <span class=\"variable\">$prepend</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注册了<code>loadClass</code>方法，并且是放在队列的head。</p>\n<p>查看<code>loadClass</code>方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Loads the given class or interface.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span>  string    $class The name of the class</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> bool|null True if loaded, null otherwise</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadClass</span>(<span class=\"params\"><span class=\"variable\">$class</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$file</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">findFile</span>(<span class=\"variable\">$class</span>)) &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">includeFile</span>(<span class=\"variable\">$file</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当实例化类的时候，找不到类，就自动会调用该方法，该方法加载了需要的类，这个方法十分重要。</p>\n<p>现在看一下<code>$this-&gt;findFile($class)</code>方法内使用了之前<code>getLoader()</code>方法加载的相关资源。</p>\n<p>现在整<code>个Laravel</code>框架如何自动加载类已经很明显了。每当实例化类的时候，会自动调用<code>ClassLoader的loadClass</code>方法，加载需要的类。</p>\n","categories":["Web","Back","php"],"tags":["php","laravel"]},{"title":"laravel5 Unable to prepare route [/] for serialization. Uses Closure.","url":"/php_laravel_err_cache/","content":"<p>laravel5的路由支持缓存。需要执行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">php artisan route:cache</span><br></pre></td></tr></table></figure>\n<p>执行完毕后，报出以下错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Route cache cleared!</span><br><span class=\"line\">[LogicException]</span><br><span class=\"line\">Unable to prepare route [/] for serialization. Uses Closure.</span><br></pre></td></tr></table></figure>\n\n<p>这个异常的错误信息，提示的已经非常明确了：大概意思就是说在闭包里边，是不能够进行路由缓存的。那么现在就有两种办法：<br>① 想要继续使用闭包，那就只能放弃路由缓存(至少目前我没有其他办法，如果你有，记得告诉我)。<br>② 那就是在路由里边，也就是<code>route.php</code>中，不要使用闭包的方式，统统改为控制器。</p>\n<p>具体例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 之前，报错的路由</span><br><span class=\"line\">Route::get(&#x27;/&#x27;, function()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">return veiw(&#x27;welcome&#x27;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改之后，能够路由缓存的方式</span><br><span class=\"line\">Route::get(&#x27;/&#x27;, &#x27;HomeController@index&#x27;);</span><br></pre></td></tr></table></figure>\n<p>现在就搞定啦。再次执行 <code>php artisan route:cache</code> 可以看到成功的信息提示啦：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Route cache cleared!</span><br><span class=\"line\">Routes cached successfully!</span><br></pre></td></tr></table></figure>","categories":["Web","Back","php"],"tags":["laravel","laravel5"]},{"title":"Laravel之设计模式","url":"/php_laravel_patterns/","content":"<h2 id=\"laravel的面向对象编程原则\"><a href=\"#laravel的面向对象编程原则\" class=\"headerlink\" title=\"laravel的面向对象编程原则\"></a>laravel的面向对象编程原则</h2><ul>\n<li>1：使用<code>namespace</code>防止命名冲突</li>\n<li>2：使用<code>autoload</code>来自动加载函数<br>使用<code>ArrayAccess</code>实现配置文件的加载，使一个对象可以通过数组的方式访问。<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Config implements \\ArrayAccess &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected $path;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected $configs = array();</span><br><span class=\"line\"></span><br><span class=\"line\">  function __construct($path) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;path = $path;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function offsetGet($key) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (empty($this-&gt;configs[$key])) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      $file_path = $this-&gt;path.’/’.$key.’.php’;</span><br><span class=\"line\"></span><br><span class=\"line\">      $config = require $file_path;</span><br><span class=\"line\"></span><br><span class=\"line\">      $this-&gt;configs[$key] = $config;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return $this-&gt;configs[$Key];</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function offsetSet($key, $value) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    throw new \\Exception(“cannot write config file.”);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function offsetExists($key) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return isset($this-&gt;configs[$key];</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function offsetUnset($key) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    unset($this-&gt;configs[$key]);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $config = new Config(__dirname__.’/configs’);</span><br><span class=\"line\"></span><br><span class=\"line\">  $whatkey = $config[‘what_key’];</span><br></pre></td></tr></table></figure></li>\n<li>3：psr-4规范</li>\n<li>4：链式调用<br>只要在方法的最后：return $this;</li>\n<li>5：魔术方法<ul>\n<li>1）访问不存在的属性，__set()和__get()</li>\n<li>2）调用不存在的方法 __call()和__callstatic()</li>\n<li>3）对象作为字符串使用，__toString()</li>\n<li>4）对象作为方法使用，__invoke()</li>\n</ul>\n</li>\n<li>6：单一职责<br>一个文件只有一个类，一个类只做好一件事，尽量不要复杂。</li>\n<li>7：开放封闭原则<br>一个类的功能应该是可扩展而不可修改的。</li>\n<li>8：依赖倒置<br>一个类不应该强依赖另一个类，每个类对于另一个类都是可替换的。</li>\n<li>9：配置化<br>尽可能的使用配置而不是硬编码。</li>\n<li>10：面向接口编程<br>只需要关心接口，不需要关心实现。</li>\n</ul>\n<h2 id=\"设计模式的实现\"><a href=\"#设计模式的实现\" class=\"headerlink\" title=\"设计模式的实现\"></a>设计模式的实现</h2><h3 id=\"1：工厂模式\"><a href=\"#1：工厂模式\" class=\"headerlink\" title=\"1：工厂模式\"></a>1：工厂模式</h3><p>例如：<code>Auth::user()</code></p>\n<p>此处Auth这个类就是工厂中的方法，Auth是注册树中的别名。</p>\n<p>好处：</p>\n<p>类似于函数的封装，使对象有一个统一的生成（实例化）入口。当我们对象所对应的类的类名发生变化的时候，我们只需要改一下工厂类类里面的实例化方法即可。</p>\n<h3 id=\"2：单例模式\"><a href=\"#2：单例模式\" class=\"headerlink\" title=\"2：单例模式\"></a>2：单例模式</h3><p>好处：</p>\n<p>对象不可外部实例化并且只能实例化一次，节省资源。</p>\n<p>实现方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">private static $ins = null;                                                //设置私有的属性</span><br><span class=\"line\"></span><br><span class=\"line\">private function __construct() &#123;&#125;                                       //使外部无法new这个类</span><br><span class=\"line\"></span><br><span class=\"line\">public static function getIns() &#123;                                        //暴露给外部的调用方法</span><br><span class=\"line\"></span><br><span class=\"line\">  if(self::$ins instanceof self) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return self::$ins;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    self::$ins = new self();</span><br><span class=\"line\"></span><br><span class=\"line\">    return self::$ins;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>声明一个类的私有或者保护的静态变量，构造方法声明为私有（不允许外部进行new操作），如果不存在则实例化它，然后返回，如果存在则直接返回。</p>\n<h3 id=\"3：注册树模式\"><a href=\"#3：注册树模式\" class=\"headerlink\" title=\"3：注册树模式\"></a>3：注册树模式</h3><p>使用：</p>\n<p><code>config/app</code>里的<code>aliases</code>数组便是一个注册树</p>\n<p>好处：</p>\n<p>注册树模式就是使用数组结构来存取对象，工厂方法只需要调用一次（可以放到系统环境初始化这样的地方），以后需要调用该对象的时候直接从注册树上面取出来即可，不需要再调用工厂方法和单例模式。</p>\n<p>实现方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Register &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected static $objects</span><br><span class=\"line\"></span><br><span class=\"line\">  function set($alias,$object) &#123;                            //将对象映射到全局树上</span><br><span class=\"line\"></span><br><span class=\"line\">    self::$objects[$alias]=$object;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static function get($name) &#123;                             //获取对象</span><br><span class=\"line\"></span><br><span class=\"line\">    return self::$objects[$name];</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function _unset($alias) &#123;                                  //从全局树移除对象</span><br><span class=\"line\"></span><br><span class=\"line\">    unset(self::$onjects[$alias]);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>$alias</code>表示别名，自己设定</p>\n<p>在工厂模式中添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Register::set(‘db1’,$db);</span><br></pre></td></tr></table></figure>\n\n<p>其他任何地方调用只需要调用注册器读取即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Register::$objects[‘db1’];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4：适配器模式\"><a href=\"#4：适配器模式\" class=\"headerlink\" title=\"4：适配器模式\"></a>4：适配器模式</h3><p>将不同工具的不同函数接口封装成统一的API，方便调用。如：<code>mysql</code>，<code>mysqli</code>，<code>PDO</code>。</p>\n<p>实现：在接口类里面申明统一的方法体，再让不同的类去实现这个接口，和重写其抽象方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Database &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  function connect($host,$user,$password,$dbname);</span><br><span class=\"line\"></span><br><span class=\"line\">  function query($sql);</span><br><span class=\"line\"></span><br><span class=\"line\">  function close();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后再去用不同的工具函数去实现相同的接口。</p>\n<h3 id=\"5：策略模式\"><a href=\"#5：策略模式\" class=\"headerlink\" title=\"5：策略模式\"></a>5：策略模式</h3><p>好处：</p>\n<p>将一组特定的行为和算法封装成类，以适应某些特定的上下文环境，将逻辑判断和具体实现分离，实现了硬编码到解耦，并可实现IOC、依赖倒置、反转控制。</p>\n<p>实现：</p>\n<p>1.定义一个策略接口文件(<code>UserStrategy.php</code>)，定义策略接口，声明策略</p>\n<p>2.定义具体类(<code>FemaleUserStrategy.php</code>，<code>MaleUserStrategy.php</code>)，实现策略接口，重写策略方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Page &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected $strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">  function index() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if($request-&gt;get(‘female’)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      $strategy=new FemaleUserStrategy();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      $strategy=new MaleUserStrategy();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;strategy-&gt;method();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public function __construct(UserStrategy $strategy) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;strategy=$strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6：数据对象映射模式\"><a href=\"#6：数据对象映射模式\" class=\"headerlink\" title=\"6：数据对象映射模式\"></a>6：数据对象映射模式</h3><p>好处：将对象和数据存储映射起来，对一个对象的操作会映射为对数据存储的操作，这也是ORM的实现机制。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Model &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  public $id;</span><br><span class=\"line\"></span><br><span class=\"line\">  public $name;</span><br><span class=\"line\"></span><br><span class=\"line\">  public $email;</span><br><span class=\"line\"></span><br><span class=\"line\">  ……</span><br><span class=\"line\"></span><br><span class=\"line\">  function __construct($id) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //构造函数，调用class时自动执行，用来初始化。</span><br><span class=\"line\"></span><br><span class=\"line\">    //查询逻辑</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function __destruct() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //析构函数，当class调用完成后自动执行，用它来销毁实例，释放资源。</span><br><span class=\"line\"></span><br><span class=\"line\">    //增删改逻辑</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-观察者模式\"><a href=\"#7-观察者模式\" class=\"headerlink\" title=\"7:观察者模式\"></a>7:观察者模式</h3><p>使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Event::fire(new /event);</span><br></pre></td></tr></table></figure>\n<p>好处：</p>\n<p>当一个对象状态发生改变时，依赖它的对象全部会收到通知并自动更新，实现低耦合，非侵入式的通知与更新机制。</p>\n<p>(PS:有关<code>abstract</code>和<code>interface</code>：<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3VubHlsb3JuL2FydGljbGUvZGV0YWlscy82MTI0MzE5\">http://blog.csdn.net/sunlylorn/article/details/6124319<i class=\"fa fa-external-link-alt\"></i></span>)</p>\n<p>实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">EventGenerator.php                                            //事件产生者</span><br><span class=\"line\"></span><br><span class=\"line\">abstract class EventGenerator&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private $obserers = array();                        //观察者对事件发生者不可见</span><br><span class=\"line\"></span><br><span class=\"line\">  function addObsever(Observer $observer) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;obserers[] = $observer;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function ontify() &#123;                                        //逐个调用观察者的handle方法</span><br><span class=\"line\"></span><br><span class=\"line\">    foreach ($this-&gt;obserers as $observer)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      $observer-&gt;handle();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>event.php                                                           &#x2F;&#x2F;事件类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Event extends EventGenerator&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  function trigger()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;ontify();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Observer.php                                                             &#x2F;&#x2F;观察者接口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Observer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  function update($event_info = null);                    //更新操作，可接受事件信息参数</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Observer1.php                                                           &#x2F;&#x2F;EventListener</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Observer1 implements Observer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  function handle($event_info = null)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    echo “逻辑1”;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>index.php                                                                   &#x2F;&#x2F;Controller中function</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$event = new \\Event();</span><br><span class=\"line\"></span><br><span class=\"line\">$event-&gt;addObsever(new \\Observer1());</span><br><span class=\"line\"></span><br><span class=\"line\">$event-&gt;trigger();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8：原型模式\"><a href=\"#8：原型模式\" class=\"headerlink\" title=\"8：原型模式\"></a>8：原型模式</h3><p>与工厂模式类似，用于创建对象，不同在于：原型模式是先创建好一个原型对象，再通过clone原型对象来创建新的对象，原型模式适用于大对象的创建，仅需要内存拷贝即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$Object = new Object();</span><br><span class=\"line\"></span><br><span class=\"line\">$object_1 = clone $Object;</span><br><span class=\"line\"></span><br><span class=\"line\">$object_2 = clone $Object;</span><br><span class=\"line\"></span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9：装饰器模式\"><a href=\"#9：装饰器模式\" class=\"headerlink\" title=\"9：装饰器模式\"></a>9：装饰器模式</h3><p>若要修改或添加一个类的功能，传统的方式是写一个子类继承它，并重新实现类的方法。装饰器模式仅需在运行时添加一个装饰器对象即可动态的添加或修改类的功能。</p>\n<p>传统方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Method2 extends Method &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  function doSomething() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    echo “&lt;div style=’color:red’&gt;”</span><br><span class=\"line\"></span><br><span class=\"line\">    parent::doSomething();</span><br><span class=\"line\"></span><br><span class=\"line\">    echo “&lt;/div&gt;”;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interfa Decorator &#123;                                             //定义装饰器接口</span><br><span class=\"line\"></span><br><span class=\"line\">  function beforeAction();</span><br><span class=\"line\"></span><br><span class=\"line\">  function afterAction();</span><br><span class=\"line\"></span><br><span class=\"line\">  //more decoratorMethod……</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class SomeClass &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected $decorators = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  function addDecorator(Decorator $decorator) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  $this-&gt;decorators[] = $decorator;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function beforeMethod() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    foreach ($this-&gt;decorators as $row) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      $row-&gt;beforeAction();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function afterMethod() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    decorators = array_reverse($this-&gt;decorators);     //做一个反转</span><br><span class=\"line\"></span><br><span class=\"line\">    foreach ($this-&gt;decorators as $row) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      $row-&gt;afterAction();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function action() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;beforeMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">    //method;</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;afterMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class OneDecorator implements Decorator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected $datas;</span><br><span class=\"line\"></span><br><span class=\"line\">  function __construct($datas = ‘request’) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;datas = $datas;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function beforeAction() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    echo “&lt;div style=’color:&#123;$this-&gt;datas&#125;;’&gt;”;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function afterAction() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    echo “&lt;/div&gt;”;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$Object = new \\SomeClass();</span><br><span class=\"line\"></span><br><span class=\"line\">$Object-&gt;addDecorator(new \\OneDecorator(‘blue’));</span><br><span class=\"line\"></span><br><span class=\"line\">//Add other decorator…</span><br><span class=\"line\"></span><br><span class=\"line\">$Object-&gt;action();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-迭代器模式\"><a href=\"#10-迭代器模式\" class=\"headerlink\" title=\"10:迭代器模式\"></a>10:迭代器模式</h3><p>在不需要了解内部实现的前提下，遍历一个聚合对象的内部元素，相对于传统编程方式它可以遍历元素所需的操作。</p>\n<p>例如：<code>Object::all()</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Iterator extends Traversable &#123;                       //PHP内置迭代器接口</span><br><span class=\"line\"></span><br><span class=\"line\">  /* 方法 */</span><br><span class=\"line\"></span><br><span class=\"line\">  abstract public mixed current (void)</span><br><span class=\"line\"></span><br><span class=\"line\">  abstract public scalar key (void)</span><br><span class=\"line\"></span><br><span class=\"line\">  abstract public void next (void)</span><br><span class=\"line\"></span><br><span class=\"line\">  abstract public void rewind (void)</span><br><span class=\"line\"></span><br><span class=\"line\">  abstract public boolean valid (void)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ObjectAll implements \\Iterator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  protected $ids;                      //所有对象的id</span><br><span class=\"line\"></span><br><span class=\"line\">  protected $index;                  //迭代器的当前位置</span><br><span class=\"line\"></span><br><span class=\"line\">  protected $data = array();     //保存从数据库取到的所有对象</span><br><span class=\"line\"></span><br><span class=\"line\">  function __construct() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //取出所有的id，$ids</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function current() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取当前的元素的数据，第三个调用</span><br><span class=\"line\"></span><br><span class=\"line\">    $id = $this-&gt;ids[$this-&gt;index][‘id’];</span><br><span class=\"line\"></span><br><span class=\"line\">    return Object::find($id);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function next() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取下一个元素，第四个调用</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;index ++;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function valid() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //验证当前元素是否还有下一个元素（查询当前是否有数据），第二个调用</span><br><span class=\"line\"></span><br><span class=\"line\">    return $this-&gt;index &lt; count($this-&gt;$ids);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function rewind() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //当迭代器执行到末尾时，重置迭代器到整个集合的开头，最先调用</span><br><span class=\"line\"></span><br><span class=\"line\">    $this-&gt;index = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function key() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取当前的索引，最后调用</span><br><span class=\"line\"></span><br><span class=\"line\">    return $this-&gt;index;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$objects = new \\ObjectAll();</span><br><span class=\"line\"></span><br><span class=\"line\">foreach ($objects as $row) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  dump($row-&gt;field);</span><br><span class=\"line\"></span><br><span class=\"line\">//增删改查操作</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-代理模式\"><a href=\"#11-代理模式\" class=\"headerlink\" title=\"11:代理模式\"></a>11:代理模式</h3><p>在客户端与实体之间建立一个代理对象，客户端对实体进行操作全部委派给代理对象，隐藏实体的具体实现细节（读库与写库分离）。代理对象还可以与业务代码分离，部署到另外的服务器，业务代码中通过PRC来委派任务。</p>\n<p>有关mysql的<code>master-slave</code>：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9qaXJnbHQvcC8zNTQ5MDQ3Lmh0bWw=\">http://www.cnblogs.com/jirglt/p/3549047.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface DBproxy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  function getInfo($id);</span><br><span class=\"line\"></span><br><span class=\"line\">  function setInfo($id, $value);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Proxy implements DBproxy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  function get() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //DB::(‘slave’);</span><br><span class=\"line\"></span><br><span class=\"line\">    query</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function set() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //DB::(‘master’);</span><br><span class=\"line\"></span><br><span class=\"line\">    query</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$proxy = new Proxy();</span><br><span class=\"line\"></span><br><span class=\"line\">$proxy-&gt;get($id);</span><br><span class=\"line\"></span><br><span class=\"line\">$proxy-&gt;set($id, $value);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12：MVC结构（非设计模式，而是一种工程组织结构）\"><a href=\"#12：MVC结构（非设计模式，而是一种工程组织结构）\" class=\"headerlink\" title=\"12：MVC结构（非设计模式，而是一种工程组织结构）\"></a>12：MVC结构（非设计模式，而是一种工程组织结构）</h3><p>1：<code>model</code>——数据和存储的封装</p>\n<p>2：<code>view</code>——展现层的封装</p>\n<p>3：<code>controller</code>——逻辑层（业务代码，功能）的封装</p>\n","categories":["Web","Back","php"],"tags":["php","laravel","设计模式"]},{"title":"php多线程之curl_multi","url":"/php_thread_curl_multi/","content":"<p>大家都知道php没有多线程，这也是弱于java等高级语言的表现之一。</p>\n<p>但有时候我们还是需要php同时做一些操作，这时候我们可以借助服务器的多程线来实现。</p>\n<p>自然就会想起 <code>curl_multi_*</code>系列函数，这些函数说明并不详细，例子也很少。</p>\n<p>一般来说，想到要用这些函数时，目的显然应该是要同时请求多个url，而不是一个一个依次请求。</p>\n<p>步骤总结如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">第一步：调用curl_multi_init</span><br><span class=\"line\">第二步：循环调用curl_multi_add_handle</span><br><span class=\"line\">这一步需要注意的是，curl_multi_add_handle的第二个参数是由curl_init而来的子handle。</span><br><span class=\"line\">第三步：持续调用curl_multi_exec</span><br><span class=\"line\">第四步：根据需要循环调用curl_multi_getcontent获取结果</span><br><span class=\"line\">第五步：调用curl_multi_remove_handle，并为每个字handle调用curl_close</span><br><span class=\"line\">第六步：调用curl_multi_close</span><br></pre></td></tr></table></figure>\n<p>————————— 以下例子为本人测试时使用  —————————-</p>\n<p>背景:</p>\n<p>1.在test数据库下建立test</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">use test;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `test` (</span><br><span class=\"line\">`id` int(11) NOT NULL auto_increment,</span><br><span class=\"line\">`record_date` datetime NOT NULL,</span><br><span class=\"line\">PRIMARY KEY   (`id`)</span><br><span class=\"line\">) ENGINE=MyISAM   DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>\n<p>2.在虚拟目录下建立相关测试目录和两个文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/www/test/curl_multi/index.php &amp; do.php</span><br></pre></td></tr></table></figure>\n\n<p>[php] view plaincopy</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?</span><br><span class=\"line\">/**</span><br><span class=\"line\">* @Author:  Ewing</span><br><span class=\"line\">* @Date: 2010-10-10</span><br><span class=\"line\">* @File:curl/multi/index.php</span><br><span class=\"line\">* @Desc: make multi action</span><br><span class=\"line\">*/</span><br><span class=\"line\">$t=getTime();</span><br><span class=\"line\">$total=60;//由测试得少于64个线程运行一次没有延迟，太多的话可能是apache的原因，效果并不理想，大家可以自己输入不同的值测试</span><br><span class=\"line\">for($i=0;$i&lt;$total;$i++)</span><br><span class=\"line\">    $url_arr[]=“http://localhost/test/curl_multi/do.php?i=$i”;</span><br><span class=\"line\">$mh = curl_multi_init();</span><br><span class=\"line\">foreach ($url_arr as $i =&gt; $url) &#123;</span><br><span class=\"line\">  $conn[$i]=curl_init($url);</span><br><span class=\"line\">  curl_setopt($conn[$i],CURLOPT_RETURNTRANSFER,1);//设置返回do.php页面输出内容</span><br><span class=\"line\">  curl_multi_add_handle ($mh,$conn[$i]);//添加线程</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#—————-执行线程—————-</span><br><span class=\"line\">//do&#123;$n=curl_multi_exec($mh,$active); &#125;while($active); //网上说些方法有时会让CPU达100%</span><br><span class=\"line\">do&#123;</span><br><span class=\"line\">  $mrc = curl_multi_exec($mh,$active);</span><br><span class=\"line\">&#125;while($mrc == CURLM_CALL_MULTI_PERFORM);</span><br><span class=\"line\">while($active and $mrc == CURLM_OK)&#123;</span><br><span class=\"line\">  if(curl_multi_select($mh) != -1)&#123;</span><br><span class=\"line\">    do&#123;</span><br><span class=\"line\">      $mrc = curl_multi_exec($mh, $active);</span><br><span class=\"line\">    &#125;while($mrc == CURLM_CALL_MULTI_PERFORM);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#——————————-</span><br><span class=\"line\">foreach($url_arr as $i =&gt; $url)&#123;</span><br><span class=\"line\">  $res[$i]=curl_multi_getcontent($conn[$i]);//得到页面输入内容</span><br><span class=\"line\">  curl_close($conn[$i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foreach($res as $k=&gt;$v)&#123;</span><br><span class=\"line\">  $k=str_pad($k,2,0);</span><br><span class=\"line\">  echo “$k =&gt; $v &lt;br&gt;”;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">runTime($t);</span><br><span class=\"line\">#———– calculate time function————-</span><br><span class=\"line\">function getTime()&#123;</span><br><span class=\"line\">  $TIME=explode(“ ”,microtime());</span><br><span class=\"line\">  $TIME=$TIME[1].substr($TIME[0],1);</span><br><span class=\"line\">  return $TIME;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function runTime($t,$l=3)&#123;</span><br><span class=\"line\">  $dif=getTime()-$t;</span><br><span class=\"line\">  echo ‘ ’.number_format($dif,$l);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>[c-sharp] view plaincopy</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?</span><br><span class=\"line\">/**</span><br><span class=\"line\">* @Author: Ewing</span><br><span class=\"line\">* @Date: 2010-10-10</span><br><span class=\"line\">* @File:curl/multi/do.php</span><br><span class=\"line\">* @Desc: do something here</span><br><span class=\"line\">*/</span><br><span class=\"line\">$t=getTime();</span><br><span class=\"line\">sleep(mt_rand(1,3));//设置延迟</span><br><span class=\"line\">//数据库处理</span><br><span class=\"line\">mysql_connect(“localhost”,“root”,“your_password”);</span><br><span class=\"line\">mysql_select_db(“test”);</span><br><span class=\"line\">mysql_query(“insert into test(record_date) value(NOW())”);</span><br><span class=\"line\">//文件处理</span><br><span class=\"line\">$file=‘./test.txt’;</span><br><span class=\"line\">$fp=fopen($file,‘a’);</span><br><span class=\"line\">flock($fp, LOCK_EX);</span><br><span class=\"line\">fwrite($fp,date(‘H:i:s’).“/n/r”);</span><br><span class=\"line\">fclose($fp);</span><br><span class=\"line\">echo date(‘H:i:s’);</span><br><span class=\"line\">runTime($t);</span><br><span class=\"line\">#————-calculate time function————</span><br><span class=\"line\">function getTime()&#123;</span><br><span class=\"line\">  $TIME=explode(“ ”,microtime());</span><br><span class=\"line\">  $TIME=$TIME[1].substr($TIME[0],1);</span><br><span class=\"line\">  return $TIME;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function runTime($t,$l=3)&#123;</span><br><span class=\"line\">  $dif=getTime()-$t;</span><br><span class=\"line\">  echo ‘ ’.number_format($dif,$l);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>在浏览器上打开 <code>http://localhost/test/curl_multi/</code> 即可看到效果</p>\n<p>ps:以上例子只是用于本地处理多线程，用多线程取网页数据也是可以的，只要把<code>index.php</code>中的<code>$url_arr</code>换成外网的url即可。不过建议不要一次拿太多的url，不然会有意想不到的结果哦，想知道是什么？自己试试吧。</p>\n","categories":["Web","Back","php"],"tags":["php","多线程"]},{"title":"Php多线程系列之libevent","url":"/php_thread_libeven/","content":"<p><code>libevent</code>是一个基于事件驱动的高性能网络库。支持多种 <code>I/O</code> 多路复用技术， <code>epoll</code>、 <code>poll</code>、 <code>dev/poll</code>、 <code>select</code> 和 <code>kqueue</code> 等；支持 <code>I/O</code>，定时器和信号等事件；注册事件优先级。</p>\n<h2 id=\"PHP-libevent扩展安装\"><a href=\"#PHP-libevent扩展安装\" class=\"headerlink\" title=\"PHP libevent扩展安装\"></a>PHP libevent扩展安装</h2><p>libevent扩展依赖于原始的<code>libevent</code>库，必须先把libevent库安装。</p>\n<h3 id=\"1-安装libevent库\"><a href=\"#1-安装libevent库\" class=\"headerlink\" title=\"(1)安装libevent库\"></a>(1)安装libevent库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://cloud.github.com/downloads/libevent/libevent/libevent-2.0.20-stable.tar.gz</span><br><span class=\"line\">tar zxvf libevent–2.0.20–stable.tar.gz</span><br><span class=\"line\">cd libevent–2.0.20–stable/</span><br><span class=\"line\">./configure —prefix=/usr/local/libevent–2.0.20/</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-安装libevent扩展\"><a href=\"#2-安装libevent扩展\" class=\"headerlink\" title=\"(2)安装libevent扩展\"></a>(2)安装<span class=\"exturl\" data-url=\"aHR0cDovL3BlY2wucGhwLm5ldC9wYWNrYWdlL2xpYmV2ZW50\">libevent扩展<i class=\"fa fa-external-link-alt\"></i></span></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://pecl.php.net/get/libevent-0.1.0.tgz</span><br><span class=\"line\">tar –zxvf libevent–0.1.0.tgz</span><br><span class=\"line\">cd libevent–0.1.0</span><br><span class=\"line\">./configure —with–php–config=/usr/local/php54/bin/php–config —with–libevent=/usr/local/libevent–2.0.20/</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">#php.ini添加extension=libevent.so</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PHP-Libevent扩展介绍：\"><a href=\"#PHP-Libevent扩展介绍：\" class=\"headerlink\" title=\"PHP Libevent扩展介绍：\"></a>PHP Libevent扩展介绍：</h2><h3 id=\"1-常量\"><a href=\"#1-常量\" class=\"headerlink\" title=\"(1)常量\"></a>(1)常量</h3><p>libevent1.png</p>\n<h3 id=\"2-函数\"><a href=\"#2-函数\" class=\"headerlink\" title=\"(2)函数\"></a>(2)函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">event_base_free() 释放资源，这不能销毁绑定事件</span><br><span class=\"line\">event_base_loop() 处理事件，根据指定的base来处理事件循环</span><br><span class=\"line\">event_base_loopbreak() 立即取消事件循环，行为各break语句相同</span><br><span class=\"line\">event_base_loopexit() 在指定的时间后退出循环</span><br><span class=\"line\">event_base_new() 创建并且初始事件</span><br><span class=\"line\">event_base_priority_init() 设定事件的优先级</span><br><span class=\"line\">event_base_set() 关联事件到事件base</span><br><span class=\"line\">event_buffer_base_set() 关联缓存的事件到event_base</span><br><span class=\"line\">event_buffer_disable() 禁用一个缓存的事件</span><br><span class=\"line\">event_buffer_enable() 启用一个指定的缓存的事件</span><br><span class=\"line\">event_buffer_fd_set() 改变一个缓存的文件系统描述</span><br><span class=\"line\">event_buffer_free() 释放缓存事件</span><br><span class=\"line\">event_buffer_new() 建立一个新的缓存事件</span><br><span class=\"line\">event_buffer_priority_set() 缓存事件的优先级设定</span><br><span class=\"line\">event_buffer_read() 读取缓存事件中的数据</span><br><span class=\"line\">event_buffer_set_callback() 给缓存的事件设置或重置回调hansh函数</span><br><span class=\"line\">event_buffer_timeout_set() 给一个缓存的事件设定超时的读写时间</span><br><span class=\"line\">event_buffer_watermark_set 设置读写事件的水印标记</span><br><span class=\"line\">event_buffer_write() 向缓存事件中写入数据</span><br><span class=\"line\">event_add() 向指定的设置中添加一个执行事件</span><br><span class=\"line\">event_del() 从设置的事件中移除事件</span><br><span class=\"line\">event_free() 清空事件句柄</span><br><span class=\"line\">event_new() 创建一个新的事件</span><br><span class=\"line\">event_set() 准备想要在event_add中添加事件</span><br><span class=\"line\">PHP Libevent扩展使用：</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><h3 id=\"例1-5s后触发callback\"><a href=\"#例1-5s后触发callback\" class=\"headerlink\" title=\"例1:5s后触发callback\"></a>例1:5s后触发callback</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$base = event_base_new();</span><br><span class=\"line\">$event = event_new();</span><br><span class=\"line\"></span><br><span class=\"line\">event_set($event, 0, EV_TIMEOUT, function() &#123;</span><br><span class=\"line\">  echo “function called”;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">event_base_set($event, $base);</span><br><span class=\"line\"></span><br><span class=\"line\">event_add($event, 5000000);</span><br><span class=\"line\">event_base_loop($base);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例2：打印输入流\"><a href=\"#例2：打印输入流\" class=\"headerlink\" title=\"例2：打印输入流\"></a>例2：打印输入流</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function print_line($fd, $events, $arg)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  static $max_requests = 0;</span><br><span class=\"line\">  $max_requests++;</span><br><span class=\"line\">  if ($max_requests == 10) &#123;</span><br><span class=\"line\">    // exit loop after 10 writes</span><br><span class=\"line\">    event_base_loopexit($arg[1]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  echo fgets($fd);</span><br><span class=\"line\"></span><br><span class=\"line\">?</span><br><span class=\"line\">// create base and event</span><br><span class=\"line\">$base = event_base_new();</span><br><span class=\"line\">$event = event_new();</span><br><span class=\"line\"></span><br><span class=\"line\">$fd = STDIN;</span><br><span class=\"line\">// set event flags</span><br><span class=\"line\">event_set($event, $fd, EV_READ | EV_PERSIST, ‘print_line’, array($event, $base));</span><br><span class=\"line\">// set event base</span><br><span class=\"line\">event_base_set($event, $base);</span><br><span class=\"line\">// enable event</span><br><span class=\"line\">event_add($event);</span><br><span class=\"line\">// start event loop</span><br><span class=\"line\">event_base_loop($base);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例3：实现简单web-server\"><a href=\"#例3：实现简单web-server\" class=\"headerlink\" title=\"例3：实现简单web server\"></a>例3：实现简单web server</h3><p>在cli执行后，打开浏览器2000端口试试看。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$socket = stream_socket_server (‘tcp://0.0.0.0:2000’, $errno, $errstr);</span><br><span class=\"line\">stream_set_blocking($socket, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">$base = event_base_new();</span><br><span class=\"line\">$event = event_new();</span><br><span class=\"line\">event_set($event, $socket, EV_READ | EV_PERSIST, ‘ev_accept’, $base);</span><br><span class=\"line\">event_base_set($event, $base);</span><br><span class=\"line\">event_add($event);</span><br><span class=\"line\">event_base_loop($base);</span><br><span class=\"line\"></span><br><span class=\"line\">function ev_accept($socket, $flag, $base)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  $connection = stream_socket_accept($socket);</span><br><span class=\"line\">  stream_set_blocking($connection, 0);</span><br><span class=\"line\">  </span><br><span class=\"line\">  $buffer = event_buffer_new($connection, ‘ev_read’, NULL, ‘ev_error’, $connection);</span><br><span class=\"line\">  event_buffer_base_set($buffer, $base);</span><br><span class=\"line\">  event_buffer_timeout_set($buffer, 30, 30);</span><br><span class=\"line\">  event_buffer_watermark_set($buffer, EV_READ, 0, 0xffffff);</span><br><span class=\"line\">  event_buffer_priority_set($buffer, 10);</span><br><span class=\"line\">  event_buffer_enable($buffer, EV_READ | EV_PERSIST);</span><br><span class=\"line\">  </span><br><span class=\"line\">  $GLOBALS[‘_’] = $buffer; //这个buffer一定要赋给个全局的变量 貌似是传值过程中的bug 或者5.3.8的闭包还是有问题？</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function ev_error($buffer, $error, $connection)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  event_buffer_disable($buffer, EV_READ | EV_WRITE);</span><br><span class=\"line\">  event_buffer_free($buffer);</span><br><span class=\"line\">  fclose($connection);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function ev_read($buffer, $connection)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  while ($read = event_buffer_read($buffer, 256)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fwrite($connection , date(‘Y-m-d H:i:s’));</span><br><span class=\"line\">  ev_error($buffer , ” , $connection);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Web","Back","php"],"tags":["php","多线程"]},{"title":"Php多线程系列之stream_*","url":"/php_thread_stream/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">stream_bucket_append函数：为队列添加数据</span><br><span class=\"line\">stream_bucket_make_writeable函数：从操作的队列中返回一个数据对象</span><br><span class=\"line\">stream_bucket_new函数：为当前队列创建一个新的数据</span><br><span class=\"line\">stream_bucket_prepend函数：预备数据到队列</span><br><span class=\"line\">stream_context_create函数：创建数据流上下文</span><br><span class=\"line\">stream_context_get_default函数：获取默认的数据流上下文</span><br><span class=\"line\">stream_context_get_options函数：获取数据流的设置</span><br><span class=\"line\">stream_context_set_option函数：对数据流、数据包或者上下文进行设置</span><br><span class=\"line\">stream_context_set_params函数：为数据流、数据包或者上下文设置参数</span><br><span class=\"line\">stream_copy_to_stream函数：在数据流之间进行复制操作</span><br><span class=\"line\">stream_filter_append函数：为数据流添加过滤器</span><br><span class=\"line\">stream_filter_prepend函数：为数据流预备添加过滤器</span><br><span class=\"line\">stream_filter_register函数：注册一个数据流的过滤器并作为PHP类执行</span><br><span class=\"line\">stream_filter_remove函数：从一个数据流中移除过滤器</span><br><span class=\"line\">stream_get_contents函数：读取数据流中的剩余数据到字符串</span><br><span class=\"line\">stream_get_filters函数：返回已经注册的数据流过滤器列表</span><br><span class=\"line\">stream_get_line函数：按照给定的定界符从数据流资源中获取行</span><br><span class=\"line\">stream_get_meta_data函数：从封装协议文件指针中获取报头/元数据</span><br><span class=\"line\">stream_get_transports函数：返回注册的Socket传输列表</span><br><span class=\"line\">stream_get_wrappers函数：返回注册的数据流列表</span><br><span class=\"line\">stream_register_wrapper函数：注册一个用PHP类实现的URL封装协议</span><br><span class=\"line\">stream_select函数：接收数据流数组并等待它们状态的改变</span><br><span class=\"line\">stream_set_blocking函数：将一个数据流设置为堵塞或者非堵塞状态</span><br><span class=\"line\">stream_set_timeout函数：对数据流进行超时设置</span><br><span class=\"line\">stream_set_write_buffer函数：为数据流设置缓冲区</span><br><span class=\"line\">stream_socket_accept函数：接受由函数stream_ socket_server()创建的Socket连接</span><br><span class=\"line\">stream_socket_client函数：打开网络或者UNIX主机的Socket连接</span><br><span class=\"line\">stream_socket_enable_crypto函数：为一个已经连接的Socket打开或者关闭数据加密</span><br><span class=\"line\">stream_socket_get_name函数：获取本地或者网络Socket的名称</span><br><span class=\"line\">stream_socket_pair函数：创建两个无区别的Socket数据流连接</span><br><span class=\"line\">stream_socket_recvfrom函数：从Socket获取数据，不管其连接与否</span><br><span class=\"line\">stream_socket_sendto函数：向Socket发送数据，不管其连接与否</span><br><span class=\"line\">stream_socket_server函数：创建一个网络或者UNIX Socket服务端</span><br><span class=\"line\">stream_wrapper_restore函数：恢复一个事先注销的数据包</span><br><span class=\"line\">stream_wrapper_unregister函数：注销一个URL地址包</span><br></pre></td></tr></table></figure>\n\n<p>实例：</p>\n<p>PHP使用PCNTL系列的函数也能做到多进程处理一个事务。比如我需要从数据库中获取80w条的数据，再做一系列后续的处理，这个时候，用单进程？你可以等到明年今天了。。。所以应该使用pcntl函数了。</p>\n<p>假设我想要启动20个进程，将1-80w的数据分成20份来做，主进程等待所有子进程都结束了才退出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$max = 800000;</span><br><span class=\"line\">$workers = 20;</span><br><span class=\"line\">$pids = array();</span><br><span class=\"line\">for($i = 0; $i &lt; $workers; $i++)&#123;</span><br><span class=\"line\">    $pids[$i] = pcntl_fork();</span><br><span class=\"line\">    switch ($pids[$i]) &#123;</span><br><span class=\"line\">        case -1:</span><br><span class=\"line\">            echo &quot;fork error : &#123;$i&#125; \\r\\n&quot;;</span><br><span class=\"line\">            exit;</span><br><span class=\"line\">        case 0:</span><br><span class=\"line\">            $param = array(</span><br><span class=\"line\">                &#x27;lastid&#x27; =&gt; $max / $workers * $i,</span><br><span class=\"line\">                &#x27;maxid&#x27; =&gt; $max / $workers * ($i+1),</span><br><span class=\"line\">            );</span><br><span class=\"line\">            $this-&gt;executeWorker($input, $output, $param);</span><br><span class=\"line\">            exit;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foreach ($pids as $i =&gt; $pid) &#123;</span><br><span class=\"line\">    if($pid) &#123;</span><br><span class=\"line\">        pcntl_waitpid($pid, $status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里当<code>pcntl_fork</code>出来以后，会返回一个<code>pid</code>值，这个pid在子进程中看是0，在父进程中看是子进程的<code>pid（&gt;0）</code>，如果pid为<code>-1</code>说明<code>fork</code>出错了。</p>\n<p>使用一个<code>$pids</code>数组就可以让主进程等候所有进程完结之后再结束了</p>\n","categories":["Web","Back","php"],"tags":["php","多线程"]},{"title":"PHP实现常用排序算法（含示意动图）","url":"/php_algorithm/","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\">1 快速排序</a></li>\n<li><a href=\"#2\">2 冒泡排序</a></li>\n<li><a href=\"#3\">3 插入排序</a></li>\n<li><a href=\"#4\">4 选择排序</a></li>\n<li><a href=\"#5\">5 归并排序</a></li>\n<li><a href=\"#6\">6 堆排序</a></li>\n<li><a href=\"#7\">7 希尔排序</a></li>\n<li><a href=\"#8\">8 基数排序</a></li>\n<li><a href=\"#i\">总结</a></li>\n</ul>\n<p>作为phper，一般接触算法的编程不多。 但基本的排序算法还是应该掌握。 毕竟算法作为程序的核心，算法的好坏决定了程序的质量。 本文将依次介绍一些常用的排序算法，以及PHP实现。</p>\n<h2 id=\"1-快速排序\"><a href=\"#1-快速排序\" class=\"headerlink\" title=\"1 快速排序\"></a>1 快速排序</h2><p><strong>快速排序</strong>是由**<em>东尼·霍尔</em>**发展的一种排序算法。 在平均状况下，排序<code> n </code>个项目要<code>Ο(n log n)</code>次比较。 在最坏状况下则需要<code>Ο(n2)</code>次比较，但这种状况并不常见。 事实上，快速排序通常明显比其他<code>Ο(n log n) </code>算法更快，因为它的内部循环可以在大部分的架构上，很有效率地被实现出来。<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419142106.png?token=ACYTD73CIETKE3SZ7SXQPJS4XFURA\"></p>\n<p>快速排序采用分治法实现排序，具体步骤：</p>\n<ol>\n<li>从数列中挑出一个数作为<strong>基准元素</strong>。通常选择第一个或最后一个元素。</li>\n<li>扫描数列，<strong>以基准元素为比较对象，把数列分成两个区</strong>。规则是：小的移动到基准元素前面，大的移到后面，相等的前后都可以。分区完成之后，基准元素就处于数列的中间位置。</li>\n<li>然后再用同样的方法，<strong>递归地排序划分的两部分</strong>。</li>\n</ol>\n<p>递归的结束条件是数列的大小是<code>0</code>或<code>1</code>，也就是永远都已经被排序好了。<br>PHP代码实现： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function quickSort($arr) &#123;</span><br><span class=\"line\">    // 先设定结束条件，判断是否需要继续进行</span><br><span class=\"line\">    if(count($arr) &lt;= 1) &#123;</span><br><span class=\"line\">        return $arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 选择第一个元素作为基准元素</span><br><span class=\"line\">    $base_value = $arr[0];</span><br><span class=\"line\"></span><br><span class=\"line\">    // 初始化小于基准元素的左数组</span><br><span class=\"line\">    $left_array = array();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 初始化大于基准元素的右数组</span><br><span class=\"line\">    $right_array = array();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 遍历除基准元素外的所有元素，按照大小关系放入左右数组内</span><br><span class=\"line\">    array_shift($arr);</span><br><span class=\"line\">    foreach ($arr as $value) &#123;</span><br><span class=\"line\">        if ($value &lt; $base_value) &#123;</span><br><span class=\"line\">            $left_array[] = $value;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $right_array[] = $value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 再分别对左右数组进行相同的排序</span><br><span class=\"line\">    $left_array = quickSort($left_array);</span><br><span class=\"line\">    $right_array = quickSort($right_array);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 合并基准元素和左右数组</span><br><span class=\"line\">    return array_merge($left_array, array($base_value), $right_array);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-冒泡排序\"><a href=\"#2-冒泡排序\" class=\"headerlink\" title=\"2 冒泡排序\"></a>2 冒泡排序</h2><p>冒泡排序是一种简单的排序算法。 算法重复地走访过要排序的数列，一次<strong>比较两个元素</strong>，如果他们的顺序错误就把他们交换过来。 走访数列的工作重复地进行，直到没有再需要交换，也就是说该数列已经排序完成。 因为排序过程让<strong>较大的数往下沉，较小的往上冒</strong>，故而叫冒泡法。<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419142134.png?token=ACYTD73YBGWX6V7NKYRKGO24XFUSY\"></p>\n<p>算法步骤：</p>\n<ol>\n<li>从第一个元素开始，比较相邻的元素，如果第一个比第二个大，就交换他们两个。</li>\n<li>从开始第一对到结尾的最后一对，对每一对相邻元素作同样的工作。比较结束后，最后的元素应该会是最大的数。</li>\n<li>对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>重复上面的步骤，每次比较的对数会越来越少，直到没有任何一对数字需要比较。</li>\n</ol>\n<p>PHP代码实现： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function bubbleSort($arr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $len = count($arr);</span><br><span class=\"line\">    </span><br><span class=\"line\">    for($i = 1; $i &lt; $len; $i++) &#123;</span><br><span class=\"line\">        for($k = 0; $k &lt; $len - $i; $k++) &#123;</span><br><span class=\"line\">            if($arr[$k] &gt; $arr[$k + 1]) &#123;</span><br><span class=\"line\">                $tmp = $arr[$k + 1];</span><br><span class=\"line\">                $arr[$k + 1] = $arr[$k];</span><br><span class=\"line\">                $arr[$k] = $tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return $arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-插入排序\"><a href=\"#3-插入排序\" class=\"headerlink\" title=\"3 插入排序\"></a>3 插入排序</h2><p>插入排序是一种简单直观的排序算法。 插入排序的工作原理是：<strong>将需要排序的数，与前面已经排好序的数据从后往前进行比较，使其插入到相应的位置。</strong> 插入排序在实现上，通常采用in-place排序，即只需用到<code>O(1)</code>的额外空间的排序。 因而，在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。 <img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419142212.png?token=ACYTD76XDNXPLTUKXSZVU5C4XFUVG\"></p>\n<p>算法步骤：</p>\n<ol>\n<li>从第一个元素开始，该元素可以认为已经被排序；</li>\n<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>\n<li>如果以排序的元素大于新元素，将该元素移到下一位置；</li>\n<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li>\n<li>将新元素插入到该位置中；</li>\n<li>重复步骤2。</li>\n</ol>\n<p>PHP代码实现： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function insertSort($arr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $len = count($arr);</span><br><span class=\"line\"></span><br><span class=\"line\">    for ($i = 1; $i &lt; $len; $i++) &#123;</span><br><span class=\"line\">        $tmp = $arr[$i];</span><br><span class=\"line\">        for ($j = $i - 1; $j &gt;= 0; $j--) &#123;</span><br><span class=\"line\">            if ($tmp &lt; $arr[$j]) &#123;</span><br><span class=\"line\">                $arr[$j + 1] = $arr[$j];</span><br><span class=\"line\">                $arr[$j] = $tmp;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return $arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-选择排序\"><a href=\"#4-选择排序\" class=\"headerlink\" title=\"4 选择排序\"></a>4 选择排序</h2><p>选择排序是一种简单直观的排序算法。<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419142255.png?token=ACYTD75MPUMGYHPSSMGPGOS4XFUX4\"><br>算法步骤：</p>\n<ol>\n<li>首先，在序列中找到最小元素，存放到排序序列的起始位置；</li>\n<li>接着，从剩余未排序元素中继续寻找最小元素，放到已排序序列的末尾。</li>\n<li>重复第二步，直到所有元素均排序完毕。</li>\n</ol>\n<p>PHP代码实现： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function selectSort($arr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $len = count($arr);</span><br><span class=\"line\"></span><br><span class=\"line\">    for ($i = 0; $i &lt; $len; $i++) &#123;</span><br><span class=\"line\">        $p = $i;</span><br><span class=\"line\"></span><br><span class=\"line\">        for ($j = $i + 1; $j &lt; $len; $j++) &#123;</span><br><span class=\"line\">            if ($arr[$p] &gt; $arr[$j]) &#123;</span><br><span class=\"line\">                $p = $j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $tmp = $arr[$p];</span><br><span class=\"line\">        $arr[$p] = $arr[$i];</span><br><span class=\"line\">        $arr[$i] = $tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return $arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-归并排序\"><a href=\"#5-归并排序\" class=\"headerlink\" title=\"5 归并排序\"></a>5 归并排序</h2><p><strong>归并排序</strong>是建立在归并操作上的一种有效的排序算法。 归并排序将待排序的序列分成若干组，保证每组都有序，然后再进行合并排序，最终使整个序列有序。 该算法是采用分治法的一个非常典型的应用。 算法步骤：</p>\n<ol>\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>\n<li>重复步骤3直到某一指针达到序列尾</li>\n<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>\n</ol>\n<p>排序效果： <img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419142321.png?token=ACYTD7ZNABQPXNKOBOSKGP24XFUZQ\"></p>\n<p>PHP实现代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 归并排序</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param array $lists</span><br><span class=\"line\"> * @return array</span><br><span class=\"line\"> */</span><br><span class=\"line\">function merge_sort(array $lists)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $n = count($lists);</span><br><span class=\"line\">    if ($n &lt;= 1) &#123;</span><br><span class=\"line\">        return $lists;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $left = merge_sort(array_slice($lists, 0, floor($n / 2)));</span><br><span class=\"line\">    $right = merge_sort(array_slice($lists, floor($n / 2)));</span><br><span class=\"line\">    $lists = merge($left, $right);</span><br><span class=\"line\">    return $lists;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function merge(array $left, array $right)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $lists = [];</span><br><span class=\"line\">    $i = $j = 0;</span><br><span class=\"line\">    while ($i &lt; count($left) &amp;&amp; $j &lt; count($right)) &#123;</span><br><span class=\"line\">        if ($left[$i] &lt; $right[$j]) &#123;</span><br><span class=\"line\">            $lists[] = $left[$i];</span><br><span class=\"line\">            $i++;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $lists[] = $right[$j];</span><br><span class=\"line\">            $j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $lists = array_merge($lists, array_slice($left, $i));</span><br><span class=\"line\">    $lists = array_merge($lists, array_slice($right, $j));</span><br><span class=\"line\">    return $lists;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-堆排序\"><a href=\"#6-堆排序\" class=\"headerlink\" title=\"6 堆排序\"></a>6 堆排序</h2><p>堆排序是指利用堆这种数据结构所设计的一种排序算法。 堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。 堆排序的平均时间复杂度为<code>Ο(nlogn)</code> 。 算法步骤：</p>\n<ol>\n<li>创建一个堆<code>H[0..n-1]</code>；</li>\n<li>把堆首（最大值）和堆尾互换；</li>\n<li>把堆的尺寸缩小<code>1</code>，并调用<code>shift_down(0)</code>，目的是把新的数组顶端数据调整到相应位置；</li>\n<li> 重复步骤<code>2</code>，直到堆的尺寸为<code>1</code>。<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419142348.png?token=ACYTD7ZUA4N7SYQPBEYW7724XFU3E\"></li>\n</ol>\n<p>PHP实现代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 堆排序</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param array $lists</span><br><span class=\"line\"> * @return array</span><br><span class=\"line\"> */</span><br><span class=\"line\">function heap_sort(array $lists)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $n = count($lists);</span><br><span class=\"line\">    build_heap($lists);</span><br><span class=\"line\">    while (--$n) &#123;</span><br><span class=\"line\">        $val = $lists[0];</span><br><span class=\"line\">        $lists[0] = $lists[$n];</span><br><span class=\"line\">        $lists[$n] = $val;</span><br><span class=\"line\">        heap_adjust($lists, 0, $n);</span><br><span class=\"line\">        //echo &quot;sort: &quot; . $n . &quot;\\t&quot; . implode(&#x27;, &#x27;, $lists) . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $lists;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function build_heap(array &amp;$lists)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $n = count($lists) - 1;</span><br><span class=\"line\">    for ($i = floor(($n - 1) / 2); $i &gt;= 0; $i--) &#123;</span><br><span class=\"line\">        heap_adjust($lists, $i, $n + 1);</span><br><span class=\"line\">        //echo &quot;build: &quot; . $i . &quot;\\t&quot; . implode(&#x27;, &#x27;, $lists) . PHP_EOL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //echo &quot;build ok: &quot; . implode(&#x27;, &#x27;, $lists) . PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function heap_adjust(array &amp;$lists, $i, $num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if ($i &gt; $num / 2) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $key = $i;</span><br><span class=\"line\">    $leftChild = $i * 2 + 1;</span><br><span class=\"line\">    $rightChild = $i * 2 + 2;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ($leftChild &lt; $num &amp;&amp; $lists[$leftChild] &gt; $lists[$key]) &#123;</span><br><span class=\"line\">        $key = $leftChild;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ($rightChild &lt; $num &amp;&amp; $lists[$rightChild] &gt; $lists[$key]) &#123;</span><br><span class=\"line\">        $key = $rightChild;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ($key != $i) &#123;</span><br><span class=\"line\">        $val = $lists[$i];</span><br><span class=\"line\">        $lists[$i] = $lists[$key];</span><br><span class=\"line\">        $lists[$key] = $val;</span><br><span class=\"line\">        heap_adjust($lists, $key, $num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-希尔排序\"><a href=\"#7-希尔排序\" class=\"headerlink\" title=\" 7 希尔排序\"></a> 7 希尔排序</h2><p>希尔排序，也称<strong>递减增量</strong>排序算法，是插入排序的一种更高效的改进版本。 但希尔排序是非稳定排序算法。 希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>\n<ul>\n<li>插入排序在对几乎已经排好序的数据操作时， 效率高， 即可以达到线性排序的效率</li>\n<li>但插入排序一般来说是低效的， 因为插入排序每次只能将数据移动一位<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419142421.png?token=ACYTD7YGBRZ245KATEDZRQC4XFU5G\"></li>\n</ul>\n<p>算法步骤：</p>\n<ol>\n<li>先将整个待排序的记录序列分割成为若干子序列，分别进行直接插入排序</li>\n<li>待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</li>\n</ol>\n<p>PHP实现代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 希尔排序 标准</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param array $lists</span><br><span class=\"line\"> * @return array</span><br><span class=\"line\"> */</span><br><span class=\"line\">function shell_sort(array $lists)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $n = count($lists);</span><br><span class=\"line\">    $step = 2;</span><br><span class=\"line\">    $gap = intval($n / $step);</span><br><span class=\"line\">    while ($gap &gt; 0) &#123;</span><br><span class=\"line\">        for ($gi = 0; $gi &lt; $gap; $gi++) &#123;</span><br><span class=\"line\">            for ($i = $gi; $i &lt; $n; $i += $gap) &#123;</span><br><span class=\"line\">                $key = $lists[$i];</span><br><span class=\"line\">                for ($j = $i - $gap; $j &gt;= 0 &amp;&amp; $lists[$j] &gt; $key; $j -= $gap) &#123;</span><br><span class=\"line\">                    $lists[$j + $gap] = $lists[$j];</span><br><span class=\"line\">                    $lists[$j] = $key;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $gap = intval($gap / $step);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $lists;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-基数排序\"><a href=\"#8-基数排序\" class=\"headerlink\" title=\"8 基数排序\"></a>8 基数排序</h2><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。 由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。 </p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419142637.png?token=ACYTD7YGIYDKNWMCVNPWYLS4XFVFY\"></p>\n<p>说基数排序之前，我们简单介绍桶排序：<br>说基数排序之前，我们简单介绍桶排序：</p>\n<p>桶排序是将阵列分到有限数量的桶子里。</p>\n<p>每个桶子再个别排序，有可能再使用别的排序算法，或是以递回方式继续使用桶排序进行排序。</p>\n<p>桶排序是鸽巢排序的一种归纳结果。</p>\n<p>当要被排序的阵列内的数值是均匀分配的时候，桶排序使用线性时间O(n)。</p>\n<p>但桶排序并不是 比较排序，他不受到 O(n log n) 下限的影响。</p>\n<p>简单来说，就是把数据分组，放在一个个的桶中，然后对每个桶里面的在进行排序。</p>\n<p>例如，要对大小为[1..1000]范围内的n个整数A[1..n]排序</p>\n<p>首先，可以把桶设为大小为10的范围，具体而言，设集合B[1]存储[1..10]的整数，集合B[2]存储   (10..20]的整数，……集合B[i]存储(   (i-1)<em>10,   i</em>10]的整数，i   &#x3D;   1,2,..100。总共有  100个桶。</p>\n<p>然后，对A[1..n]从头到尾扫描一遍，把每个A[i]放入对应的桶B[j]中。  再对这100个桶中每个桶里的数字排序，这时可用冒泡，选择，乃至快排，一般来说任  何排序法都可以。</p>\n<p>最后，依次输出每个桶里面的数字，且每个桶中的数字从小到大输出，这  样就得到所有数字排好序的一个序列了。</p>\n<p>假设有n个数字，有m个桶，如果数字是平均分布的，则每个桶里面平均有n&#x2F;m个数字。</p>\n<p>如果对每个桶中的数字采用快速排序，那么整个算法的复杂度是</p>\n<p>O(n   +   m   *   n&#x2F;m*log(n&#x2F;m))   &#x3D;   O(n   +   nlogn   –   nlogm)</p>\n<p>从上式看出，当m接近n的时候，桶排序复杂度接近O(n)</p>\n<p>当然，以上复杂度的计算是基于输入的n个数字是平均分布这个假设的。这个假设是很强的  ，实际应用中效果并没有这么好。如果所有的数字都落在同一个桶中，那就退化成一般的排序了。<br>前面说的几大排序算法 ，大部分时间复杂度都是O（n2），也有部分排序算法时间复杂度是O(nlogn)。而桶式排序却能实现O（n）的时间复杂度。但桶排序的缺点是：</p>\n<p>1）首先是空间复杂度比较高，需要的额外开销大。排序有两个数组的空间开销，一个存放待排序数组，一个就是所谓的桶，比如待排序值是从0到m-1，那就需要m个桶，这个桶数组就要至少m个空间。</p>\n<p>2）其次待排序的元素都要在一定的范围内等等。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"> /**</span><br><span class=\"line\"> * 基数排序</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param array $lists</span><br><span class=\"line\"> * @return array</span><br><span class=\"line\"> */</span><br><span class=\"line\">function radix_sort(array $lists)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $radix = 10;</span><br><span class=\"line\">    $max = max($lists);</span><br><span class=\"line\">    $k = ceil(log($max, $radix));</span><br><span class=\"line\">    if ($max == pow($radix, $k)) &#123;</span><br><span class=\"line\">        $k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for ($i = 1; $i &lt;= $k; $i++) &#123;</span><br><span class=\"line\">        $newLists = array_fill(0, $radix, []);</span><br><span class=\"line\">        for ($j = 0; $j &lt; count($lists); $j++) &#123;</span><br><span class=\"line\">            $key = $lists[$j] / pow($radix, $i - 1) % $radix;</span><br><span class=\"line\">            $newLists[$key][] = $lists[$j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $lists = [];</span><br><span class=\"line\">        for ($j = 0; $j &lt; $radix; $j++) &#123;</span><br><span class=\"line\">            $lists = array_merge($lists, $newLists[$j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $lists;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>各种排序的稳定性，时间复杂度、空间复杂度、稳定性总结如下图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419142754.png?token=ACYTD77XEXVLLCVGBRWACE24XFVKW\"></p>\n<p>关于时间复杂度：</p>\n<p>(1)平方阶(O(n2))排序<br>各类简单排序:直接插入、直接选择和冒泡排序；</p>\n<p>(2)线性对数阶(O(nlog2n))排序<br>　　快速排序、堆排序和归并排序；<br>(3)O(n1+§))排序,§是介于0和1之间的常数。</p>\n<p>希尔排序</p>\n<p>(4)线性阶(O(n))排序</p>\n<p>基数排序，此外还有桶、箱排序。</p>\n<p>关于稳定性：</p>\n<p>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序</p>\n<p>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序</p>\n","categories":["Web","Back","php"],"tags":["php","算法"]},{"title":"Php的变量引用与销毁机制","url":"/php_variable_ref_des/","content":"<blockquote>\n<p>经常会看到此类问题。虽然使用不多，但是基于基本原理，需要进行理解，同样利于装x，不然“砖家”之间聊什么呢。</p>\n</blockquote>\n<p>在php中，符号”&amp;”表示引用。</p>\n<h2 id=\"看看不引用的情况是这样子\"><a href=\"#看看不引用的情况是这样子\" class=\"headerlink\" title=\"看看不引用的情况是这样子\"></a>看看不引用的情况是这样子</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"string\">&quot;hello world&quot;</span>;<span class=\"comment\">//定义一个变量，下面赋值给$b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"variable\">$a</span>;<span class=\"comment\">//这一步没有在$a之前加符号&amp;，像这样子&quot;$b= &amp; $a&quot;。没有加&amp;，实际上原理是会将变量$a复制拷贝一份，也就是内存中重新申请一个地址存储变量$b了</span></span><br></pre></td></tr></table></figure>\n\n<p>ps：在php中，使用”&#x3D;”直接赋值，其实就是拷贝一份右边的变量给b，会生成一份内存空间，结果可能是同样的内容在内存中两份。在有些关于php性能方面提到，这样子会多占有内存空间。不过我接触中，大部分人没怎么注意，其实一般应用这样子用产生的显著差异并不明显。不会看到什么效果，其实我本人也没经常使用&amp;进行引用，呵呵。只是我觉得，深入了解里面的实现原理，非常有必要。我喜欢关注原理性的东西。</p>\n<h2 id=\"使用符号-amp-进行引用\"><a href=\"#使用符号-amp-进行引用\" class=\"headerlink\" title=\"使用符号&amp;进行引用\"></a>使用符号&amp;进行引用</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span> = &amp; <span class=\"variable\">$a</span>;</span><br></pre></td></tr></table></figure>\n\n<p>使用引用，php引擎不会拷贝一份变量，其实就是将指针指向了$a在内存中的地址，$b中就是保存了这个指针。<br>所以使用引用的时候，把$b的值改变，$a也会跟着改变 比如： </p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span> = &amp; <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"string\">&quot;test new value&quot;</span>;<span class=\"comment\">//把b的值改掉，a的值也会跟着改变</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$a</span>;<span class=\"comment\">//输出test new value，因为改变了b的值也会改变a的值。</span></span><br></pre></td></tr></table></figure>\n\n<p>经常在定义函数的时候看到像这样的情况：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\">&amp; <span class=\"variable\">$param</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//函数定义的内容</span></span><br><span class=\"line\">    <span class=\"variable\">$param</span>++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解释：$param前面带有引用，所以传入进来的参数并不会在内存中拷贝一份，而是直接对原来的内存空间进行引用。所以：如果里对使用符号&amp;传入进来的变量值进行修改了，那么也会改变原来的内存空间中的值。</p>\n<p>做个测验如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$k</span> = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">test</span>(<span class=\"variable\">$k</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$k</span>;<span class=\"comment\">//结果$k的值被函数里面改变了，输出9。</span></span><br></pre></td></tr></table></figure>\n\n<p>还会经常看到这样子调用函数：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$return</span> = &amp; <span class=\"title function_ invoke__\">test_func</span>();</span><br></pre></td></tr></table></figure>\n\n<p>前面了解到php引擎的机制是：&#x3D;会把右边的内容拷贝一份给予左边的变量。所以使用&amp;就是将函数的结果不会进行拷贝一份，实际上我的理解是把指针给了左边的变量。</p>\n<p>什么是指针，以前学c语言中的概念。我的理解是就是：指针，指针，指向针(指南针，呵呵)。把指针看成是一个内存的地址容易理解点，计算机就知道去内存什么位置找数据了吧。这是浅显的理解，深入的我不会，呵呵。</p>\n<p>总结：使用引用是为了减少内存资源的占用。</p>\n<p>php手册中对引用的解释如下：</p>\n<p>在 PHP 中引用意味着用不同的名字访问同一个变量内容。这并不像 C 的指针，替代的是，引用是符号表别名。注意在 PHP 中，变量名和变量内容是不一样的，因此同样的内容可以有不同的名字。最接近的比喻是 Unix 的文件名和文件本身——变量名是目录条目，而变量内容则是文件本身。引用可以被看作是 Unix 文件系统中的 hardlink。</p>\n<h2 id=\"销毁变量的时候。并不会改变原来的值。\"><a href=\"#销毁变量的时候。并不会改变原来的值。\" class=\"headerlink\" title=\"销毁变量的时候。并不会改变原来的值。\"></a>销毁变量的时候。并不会改变原来的值。</h2><p>既然改变$b的值，$a的值也跟着改变，假如把$b销毁掉(内存中不占用空间了，不是null，也不是值为””)，$a的值是不是也会跟着被删掉呢？</p>\n<p>其实国外有本php方面的书中专门提到了这个机制。2年前看的。不是很记得了。原则是就是删除变量的时候，会自动拷贝。</p>\n<p>其实这样子，就是为了避免把$b给删掉，造成把$a也给删掉的问题。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只有等到销毁的时候就会自动拷贝一份。php不会把被引用的变量销毁掉。</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"string\">&#x27;d&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span> = &amp; <span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"number\">8</span>;<span class=\"comment\">//因为是引用了，所以把b的值改掉，a的值也跟着改为8了。</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"variable\">$b</span>,<span class=\"variable\">$a</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unset</span>(<span class=\"variable\">$b</span>);<span class=\"comment\">//调用unset删除b变量，a变量不会删除</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"variable\">$b</span>,<span class=\"variable\">$a</span>);<span class=\"comment\">//输出null和8</span></span><br></pre></td></tr></table></figure>\n\n<p>调用unset删除$b变量的时候，php引擎从变量符号表中发现：我要删除的变量$b原来是引用了变量$a,这不好删除啊，因为一删除导致$a变量也没了，所以就先把$a变量拷贝一份后在删除$b变量。</p>\n<p>关于php符号表：其实我的理解是，运行中所有变量名称都记录在里面，php来维护，具体的数据当然是存储在内存中,php就是根据这个符号表去回收没有用到的变量空间的，释放内存空间)。去看看php的垃圾回收机制(释放不再使用的内存空间)，就是根据符号表进行的。</p>\n","categories":["Web","Back","php"],"tags":["php"]},{"title":"windows下开发php5.5的扩展","url":"/php_dev_windows/","content":"<h3 id=\"windows环境-我个人的\"><a href=\"#windows环境-我个人的\" class=\"headerlink\" title=\"windows环境(我个人的)\"></a>windows环境(我个人的)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">windows 8.1 企业版(mac os Boot Camp安装的)</span><br><span class=\"line\"></span><br><span class=\"line\">Visual Studio 2012 版本</span><br><span class=\"line\"></span><br><span class=\"line\">msysgit  (http://msysgit.github.io/ 下载)</span><br><span class=\"line\"></span><br><span class=\"line\">php-sdk-binary-tools-20110915.zip （http://windows.php.net/downloads/php-sdk/下载）</span><br><span class=\"line\"></span><br><span class=\"line\">deps-5.5-vc11-x86.7z                  （http://windows.php.net/downloads/php-sdk/下载）</span><br><span class=\"line\"></span><br><span class=\"line\">php-5.5.20                        (http://php.net/downloads.php下载，这个版本不定自己选择)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>解压<code>php-sdk-binary-tools</code>的二进制包，譬如我解压到我的<code>C:\\php-sdk</code>文件夹中，现在的目录结构如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\php-sdk</span><br><span class=\"line\">    --bin</span><br><span class=\"line\">    --script</span><br><span class=\"line\">    --share</span><br></pre></td></tr></table></figure>\n<p>然后，这个是你已经安装完成了<code>visual studio 2012</code>,打开<code>VS2012 Native Tools Command Prompt</code>命令行工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#进入目录</span><br><span class=\"line\">cd C:\\php-sdk</span><br><span class=\"line\">#设置环境变量</span><br><span class=\"line\">bin\\phpsdk_setvars.bat</span><br><span class=\"line\">#创建常用的php-sdk目录</span><br><span class=\"line\">bin\\phpsdk_buildtree.bat phpdev</span><br></pre></td></tr></table></figure>\n<p>如果我们打开bin\\phpsdk_buildtree.bat文件就会发现它只创建到VC9，没有VC11，但是我们如果开发php5.5版本，我们需要的是VC11,这时候我们就要把<code>C:\\php-sdk\\phpdev\\vc9</code>复制一份到<code>C:\\php-sdk\\phpdev\\vc11</code>，现在的目录结构如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\php-sdk\\phpdev\\</span><br><span class=\"line\">                --vc6</span><br><span class=\"line\">                --vc8</span><br><span class=\"line\">                --vc9</span><br><span class=\"line\">                --vc11</span><br></pre></td></tr></table></figure>\n<p>因为我下载的<code>deps-5.5-vc11-x86.7z</code>，所以我要解压<code>deps-5.5-vc11-x86.7z</code>到<code>C:\\php-sdk\\phpdev\\vc11\\x86\\deps</code>文件夹下覆盖，里边都是我们需要的库文件和一些必要的工具等等。</p>\n<p>然后，将我们下载的<code>php-5.5.20.tar.bz2</code>解压到<code>C:\\php-sdk\\phpdev\\vc11\\x86\\php-5.5.20</code>文件夹中。</p>\n<h3 id=\"编译安装php\"><a href=\"#编译安装php\" class=\"headerlink\" title=\"编译安装php\"></a>编译安装php</h3><p>回到VS2012 Native Tools Command Prompt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#进入php源目录文件夹</span><br><span class=\"line\">cd c:\\php-sdk\\phpdev\\vc11\\x86\\php-5.5.20</span><br><span class=\"line\">buildconf</span><br><span class=\"line\">#查看带的扩展和编译命令</span><br><span class=\"line\">configure --help</span><br><span class=\"line\">php-sdk</span><br></pre></td></tr></table></figure>\n<p>如果你没有安装php，现在这里就帮助到你了，可以先编译安装一下php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">configure --disable-all --enable-cli</span><br></pre></td></tr></table></figure>\n<p>然后，你会看到<code>Type &#39;nmake&#39; to build PHP</code>，然后编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">nmake</span><br></pre></td></tr></table></figure>\n<p>在<code>C:\\php-sdk\\phpdev\\vc11\\x86\\php-5.5.20\\Release_TS</code>文件夹下就生成了php.exe文件，环境变量中加入这个路径，好在命令行中能使用php命令。</p>\n<h3 id=\"开发PHP的第一个扩展\"><a href=\"#开发PHP的第一个扩展\" class=\"headerlink\" title=\"开发PHP的第一个扩展\"></a>开发PHP的第一个扩展</h3><p>假如我们要开发一个<code>widuu()</code>函数，实现的效果如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function widuu($string)&#123;</span><br><span class=\"line\">    return &quot;your first extension &#123;$string&#125; is ok&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进入扩展目录，生成扩展文件夹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd C:\\php-sdk\\phpdev\\vc11\\x86\\php-5.5.20\\ext</span><br><span class=\"line\">#输入php ext_skel_win32.php --extname=扩展名称</span><br><span class=\"line\">php ext_skel_win32.php --extname=widuuweb</span><br></pre></td></tr></table></figure>\n<p>这时候我们在<code>C:\\php-sdk\\phpdev\\vc11\\x86\\php-5.5.20\\ext</code>就看到了自己的目录<code>widuuweb</code>,打开<code>widuuweb\\php_widuuweb.h</code>，在</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#PHP_MINFO_FUNCTION(widuuweb);下一行写入自己的函数，譬如我定义的是widuu()函数</span><br><span class=\"line\">PHP_FUNCTION(widuu);</span><br></pre></td></tr></table></figure>\n<p>打开<code>php_widuuweb.c</code>编写函数，在<code>PHP_FUNCTION(confirm_widuuweb_compiled)</code>下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PHP_FUNCTION(widuu)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    char *arg_string = NULL;</span><br><span class=\"line\">    int  arg_len,str_len;</span><br><span class=\"line\">    char *string;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,&quot;s&quot;,&amp;arg_string,&amp;arg_len) == FAILURE)&#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    str_len = spprintf(&amp;string,0,&quot;your first extension %.78s is ok&quot;,arg_string);</span><br><span class=\"line\">    RETURN_STRINGL(string,str_len,0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后找到<code>PHP_FE(confirm_widuuweb_compiled, NULL)</code>,在下边注册你的函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const zend_function_entry widuuweb_functions[] = &#123;</span><br><span class=\"line\">    PHP_FE(confirm_widuuweb_compiled,   NULL)       /* For testing, remove later. */</span><br><span class=\"line\">    PHP_FE(widuu,NULL)</span><br><span class=\"line\">    PHP_FE_END  /* Must be the last line in widuuweb_functions[] */</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>修改<code>C:\\php-sdk\\phpdev\\vc11\\x86\\php-5.5.20\\ext\\widuuweb\\config.w32</code>,去掉</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// ARG_ENABLE(&quot;widuuweb&quot;, &quot;enable widuuweb support&quot;, &quot;no&quot;);</span><br></pre></td></tr></table></figure>\n<p>前边的注释,vs命令行，输入<code>cd ..</code> 到<code>php-5.5.20</code>目录中，输入下面的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">buildconf --force</span><br><span class=\"line\">#查看扩展</span><br><span class=\"line\">configure --help</span><br></pre></td></tr></table></figure>\n<p>如果，有错误，大家可以打开，目录下<code>configure.js</code>查看，我这个出现了错误，是<code>configure.js</code>的4791行，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ARG_ENABLE(&quot;widuuweb&quot;, &quot;enable widuuweb support&quot;, &quot;no&quot;);  */ </span><br></pre></td></tr></table></figure>\n<p>多了一个<code>*/</code>的注释，去掉就可以了，然后再输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">configure --help</span><br></pre></td></tr></table></figure>\n<p>就看到了，有一行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--enable-widuuweb             enable widuuweb support</span><br></pre></td></tr></table></figure>\n<p>然后配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">configure --disable-all --enable-cli --enable-widuuweb=shared</span><br></pre></td></tr></table></figure>\n<h3 id=\"php动态扩展\"><a href=\"#php动态扩展\" class=\"headerlink\" title=\"php动态扩展\"></a>php动态扩展</h3><p>其中<code>--enable-widuuweb=shared</code>动态扩展，正好与静态扩展相对。</p>\n<p>然后输入nmake,完成后，我们在<code>C:\\php-sdk\\phpdev\\vc11\\x86\\php-5.5.20\\Release_TS</code>目录下就发现了<code>php_widuuweb.dll</code>文件，可以放到环境中测试了。</p>\n<p>如果你本地没有安装php环境，而是跟我一样只是编译了php，如果测试，我建议静态编译看效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">configure --disable-all --enable-cli --enable-widuuweb=static</span><br><span class=\"line\">nmake</span><br></pre></td></tr></table></figure>\n<p>然后，你可以再Release_TS目录下，输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">php -r &quot;echo widuu(&#x27;widuu&#x27;);&quot;  //输出&quot;your first extension widuu is ok&quot;</span><br></pre></td></tr></table></figure>","categories":["Web","Back","php"]},{"title":"Php安装配置xdebug","url":"/php_xdebug/","content":"<p>php下搭配使用xdebug是十分好的组合，用于php的调试工作，下面分别介绍之：</p>\n<h3 id=\"WINDOWS下的安装\"><a href=\"#WINDOWS下的安装\" class=\"headerlink\" title=\"WINDOWS下的安装\"></a>WINDOWS下的安装</h3><p>下载站点 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy54ZGVidWcub3JnLw==\">http://www.xdebug.org/<i class=\"fa fa-external-link-alt\"></i></span><br>要确定使用一个跟你的PHP配合的版本才行，比如xdebug中的5。2系列版本是跟5.2的php搭配的，5.3系列的跟5.3的PHP搭配的。目前的版本是2。1，然后你会发现有相应的线程安全和非安全两个版本。如何知道下载哪个版本呢，可以将你跑PHPINFO时的显示出来网页的源代码，COPY到 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy54ZGVidWcub3JnL2ZpbmQtYmluYXJ5LnBocA==\">http://www.xdebug.org/find-binary.php<i class=\"fa fa-external-link-alt\"></i></span> 中，然后提交，然后XDEBUG为告诉你应该下载哪个版本了</p>\n<p>将下载的文件放到<code>d:\\php\\ext</code>目录，重命名为<code>php_xdebug.dll</code>。</p>\n<p>然后修改PHP。INI如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Xdebug]</span><br><span class=\"line\">zend_extension=”D:\\php\\ext\\php_xdebug.dll”</span><br><span class=\"line\">xdebug.profiler_output_dir=”D:\\php53\\xdebug”</span><br><span class=\"line\">xdebug.profiler_enable=On</span><br><span class=\"line\">xdebug.profiler_enable_trigger=1</span><br><span class=\"line\">xdebug.default_enable=On</span><br><span class=\"line\">xdebug.show_exception_trace=On</span><br><span class=\"line\">xdebug.show_local_vars=1</span><br><span class=\"line\">xdebug.max_nesting_level=50</span><br><span class=\"line\">xdebug.var_display_max_depth=6</span><br><span class=\"line\">xdebug.dump_once=On</span><br><span class=\"line\">xdebug.dump_globals=On</span><br><span class=\"line\">xdebug.dump_undefined=On</span><br><span class=\"line\">xdebug.dump.REQUEST=*</span><br><span class=\"line\">xdebug.dump.SERVER=REQUEST_METHOD,REQUEST_URI,HTTP_USER_AGENT</span><br><span class=\"line\">xdebug.trace_output_dir=”D:\\php53\\xdebug”</span><br></pre></td></tr></table></figure>\n<p>注意要建立一个xdebug目录放调试输出的文件。<br>重新启动apache，在phpinfo中就可以看到有关XDEBUG的部分了</p>\n<h3 id=\"LINUX下的安装\"><a href=\"#LINUX下的安装\" class=\"headerlink\" title=\"LINUX下的安装\"></a>LINUX下的安装</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -xzf xdebug-2.0.0RC3.gz</span><br><span class=\"line\">cd xdebug-2.0.0RC3</span><br><span class=\"line\">/usr/local/php/bin/phpize</span><br><span class=\"line\">./configure –enable-xdebug –with-php-config=/php/lib/config</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">/**</span><br><span class=\"line\"></span><br><span class=\"line\">*cp modules/xdebug.so /usr/local/php/lib/php/extensions/no-debug-non-zts-*020020429/</span><br><span class=\"line\"></span><br><span class=\"line\">*/已经不再需要复制</span><br></pre></td></tr></table></figure>\n<p>注：<code>/usr/local/php/lib/php/extensions/no-debug-non-zts-20020429/</code>不同的PHP版本路径不同，也不一定要放在该路径，可以在<code>zend_extension_ts</code>中自行指定<code>xdebug.so</code>所在位置。</p>\n<h3 id=\"使用，可以写个简单程序去看效果，比如：\"><a href=\"#使用，可以写个简单程序去看效果，比如：\" class=\"headerlink\" title=\"使用，可以写个简单程序去看效果，比如：\"></a>使用，可以写个简单程序去看效果，比如：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">testXdebug();</span><br><span class=\"line\">function testXdebug() &#123;</span><br><span class=\"line\">require_once(‘abc.php’);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>运行后，可以看到是象JAVA一样，用堆栈的方式去输出错误的相关部分的。</p>\n<h3 id=\"分析xdbebug下面的输出文件\"><a href=\"#分析xdbebug下面的输出文件\" class=\"headerlink\" title=\"分析xdbebug下面的输出文件\"></a>分析xdbebug下面的输出文件</h3><p>因为这个目录下的文件比较难理解，因此可以下载工具来分析之，比如：</p>\n<p>KCacheGrind（适用于Linux）、WinCacheGrind（适用于Windows）和Webgrind（Web页面方式）。<br>我用的是<span class=\"exturl\" data-url=\"aHR0cDovL3NvdXJjZWZvcmdlLm5ldC9wcm9qZWN0cy93aW5jYWNoZWdyaW5k\">WinCacheGrind<i class=\"fa fa-external-link-alt\"></i></span><br>之后就可以打开输出文件来去看了。</p>\n<h3 id=\"xdebug的一些配置\"><a href=\"#xdebug的一些配置\" class=\"headerlink\" title=\"xdebug的一些配置\"></a>xdebug的一些配置</h3><h4 id=\"xdebug-default-enable\"><a href=\"#xdebug-default-enable\" class=\"headerlink\" title=\"xdebug.default_enable\"></a>xdebug.default_enable</h4><p>类型：布尔型 默认值：On<br>如果这项设置为On，堆栈跟踪将被默认的显示在错误事件中。你可以通过在代码中使用xdebug_disable()来禁止堆叠跟踪的显示。因为这是xdebug基本功能之一，将这项参数设置为On是比较明智的。</p>\n<h4 id=\"xdebug-max-nesting-level\"><a href=\"#xdebug-max-nesting-level\" class=\"headerlink\" title=\"xdebug.max_nesting_level\"></a>xdebug.max_nesting_level</h4><p>类型：整型 默认值：100<br>The value of this setting is the maximum level of nested functions that are allowed before the script will be aborted.<br>限制无限递归的访问深度。这项参数设置的值是脚本失败前所允许的嵌套程序的最大访问深度。</p>\n<h4 id=\"xdebug-dump-globals\"><a href=\"#xdebug-dump-globals\" class=\"headerlink\" title=\"xdebug.dump_globals\"></a>xdebug.dump_globals</h4><p>类型：布尔型 默认值：1<br>限制是否显示被xdebug.dump.*设置定义的超全局变量的值<br>例如，xdebug.dump.SERVER &#x3D; REQUEST_METHOD,REQUEST_URI,HTTP_USER_AGENT 将打印 PHP 超全局变量 $_SERVER[‘REQUEST_METHOD’]、$_SERVER[‘REQUEST_URI’] 和 $_SERVER[‘HTTP_USER_AGENT’]。</p>\n<h4 id=\"xdebug-dump-once\"><a href=\"#xdebug-dump-once\" class=\"headerlink\" title=\"xdebug.dump_once\"></a>xdebug.dump_once</h4><p>类型：布尔型 默认值：1<br>限制是否超全局变量的值应该转储在所有出错环境(设置为Off时)或仅仅在开始的地方(设置为On时)</p>\n<h4 id=\"xdebug-dump-undefined\"><a href=\"#xdebug-dump-undefined\" class=\"headerlink\" title=\"xdebug.dump_undefined\"></a>xdebug.dump_undefined</h4><p>类型：布尔型 默认值：0<br>如果你想从超全局变量中转储未定义的值，你应该把这个参数设置成On，否则就设置成Off</p>\n<h4 id=\"xdebug-show-exception-trace\"><a href=\"#xdebug-show-exception-trace\" class=\"headerlink\" title=\"xdebug.show_exception_trace\"></a>xdebug.show_exception_trace</h4><p>类型：整型 默认值：0<br>当这个参数被设置为1时，即使捕捉到异常，xdebug仍将强制执行异常跟踪当一个异常出现时。</p>\n<h4 id=\"xdebug-show-local-vars\"><a href=\"#xdebug-show-local-vars\" class=\"headerlink\" title=\"xdebug.show_local_vars\"></a>xdebug.show_local_vars</h4><p>类型：整型 默认值：0<br>当这个参数被设置为不等于0时，xdebug在错环境中所产生的堆栈转储还将显示所有局部变量，包括尚未初始化的变量在最上面。要注意的是这将产生大量的信息，也因此默认情况下是关闭的。</p>\n<h4 id=\"xdebug-profiler-append\"><a href=\"#xdebug-profiler-append\" class=\"headerlink\" title=\"xdebug.profiler_append\"></a>xdebug.profiler_append</h4><p>类型：整型 默认值：0<br>当这个参数被设置为1时，文件将不会被追加当一个新的需求到一个相同的文件时(依靠xdebug.profiler_output_name的设置)。相反的设置的话，文件将被附加成一个新文件。</p>\n<h4 id=\"xdebug-profiler-enable\"><a href=\"#xdebug-profiler-enable\" class=\"headerlink\" title=\"xdebug.profiler_enable\"></a>xdebug.profiler_enable</h4><p>类型：整型 默认值：0<br>开放xdebug文件的权限，就是在文件输出目录中创建文件。那些文件可以通过KCacheGrind来阅读来展现你的数据。这个设置不能通过在你的脚本中调用ini_set()来设置。</p>\n<h4 id=\"xdebug-profiler-output-dir\"><a href=\"#xdebug-profiler-output-dir\" class=\"headerlink\" title=\"xdebug.profiler_output_dir\"></a>xdebug.profiler_output_dir</h4><p>类型：字符串 默认值：&#x2F;tmp<br>这个文件是profiler文件输出写入的，确信PHP用户对这个目录有写入的权限。这个设置不能通过在你的脚本中调用ini_set()来设置。</p>\n<h4 id=\"xdebug-profiler-output-name\"><a href=\"#xdebug-profiler-output-name\" class=\"headerlink\" title=\"xdebug.profiler_output_name\"></a>xdebug.profiler_output_name</h4><p>类型：字符串 默认值：cachegrind.out%p<br>这个设置决定了转储跟踪写入的文件的名称。</p>\n<h3 id=\"远程Debug\"><a href=\"#远程Debug\" class=\"headerlink\" title=\"远程Debug\"></a>远程Debug</h3><p>相关参数设置</p>\n<h4 id=\"xdebug-remote-autostart\"><a href=\"#xdebug-remote-autostart\" class=\"headerlink\" title=\"xdebug.remote_autostart\"></a>xdebug.remote_autostart</h4><p>类型：布尔型 默认值：0<br>一般来说，你需要使用明确的HTTP GET&#x2F;POST变量来开启远程debug。而当这个参数设置为On，xdebug将经常试图去开启一个远程debug session并试图去连接客户端，即使GET&#x2F;POST&#x2F;COOKIE变量不是当前的。</p>\n<h4 id=\"xdebug-remote-enable\"><a href=\"#xdebug-remote-enable\" class=\"headerlink\" title=\"xdebug.remote_enable\"></a>xdebug.remote_enable</h4><p>类型：布尔型 默认值：0<br>这个开关控制xdebug是否应该试着去连接一个按照xdebug.remote_host和xdebug.remote_port来设置监听主机和端口的debug客户端。</p>\n<h4 id=\"xdebug-remote-host\"><a href=\"#xdebug-remote-host\" class=\"headerlink\" title=\"xdebug.remote_host\"></a>xdebug.remote_host</h4><p>类型：字符串 默认值：localhost<br>选择debug客户端正在运行的主机，你不仅可以使用主机名还可以使用IP地址</p>\n<h4 id=\"xdebug-remote-port\"><a href=\"#xdebug-remote-port\" class=\"headerlink\" title=\"xdebug.remote_port\"></a>xdebug.remote_port</h4><p>类型：整型 默认值：9000<br>这个端口是xdebug试着去连接远程主机的。9000是一般客户端和被绑定的debug客户端默认的端口。许多客户端都使用这个端口数字，最好不要去修改这个设置。</p>\n","categories":["Web","Back","php"]},{"title":"一篇让你真正理解 Laravel IoC 模式的文章","url":"/php_laravel_ioc/","content":"<p>学习 Laravel 框架看它有 IoC 的介绍，看着很是费解，因为没有将具体的原理细节，自己去看源码有很困难。有天看到了一篇文章介绍 IoC（出自phalcon介绍文档）,仔细研读之后发现，果然是豁然开朗。今天将所学写一下，供大家一块学习，如果你在使用 Laravel 做开发或者在学习IoC方面的东西，定是要好好的学习下。</p>\n<p>其中大部分内容摘自网络文章，自己确实也懒了不少。好的，Start。</p>\n<ol>\n<li><p>首先，假设要开发一个组件命名为 <code>SomeComponent</code> 。组件中需要注入一个数据库连接。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">class SomeComponent</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function someDbTask()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $connection = new Connection(array(</span><br><span class=\"line\">            &quot;host&quot; =&gt; &quot;localhost&quot;,</span><br><span class=\"line\">            &quot;username&quot; =&gt; &quot;root&quot;,</span><br><span class=\"line\">            &quot;password&quot; =&gt; &quot;secret&quot;,</span><br><span class=\"line\">            &quot;dbname&quot; =&gt; &quot;invo&quot;</span><br><span class=\"line\">        ));</span><br><span class=\"line\"></span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$some = new SomeComponent();</span><br><span class=\"line\">$some-&gt;someDbTask();</span><br></pre></td></tr></table></figure>\n<p> 在这个例子中，数据库连接在 component 中被创建，这种方法是不切实际的，如果数据发送变化，事情将变的很难维护。</p>\n</li>\n<li><p>为了解决上面所说的问题，我们需要在使用前创建一个外部连接，并注入到容器中。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class SomeComponent</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $_connection;</span><br><span class=\"line\">    public function setConnection($connection)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_connection = $connection;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function someDbTask()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $connection = $this-&gt;_connection;</span><br><span class=\"line\"></span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$some = new SomeComponent();</span><br><span class=\"line\"></span><br><span class=\"line\">//Create the connection</span><br><span class=\"line\">$connection = new Connection(array(</span><br><span class=\"line\">    &quot;host&quot; =&gt; &quot;localhost&quot;,</span><br><span class=\"line\">    &quot;username&quot; =&gt; &quot;root&quot;,</span><br><span class=\"line\">    &quot;password&quot; =&gt; &quot;secret&quot;,</span><br><span class=\"line\">    &quot;dbname&quot; =&gt; &quot;invo&quot;</span><br><span class=\"line\">));</span><br><span class=\"line\"></span><br><span class=\"line\">//Inject the connection in the component</span><br><span class=\"line\">$some-&gt;setConnection($connection);</span><br><span class=\"line\"></span><br><span class=\"line\">$some-&gt;someDbTask();</span><br></pre></td></tr></table></figure>\n<p> 现在来考虑一个问题，我们在应用程序中的不同地方使用此组件，将多次创建数据库连接，还是那个问题，一旦发生变化，维护度高。所以。。。</p>\n</li>\n<li><p>使用一种类似全局注册表的方式，从中获得一个数据库连接实例，而不是使用一次就创建一次。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class SomeComponent</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected $_connection;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * Sets the connection externally</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public function setConnection($connection)&#123;</span><br><span class=\"line\">        $this-&gt;_connection = $connection;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function someDbTask()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $connection = $this-&gt;_connection;</span><br><span class=\"line\"></span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Registry</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * Returns the connection</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public static function getConnection()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    return new Connection(array(</span><br><span class=\"line\">            &quot;host&quot; =&gt; &quot;localhost&quot;,</span><br><span class=\"line\">            &quot;username&quot; =&gt; &quot;root&quot;,</span><br><span class=\"line\">            &quot;password&quot; =&gt; &quot;secret&quot;,</span><br><span class=\"line\">            &quot;dbname&quot; =&gt; &quot;invo&quot;</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$some = new SomeComponent();</span><br><span class=\"line\"></span><br><span class=\"line\">//Pass the connection defined in the registry</span><br><span class=\"line\">$some-&gt;setConnection(Registry::getConnection());</span><br><span class=\"line\"></span><br><span class=\"line\">$some-&gt;someDbTask();</span><br></pre></td></tr></table></figure></li>\n<li><p>好了，现在我们需要全局注册表组件里实现两个方法，第一创建一个新的数据库连接，第二总是获得一个共享连接：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">class Registry</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected static $_connection;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * Creates a connection</span><br><span class=\"line\">    */</span><br><span class=\"line\">    protected static function _createConnection()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new Connection(array(</span><br><span class=\"line\">            &quot;host&quot; =&gt; &quot;localhost&quot;,</span><br><span class=\"line\">            &quot;username&quot; =&gt; &quot;root&quot;,</span><br><span class=\"line\">            &quot;password&quot; =&gt; &quot;secret&quot;,</span><br><span class=\"line\">            &quot;dbname&quot; =&gt; &quot;invo&quot;</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * Creates a connection only once and returns it</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public static function getSharedConnection()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (self::$_connection===null)&#123;</span><br><span class=\"line\">            $connection = self::_createConnection();</span><br><span class=\"line\">            self::$_connection = $connection;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return self::$_connection;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * Always returns a new connection</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public static function getNewConnection()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return self::_createConnection();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class SomeComponent</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected $_connection;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * Sets the connection externally</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public function setConnection($connection)&#123;</span><br><span class=\"line\">        $this-&gt;_connection = $connection;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * This method always needs the shared connection</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public function someDbTask()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $connection = $this-&gt;_connection;</span><br><span class=\"line\"></span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * This method always needs a new connection</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public function someOtherDbTask($connection)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$some = new SomeComponent();</span><br><span class=\"line\"></span><br><span class=\"line\">//This injects the shared connection</span><br><span class=\"line\">$some-&gt;setConnection(Registry::getSharedConnection());</span><br><span class=\"line\"></span><br><span class=\"line\">$some-&gt;someDbTask();</span><br><span class=\"line\"></span><br><span class=\"line\">//Here, we always pass a new connection as parameter</span><br><span class=\"line\">$some-&gt;someOtherDbTask(Registry::getConnection());</span><br></pre></td></tr></table></figure>\n<p> 到此为止，我们已经看到了如何使用依赖注入解决我们的问题。不是在代码内部创建依赖关系，而是让其作为一个参数传递，这使得我们的程序更容易维护，降低程序代码的耦合度，实现一种松耦合。但是从长远来看，这种形式的依赖注入也有一些缺点。 例如，如果组件中有较多的依赖关系，我们需要创建多个setter方法传递，或创建构造函数进行传递。另外，每次使用组件时，都需要创建依赖组件，使代码维护不太易，我们编写的代码可能像这样：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">//Create the dependencies or retrieve them from the registry</span><br><span class=\"line\">$connection = new Connection();</span><br><span class=\"line\">$session = new Session();</span><br><span class=\"line\">$fileSystem = new FileSystem();</span><br><span class=\"line\">$filter = new Filter();</span><br><span class=\"line\">$selector = new Selector();</span><br><span class=\"line\"></span><br><span class=\"line\">//Pass them as constructor parameters</span><br><span class=\"line\">$some = new SomeComponent($connection, $session, $fileSystem, $filter, $selector);</span><br><span class=\"line\"></span><br><span class=\"line\">// ... or using setters</span><br><span class=\"line\"></span><br><span class=\"line\">$some-&gt;setConnection($connection);</span><br><span class=\"line\">$some-&gt;setSession($session);</span><br><span class=\"line\">$some-&gt;setFileSystem($fileSystem);</span><br><span class=\"line\">$some-&gt;setFilter($filter);</span><br><span class=\"line\">$some-&gt;setSelector($selector);</span><br></pre></td></tr></table></figure>\n<p> 我们不得不在应用程序的许多地方创建这个对象。如果你不需要依赖的组件后，我们又要去代码注入部分移除构造函数中的参数或者是setter方法。</p>\n</li>\n<li><p>为了解决这个问题，我们再次返回去使用一个全局注册表来创建组件。但是，在创建对象之前，它增加了一个新的抽象层：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">class SomeComponent</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ...</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * Define a factory method to create SomeComponent instances injecting its dependencies</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public static function factory()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        $connection = new Connection();</span><br><span class=\"line\">        $session = new Session();</span><br><span class=\"line\">        $fileSystem = new FileSystem();</span><br><span class=\"line\">        $filter = new Filter();</span><br><span class=\"line\">        $selector = new Selector();</span><br><span class=\"line\"></span><br><span class=\"line\">        return new self($connection, $session, $fileSystem, $filter, $selector);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 这一刻，我们好像回到了问题的开始，我们正在创建组件内部的依赖，我们每次都在修改以及找寻一种解决问题的办法，但这都不是很好的做法。 一种实用和优雅的来解决这些问题，是使用容器的依赖注入，就像我们在前面看到的那样，容器作为全局注册表，使用容器的依赖注入做为一种桥梁来解决依赖可以使我们的代码耦合度更低，很好的降低了组件的复杂性：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">class SomeComponent</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected $_di;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct($di)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_di = $di;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function someDbTask()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Get the connection service</span><br><span class=\"line\">        // Always returns a new connection</span><br><span class=\"line\">        $connection = $this-&gt;_di-&gt;get(&#x27;db&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function someOtherDbTask()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Get a shared connection service,</span><br><span class=\"line\">        // this will return the same connection everytime</span><br><span class=\"line\">        $connection = $this-&gt;_di-&gt;getShared(&#x27;db&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">        //This method also requires a input filtering service</span><br><span class=\"line\">        $filter = $this-&gt;_db-&gt;get(&#x27;filter&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$di = new Phalcon\\DI();</span><br><span class=\"line\"></span><br><span class=\"line\">//Register a &quot;db&quot; service in the container</span><br><span class=\"line\">$di-&gt;set(&#x27;db&#x27;, function()&#123;</span><br><span class=\"line\">    return new Connection(array(</span><br><span class=\"line\">        &quot;host&quot; =&gt; &quot;localhost&quot;,</span><br><span class=\"line\">        &quot;username&quot; =&gt; &quot;root&quot;,</span><br><span class=\"line\">        &quot;password&quot; =&gt; &quot;secret&quot;,</span><br><span class=\"line\">        &quot;dbname&quot; =&gt; &quot;invo&quot;</span><br><span class=\"line\">    ));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//Register a &quot;filter&quot; service in the container</span><br><span class=\"line\">$di-&gt;set(&#x27;filter&#x27;, function()&#123;</span><br><span class=\"line\">    return new Filter();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//Register a &quot;session&quot; service in the container</span><br><span class=\"line\">$di-&gt;set(&#x27;session&#x27;, function()&#123;</span><br><span class=\"line\">    return new Session();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//Pass the service container as unique parameter</span><br><span class=\"line\">$some = new SomeComponent($di);</span><br><span class=\"line\"></span><br><span class=\"line\">$some-&gt;someTask();</span><br></pre></td></tr></table></figure>\n<p> 现在，该组件只有访问某种service的时候才需要它，如果它不需要，它甚至不初始化，以节约资源。该组件是高度解耦。他们的行为，或者说他们的任何其他方面都不会影响到组件本身。</p>\n</li>\n<li><p>现在，剩下的就是 Phalcon\\DI 这个全局容器了。<br> Phalcon\\DI 是一个实现了服务的依赖注入功能的组件，它本身就是一个容器。由于Phalcon高度解耦，Phalcon\\DI 是框架用来集成其他组件的必不可少的部分，开发人员也可以使用这个组件依赖注入和管理应用程序中不同类文件的实例。</p>\n<p> 基本上，这个组件实现了 Inversion of Control 模式。基于此，对象不再以构造函数接收参数或者使用setter的方式来实现注入，而是直接请求服务的依赖注入。这就大大降低了整体程序的复杂性，因为只有一个方法用以获得所需要的一个组件的依赖关系。</p>\n<p> 这种模式增强了代码的可测试性，从而使它不容易出错。在容器中注册服务，框架本身或开发人员都可以注册服务。当一个组件A要求调用组件B（或它的类的一个实例），可以从容器中请求调用组件B，而不是创建组件B的一个实例。</p>\n<p> 这种工作方式为我们提供了许多优点：</p>\n<p> 我们可以更换一个组件，从他们本身或者第三方轻松创建。 在组件发布之前，我们可以充分的控制对象的初始化，并对对象进行各种设置。 我们可以使用统一的方式从组件得到一个结构化的全局实例</p>\n</li>\n<li><p>服务可以通过以下几种方式注入到容器：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">//Create the Dependency Injector Container</span><br><span class=\"line\">$di = new Phalcon\\DI();</span><br><span class=\"line\"></span><br><span class=\"line\">//By its class name</span><br><span class=\"line\">$di-&gt;set(&quot;request&quot;, &#x27;Phalcon\\Http\\Request&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">//Using an anonymous function, the instance will lazy loaded</span><br><span class=\"line\">$di-&gt;set(&quot;request&quot;, function()&#123;</span><br><span class=\"line\">    return new Phalcon\\Http\\Request();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//Registering  an instance</span><br><span class=\"line\">$di-&gt;set(&quot;request&quot;, new Phalcon\\Http\\Request());</span><br><span class=\"line\"></span><br><span class=\"line\">//Using an array definition</span><br><span class=\"line\">$di-&gt;set(&quot;request&quot;, array(</span><br><span class=\"line\">    &quot;className&quot; =&gt; &#x27;Phalcon\\Http\\Request&#x27;</span><br><span class=\"line\">));</span><br></pre></td></tr></table></figure>\n<p> 现在看代码，你有没有看到 Laravel 的影子呢，在上面的例子中，当向框架请求访问一个请求数据时，它将首先确定容器中是否存在这个”reqeust”名称的服务。 容器会反回一个请求数据的实例，开发人员最终得到他们想要的组件。</p>\n<p> 在上面示例中的每一种方法都有优缺点，具体使用哪一种，由开发过程中的特定场景来决定的。</p>\n<p> 用一个字符串来设定一个服务非常简单，但缺少灵活性。设置服务时，使用数组则提供了更多的灵活性，而且可以使用较复杂的代码。lambda函数是两者之间一个很好的平衡，但也可能导致更多的维护管理成本。</p>\n<p> Phalcon\\DI 提供服务的延迟加载。除非开发人员在注入服务的时候直接实例化一个对象，然后存存储到容器中。在容器中，通过数组，字符串等方式存储的服务都将被延迟加载，即只有在请求对象的时候才被初始化。</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">//Register a service &quot;db&quot; with a class name and its parameters</span><br><span class=\"line\">$di-&gt;set(&quot;db&quot;, array(</span><br><span class=\"line\">    &quot;className&quot; =&gt; &quot;Phalcon\\Db\\Adapter\\Pdo\\Mysql&quot;,</span><br><span class=\"line\">    &quot;parameters&quot; =&gt; array(</span><br><span class=\"line\">        &quot;parameter&quot; =&gt; array(</span><br><span class=\"line\">            &quot;host&quot; =&gt; &quot;localhost&quot;,</span><br><span class=\"line\">            &quot;username&quot; =&gt; &quot;root&quot;,</span><br><span class=\"line\">            &quot;password&quot; =&gt; &quot;secret&quot;,</span><br><span class=\"line\">            &quot;dbname&quot; =&gt; &quot;blog&quot;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\">));</span><br><span class=\"line\"></span><br><span class=\"line\">//Using an anonymous function</span><br><span class=\"line\">$di-&gt;set(&quot;db&quot;, function()&#123;</span><br><span class=\"line\">    return new Phalcon\\Db\\Adapter\\Pdo\\Mysql(array(</span><br><span class=\"line\">        &quot;host&quot; =&gt; &quot;localhost&quot;,</span><br><span class=\"line\">        &quot;username&quot; =&gt; &quot;root&quot;,</span><br><span class=\"line\">        &quot;password&quot; =&gt; &quot;secret&quot;,</span><br><span class=\"line\">        &quot;dbname&quot; =&gt; &quot;blog&quot;</span><br><span class=\"line\">    ));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p> 以上这两种服务的注册方式产生相同的结果。然后，通过数组定义的，在后面需要的时候，你可以修改服务参数：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$di-&gt;setParameter(&quot;db&quot;, 0, array(</span><br><span class=\"line\">    &quot;host&quot; =&gt; &quot;localhost&quot;,</span><br><span class=\"line\">    &quot;username&quot; =&gt; &quot;root&quot;,</span><br><span class=\"line\">    &quot;password&quot; =&gt; &quot;secret&quot;</span><br><span class=\"line\">));</span><br></pre></td></tr></table></figure>\n<p> 从容器中获得服务的最简单方式就是使用”get”方法，它将从容器中返回一个新的实例：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">    $request = $di-&gt;get(&quot;request&quot;);</span><br></pre></td></tr></table></figure>\n<p> 或者通过下面这种魔术方法的形式调用：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    $request = $di-&gt;getRequest();</span><br></pre></td></tr></table></figure>\n<p> Phalcon\\DI 同时允许服务重用，为了得到一个已经实例化过的服务，可以使用 <code>getShared()</code> 方法的形式来获得服务。</p>\n<p> 参数还可以在请求的时候通过将一个数组参数传递给构造函数的方式：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    $component = $di-&gt;get(&quot;MyComponent&quot;, array(&quot;some-parameter&quot;, &quot;other&quot;))</span><br></pre></td></tr></table></figure></li>\n</ol>\n","categories":["Web","Back","php"],"tags":["php","laravel"]},{"title":"Php算法——冒泡算法及其优化","url":"/php_bubbling_op/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$arr = array(1,30,5,8,2,7,12);</span><br><span class=\"line\">$cou = count($arr);</span><br><span class=\"line\"></span><br><span class=\"line\">// 常见算法,比较大小，两个数字，如果大或者小那么交换位置。</span><br><span class=\"line\">for($i=0;$i&lt;$cou;$i++)&#123;</span><br><span class=\"line\">  for($j=$i+1;$j&lt;$cou;$j++)&#123;</span><br><span class=\"line\">    echo $i.&#x27; &#x27;,$j.&#x27; &#x27;,$arr[$i].&#x27; &#x27;,$arr[$j].&#x27; &#x27;,&#x27;&lt;br/&gt;&#x27;;</span><br><span class=\"line\">    if($arr[$i] &gt; $arr[$j])&#123;</span><br><span class=\"line\">      $tmp = $arr[$i];</span><br><span class=\"line\">      $arr[$i] = $arr[$j];</span><br><span class=\"line\">      $arr[$j] = $tmp;</span><br><span class=\"line\">      $bool = true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 优化算法,增加一个flag，如果发生了交换就退出子循环。</span><br><span class=\"line\">for($i=0;$i&lt;$cou;$i++)&#123;</span><br><span class=\"line\">  $bool = false;</span><br><span class=\"line\"></span><br><span class=\"line\">  for($j=$i+1;$j&lt;$cou;$j++)&#123;</span><br><span class=\"line\">    echo $i.&#x27; &#x27;,$j.&#x27; &#x27;,$arr[$i].&#x27; &#x27;,$arr[$j].&#x27; &#x27;,&#x27;&lt;br/&gt;&#x27;;</span><br><span class=\"line\">    if($arr[$i] &gt; $arr[$j])&#123;</span><br><span class=\"line\">      $tmp = $arr[$i];</span><br><span class=\"line\">      $arr[$i] = $arr[$j];</span><br><span class=\"line\">      $arr[$j] = $tmp;</span><br><span class=\"line\">      $bool = true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if($bool == false)&#123;break;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Web","Back","php"],"tags":["php","算法"]},{"title":"创建packagist composer库","url":"/php_composer/","content":"<ol>\n<li><code>mkdir app &amp;&amp; cd app</code></li>\n<li><code>composer init</code></li>\n<li><code>vi composer.json</code>  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;yourname/yourpro&quot;,</span><br><span class=\"line\">    &quot;description&quot;: &quot;desc&quot;,</span><br><span class=\"line\">    &quot;authors&quot;: [&#123;</span><br><span class=\"line\">        &quot;name&quot;: &quot;yourname&quot;,</span><br><span class=\"line\">        &quot;email&quot;: &quot;yourname@gmail.com&quot;</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    &quot;require&quot;: &#123;&#125;,</span><br><span class=\"line\">    &quot;autoload&quot;: &#123;</span><br><span class=\"line\">        &quot;classmap&quot;: [</span><br><span class=\"line\">            &quot;lib/&quot;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>创建git库<code>yourname/yourpro</code></li>\n<li><code>git remote add origin git@github.com:yourname/yourpro</code> 设置公钥略过</li>\n<li><code>git add .&amp;&amp; git commit -am “init” &amp;&amp; git pull orgin master &amp;&amp; git push orgin master</code></li>\n<li>创建tag composer包版本来自于git分支和tag，分支代表dev版本(除master外)，tag代表stable版本</li>\n<li><code>git tag 1.0 &amp;&amp; git push origin –tags</code></li>\n<li>登录 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWNrYWdpc3Qub3JnLw==\">https://packagist.org/<i class=\"fa fa-external-link-alt\"></i></span> 点击由上角的submit提交git仓库的地址</li>\n<li>添加 GitHub Service Hook domain 指向packagist的地址</li>\n<li>安装库 <code>composer require ‘yourname/yourpro:1.0.0</code><br>  如果报错,执行<code>composer update</code>  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">nothing：</span><br><span class=\"line\"></span><br><span class=\"line\">Potential causes:</span><br><span class=\"line\">- A typo in the package name</span><br><span class=\"line\">- The package is not available in a stable-enough version according to your minimum-stability setting</span><br><span class=\"line\">  see &lt;https://groups.google.com/d/topic/composer-dev/_g3ASeIFlrc/discussion&gt; for more details.</span><br></pre></td></tr></table></figure>\n  如果<code>new \\Class</code>;提示类找不到，执行<code>composer dumpautoload</code></li>\n<li>包创建成功，可以根据提示继续配置github自动同步功能，这样每次push后，packagist对应包的版本号也会更新。</li>\n<li>修改包并更新，修改后git push，然后到使用该包的项目中执行<code>composer –dev –prefer-source update  [包名]</code> ，加<code>–prefer-source</code>意思是从github上检出最新版本。</li>\n</ol>\n","categories":["Web","Back","php"],"tags":["laravel","laravel5"]},{"title":"Php反射机制实现代理模式","url":"/php_delegator/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by PhpStorm.</span><br><span class=\"line\"> * User: zihao</span><br><span class=\"line\"> * Date: 2017/5/10</span><br><span class=\"line\"> * Time: 下午5:02</span><br><span class=\"line\"> */</span><br><span class=\"line\">class test&#123;</span><br><span class=\"line\">    function callprint()&#123;</span><br><span class=\"line\">        print_r(&quot;onesdf&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function test2( $args = &quot;&quot; )&#123;</span><br><span class=\"line\">        print_r( $args );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class testDelegator&#123;</span><br><span class=\"line\">    private $targets;</span><br><span class=\"line\">    function __construct($obj)&#123;</span><br><span class=\"line\">        $this-&gt;targets[] = $obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function __call($name,$args)&#123;</span><br><span class=\"line\">        foreach($this-&gt;targets as $obj)&#123;</span><br><span class=\"line\">            $r = new ReflectionClass($obj);</span><br><span class=\"line\">            if($method=$r-&gt;getMethod($name))&#123;</span><br><span class=\"line\">                if($method-&gt;isPublic() &amp;&amp; !$method-&gt;isAbstract())&#123;</span><br><span class=\"line\">                    return $method-&gt;invoke($obj,$args);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$d = new testDelegator(new test());</span><br><span class=\"line\">$d-&gt;callprint();</span><br><span class=\"line\">$d-&gt;test2(&#x27;the name of the method is test2&#x27;,&#x27;array2&#x27;);</span><br></pre></td></tr></table></figure>","categories":["Web","Back","php"],"tags":["php","面向对象"]},{"title":"Php可以动态的new一个变量类名","url":"/php_new_name/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    header(&quot;content-type:text/html; charset=utf-8&quot;);</span><br><span class=\"line\">    //echo ucfirst(&#x27;a b&#x27;);class Student&#123;</span><br><span class=\"line\">    private $xh;</span><br><span class=\"line\">    private $name;function __construct($id,$name)&#123;</span><br><span class=\"line\">        $this-&gt;id = $id;</span><br><span class=\"line\">        $this-&gt;name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function hello()&#123;</span><br><span class=\"line\">        echo &#x27;我的学号是：&#x27;.$this-&gt;id.&#x27;我的名字是：&#x27;.$this-&gt;name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$className = &#x27;Student&#x27;;</span><br><span class=\"line\">$stu = new $className(&#x27;123456&#x27;,&#x27;abc&#x27;);</span><br><span class=\"line\">$stu-&gt;hello();</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>页面打印结果如下： <code> 我的学号是：123456我的名字是：abc</code></p>\n","categories":["Web","Back","php"],"tags":["php"]},{"title":"Php批量去除bom头脚本","url":"/php_bom/","content":"<p>请放在根目录下使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">//remove the utf-8 boms</span><br><span class=\"line\">//by magicbug at gmail dot com</span><br><span class=\"line\"></span><br><span class=\"line\">if (isset($_GET[&#x27;dir&#x27;]))&#123; //config the basedir</span><br><span class=\"line\">    $basedir=$_GET[&#x27;dir&#x27;];</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    $basedir = &#x27;.&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$auto = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">checkdir($basedir);</span><br><span class=\"line\"></span><br><span class=\"line\">function checkdir($basedir)&#123;</span><br><span class=\"line\">    if ($dh = opendir($basedir)) &#123;</span><br><span class=\"line\">        while (($file = readdir($dh)) !== false) &#123;</span><br><span class=\"line\">            if ($file != &#x27;.&#x27; &amp;&amp; $file != &#x27;..&#x27;)&#123;</span><br><span class=\"line\">                if (!is_dir($basedir.&quot;/&quot;.$file)) &#123;</span><br><span class=\"line\">                    echo &quot;filename</span><br><span class=\"line\"> $basedir/$file &quot;.checkBOM(&quot;$basedir/$file&quot;).&quot; &lt;br&gt;&quot;;</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                    $dirname = $basedir.&quot;/&quot;.$file;</span><br><span class=\"line\">                    checkdir($dirname);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        closedir($dh);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function checkBOM ($filename) &#123;</span><br><span class=\"line\">    global $auto;</span><br><span class=\"line\">    $contents = file_get_contents($filename);</span><br><span class=\"line\">    $charset[1] = substr($contents, 0, 1);</span><br><span class=\"line\">    $charset[2] = substr($contents, 1, 1);</span><br><span class=\"line\">    $charset[3] = substr($contents, 2, 1);</span><br><span class=\"line\">    if (ord($charset[1]) == 239 &amp;&amp; ord($charset[2]) == 187 &amp;&amp; ord($charset[3]) == 191) &#123;</span><br><span class=\"line\">        if ($auto == 1) &#123;</span><br><span class=\"line\">            $rest = substr($contents, 3);</span><br><span class=\"line\">            rewrite ($filename, $rest);</span><br><span class=\"line\">            return (&quot;&lt;font color=red&gt;BOM found, automatically removed.&lt;/font&gt;&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return (&quot;&lt;font color=red&gt;BOM found.&lt;/font&gt;&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else return (&quot;BOM Not Found.&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function rewrite ($filename, $data) &#123;</span><br><span class=\"line\">    $filenum = fopen($filename, &quot;w&quot;);</span><br><span class=\"line\">    flock($filenum, LOCK_EX);</span><br><span class=\"line\">    fwrite($filenum, $data);</span><br><span class=\"line\">    fclose($filenum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["Web","Back","php"],"tags":["php"]},{"title":"浅谈Laravel设计模式","url":"/php_laravel_patterns_ioc/","content":"<h2 id=\"什么是-DI依赖注入-x2F-IOC控制反转\"><a href=\"#什么是-DI依赖注入-x2F-IOC控制反转\" class=\"headerlink\" title=\"什么是 DI依赖注入&#x2F;IOC控制反转\"></a>什么是 DI依赖注入&#x2F;IOC控制反转</h2><h3 id=\"DI-依赖注入\"><a href=\"#DI-依赖注入\" class=\"headerlink\" title=\"DI 依赖注入\"></a>DI 依赖注入</h3><p>啥都不说，直接上代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    class UserController</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        private $user;</span><br><span class=\"line\"></span><br><span class=\"line\">        function __construct(UserModel $user) &#123;</span><br><span class=\"line\">            $this-&gt;user = $user;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $user = new UserController(new UserMonel());</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>User控制器依赖UserModel,实例化的时候，直接注入。</p>\n<h3 id=\"IOC控制反转\"><a href=\"#IOC控制反转\" class=\"headerlink\" title=\"IOC控制反转\"></a>IOC控制反转</h3><p>先说说IOC和DI的区别吧</p>\n<p>IOC是一种设计思想<br>DI是一种设计模式</p>\n<p>所以两者有本质上的区别。DI是IOC的一种实现方法（还有ServiceLocator等其他设计模式）。 所谓的反转，主要指由 主动依赖 到 被动依赖 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//主动依赖</span><br><span class=\"line\"> function __construct() &#123;</span><br><span class=\"line\">         $this-&gt;user = new UserModel();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> //被动依赖</span><br><span class=\"line\"> function __construct(UserModel $user) &#123;</span><br><span class=\"line\">         $this-&gt;user = $user;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>参考 浅谈IOC–说清楚IOC是什么</p>\n<h2 id=\"什么是IOC容器\"><a href=\"#什么是IOC容器\" class=\"headerlink\" title=\"什么是IOC容器\"></a>什么是IOC容器</h2><p>IOC容器 是Laravel的核心设计模式，对于laravel的应用和理解是非常有必要深入学习的！</p>\n<p>IOC思想实现了高度解耦，那么，问题来了，如何管理这些分散的模块呢？这就是容器的任务了！</p>\n<p>可以想象成，在IOC容器中，装着（注册）很多模块。当用户需要一个模块的时候，可以从中拿出来。当提取的模块依赖另一个模块的时候，容器会自动注入，再返回给用户（反射机制实现）。</p>\n<p>是不是碉堡了？大批互相依赖的模块被完美解耦并统一管理了！</p>\n<h2 id=\"什么是服务提供者（ServiceProvider）\"><a href=\"#什么是服务提供者（ServiceProvider）\" class=\"headerlink\" title=\"什么是服务提供者（ServiceProvider）\"></a>什么是服务提供者（ServiceProvider）</h2><p>假设模块一多，那么容器不是越来越大？每次加载，岂不是加载好久？ 能不能弄一条管子，连接着模块，插在容器上，需要再通过管道获取呢？这样子，容器只是装着管头而已，就不怕被撑大了！</p>\n<p>这条管子就是 服务提供者。</p>\n<p>服务提供者本身也是一个类，不过这个类只有启动和注册两个函数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">  * Bootstrap the application services.</span><br><span class=\"line\">  *</span><br><span class=\"line\">  * @return void</span><br><span class=\"line\">  */</span><br><span class=\"line\"> public function boot()</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">    //</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> /**</span><br><span class=\"line\">  * Register the application services.</span><br><span class=\"line\">  *</span><br><span class=\"line\">  * @return void</span><br><span class=\"line\">  */</span><br><span class=\"line\"> public function register()</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     //绑定到容器</span><br><span class=\"line\">     $this-&gt;app-&gt;singleton(</span><br><span class=\"line\">         &#x27;Riak\\Contracts\\Connection&#x27;, </span><br><span class=\"line\">         function ($app) &#123;</span><br><span class=\"line\">             return new Connection($app[&#x27;config&#x27;][&#x27;riak&#x27;]);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     );</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>服务提供者在<code>config/app.php</code>中配置，laravel自动注册到容器中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27;providers&#x27; =&gt; [</span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">     * Laravel Framework Service Providers...</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Illuminate\\Auth\\AuthServiceProvider::class,</span><br><span class=\"line\">    Illuminate\\Broadcasting\\BroadcastServiceProvider::class,</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">     * Application Service Providers...</span><br><span class=\"line\">     */</span><br><span class=\"line\">    app\\Providers\\AppServiceProvider::class,</span><br><span class=\"line\">    app\\Providers\\AuthServiceProvider::class,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是门面（Facade）\"><a href=\"#什么是门面（Facade）\" class=\"headerlink\" title=\"什么是门面（Facade）\"></a>什么是门面（Facade）</h2><p>程序猿总是偷懒的，每次要模块，都要去容器里面拿，多麻烦啊！找个人代拿行不？这送货小哥就叫Facade门面。文档中叫静态代理。</p>\n<p>送货小哥都是在<code>config/app.php</code> 中注册的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27;aliases&#x27; =&gt; [</span><br><span class=\"line\">     &#x27;App&#x27;       =&gt; Illuminate\\Support\\Facades\\App::class,</span><br><span class=\"line\">     &#x27;Config&#x27;    =&gt; Illuminate\\Support\\Facades\\Config::class,</span><br><span class=\"line\">     &#x27;Cookie&#x27;    =&gt; Illuminate\\Support\\Facades\\Cookie::class,</span><br><span class=\"line\">     &#x27;Crypt&#x27;     =&gt; Illuminate\\Support\\Facades\\Crypt::class,</span><br><span class=\"line\">     &#x27;DB&#x27;        =&gt; Illuminate\\Support\\Facades\\DB::class,</span><br><span class=\"line\">     &#x27;Route&#x27;     =&gt; Illuminate\\Support\\Facades\\Route::class,</span><br><span class=\"line\">     ...</span><br><span class=\"line\"> ],</span><br></pre></td></tr></table></figure>\n<p>查看<code>Illuminate\\Support\\Facades\\Route</code>代码，可以发现只有<code>getAccessFacade()</code>方法，这就是交代送啥货的函数，继承了Facade这个小哥基类。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Route extends Facade</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Get the registered name of the component.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return string</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected static function getFacadeAccessor()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return &#x27;router&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注册了Facade门面后，就可以在任意地方使用了！</p>\n<p>文档有详细的使用方式 Laravel 架构 — Facades。</p>\n<h2 id=\"Application和Kernel\"><a href=\"#Application和Kernel\" class=\"headerlink\" title=\"Application和Kernel\"></a>Application和Kernel</h2><p>不难发现，在引导程序开始初始化的时候，也就是在<code>boostrap\\app.php</code>文件，里面一来就new了一个 <code>Illuminate\\Foundation\\Application</code>。下面分别注册了 <code>Http\\Kernel</code>、<code>Console\\Kernel</code>、<code>Exceptions\\Handler</code>等。</p>\n<p>这里可以这么理解，new一个Application，可以看作是创造了一个空间，这个空间初始化的时候，就会为自己注入一个容器，也就是在空间中放了一个容器。</p>\n<p>在 <code>Illuminate\\Foundation\\Application.php</code> 中的 <code>registerBaseBindings()</code> 函数可以查看到容器注入源码。</p>\n<p>至于kernel，可以看成是这个空间的工人，有各种各样的工人，每个工人都有自己的工作。好比HttpKernel，负责处理http请求以及控制整个请求流程。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>讲到这里就差不多分享完了，以上是只是个人理解，欢迎提出里面理解不妥当的地方！</p>\n","categories":["Web","Back","php"],"tags":["php","laravel","设计模式"]},{"title":"解决Undefined variable: _SESSION的方法","url":"/php_session_err/","content":"<p>本文为大家介绍解决PHP使用SESSION报错的方法。对于初次使用session的人来说可能会遇到Undefined variable: _SESSION这样的错误，错误原因是因为没有开启session。因为php中的session默认是不开启的，需要在程序中开启才能使用。PHP错误：PHP Notice: Undefined variable: _SESSION原因及解决方法</p>\n<p>遇到Undefined variable: _SESSION 错误的原因是php session没有开启引起的。</p>\n<p>下面有两种解决办法.</p>\n<ol>\n<li>在程序里添加<code>session_start()</code>函数</li>\n<li>在php.ini里将<code>session.auto_start = 0</code>设置为<code>session.auto_start = 1</code></li>\n</ol>\n<p>以上就是解决Undefined variable: _SESSION的方法。</p>\n<p>Notice: A session had already been starte 解决办法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Notice: A session had already been started – ignoring session_start() in .. on line ..</span><br><span class=\"line\"></span><br><span class=\"line\">This happens when you try to start session more than once.</span><br><span class=\"line\"></span><br><span class=\"line\">The solution for above problem is</span><br><span class=\"line\"></span><br><span class=\"line\">1) in php.ini file set session.autostart to 0</span><br><span class=\"line\"></span><br><span class=\"line\">session.auto_start = 0</span><br><span class=\"line\"></span><br><span class=\"line\">2) In your code use this line</span><br><span class=\"line\"></span><br><span class=\"line\">if (!session_id()) session_start();</span><br><span class=\"line\"></span><br><span class=\"line\">instead of</span><br><span class=\"line\"></span><br><span class=\"line\">session_start();</span><br></pre></td></tr></table></figure>\n","categories":["Web","Back","php"],"tags":["php"]},{"title":"Php调试函数debug_backtrace","url":"/php_debug_backtrace/","content":"<h3 id=\"debug-print-backtrace\"><a href=\"#debug-print-backtrace\" class=\"headerlink\" title=\"debug_print_backtrace();\"></a>debug_print_backtrace();</h3><p>会在页面直接输出。可以开启缓冲期</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ob_start();开启缓冲区</span><br><span class=\"line\">ob_flush();缓冲器清除</span><br><span class=\"line\">ob_get_contents();获取缓冲区内容</span><br><span class=\"line\">ob_end_clean();缓冲器清除</span><br><span class=\"line\">这个函数不会输出内部缓冲区的内容而是把它删除！</span><br><span class=\"line\">function getBacktrace() &#123;</span><br><span class=\"line\">  ob_start();</span><br><span class=\"line\">  debug_print_backtrace();</span><br><span class=\"line\">  return ob_get_clean();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用这个函数取得错误堆栈，然后使用file_put_contents(‘log_path’, FILE_APPEND);写入日志文件。</p>\n<h3 id=\"debug-backtrace\"><a href=\"#debug-backtrace\" class=\"headerlink\" title=\"debug_backtrace();\"></a>debug_backtrace();</h3><p>会返回一个数组，支持自己进行logger记录。</p>\n<p>若需进行堆栈信息自行输出。可使用下列自定义的函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">private function print_stack_trace()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $array = debug_backtrace();</span><br><span class=\"line\">    unset($array[0]);</span><br><span class=\"line\">    foreach($array as $key=&gt;$row)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $file =  isset($row[&#x27;file&#x27;]) ? $row[&#x27;file&#x27;].&#x27; : &#x27; : &#x27;&#x27; ;</span><br><span class=\"line\">        $line =  isset($row[&#x27;line&#x27;]) ? $row[&#x27;line&#x27;].&#x27; 行,调用方法 &#x27; : &#x27;&#x27;;</span><br><span class=\"line\">        $function =  isset($row[&#x27;function&#x27;]) ?  $row[&#x27;function&#x27;] :&#x27;&#x27;;</span><br><span class=\"line\">        Logger::notice($file.$line.$function);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"debug-zval-dump\"><a href=\"#debug-zval-dump\" class=\"headerlink\" title=\"debug_zval_dump();\"></a>debug_zval_dump();</h3><p>该函数与<code>var_dump()</code>的区别是它新增了一个值<code>refcount</code>,及记录变量被引用的次数。同时它还可以打印几个变量。</p>\n<p>php垃圾回收机制引用计数器概念：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5waHBkZHQuY29tL3BocC9nYy1yZWZjb3VudGluZy1iYXNpY3MuaHRtbA==\">http://www.phpddt.com/php/gc-refcounting-basics.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">xdebug_debug_zval();</span><br><span class=\"line\"></span><br><span class=\"line\">refcount=2,is_ref=0</span><br><span class=\"line\">debug_zval_dump();</span><br><span class=\"line\"></span><br><span class=\"line\">refcount(3)</span><br></pre></td></tr></table></figure>","categories":["Web","Back","php"]},{"title":"Python的pdb调试技巧","url":"/python_pdb/","content":"<p>python中有个pdb模块，使python代码也可以像gdb那样进行调试，一般情况下pdb模块可以在代码内直接使用，也可以通过命令行参数的形式添加该模块进行调试(python -m pdb file.py)。在代码中直接使用pdb模块调试时，<code>import pdb</code>模块后，然后在需要调试的代码出添加<code>pdb.set_trace()</code>命令即可，运行程序后，在运行到次代码处会自动停止，进入调试模式。</p>\n<p>一般常用的调试命令有如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">q 退出debug</span><br><span class=\"line\">h 打印可用的调试命令</span><br><span class=\"line\">b 设置断点，b 5 在第五行设置断点</span><br><span class=\"line\">h command 打印command的命令含义</span><br><span class=\"line\">disable codenum  使某一行断点失效</span><br><span class=\"line\">enable codenum   使某一行的断点有效</span><br><span class=\"line\">condition codenum xxx  针对断点设置条件</span><br><span class=\"line\">c 继续执行程序，直到下一个断点</span><br><span class=\"line\">n 执行下一行代码，如果当前语句有函数调用，则不会进入函数体中</span><br><span class=\"line\">s 执行下一行代码，但是s会进入函数</span><br><span class=\"line\">w 打印当前执行点的位置</span><br><span class=\"line\">j codenum  让程序跳转到指定的行</span><br><span class=\"line\">l 列出附近的源码</span><br><span class=\"line\">p 打印一个参数的值</span><br><span class=\"line\">a 打印当前函数及参数的值</span><br><span class=\"line\">回车  重复执行上一行</span><br></pre></td></tr></table></figure>\n<p>测试代码如下sum.py：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#/usr/bin/python</span><br><span class=\"line\"></span><br><span class=\"line\">def add_t( ):</span><br><span class=\"line\">    i=1</span><br><span class=\"line\">    sum=0</span><br><span class=\"line\">    for i in range(1,5):</span><br><span class=\"line\">        sum=sum+i</span><br><span class=\"line\">        print sum</span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    add_t()</span><br></pre></td></tr></table></figure>\n<p>调试过程如下：<code>python -m pdb sum.py</code></p>\n<p>n调试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; /opt/sum.py(3)&lt;module&gt;()</span><br><span class=\"line\">-&gt; def add_t( ):</span><br><span class=\"line\"> (Pdb) n</span><br><span class=\"line\">&gt; /opt/sum.py(9)&lt;module&gt;()</span><br><span class=\"line\">-&gt; if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">(Pdb) n</span><br><span class=\"line\">&gt; /opt/sum.py(10)&lt;module&gt;()</span><br><span class=\"line\">-&gt; add_t()</span><br><span class=\"line\">(Pdb) n</span><br><span class=\"line\">1</span><br><span class=\"line\">3</span><br><span class=\"line\">6</span><br><span class=\"line\">10</span><br><span class=\"line\">--Return--</span><br><span class=\"line\">&gt; /opt/sum.py(10)&lt;module&gt;()-&gt;None</span><br><span class=\"line\">-&gt; add_t()</span><br><span class=\"line\">(Pdb) q</span><br></pre></td></tr></table></figure>\n\n<p>n表示执行下一行代码，但是不陷入函数内部，可以看第3、6、9行，在执行add_t函数时并未陷入函数内部。</p>\n<p>s调试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1 &gt; /opt/sum.py(3)&lt;module&gt;()</span><br><span class=\"line\">2 -&gt; def add_t( ):</span><br><span class=\"line\">(Pdb) s</span><br><span class=\"line\">&gt; /opt/sum.py(9)&lt;module&gt;()</span><br><span class=\"line\">-&gt; if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">(Pdb) s</span><br><span class=\"line\">&gt; /opt/sum.py(10)&lt;module&gt;()</span><br><span class=\"line\">-&gt; add_t()</span><br><span class=\"line\">(Pdb) s</span><br><span class=\"line\">--Call--</span><br><span class=\"line\">&gt; /opt/sum.py(3)add_t()</span><br><span class=\"line\">-&gt; def add_t( ):</span><br><span class=\"line\">(Pdb) s</span><br><span class=\"line\">&gt; /opt/sum.py(4)add_t()</span><br><span class=\"line\">-&gt; i=1</span><br><span class=\"line\">(Pdb) s</span><br><span class=\"line\">&gt; /opt/sum.py(5)add_t()</span><br><span class=\"line\">-&gt; sum=0</span><br><span class=\"line\">(Pdb) s</span><br><span class=\"line\">&gt; /opt/sum.py(6)add_t()</span><br><span class=\"line\">-&gt; for i in range(1,5):</span><br><span class=\"line\">(Pdb) s</span><br><span class=\"line\">&gt; /opt/sum.py(7)add_t()</span><br><span class=\"line\">-&gt; sum=sum+i</span><br><span class=\"line\">(Pdb) s</span><br><span class=\"line\">&gt; /opt/sum.py(8)add_t()</span><br><span class=\"line\">-&gt; print sum</span><br><span class=\"line\">(Pdb) p i</span><br><span class=\"line\">1</span><br><span class=\"line\">(Pdb) p sum</span><br><span class=\"line\">1</span><br><span class=\"line\">(Pdb) s</span><br><span class=\"line\">1</span><br><span class=\"line\">&gt; /opt/sum.py(6)add_t()</span><br><span class=\"line\">-&gt; for i in range(1,5):</span><br><span class=\"line\">(Pdb) s</span><br><span class=\"line\">&gt; /opt/sum.py(7)add_t()</span><br><span class=\"line\">-&gt; sum=sum+i</span><br><span class=\"line\">(Pdb) s</span><br><span class=\"line\">&gt; /opt/sum.py(8)add_t()</span><br><span class=\"line\">-&gt; print sum</span><br><span class=\"line\">(Pdb) p i</span><br><span class=\"line\">2</span><br><span class=\"line\">(Pdb) p sum</span><br><span class=\"line\">3</span><br><span class=\"line\">(Pdb)</span><br></pre></td></tr></table></figure>\n<p>s调试和n调试一样，只不过s在遇到函数时会进入函数进行调试，9、12、13表示进入<code>add_t</code>函数内部进行调试，后面使用p命令打印相关函数内参数的值，后面输入r即可退出函数内部的调试。</p>\n","categories":["Web","Back","python"],"tags":["python"]},{"title":"JupyterNotebook交互式笔记本","url":"/python_jupyter/","content":"<p>Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。在本文中，我们将介绍 Jupyter notebook 的主要特性，以及为什么对于希望编写漂亮的交互式文档的人来说是一个强大工具。</p>\n<p>在开始使用 notebook 之前，我们先需要安装该库。你可以在 Jupyter 官网上找到完整的步骤。</p>\n<p>注：其实只要 <code>pip install jupyter</code> 就可以了</p>\n<p>运行上面的命令之后，你将看到类似下面这样的输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[I 20:06:36.367 NotebookApp] Writing notebook server cookie secret to /run/user/1000/jupyter/notebook_cookie_secret</span><br><span class=\"line\">[I 20:06:36.813 NotebookApp] Serving notebooks from local directory: /home/your_username</span><br><span class=\"line\">[I 20:06:36.813 NotebookApp] 0 active kernels</span><br><span class=\"line\">[I 20:06:36.813 NotebookApp] The IPython Notebook is running at: http://localhost:8888/</span><br><span class=\"line\">[I 20:06:36.813 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).</span><br></pre></td></tr></table></figure>\n<p>同时，会在你开启 notebook 的文件夹中启动 Jupyter 主界面，如下所示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419144106.png?token=ACYTD77FPKTCEU2J3S4TM5S4XFW4C\"></p>\n<p>如果想新建一个 notebook，只需要点击 <code>New</code> ，选择你希望启动的 notebook 类型即可。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419144139.png?token=ACYTD7Y3774QZ6SSZZGRHT24XFW6G\"></p>\n<p>这里，因为我只有一个 Python 内核，所以我们运行一个 Python notebook。在新打开的标签页中，我们会看到 notebook 界面，目前里面什么也没有。<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419144154.png?token=ACYTD77MTCNU6AQSCWRH7RK4XFW7A\"></p>\n<p>notebook 界面由以下部分组成：</p>\n<ul>\n<li>notebook 的名称</li>\n<li>主工具栏，提供了保存、导出、重载 notebook，以及重启内核等选项</li>\n<li>快捷键</li>\n<li>notebook 主要区域，包含了 notebook 的内容编辑区</li>\n</ul>\n<p>慢慢熟悉这些菜单和选项。如果想要详细了解有关 notebook 或一些库的具体话题，可以使用菜单栏右侧的帮助菜单。</p>\n<p>下方的主要区域，由被称为单元格的部分组成。每个 notebook 由多个单元格构成，而每个单元格又可以有不同的用途。</p>\n<p>下方截图中看到的是一个代码单元格（code cell），以 [ ] 开头。在这种类型的单元格中，可以输入任意代码并执行。例如，输入 <code>1 + 2</code> 并按下 <code>Shift + Enter</code> 。之后，单元格中的代码就会被计算，光标也会被移动动一个新的单元格中。你会得到如下结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419144205.png?token=ACYTD7Y572Q3CCGSWWMHV6C4XFW7Y\"></p>\n<p>根据绿色边框线，我们可以轻松地识别出当前工作的单元格。接下来，我们在第二个单元格中输入些其他代码，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">for i in range(5):</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n\n<p>对上面的代码求值时，你会得到：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419144227.png?token=ACYTD7YWHTCOGZKDF7N3Y7K4XFXBG\"></p>\n<p>和前一个示例一样，代码被计算之后，马上就会显示结果。你应该注意到了，这次没有出现类似 <code>Out[2]</code> 这样的文字。这是因为我们将结果打印出来了，没有返回任何的值。</p>\n<p>notebook 有一个非常有趣的特性，就是可以修改之前的单元格，对其重新计算，这样就可以更新整个文档了。试着把光标移回第一个单元格，并将 <code>1 + 2</code> 修改成 <code>2 + 3</code> ，然后按下 <code>Shift + Enter</code> 重新计算该单元格。你会发现结果马上就更新成了 5。如果你不想重新运行整个脚本，只想用不同的参数测试某个程式的话，这个特性显得尤其强大。不过，你也可以重新计算整个 notebook，只要点击 <code>Cell -&gt; Run all</code> 即可。</p>\n<p>现在我们已经知道了如何输入代码，为什么不尝试着让这个 notebook 更加漂亮、内容更丰富？为此，我们需要使用其他类型的单元格，即 Header单元格和 Markdown单元格。</p>\n<p>首先，我们在顶部添加一个 notebook 的标题。选中第一个单元格，然后点击 <code>Insert -&gt; Insert单元格above</code> （在上方插入单元格）。你会发现，文档的顶部马上就出现了一个新的单元格。点击在快捷键栏中的单元格类型，将其变成一个标题单元格（heading cell）：<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419144305.png?token=ACYTD762YC5KKGPUCDMB2K24XFXDQ\"></p>\n<p>选中下拉选项中的 Heading。然后会出现一个弹出消息，告诉你如何创建不同层级的标题，这样你就有了一个不同类型的 cell：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419144324.png?token=ACYTD76IJY72MCXXDIPWSFS4XFXEU\"></p>\n<p>这个单元格以 <code>#</code> 标记开头，意味着这是一个一级标题。如果需要子标题，可以使用以下标记表示（改变单元格类型时弹出消息中有解释）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># : 一级标题</span><br><span class=\"line\">## : 二级标题</span><br><span class=\"line\">### : 三级标题</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>在 <code>#</code>之后写下文档的标题，然后计算该单元格。你会发现一个样式非常好看的标题。作为示例和练习，我还添加了其他几个标题单元格：<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419144347.png?token=ACYTD72X422RLRVY6TLZEOK4XFXGE\"></p>\n<p>添加好标题之后，我们在编写一些解释，介绍每个代码单元格中的情况。为此，我们要在相应的地方插入单元格，然后将其类型变成 <code>Markdown</code>。然后，计算新的单元格。就这样，你的解释文本就漂亮地渲染出来了！<br><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190419144401.png?token=ACYTD76YKYQNICTISDOXIGC4XFXHC\"></p>\n<p>最后，你可以重命名该 notebook，点击 <code>Fiel</code> -&gt; <code>Rename</code> ，然后输入新的名称。这样，新的名称将会出现在窗口的左上角，在 Jupyter 的标志旁边。</p>\n","categories":["Web","Back","python"],"tags":["python","Jupyter Notebook"]},{"title":"Python中的float除法和整除法","url":"/python_float/","content":"<p>python中的float除法和整除法，有需要的朋友可以参考下。</p>\n<p>从python2.2开始，便有两种除法运算符：”&#x2F;”、”&#x2F;&#x2F;”。两者最大区别在：</p>\n<ol>\n<li>python2.2前的版本和python2.2以后3.0以前的版本的默认情况下，”&#x2F;”所做的除法是以一种两个数或者多个数出现一个浮点数结果就以浮点数的形式表示，即float除法</li>\n<li>“&#x2F;&#x2F;”所做的除法则不相同，”&#x2F;&#x2F;”不管两者出现任何数，都以整除结果为准，不对小数部分进行处理，直接抛弃，也就是整除法</li>\n</ol>\n<p>以下是在编译器测试的数据，测试的版本是python2.7</p>\n<p>关于”&#x2F;”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; 3/2</span><br><span class=\"line\">1</span><br><span class=\"line\">&gt;&gt;&gt; 3/2.0</span><br><span class=\"line\">1.5</span><br><span class=\"line\">&gt;&gt;&gt; 3.0/2</span><br><span class=\"line\">1.5</span><br><span class=\"line\">&gt;&gt;&gt; 10/3.0</span><br><span class=\"line\">3.3333333333333335</span><br></pre></td></tr></table></figure>\n<p>由以上的例子我们可得出，只要除数中<strong>有一个数</strong>是浮点数，那么得到的结果也是浮点数</p>\n<p>以下是关于”&#x2F;&#x2F;”:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; 3//2</span><br><span class=\"line\">1</span><br><span class=\"line\">&gt;&gt;&gt; 3//2.0</span><br><span class=\"line\">1.0</span><br><span class=\"line\">&gt;&gt;&gt; 3.0//2</span><br><span class=\"line\">1.0</span><br><span class=\"line\">&gt;&gt;&gt; 3.0//2.0</span><br><span class=\"line\">1.0</span><br></pre></td></tr></table></figure>\n<p>由以上的例子，我们可以看出，两个整型相除，得到的还是整型，但是。如果一个浮点数除以一个非浮点数得到的还会是一个浮点数，但是，计算的结果却是忽略小数部分，运算的结果类似两个整型相除，但是得到一个浮点数。另外”&#x2F;&#x2F;”对于两个浮点数也是不例外的。</p>\n<p>如何让”&#x2F;”和”&#x2F;&#x2F;”进行分工</p>\n<p>在默认情况下，这两种运算符有很大的重叠地方，比如，当两个数都是整数的时候，两者的运算结果是没有区别的。如果想在python中让这两种有一个明确的分工。即”&#x2F;”可以用于float除法，”&#x2F;&#x2F;”用于整除法，我们可以在程序开始的时候做以下声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from __future__ import division</span><br></pre></td></tr></table></figure>\n<p>声明后测试的结果（以下测试的版本是python2.7）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from __future__ import division</span><br><span class=\"line\">&gt;&gt;&gt; 3/2</span><br><span class=\"line\">1.5</span><br><span class=\"line\">&gt;&gt;&gt; 3.0/2</span><br><span class=\"line\">1.5</span><br><span class=\"line\">&gt;&gt;&gt; 3/2.0</span><br><span class=\"line\">1.5</span><br><span class=\"line\">&gt;&gt;&gt; 3.0/2.0</span><br><span class=\"line\">1.5</span><br><span class=\"line\">&gt;&gt;&gt; 3//2</span><br><span class=\"line\">1</span><br><span class=\"line\">&gt;&gt;&gt; 3.0//2</span><br><span class=\"line\">1.0</span><br><span class=\"line\">&gt;&gt;&gt; 3.0//2.0</span><br><span class=\"line\">1.0</span><br><span class=\"line\">&gt;&gt;&gt; 3//2.0</span><br><span class=\"line\">1.0</span><br><span class=\"line\">&gt;&gt;&gt; -11/2</span><br><span class=\"line\">-5.5</span><br></pre></td></tr></table></figure>\n<p>以上，我们可以知道，做这个声明以后，”&#x2F;”进行的将是float除法而不是整除法。<br>还需要注意的是，在<strong>pyhton3</strong>中，”&#x2F;”表示的就是float除，不需要再引入模块，就算分子分母都是int，返回的也将是浮点数</p>\n","categories":["Web","Back","python"]},{"title":"httplib源码分析及IncompleteRead异常解决方案","url":"/python_httplib_err/","content":"<p>由于触发了自定义规则，导致返回content-length大于实际页面内容，报IncompleteRead异常。</p>\n<p>解决方法如下：</p>\n<p>1.修改_safe_read方法，将抛出异常换为返回数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">s = []  </span><br><span class=\"line\">       while amt &gt; 0:  </span><br><span class=\"line\">           chunk = self.fp.read(min(amt, MAXAMOUNT))  </span><br><span class=\"line\">           if not chunk:  </span><br><span class=\"line\">               #raise IncompleteRead(s)  </span><br><span class=\"line\">               return &#x27;&#x27;.join(s)  </span><br><span class=\"line\">           s.append(chunk)  </span><br><span class=\"line\">           amt -= len(chunk)  </span><br><span class=\"line\">       return &#x27;&#x27;.join(s)  </span><br></pre></td></tr></table></figure>\n<p>2.使用装饰器打patch</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">def patch_http_response_read(func):  </span><br><span class=\"line\">    def inner(*args):  </span><br><span class=\"line\">        try:  </span><br><span class=\"line\">            return func(*args)  </span><br><span class=\"line\">        except IncompleteRead, e:  </span><br><span class=\"line\">            return &#x27;&#x27;.join(e.partial)  </span><br><span class=\"line\">    return inner  </span><br><span class=\"line\">HTTPResponse.read = patch_http_response_read(HTTPResponse.read)  </span><br></pre></td></tr></table></figure>\n\n<p>将上面代码放到httplib的最后就可以了，注意IncompletedRead的<code>partial</code>参数是list变量，因为<code>_safe_read</code>中的<code>s</code>是<code>[]</code>。</p>\n<p>个人推荐第二种方法。</p>\n","categories":["Web","Back","python"],"tags":["python"]},{"title":"Jupyter服务器部署及后台运行","url":"/python_jupyter_dev/","content":"<blockquote>\n<p>为了能够长时间访问 Jupyter Notebook，避免每次都需登陆服务器手动执行命令，我们需要让该命令一直在后台自动运行，最好是支持系统重启时自动启动。因此，我们可以将 jupyter 变成一个系统服务。</p>\n</blockquote>\n<h3 id=\"启动脚本\"><a href=\"#启动脚本\" class=\"headerlink\" title=\"启动脚本\"></a>启动脚本</h3><p>创建 <code>/etc/init/jupyter.conf</code> 文件，写入如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">start on runlevel [2345]</span><br><span class=\"line\">stop on runlevel [!2345]</span><br><span class=\"line\">setuid ubuntu</span><br><span class=\"line\">setgid ubuntu</span><br><span class=\"line\">env PATH=/home/ubuntu/venv/bin</span><br><span class=\"line\">chdir /home/ubuntu/jupyter</span><br><span class=\"line\">exec jupyter notebook --config /home/ubuntu/venv/conf.py</span><br></pre></td></tr></table></figure>\n\n<p>上面定义了该服务在 runlevel 为 2、3、4、5 时启动，而在非这几个 runlevel 时停止该服务。</p>\n<ul>\n<li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</li>\n<li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</li>\n<li>运行级别2：多用户状态(没有NFS)</li>\n<li>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</li>\n<li>运行级别4：系统未使用，保留</li>\n<li>运行级别5：X11控制台，登陆后进入图形GUI模式</li>\n<li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li>\n</ul>\n<p>配置好了<code>/etc/init/jupyter.conf</code> 文件之后，就能够通过如下命令启动、停止和重启 Jupyter Notebook 了： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo start jupyter # 启动 jupyter</span><br><span class=\"line\">sudo stop/restart jupyter # 停止/重启 jupyter</span><br><span class=\"line\">sudo status jupyter # 查看 jupyter 的状态</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-Nignx-并创建系统服务\"><a href=\"#配置-Nignx-并创建系统服务\" class=\"headerlink\" title=\"配置 Nignx 并创建系统服务\"></a><strong>配置 Nignx 并创建系统服务</strong></h3><p>下一步，我们设置 Nginx 作为 Jupyter 的反向代理服务器。首先，安装 Nginx，并修改 default 设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nignx</span><br><span class=\"line\">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n<p>修改其中的 location &#x2F; 部分，并注释掉某些行，具体见下面的示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80 default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">    listen [::]:80 default_server ipv6only=on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #root /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    #index index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Make site accessible from http://localhost/</span><br><span class=\"line\"></span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # First attempt to serve request as file, then</span><br><span class=\"line\"></span><br><span class=\"line\">        # as directory, then fall back to displaying a 404.</span><br><span class=\"line\"></span><br><span class=\"line\">        # try_files $uri $uri/ =404;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass http://localhost:8881;</span><br><span class=\"line\"></span><br><span class=\"line\">        # Uncomment to enable naxsi on this location</span><br><span class=\"line\"></span><br><span class=\"line\">        # include /etc/nginx/naxsi.rules</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一步需要注释掉 try_files 一行，并新增 proxy_pass <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4ODgxO++8jOWwhuWvuQ==\">http://localhost:8881;，将对<i class=\"fa fa-external-link-alt\"></i></span> <span class=\"exturl\" data-url=\"aHR0cDovL2N2bS1pcC8=\">http://cvm-ip<i class=\"fa fa-external-link-alt\"></i></span> 的访问请求转发至该地址 。</p>\n<p>保存并退出文件，然后重启 Nginx 服务即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart</span><br></pre></td></tr></table></figure>\n<p>之后，再修改 conf.py 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#conf.py</span><br><span class=\"line\">c.NotebookApp.ip = &#x27;localhost&#x27; # 表示只接受来自本机的请求</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>并重启 Jupyter 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo restart jupyter</span><br></pre></td></tr></table></figure>\n<p>现在我们访问云服务器的 IP 地址时，就会进入 Jupyter Notebook 的登陆页面</p>\n","categories":["Web","Back","python"],"tags":["python","jupyter"]},{"title":"Linux安装Anaconda","url":"/linux_anaconda/","content":"<blockquote>\n<p>Anaconda是用于科学计算的平台，它集成了很多关于Python科学计算的第三方库，可运行在Linux、Windows 和 macOS下。它的功能包括：包管理、环境管理、700+软件包。Anaconda主要由Miniconda和Conda两个组件组成。</p>\n</blockquote>\n<p>我在Ubuntu 16.04上安装Anaconda，安装步骤应该适用于任何Linux发行版。</p>\n<h3 id=\"Linux安装Anaconda\"><a href=\"#Linux安装Anaconda\" class=\"headerlink\" title=\"Linux安装Anaconda\"></a>Linux安装Anaconda</h3><p>下载安装脚本：<code>https://www.continuum.io/downloads</code>，<br>选择要安装的Python版本和系统架构： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Python 3.5</span><br><span class=\"line\">$ wget https://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86_64.sh # 64位系统</span><br><span class=\"line\">$ wget https://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86.sh # 32位系统</span><br><span class=\"line\"># Python 2.7</span><br><span class=\"line\">$ wget https://repo.continuum.io/archive/Anaconda2-4.2.0-Linux-x86_64.sh # 64位系统</span><br><span class=\"line\">$ wget https://repo.continuum.io/archive/Anaconda2-4.2.0-Linux-x86.sh # 32位系统</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行安装向导\"><a href=\"#运行安装向导\" class=\"headerlink\" title=\"运行安装向导\"></a>运行安装向导</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ bash Anaconda3-4.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>接受协议</li>\n<li>yes</li>\n<li>设置安装路径，默认安装在用户家目录</li>\n<li>最后，把安装路径添加到环境变量</li>\n</ol>\n<h3 id=\"测试安装\"><a href=\"#测试安装\" class=\"headerlink\" title=\"测试安装\"></a>测试安装</h3><p>启动新终端；查看conda版本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ conda --version conda 4.2.9</span><br></pre></td></tr></table></figure>\n\n<p>列出安装的包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ conda list</span><br></pre></td></tr></table></figure>\n\n<p>更新包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ conda update conda</span><br></pre></td></tr></table></figure>\n\n<p>Anaconda文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmNvbnRpbnV1bS5pby8=\">https://docs.continuum.io/<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Web","Back","python"],"tags":["linux","python","anaconda"]},{"title":"Mac下使用JupyterNotebook导出pdf文件","url":"/mac_jupyter_notebook/","content":"<h2 id=\"通过Latex输出中文PDF\"><a href=\"#通过Latex输出中文PDF\" class=\"headerlink\" title=\"通过Latex输出中文PDF\"></a>通过Latex输出中文PDF</h2><p>安装latex可以选择完整安装，和安装<code>latex-base</code>版本。完整安装仅安装包就有约2.7G，latex-base是一个基础包，安装包100M左右，安装需要400M不到的空间。我们目前仅需要通过latex输出PDF文档，所以不需要安装完整安装。使用latex-base就可以了。但是latex-base安装后，不能直接使用，还需要一些额外操作才能正常支持中文格式。</p>\n<p>Latex在 Mac OS中 叫MacTex.</p>\n<h2 id=\"安装BasicTex\"><a href=\"#安装BasicTex\" class=\"headerlink\" title=\"安装BasicTex\"></a>安装BasicTex</h2><p>从官网下载BaisicTex安装包，下载链接：<span class=\"exturl\" data-url=\"aHR0cDovL3R1Zy5vcmcvY2dpLWJpbi9tYWN0ZXgtZG93bmxvYWQvQmFzaWNUZVgucGtn\">http://tug.org/cgi-bin/mactex-download/BasicTeX.pkg<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>下载完成后，直接双击安装即可。<br>坑：安装完成后，相应工具集的路径并不会被添加到环境变量中，所以这时直接执行相应工具，或配置编译，会报找不到相应工具的错误。</p>\n<h2 id=\"添加工具路径到环境变量-PATH中\"><a href=\"#添加工具路径到环境变量-PATH中\" class=\"headerlink\" title=\"添加工具路径到环境变量$PATH中\"></a>添加工具路径到环境变量$PATH中</h2><p>工具路径一般在<code>/usr/local/texlive/2016basic/bin/universal-darwin/</code> (注： ”2016basic“是我安装的版本，如果你安装的版本不同这个文件的名字可能不同。）</p>\n<p>1）修改.bash_profile, 添加如下行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/texlive/2016basic/bin/universal-darwin/</span><br></pre></td></tr></table></figure>\n<p>2）使修改生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装一些额外的tex包\"><a href=\"#安装一些额外的tex包\" class=\"headerlink\" title=\"安装一些额外的tex包\"></a>安装一些额外的tex包</h2><p>更新tlmgr</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo tlmgr update --self</span><br></pre></td></tr></table></figure>\n<p>安装相应的工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo tlmgr install mathpazo adjustbox</span><br><span class=\"line\">sudo tlmgr install courier collectbox ucs</span><br><span class=\"line\">sudo tlmgr install palatino</span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["mac","python","jupyter"]},{"title":"Matplotlib中文显示的问题","url":"/python_matplotlib/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># Matplotlib中文显示有问题,当然可以修改配置文件matplotlibrc ,不过较为麻烦.其实只要在代码中指定字体就可以了</span><br><span class=\"line\"></span><br><span class=\"line\"># 第一种方法:</span><br><span class=\"line\"></span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">from pylab import *</span><br><span class=\"line\">mpl.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;] #指定默认字体</span><br><span class=\"line\"></span><br><span class=\"line\">mpl.rcParams[&#x27;axes.unicode_minus&#x27;] = False #解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span><br><span class=\"line\"></span><br><span class=\"line\">t = arange(-5*pi, 5*pi, 0.01)</span><br><span class=\"line\">y = sin(t)/t</span><br><span class=\"line\">plt.plot(t, y)</span><br><span class=\"line\">plt.title(u&#x27;这里写的是中文&#x27;)</span><br><span class=\"line\">plt.xlabel(u&#x27;X坐标&#x27;)</span><br><span class=\"line\">plt.ylabel(u&#x27;Y坐标&#x27;)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\"># 第二种方法</span><br><span class=\"line\"></span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">from pylab import *</span><br><span class=\"line\">myfont = matplotlib.font_manager.FontProperties(fname=&#x27;C:/Windows/Fonts/msyh.ttf&#x27;)</span><br><span class=\"line\">mpl.rcParams[&#x27;axes.unicode_minus&#x27;] = False</span><br><span class=\"line\">t = arange(-5*pi, 5*pi, 0.01)</span><br><span class=\"line\">y = sin(t)/t</span><br><span class=\"line\">plt.plot(t, y)</span><br><span class=\"line\">plt.title(u&#x27;这里写的是中文&#x27;,fontproperties=myfont) #指定字体</span><br><span class=\"line\">plt.xlabel(u&#x27;X坐标&#x27;,fontproperties=myfont)</span><br><span class=\"line\">plt.ylabel(u&#x27;Y坐标&#x27;,fontproperties=myfont)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/master/img/20190419144753.png?token=ACYTD73FNGR2SCSBCWW4JRS4XFXVQ\"></p>\n","categories":["Web","Back","python"],"tags":["python","matplotlib"]},{"title":"Pandas常用函数","url":"/python_pandas_use/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">import pandas as pd</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\"></span><br><span class=\"line\">---------------numpy-----------------------</span><br><span class=\"line\">arr = np.array([1,2,3], dtype=np.float64)</span><br><span class=\"line\">np.zeros((3,6)) np.empty((2,3,2)) np.arange(15)</span><br><span class=\"line\">arr.dtype arr.ndim arr.shape</span><br><span class=\"line\">arr.astype(np.int32) #np.float64 np.string_ np.unicode_</span><br><span class=\"line\">arr * arr arr - arr 1/arr</span><br><span class=\"line\">arr= np.arange(32).reshape((8,4))</span><br><span class=\"line\">arr[1:3, : ] #正常切片</span><br><span class=\"line\">arr[[1,2,3]] #花式索引</span><br><span class=\"line\">arr.T arr.transpose((...)) arr.swapaxes(...) #转置</span><br><span class=\"line\">arr.dot #矩阵内积</span><br><span class=\"line\">np.sqrt(arr) np.exp(arr) randn(8)＃正态分布值 np.maximum(x,y)</span><br><span class=\"line\">np.where(cond, xarr, yarr) ＃当cond为真，取xarr,否则取yarr</span><br><span class=\"line\">arr.mean() arr.mean(axis=1) #算术平均数</span><br><span class=\"line\">arr.sum() arr.std() arr.var() #和、标准差、方差</span><br><span class=\"line\">arr.min() arr.max() #最小值、最大值</span><br><span class=\"line\">arr.argmin() arr.argmax() #最小索引、最大索引</span><br><span class=\"line\">arr.cumsum() arr.cumprod() #所有元素的累计和、累计积</span><br><span class=\"line\">arr.all() arr.any() # 检查数组中是否全为真、部分为真</span><br><span class=\"line\">arr.sort() arr.sort(1) #排序、1轴向上排序</span><br><span class=\"line\">arr.unique() #去重</span><br><span class=\"line\">np.in1d(arr1, arr2) #arr1的值是否在arr2中</span><br><span class=\"line\">np.load() np.loadtxt() np.save() np.savez() ＃读取、保存文件</span><br><span class=\"line\">np.concatenate([arr, arr], axis=1) ＃连接两个arr，按行的方向</span><br><span class=\"line\"></span><br><span class=\"line\">---------------pandas-----------------------</span><br><span class=\"line\">ser = Series() ser = Series([...], index=[...]) #一维数组, 字典可以直接转化为series</span><br><span class=\"line\">ser.values ser.index ser.reindex([...], fill_value=0) #数组的值、数组的索引、重新定义索引</span><br><span class=\"line\">ser.isnull() pd.isnull(ser) pd.notnull(ser) #检测缺失数据</span><br><span class=\"line\">ser.name= ser.index.name= #ser本身的名字、ser索引的名字</span><br><span class=\"line\">ser.drop(&#x27;x&#x27;) #丢弃索引x对应的值</span><br><span class=\"line\">ser +ser #算术运算</span><br><span class=\"line\">ser.sort_index() ser.order() ＃按索引排序、按值排序</span><br><span class=\"line\">df = DataFrame(data, columns=[...], index=[...]) #表结构的数据结构，既有行索引又有列索引</span><br><span class=\"line\">df.ix[&#x27;x&#x27;] #索引为x的值 对于series，直接使用ser[&#x27;x&#x27;]</span><br><span class=\"line\">del df[&#x27;ly&#x27;] #用del删除第ly列</span><br><span class=\"line\">df.T #转置</span><br><span class=\"line\">df.index.name df.columns.name df.values</span><br><span class=\"line\">df.drop([...])</span><br><span class=\"line\">df + df df1.add(df2, fill_vaule=0) #算术运算</span><br><span class=\"line\">df -ser #df与ser的算术运算</span><br><span class=\"line\">f=lambda x: x.max()-x.min() df.apply(f)</span><br><span class=\"line\">df.sort_index(axis=1, ascending=False) #按行索引排序</span><br><span class=\"line\">df.sort_index(by=[&#x27;a&#x27;,&#x27;b&#x27;]) #按a、b列索引排序</span><br><span class=\"line\">ser.rank() df.rank(axis=1) #排序，增设一个排名值</span><br><span class=\"line\">df.sum() df.sum(axis=1) #按列、按行求和</span><br><span class=\"line\">df.mean(axis=1, skipna=False) #求各行的平均值，考虑na的存在</span><br><span class=\"line\">df.idxmax() #返回最大值的索引</span><br><span class=\"line\">df.cumsum() #累计求和</span><br><span class=\"line\">df.describe() ser.describe() #返回count mean std min max等值</span><br><span class=\"line\">ser.unique() #去重</span><br><span class=\"line\">ser.value_counts() df.value_counts() ＃返回一个series，其索引为唯一值，值为频率</span><br><span class=\"line\">ser.isin([&#x27;x&#x27;, &#x27;y&#x27;]) #判断ser的值是否为x,y，得到布尔值</span><br><span class=\"line\">ser.dropna() ser.isnull() ser.notnull() ser.fillna(0) #处理缺失数据，df相同</span><br><span class=\"line\">df.unstack() #行列索引和值互换 df.unstack().stack()</span><br><span class=\"line\">df.swaplevel(&#x27;key1&#x27;,&#x27;key2&#x27;) #接受两个级别编号或名称，并互换</span><br><span class=\"line\">df.sortlevel(1) #根据级别1进行排序，df的行、列索引可以有两级</span><br><span class=\"line\">df.set_index([&#x27;c&#x27;,&#x27;d&#x27;], drop=False) #将c、d两列转换为行,因drop为false，在列中仍保留c,d</span><br><span class=\"line\">read_csv read_table read_fwf #读取文件分隔符为逗号、分隔符为制表符(&#x27;\\t&#x27;)、无分隔符（固定列宽）</span><br><span class=\"line\">pd.read_csv(&#x27;...&#x27;, nrows=5) #读取文件前5行</span><br><span class=\"line\">pd.read_csv(&#x27;...&#x27;, chunksize=1000) #按块读取，避免过大的文件占用内存</span><br><span class=\"line\">pd.load() #pd也有load方法，用来读取二进制文件</span><br><span class=\"line\">pd.ExcelFile(&#x27;...xls&#x27;).parse(&#x27;Sheet1&#x27;) # 读取excel文件中的sheet1</span><br><span class=\"line\">df.to_csv(&#x27;...csv&#x27;, sep=&#x27;|&#x27;, index=False, header=False) #将数据写入csv文件，以｜为分隔符，默认以，为分隔符, 禁用列、行的标签</span><br><span class=\"line\">pd.merge(df1, df2, on=&#x27;key&#x27;, suffixes=(&#x27;_left&#x27;, &#x27;_right&#x27;)) #合并两个数据集,类似数据库的inner join, 以二者共有的key列作为键,suffixes将两个key分别命名为key_left、key_right</span><br><span class=\"line\">pd.merge(df1, df2, left_on=&#x27;lkey&#x27;, right_on=&#x27;rkey&#x27;) #合并，类似数据库的inner join, 但二者没有同样的列名，分别指出，作为合并的参照</span><br><span class=\"line\">pd.merge(df1, df2, how=&#x27;outer&#x27;) #合并，但是是outer join；how=&#x27;left&#x27;是笛卡尔积，how=&#x27;inner&#x27;是...;还可以对多个键进行合并</span><br><span class=\"line\">df1.join(df2, on=&#x27;key&#x27;, how=&#x27;outer&#x27;) #也是合并</span><br><span class=\"line\">pd.concat([ser1, ser2, ser3], axis=1) #连接三个序列，按行的方向</span><br><span class=\"line\">ser1.combine_first(ser2) df1.combine_first(df2) #把2合并到1上，并对齐</span><br><span class=\"line\">df.stack() df.unstack() #列旋转为行、行旋转为列</span><br><span class=\"line\">df.pivot()</span><br><span class=\"line\">df.duplicated() df.drop_duplicates() #判断是否为重复数据、删除重复数据</span><br><span class=\"line\">df[&#x27;&#x27;].map(lambda x: abs(x)) #将函数映射到df的指定列</span><br><span class=\"line\">ser.replace(-999, np.nan) #将－999全部替换为nan</span><br><span class=\"line\">df.rename(index=&#123;&#125;, columns=&#123;&#125;, inplace=True) #修改索引，inplace为真表示就地修改数据集</span><br><span class=\"line\">pd.cut(ser, bins) #根据面元bin判断ser的各个数据属于哪一个区段，有labels、levels属性</span><br><span class=\"line\">df[(np.abs(df)&gt;3).any(1)] #输出含有“超过3或－3的值”的行</span><br><span class=\"line\">permutation take #用来进行随机重排序</span><br><span class=\"line\">pd.get_dummies(df[&#x27;key&#x27;], prefix=&#x27;key&#x27;) #给df的所有列索引加前缀key</span><br><span class=\"line\">df[...].str.contains() df[...].str.findall(pattern, flags=re.IGNORECASE) df[...].str.match(pattern, flags=...) df[...].str.get() #矢量化的字符串函数</span><br><span class=\"line\"></span><br><span class=\"line\">----绘图</span><br><span class=\"line\">ser.plot() df.plot() #pandas的绘图工具，有参数label, ax, style, alpha, kind, logy, use_index, rot, xticks, xlim, grid等，详见page257</span><br><span class=\"line\">kind=&#x27;kde&#x27; #密度图</span><br><span class=\"line\">kind=&#x27;bar&#x27; kind=&#x27;barh&#x27; #垂直柱状图、水平柱状图，stacked=True为堆积图</span><br><span class=\"line\">ser.hist(bins=50) #直方图</span><br><span class=\"line\">plt.scatter(x,y) #绘制x,y组成的散点图</span><br><span class=\"line\">pd.scatter_matrix(df, diagonal=&#x27;kde&#x27;, color=&#x27;k&#x27;, alpha=&#x27;0.3&#x27;) #将df各列分别组合绘制散点图</span><br><span class=\"line\"></span><br><span class=\"line\">----聚合分组</span><br><span class=\"line\">groupby() 默认在axis=0轴上分组，也可以在1组上分组；可以用for进行分组迭代</span><br><span class=\"line\">df.groupby(df[&#x27;key1&#x27;]) #根据key1对df进行分组</span><br><span class=\"line\">df[&#x27;key2&#x27;].groupby(df[&#x27;key1&#x27;]) #根据key1对key2列进行分组</span><br><span class=\"line\">df[&#x27;key3&#x27;].groupby(df[&#x27;key1&#x27;], df[&#x27;key2&#x27;]) #先根据key1、再根据key2对key3列进行分组</span><br><span class=\"line\">df[&#x27;key2&#x27;].groupby(df[&#x27;key1&#x27;]).size() #size()返回一个含有分组大小的series</span><br><span class=\"line\">df.groupby(df[&#x27;key1&#x27;])[&#x27;data1&#x27;] 等价于 df[&#x27;data1&#x27;].groupby(df[&#x27;key1&#x27;])</span><br><span class=\"line\">df.groupby(df[&#x27;key1&#x27;])[[&#x27;data1&#x27;]] 等价于 df[[&#x27;data1&#x27;]].groupby(df[&#x27;key1&#x27;])</span><br><span class=\"line\">df.groupby(mapping, axis=1) ser(mapping) #定义mapping字典，根据字典的分组来进行分组</span><br><span class=\"line\">df.groupby(len) #通过函数来进行分组，如根据len函数</span><br><span class=\"line\">df.groupby(level=&#x27;...&#x27;, axis=1) #根据索引级别来分组</span><br><span class=\"line\">df.groupby([], as_index=False) #禁用索引，返回无索引形式的数据</span><br><span class=\"line\">df.groupby(...).agg([&#x27;mean&#x27;, &#x27;std&#x27;]) #一次使用多个聚合函数时，用agg方法</span><br><span class=\"line\">df.groupby(...).transform(np.mean) #transform()可以将其内的函数用于各个分组</span><br><span class=\"line\">df.groupby().apply() #apply方法会将待处理的对象拆分成多个片段，然后对各片段调用传入的函数，最后尝试将各片段组合到一起</span><br><span class=\"line\"></span><br><span class=\"line\">----透视交叉</span><br><span class=\"line\">df.pivot_table([&#x27;&#x27;,&#x27;&#x27;], rows=[&#x27;&#x27;,&#x27;&#x27;], cols=&#x27;&#x27;, margins=True) #margins为真时会加一列all</span><br><span class=\"line\">pd.crosstab(df.col1, df.col2, margins=True) #margins作用同上</span><br><span class=\"line\"></span><br><span class=\"line\">---------------matplotlib---------------</span><br><span class=\"line\">fig=plt.figure() ＃图像所在的基对象</span><br><span class=\"line\">ax=fig.add_subplot(2,2,1) #2*2的图像，当前选中第1个</span><br><span class=\"line\">fig, axes = plt.subplots(nrows, nclos, sharex, sharey) #创建图像，指定行、列、共享x轴刻度、共享y轴刻度</span><br><span class=\"line\">plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)</span><br><span class=\"line\">#调整subplot之间的距离，wspace、hspace用来控制宽度、高度百分比</span><br><span class=\"line\">ax.plot(x, y, linestyle=&#x27;--&#x27;, color=&#x27;g&#x27;) #依据x,y坐标画图，设置线型、颜色</span><br><span class=\"line\">ax.set_xticks([...]) ax.set_xticklabels([...]) #设置x轴刻度</span><br><span class=\"line\">ax.set_xlabel(&#x27;...&#x27;) #设置x轴名称</span><br><span class=\"line\">ax.set_title(&#x27;....&#x27;) ＃设置图名</span><br><span class=\"line\">ax.legend(loc=&#x27;best&#x27;) #设置图例， loc指定将图例放在合适的位置</span><br><span class=\"line\">ax.text(x,y, &#x27;hello&#x27;, family=&#x27;monospace&#x27;, fontsize=10) #将注释hello放在x,y处，字体大小为10</span><br><span class=\"line\">ax.add_patch() #在图中添加块</span><br><span class=\"line\">plt.savefig(&#x27;...png&#x27;, dpi=400, bbox_inches=&#x27;tight&#x27;) #保存图片，dpi为分辨率，bbox＝tight表示将裁减空白部分</span><br><span class=\"line\"></span><br><span class=\"line\">------------------------------------------</span><br><span class=\"line\">from mpl_toolkits.basemap import Basemap</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\">#可以用来绘制地图</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------时间序列--------------------------</span><br><span class=\"line\">pd.to_datetime(datestrs) #将字符串型日期解析为日期格式</span><br><span class=\"line\">pd.date_range(&#x27;1/1/2000&#x27;, periods=1000) #生成时间序列</span><br><span class=\"line\">ts.resample(&#x27;D&#x27;, how=&#x27;mean&#x27;) #采样，将时间序列转换成以每天为固定频率的, 并计算均值；how=&#x27;ohlc&#x27;是股票四个指数；</span><br><span class=\"line\">＃重采样会聚合，即将短频率（日）变成长频率（月），对应的值叠加；</span><br><span class=\"line\">＃升采样会插值，即将长频率变为短频率，中间产生新值</span><br><span class=\"line\">ts.shift(2, freq=&#x27;D&#x27;) ts.shift(-2, freq=&#x27;D&#x27;) #后移、前移2天</span><br><span class=\"line\">now+Day() now+MonthEnd()</span><br><span class=\"line\">import pytz pytz.timezone(&#x27;US/Eastern&#x27;) #时区操作，需要安装pytz</span><br><span class=\"line\">pd.Period(&#x27;2010&#x27;, freq=&#x27;A-DEC&#x27;) ＃period表示时间区间，叫做时期</span><br><span class=\"line\">pd.PeriodIndex #时期索引</span><br><span class=\"line\">ts.to_period(&#x27;M&#x27;) #时间转换为时期</span><br><span class=\"line\">pd.rolling_mean(...) pd.rolling_std(...) #移动窗口函数－平均值、标准差</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["python","pandas"]},{"title":"Pandas常用函数之shift","url":"/python_pandas_shift/","content":"<p><code>shift</code>函数是对数据进行移动的操作，假如现在有一个DataFrame数据df，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">index\tvalue1</span><br><span class=\"line\">A\t0</span><br><span class=\"line\">B\t1</span><br><span class=\"line\">C\t2</span><br><span class=\"line\">D\t3</span><br></pre></td></tr></table></figure>\n<p>那么如果执行以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">df.shift()</span><br></pre></td></tr></table></figure>\n<p>就会变成如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">index\tvalue1</span><br><span class=\"line\">A\tNaN</span><br><span class=\"line\">B\t0</span><br><span class=\"line\">C\t1</span><br><span class=\"line\">D\t2</span><br></pre></td></tr></table></figure>\n<p>看一下函数原型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DataFrame.shift(periods=1, freq=None, axis=0)</span><br></pre></td></tr></table></figure>\n\n<p>参数:</p>\n<ul>\n<li>periods：类型为int，表示移动的幅度，可以是正数，也可以是负数，默认值是1,1就表示移动一次，注意这里移动的都是数据，而索引是不移动的，移动之后没有对应值的，就赋值为NaN。<br>执行以下代码：<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">df.shift(2)</span><br></pre></td></tr></table></figure>\n就会得到：<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">index\tvalue1</span><br><span class=\"line\">A\tNaN</span><br><span class=\"line\">B\tNaN</span><br><span class=\"line\">C\t0</span><br><span class=\"line\">D\t1</span><br></pre></td></tr></table></figure>\n执行：<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">df.shift(-1)</span><br></pre></td></tr></table></figure>\n会得到：<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">index\tvalue1</span><br><span class=\"line\">A\t1</span><br><span class=\"line\">B\t2</span><br><span class=\"line\">C\t3</span><br><span class=\"line\">D\tNaN</span><br></pre></td></tr></table></figure></li>\n<li>freq： DateOffset, timedelta, or time rule string，可选参数，默认值为None，只适用于时间序列，如果这个参数存在，那么会按照参数值移动时间索引，而数据值没有发生变化。<br>例如现在有df1如下：<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">index\tvalue1</span><br><span class=\"line\">2016-06-01\t0</span><br><span class=\"line\">2016-06-02\t1</span><br><span class=\"line\">2016-06-03\t2</span><br><span class=\"line\">2016-06-04\t3</span><br></pre></td></tr></table></figure>\n执行：<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">df1.shift(periods=1,freq=datetime.timedelta(1))</span><br></pre></td></tr></table></figure>\n会得到：<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">index | value1</span><br><span class=\"line\">—-|—-</span><br><span class=\"line\">2016-06-02 | 0</span><br><span class=\"line\">2016-06-03 | 1</span><br><span class=\"line\">2016-06-04 | 2</span><br><span class=\"line\">2016-06-05 | 3</span><br></pre></td></tr></table></figure></li>\n<li>axis：{0, 1, ‘index’, ‘columns’}，表示移动的方向，如果是0或者’index’表示上下移动，如果是1或者’columns’，则会左右移动。</li>\n</ul>\n","categories":["Web","Back","python"],"tags":["python"]},{"title":"Pandas数据清洗，排序，索引设置，数据选取","url":"/python_pandas_data/","content":"<blockquote>\n<p>此教程适合有pandas基础的童鞋来看，很多知识点会一笔带过，不做详细解释</p>\n</blockquote>\n<h3 id=\"Pandas数据格式Series\"><a href=\"#Pandas数据格式Series\" class=\"headerlink\" title=\"Pandas数据格式Series\"></a>Pandas数据格式Series</h3><h3 id=\"DataFrame和Series的关系\"><a href=\"#DataFrame和Series的关系\" class=\"headerlink\" title=\"DataFrame和Series的关系\"></a>DataFrame和Series的关系</h3><p>每个column就是一个Series基础属性<code>shape,index,columns,values，dtypes，describe(),head(),tail()</code></p>\n<h4 id=\"统计属性Series\"><a href=\"#统计属性Series\" class=\"headerlink\" title=\"统计属性Series\"></a>统计属性Series</h4><p><code>count(),value_counts()</code>，前者是统计总数，后者统计各自value的总数<br><code>df.isnull()</code> df的空值为True<br><code>df.notnull()</code> df的非空值为True</p>\n<h4 id=\"修改列名\"><a href=\"#修改列名\" class=\"headerlink\" title=\"修改列名\"></a>修改列名</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">df.rename(columns = &#123;&#x27;key&#x27;:&#x27;key2&#x27;&#125;,inplace=True)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更改数据格式\"><a href=\"#更改数据格式\" class=\"headerlink\" title=\"更改数据格式\"></a>更改数据格式</h4><p><code>astype()</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">isin                 #计算一个“Series各值是否包含传入的值序列中”的布尔数组</span><br><span class=\"line\">unique               #返回唯一值的数组</span><br><span class=\"line\">value_counts         #返回一个Series，其索引为唯一值，值为频率，按计数降序排列</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据清洗\"><a href=\"#数据清洗\" class=\"headerlink\" title=\"数据清洗\"></a>数据清洗</h3><h4 id=\"丢弃值drop\"><a href=\"#丢弃值drop\" class=\"headerlink\" title=\"丢弃值drop()\"></a>丢弃值<code>drop()</code></h4><p><code>df.drop(labels, axis=1)# 按列（axis=1），丢弃指定label的列,默认按行。。。1</code></p>\n<h4 id=\"丢弃缺失值dropna\"><a href=\"#丢弃缺失值dropna\" class=\"headerlink\" title=\"丢弃缺失值dropna()\"></a>丢弃缺失值<code>dropna()</code></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 默认axi=0（行）；1（列），how=‘any’</span><br><span class=\"line\">df.dropna()#每行只要有空值，就将这行删除</span><br><span class=\"line\">df.dropna(axis=1)#每列只要有空值，整列丢弃</span><br><span class=\"line\">df.dropna(how=&#x27;all&#x27;)# 一行中全部为NaN的，才丢弃该行</span><br><span class=\"line\">df.dropna(thresh=3)# 每行至少3个非空值才保留</span><br></pre></td></tr></table></figure>\n<h4 id=\"缺失值填充fillna\"><a href=\"#缺失值填充fillna\" class=\"headerlink\" title=\"缺失值填充fillna()\"></a>缺失值填充<code>fillna()</code></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">df.fillna(0)</span><br><span class=\"line\">df.fillna(&#123;1:0,2:0.5&#125;) #对第一列nan值赋0，第二列赋值0.5</span><br><span class=\"line\">df.fillna(method=&#x27;ffill&#x27;) #在列方向上以前一个值作为值赋给NaN</span><br></pre></td></tr></table></figure>\n<h4 id=\"值替换replace\"><a href=\"#值替换replace\" class=\"headerlink\" title=\"值替换replace()\"></a>值替换<code>replace()</code></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 将df的A列中 -999 全部替换成空值</span><br><span class=\"line\">df[&#x27;A&#x27;].replace(-999, np.nan)</span><br><span class=\"line\">#-999和1000 均替换成空值</span><br><span class=\"line\">obj.replace([-999,1000],  np.nan)</span><br><span class=\"line\"># -999替换成空值，1000替换成0</span><br><span class=\"line\">obj.replace([-999,1000],  [np.nan, 0])</span><br><span class=\"line\"># 同上，写法不同，更清晰</span><br><span class=\"line\">obj.replace(&#123;-999:np.nan, 1000:0&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重复值处理duplicated-，unique-，drop-duplictad\"><a href=\"#重复值处理duplicated-，unique-，drop-duplictad\" class=\"headerlink\" title=\"重复值处理duplicated()，unique()，drop_duplictad()\"></a>重复值处理duplicated()，unique()，drop_duplictad()</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">df.duplicated()#两行每列完全一样才算重复，后面重复的为True，第一个和不重复的为false，返回true</span><br><span class=\"line\">               #和false组成的Series类型</span><br><span class=\"line\">df.duplicated(&#x27;key&#x27;)#两行key这一列一样就算重复</span><br><span class=\"line\"></span><br><span class=\"line\">df[&#x27;A&#x27;].unique()# 返回唯一值的数组（类型为array）</span><br><span class=\"line\"></span><br><span class=\"line\">df.drop_duplicates([&#x27;k1&#x27;])# 保留k1列中的唯一值的行，默认保留第一行</span><br><span class=\"line\">df.drop_duplicates([&#x27;k1&#x27;,&#x27;k2&#x27;], take_last=True)# 保留 k1和k2 组合的唯一值的行，take_last=True 保留最后一行</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><h4 id=\"索引排序\"><a href=\"#索引排序\" class=\"headerlink\" title=\"索引排序\"></a>索引排序</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 默认axis=0，按行索引对行进行排序；ascending=True，升序排序</span><br><span class=\"line\">df.sort_index()</span><br><span class=\"line\"># 按列名对列进行排序，ascending=False 降序</span><br><span class=\"line\">df.sort_index(axis=1, ascending=False) </span><br></pre></td></tr></table></figure>\n<h4 id=\"值排序\"><a href=\"#值排序\" class=\"headerlink\" title=\"值排序\"></a>值排序</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 按值对Series进行排序，使用order()，默认空值会置于尾部</span><br><span class=\"line\">s = pd.Series([4, 6, np.nan, 2, np.nan])</span><br><span class=\"line\">s.order()</span><br><span class=\"line\"></span><br><span class=\"line\">df.sort_values(by=[&#x27;a&#x27;,&#x27;b&#x27;])#按列进行排序</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排名\"><a href=\"#排名\" class=\"headerlink\" title=\"排名\"></a>排名</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">a=Series([7,-5,7,4,2,0,4])</span><br><span class=\"line\">a.rank()#默认method=&#x27;average&#x27;，升序排名（ascending=True），按行（axis=0）</span><br><span class=\"line\">#average 值相等时，取排名的平均值</span><br><span class=\"line\">#min 值相等时，取排名最小值</span><br><span class=\"line\">#max 值相等时，取排名最大值</span><br><span class=\"line\">#first值相等时，按原始数据出现顺序排名</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"索引设置\"><a href=\"#索引设置\" class=\"headerlink\" title=\"索引设置\"></a>索引设置</h3><h4 id=\"设置索引\"><a href=\"#设置索引\" class=\"headerlink\" title=\"设置索引\"></a>设置索引</h4><p><code>reindex()</code><br>更新<code>index</code>或者<code>columns</code>，默认：更新index，返回一个新的DataFrame</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 返回一个新的DataFrame，更新index，原来的index会被替代消失</span><br><span class=\"line\"># 如果dataframe中某个索引值不存在，会自动补上NaN</span><br><span class=\"line\">df2 = df1.reindex([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\"># fill_valuse为原先不存在的索引补上默认值，不在是NaN</span><br><span class=\"line\">df2 = df1.reindex([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;],  fill_value=0)</span><br><span class=\"line\"></span><br><span class=\"line\"># inplace=Ture，在DataFrame上修改数据，而不是返回一个新的DataFrame</span><br><span class=\"line\">df1.reindex([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;],  inplace=Ture)</span><br><span class=\"line\"></span><br><span class=\"line\"># reindex不仅可以修改 索引(行)，也可以修改列</span><br><span class=\"line\">states = [&quot;Texas&quot;,&quot;Utah&quot;,&quot;California&quot;]</span><br><span class=\"line\">df2 = df1.reindex( columns=states )</span><br><span class=\"line\">set_index()</span><br></pre></td></tr></table></figure>\n<p>将DataFrame中的列columns设置成索引index</p>\n<h4 id=\"打造层次化索引的方法\"><a href=\"#打造层次化索引的方法\" class=\"headerlink\" title=\"打造层次化索引的方法\"></a>打造层次化索引的方法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 将columns中的其中两列：race和sex的值设置索引，race为一级，sex为二级</span><br><span class=\"line\"># inplace=True 在原数据集上修改的</span><br><span class=\"line\">adult.set_index([&#x27;race&#x27;,&#x27;sex&#x27;], inplace = True) </span><br><span class=\"line\"></span><br><span class=\"line\"># 默认情况下，设置成索引的列会从DataFrame中移除</span><br><span class=\"line\"># drop=False将其保留下来</span><br><span class=\"line\">adult.set_index([&#x27;race&#x27;,&#x27;sex&#x27;], inplace = True) </span><br><span class=\"line\">reset_index()</span><br></pre></td></tr></table></figure>\n<p>将使用<code>set_index()</code>打造的层次化逆向操作<br>既是取消层次化索引，将索引变回列，并补上最常规的数字索引<br><code>df.reset_index()</code></p>\n<h3 id=\"数据选取\"><a href=\"#数据选取\" class=\"headerlink\" title=\"数据选取\"></a>数据选取</h3><p>[]<br>只能对行进 行（row&#x2F;index） 切片，前闭后开d<code>f[0:3]，df[:4]，df[4:]</code></p>\n<h3 id=\"where-布尔查找\"><a href=\"#where-布尔查找\" class=\"headerlink\" title=\"where 布尔查找\"></a>where 布尔查找</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">df[df[&quot;A&quot;]&gt;7]</span><br></pre></td></tr></table></figure>\n<p>isin</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 返回布尔值</span><br><span class=\"line\">s.isin([1,2,3])</span><br><span class=\"line\">df[&#x27;A&#x27;].isin([1,2,3])</span><br><span class=\"line\">df.loc[df[&#x27;A&#x27;].isin([5.8,5.1])]选取列A中值为5.8，5.1的所有行组成dataframe</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"query\"><a href=\"#query\" class=\"headerlink\" title=\"query\"></a>query</h3><p>多个where整合切片，&amp;：于，|：或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">df.query(&quot; A&gt;5.0 &amp; (B&gt;3.5 | C&lt;1.0) &quot;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"loc-：根据名称Label切片\"><a href=\"#loc-：根据名称Label切片\" class=\"headerlink\" title=\"loc ：根据名称Label切片\"></a>loc ：根据名称Label切片</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># df.loc[A,B] A是行范围，B是列范围</span><br><span class=\"line\">df.loc[1:4,[&#x27;petal_length&#x27;,&#x27;petal_width&#x27;]]</span><br><span class=\"line\"></span><br><span class=\"line\"># 需求1：创建一个新的变量 test</span><br><span class=\"line\"># 如果sepal_length &gt; 3 test = 1 否则 test = 0</span><br><span class=\"line\">df.loc[df[&#x27;sepal_length&#x27;] &gt; 6, &#x27;test&#x27;] = 1</span><br><span class=\"line\">df.loc[df[&#x27;sepal_length&#x27;] &lt;=6, &#x27;test&#x27;] = 0</span><br><span class=\"line\"></span><br><span class=\"line\"># 需求2：创建一个新变量test2 </span><br><span class=\"line\"># 1.petal_length&gt;2 and petal_width&gt;0.3 = 1 </span><br><span class=\"line\"># 2.sepeal_length&gt;6 and sepal_width&gt;3 = 2 3.其他 = 0</span><br><span class=\"line\">df[&#x27;test2&#x27;] = 0</span><br><span class=\"line\">df.loc[(df[&#x27;petal_length&#x27;]&gt;2)&amp;(df[&#x27;petal_width&#x27;]&gt;0.3), &#x27;test2&#x27;] = 1</span><br><span class=\"line\">df.loc[(df[&#x27;sepal_length&#x27;]&gt;6)&amp;(df[&#x27;sepal_width&#x27;]&gt;3), &#x27;test2&#x27;] = 2</span><br><span class=\"line\">iloc：切位置</span><br><span class=\"line\">df.iloc[1:4,:]</span><br></pre></td></tr></table></figure>\n<h3 id=\"ix：混切\"><a href=\"#ix：混切\" class=\"headerlink\" title=\"ix：混切\"></a>ix：混切</h3><p>名称和位置混切，但效率低，少用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">df1.ix[0:3,[&#x27;sepal_length&#x27;,&#x27;petal_width&#x27;]]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"map与lambda\"><a href=\"#map与lambda\" class=\"headerlink\" title=\"map与lambda\"></a>map与lambda</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">alist = [1,2,3,4]</span><br><span class=\"line\">map(lambda s : s+1, alist)#map就是将自定义函数应用于Series每个元素</span><br><span class=\"line\"></span><br><span class=\"line\">df[&#x27;sepal_length&#x27;].map(lambda s:s*2+1)[0:3]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"apply和applymap\"><a href=\"#apply和applymap\" class=\"headerlink\" title=\"apply和applymap\"></a>apply和applymap</h3><p><code>apply</code>和<code>applymap</code>是对<code>dataframe</code>的操作，前者操作一行或者一列，后者操作每个元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">These are techniques to apply function to element, column or dataframe.</span><br><span class=\"line\"></span><br><span class=\"line\">Map: It iterates over each element of a series. </span><br><span class=\"line\">df[‘column1’].map(lambda x: 10+x), this will add 10 to each element of column1.</span><br><span class=\"line\">df[‘column2’].map(lambda x: ‘AV’+x), this will concatenate “AV“ at the beginning of each element of column2 (column format is string).</span><br><span class=\"line\"></span><br><span class=\"line\">Apply: As the name suggests, applies a function along any axis of the DataFrame.</span><br><span class=\"line\">df[[‘column1’,’column2’]].apply(sum), it will returns the sum of all the values of column1 and column2.</span><br><span class=\"line\">df0[[&#x27;data1&#x27;]].apply(lambda s:s+1)</span><br><span class=\"line\"></span><br><span class=\"line\">ApplyMap: 对dataframe的每一个元素施加一个函数</span><br><span class=\"line\">func = lambda x: x+2</span><br><span class=\"line\">df.applymap(func), dataframe每个元素加2 (所有列必须数字类型)</span><br><span class=\"line\">contains</span><br><span class=\"line\"># 使用DataFrame模糊筛选数据(类似SQL中的LIKE)</span><br><span class=\"line\"># 使用正则表达式进行模糊匹配,*匹配0或无限次,?匹配0或1次</span><br><span class=\"line\">df_obj[df_obj[&#x27;套餐&#x27;].str.contains(r&#x27;.*?语音CDMA.*&#x27;)] </span><br><span class=\"line\"></span><br><span class=\"line\"># 下面两句效果一致</span><br><span class=\"line\">df[df[&#x27;商品名称&#x27;].str.contains(&quot;四件套&quot;)]</span><br><span class=\"line\">df[df[&#x27;商品名称&#x27;].str.contains(r&quot;.*四件套.*&quot;)]</span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["python","pandas"]},{"title":"Python的Pandas模块hdf5追加保存","url":"/python_pandas_hdf5_add/","content":"<p>hdf5存储格式会根据data 存储到不同的表，请注意。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from OkcoinSpotAPI import OKCoinSpot</span><br><span class=\"line\">from OkcoinFutureAPI import OKCoinFuture</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import pandas as pd</span><br><span class=\"line\"># 引入 datetime 模块</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">def getYesterday():</span><br><span class=\"line\">   today=datetime.date.today()</span><br><span class=\"line\">   oneday=datetime.timedelta(days=1)</span><br><span class=\"line\">   yesterday=today-oneday</span><br><span class=\"line\">   return yesterday</span><br><span class=\"line\"></span><br><span class=\"line\">#初始化apikey，secretkey,url</span><br><span class=\"line\">apikey = &#x27;XXXX&#x27;</span><br><span class=\"line\">secretkey = &#x27;XXXXX&#x27;</span><br><span class=\"line\">okcoinRESTURL = &#x27;www.okcoin.com&#x27;   #请求注意：国内账号需要 修改为 www.okcoin.cn  </span><br><span class=\"line\"></span><br><span class=\"line\">#现货API</span><br><span class=\"line\">okcoinSpot = OKCoinSpot(okcoinRESTURL,apikey,secretkey)</span><br><span class=\"line\"></span><br><span class=\"line\">#期货API</span><br><span class=\"line\">okcoinFuture = OKCoinFuture(okcoinRESTURL,apikey,secretkey)</span><br><span class=\"line\"></span><br><span class=\"line\"># 昨日开始时间</span><br><span class=\"line\">print(u&#x27; 开始时间 &#x27;)</span><br><span class=\"line\">yesterdayTime = int(time.mktime(getYesterday().timetuple()) * 1000)</span><br><span class=\"line\">print (getYesterday())</span><br><span class=\"line\">print (yesterdayTime)</span><br><span class=\"line\"># print (u&#x27; 现货行情 &#x27;)</span><br><span class=\"line\"># print (okcoinSpot.ticker(&#x27;btc_usd&#x27;))</span><br><span class=\"line\">print (u&#x27; okCoin Com 期货 当周 Kline 日线 &#x27;)</span><br><span class=\"line\">thisWeekArr = okcoinFuture.future_kline(&#x27;btc_usd&#x27;,&#x27;1day&#x27;,&#x27;this_week&#x27;, 2, yesterdayTime)</span><br><span class=\"line\">print (thisWeekArr)</span><br><span class=\"line\">b = pd.DataFrame(thisWeekArr)</span><br><span class=\"line\"># b.columns = [[&#x27;时间戳&#x27;,&#x27;开&#x27;,&#x27;高&#x27;,&#x27;低&#x27;,&#x27;收&#x27;,&#x27;交易量&#x27;,&#x27;交易量转化BTC或LTC数量&#x27;]]</span><br><span class=\"line\"># 存储到hdf5</span><br><span class=\"line\">h5 = pd.HDFStore(&#x27;../data/test1.h5&#x27;,&#x27;a&#x27;)</span><br><span class=\"line\">h5.append(&#x27;df&#x27;,b)</span><br><span class=\"line\">h5.close()</span><br><span class=\"line\"></span><br><span class=\"line\">### 读取数据</span><br><span class=\"line\">h5 = pd.HDFStore(&#x27;../data/test1.h5&#x27;,&#x27;r&#x27;)</span><br><span class=\"line\">print (h5)</span><br><span class=\"line\">e = h5[&#x27;df&#x27;]</span><br><span class=\"line\">h5.close()</span><br><span class=\"line\">print (e)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"]},{"title":"Pandas：让你像写SQL一样做数据分析","url":"/python_pandas/","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>Pandas是一个开源的Python数据分析库。Pandas把结构化数据分为了三类：</p>\n<ol>\n<li>Series，1维序列，可视作为没有column名的、只有一个column的DataFrame；</li>\n<li>DataFrame，同Spark SQL中的DataFrame一样，其概念来自于R语言，为多column并schema化的2维结构化数据，可视作为Series的容器（container）；</li>\n<li>Panel，为3维的结构化数据，可视作为DataFrame的容器；</li>\n</ol>\n<p>DataFrame较为常见，因此本文主要讨论内容将为DataFrame。DataFrame的生成可通过读取纯文本、Json等数据来生成，亦可以通过Python对象来生成： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import pandas as pd</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">df = pd.DataFrame(&#123;&#x27;total_bill&#x27;: [16.99, 10.34, 23.68, 23.68, 24.59],</span><br><span class=\"line\"> &#x27;tip&#x27;: [1.01, 1.66, 3.50, 3.31, 3.61],</span><br><span class=\"line\"> &#x27;sex&#x27;: [&#x27;Female&#x27;, &#x27;Male&#x27;, &#x27;Male&#x27;, &#x27;Male&#x27;, &#x27;Female&#x27;]&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>对于DataFrame，我们可以看到其固有属性： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># data type of columns</span><br><span class=\"line\">print df.dtypes</span><br><span class=\"line\"># indexes</span><br><span class=\"line\">print df.index</span><br><span class=\"line\"># return pandas.Index</span><br><span class=\"line\">print df.columns</span><br><span class=\"line\"># each row, return array[array]</span><br><span class=\"line\">print df.values</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>.index，为行索引 .columns，为列名称（label） .dtype，为列数据类型</p>\n<h2 id=\"SQL操作\"><a href=\"#SQL操作\" class=\"headerlink\" title=\"SQL操作\"></a>SQL操作</h2><p>官方Doc给出了部分SQL的Pandas实现。在此基础上，本文给出了一些扩充说明。以下内容基于Python 2.7 + Pandas 0.18.1的版本。</p>\n<h3 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h3><p>SQL中的select是根据列的名称来选取；Pandas则更为灵活，不但可根据列名称选取，还可以根据列所在的position选取。相关函数如下：</p>\n<ul>\n<li><p>loc，基于列label，可选取特定行（根据行index）；</p>\n</li>\n<li><p>iloc，基于行&#x2F;列的position；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">print df.loc[1:3, [&#x27;total_bill&#x27;, &#x27;tip&#x27;]]</span><br><span class=\"line\">print df.loc[1:3, &#x27;tip&#x27;: &#x27;total_bill&#x27;]</span><br><span class=\"line\">print df.iloc[1:3, [1, 2]]</span><br><span class=\"line\">print df.iloc[1:3, 1: 3]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>at，根据指定行index及列label，快速定位DataFrame的元素；</p>\n</li>\n<li><p>iat，与at类似，不同的是根据position来定位的；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">print df.at[3, &#x27;tip&#x27;]</span><br><span class=\"line\">print df.iat[3, 1]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ix，为loc与iloc的混合体，既支持label也支持position；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">print df.ix[1:3, [1, 2]]</span><br><span class=\"line\">print df.ix[1:3, [&#x27;total_bill&#x27;, &#x27;tip&#x27;]]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>此外，有更为简洁的行&#x2F;列选取方式： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">print df[1: 3]</span><br><span class=\"line\">print df[[&#x27;total_bill&#x27;, &#x27;tip&#x27;]]</span><br><span class=\"line\"># print df[1:2, [&#x27;total_bill&#x27;, &#x27;tip&#x27;]] # TypeError: unhashable type</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"where\"><a href=\"#where\" class=\"headerlink\" title=\"where\"></a>where</h3><p>Pandas实现where filter，较为常用的办法为<code>df[df[colunm] boolean expr]</code>，比如： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">print df[df[&#x27;sex&#x27;] == &#x27;Female&#x27;]</span><br><span class=\"line\">print df[df[&#x27;total_bill&#x27;] &gt; 20]</span><br><span class=\"line\"></span><br><span class=\"line\"># or</span><br><span class=\"line\">print df.query(&#x27;total_bill &gt; 20&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>在where子句中常常会搭配and, or, in, not关键词，Pandas中也有对应的实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># and</span><br><span class=\"line\">print df[(df[&#x27;sex&#x27;] == &#x27;Female&#x27;) &amp; (df[&#x27;total_bill&#x27;] &gt; 20)]</span><br><span class=\"line\"># or</span><br><span class=\"line\">print df[(df[&#x27;sex&#x27;] == &#x27;Female&#x27;) | (df[&#x27;total_bill&#x27;] &gt; 20)]</span><br><span class=\"line\"># in</span><br><span class=\"line\">print df[df[&#x27;total_bill&#x27;].isin([21.01, 23.68, 24.59])]</span><br><span class=\"line\"># not</span><br><span class=\"line\">print df[-(df[&#x27;sex&#x27;] == &#x27;Male&#x27;)]</span><br><span class=\"line\">print df[-df[&#x27;total_bill&#x27;].isin([21.01, 23.68, 24.59])]</span><br><span class=\"line\"># string function</span><br><span class=\"line\">print df = df[(-df[&#x27;app&#x27;].isin(sys_app)) &amp; (-df.app.str.contains(&#x27;^微信\\d+$&#x27;))]</span><br></pre></td></tr></table></figure>\n\n<p>对where条件筛选后只有一行的dataframe取其中某一列的值，其两种实现方式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">total = df.loc[df[&#x27;tip&#x27;] == 1.66, &#x27;total_bill&#x27;].values[0]</span><br><span class=\"line\">total = df.get_value(df.loc[df[&#x27;tip&#x27;] == 1.66].index.values[0], &#x27;total_bill&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"distinct\"><a href=\"#distinct\" class=\"headerlink\" title=\"distinct\"></a>distinct</h3><p>drop_duplicates根据某列对dataframe进行去重：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">df.drop\\_duplicates(subset=\\[&#x27;sex&#x27;\\], keep=&#x27;first&#x27;, inplace=True)</span><br></pre></td></tr></table></figure>\n\n<p>包含参数：</p>\n<ul>\n<li>subset，为选定的列做distinct，默认为所有列；</li>\n<li>keep，值选项{‘first’, ‘last’, False}，保留重复元素中的第一个、最后一个，或全部删除；</li>\n<li>inplace ，默认为False，返回一个新的dataframe；若为True，则返回去重后的原dataframe</li>\n</ul>\n<h3 id=\"group\"><a href=\"#group\" class=\"headerlink\" title=\"group\"></a>group</h3><p>group一般会配合合计函数（Aggregate functions）使用，比如：count、avg等。Pandas对合计函数的支持有限，有count和size函数实现SQL的count：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">print df.groupby(&#x27;sex&#x27;).size()</span><br><span class=\"line\">print df.groupby(&#x27;sex&#x27;).count()</span><br><span class=\"line\">print df.groupby(&#x27;sex&#x27;)[&#x27;tip&#x27;].count()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对于多合计函数，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select sex, max(tip), sum(total_bill) as total</span><br><span class=\"line\">from tips_tb</span><br><span class=\"line\">group by sex;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>实现在agg()中指定dict：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">print df.groupby(&#x27;sex&#x27;).agg(&#123;&#x27;tip&#x27;: np.max, &#x27;total_bill&#x27;: np.sum&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># count(distinct **)</span><br><span class=\"line\">print df.groupby(&#x27;tip&#x27;).agg(&#123;&#x27;sex&#x27;: pd.Series.nunique&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"as\"><a href=\"#as\" class=\"headerlink\" title=\"as\"></a>as</h3><p>SQL中使用as修改列的别名，Pandas也支持这种修改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># first implementation</span><br><span class=\"line\">df.columns = [&#x27;total&#x27;, &#x27;pit&#x27;, &#x27;xes&#x27;]</span><br><span class=\"line\"># second implementation</span><br><span class=\"line\">df.rename(columns=&#123;&#x27;total_bill&#x27;: &#x27;total&#x27;, &#x27;tip&#x27;: &#x27;pit&#x27;, &#x27;sex&#x27;: &#x27;xes&#x27;&#125;, inplace=True)</span><br></pre></td></tr></table></figure>\n\n<p>其中，第一种方法的修改是有问题的，因为其是按照列position逐一替换的。因此，我推荐第二种方法。</p>\n<h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h3><p>Pandas中join的实现也有两种：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 1.</span><br><span class=\"line\">df.join(df2, how=&#x27;left&#x27;...)</span><br><span class=\"line\"></span><br><span class=\"line\"># 2.</span><br><span class=\"line\">pd.merge(df1, df2, how=&#x27;left&#x27;, left_on=&#x27;app&#x27;, right_on=&#x27;app&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>第一种方法是按DataFrame的index进行join的，而第二种方法才是按on指定的列做join。Pandas满足left、right、inner、full outer四种join方式。</p>\n<h3 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a>order</h3><p>Pandas中支持多列order，并可以调整不同列的升序&#x2F;降序，有更高的排序自由度：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">print df.sort_values([&#x27;total_bill&#x27;, &#x27;tip&#x27;], ascending=[False, True])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h3><p>对于全局的top：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">print df.nlargest(3, columns=[&#x27;total_bill&#x27;])</span><br><span class=\"line\">对于分组top，MySQL的实现（采用自join的方式）：</span><br><span class=\"line\"></span><br><span class=\"line\">select a.sex, a.tip</span><br><span class=\"line\">from tips_tb a</span><br><span class=\"line\">where (</span><br><span class=\"line\">    select count(*)</span><br><span class=\"line\">    from tips_tb b</span><br><span class=\"line\">    where b.sex = a.sex and b.tip &gt; a.tip</span><br><span class=\"line\">) &lt; 2</span><br><span class=\"line\">order by a.sex, a.tip desc;</span><br></pre></td></tr></table></figure>\n<p>Pandas的等价实现，思路与上类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 1.</span><br><span class=\"line\">df.assign(rn=df.sort_values([&#x27;total_bill&#x27;], ascending=False)</span><br><span class=\"line\">.groupby(&#x27;sex&#x27;)</span><br><span class=\"line\">.cumcount()+1)\\</span><br><span class=\"line\">.query(&#x27;rn &lt; 3&#x27;)\\</span><br><span class=\"line\">.sort_values([&#x27;sex&#x27;, &#x27;rn&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\"># 2.</span><br><span class=\"line\">df.assign(rn=df.groupby(&#x27;sex&#x27;)[&#x27;total_bill&#x27;]</span><br><span class=\"line\">.rank(method=&#x27;first&#x27;, ascending=False)) \\</span><br><span class=\"line\">.query(&#x27;rn &lt; 3&#x27;) \\</span><br><span class=\"line\">.sort_values([&#x27;sex&#x27;, &#x27;rn&#x27;])</span><br></pre></td></tr></table></figure>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h3><p>replace函数提供对dataframe全局修改，亦可通过where条件进行过滤修改（搭配loc）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># overall replace</span><br><span class=\"line\">df.replace(to_replace=&#x27;Female&#x27;, value=&#x27;Sansa&#x27;, inplace=True)</span><br><span class=\"line\"></span><br><span class=\"line\"># dict replace</span><br><span class=\"line\">df.replace(&#123;&#x27;sex&#x27;: &#123;&#x27;Female&#x27;: &#x27;Sansa&#x27;, &#x27;Male&#x27;: &#x27;Leone&#x27;&#125;&#125;, inplace=True)</span><br><span class=\"line\"></span><br><span class=\"line\"># replace on where condition</span><br><span class=\"line\">df.loc[df.sex == &#x27;Male&#x27;, &#x27;sex&#x27;] = &#x27;Leone&#x27;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h3><p>除了上述SQL操作外，Pandas提供对每列&#x2F;每一元素做自定义操作，为此而设计以下三个函数： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">map(func)，为Series的函数，DataFrame不能直接调用，需取列后再调用；</span><br><span class=\"line\">apply(func)，对DataFrame中的某一行/列进行func操作；</span><br><span class=\"line\">applymap(func)，为element-wise函数，对每一个元素做func操作</span><br><span class=\"line\">print df[&#x27;tip&#x27;].map(lambda x: x - 1)</span><br><span class=\"line\">print df[[&#x27;total_bill&#x27;, &#x27;tip&#x27;]].apply(sum)</span><br><span class=\"line\">print df.applymap(lambda x: x.upper() if type(x) is str else x)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h3 id=\"环比增长\"><a href=\"#环比增长\" class=\"headerlink\" title=\"环比增长\"></a>环比增长</h3><p>现有两个月APP的UV数据，要得到月UV环比增长；该操作等价于两个Dataframe left join后按指定列做减操作： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">def chain(current, last):</span><br><span class=\"line\">    df1 = pd.read_csv(current, names=[&#x27;app&#x27;, &#x27;tag&#x27;, &#x27;uv&#x27;], sep=&#x27;\\t&#x27;)</span><br><span class=\"line\">    df2 = pd.read_csv(last, names=[&#x27;app&#x27;, &#x27;tag&#x27;, &#x27;uv&#x27;], sep=&#x27;\\t&#x27;)</span><br><span class=\"line\">    df3 = pd.merge(df1, df2, how=&#x27;left&#x27;, on=&#x27;app&#x27;)</span><br><span class=\"line\">    df3[&#x27;uv_y&#x27;] = df3[&#x27;uv_y&#x27;].map(lambda x: 0.0 if pd.isnull(x) else x)</span><br><span class=\"line\">    df3[&#x27;growth&#x27;] = df3[&#x27;uv_x&#x27;] - df3[&#x27;uv_y&#x27;]</span><br><span class=\"line\">    return df3[[&#x27;app&#x27;, &#x27;growth&#x27;, &#x27;uv_x&#x27;, &#x27;uv_y&#x27;]].sort_values(by=&#x27;growth&#x27;, ascending=False)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"差集\"><a href=\"#差集\" class=\"headerlink\" title=\"差集\"></a>差集</h3><p>对于给定的列，一个Dataframe过滤另一个Dataframe该列的值；相当于集合的差集操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">def difference(left, right, on):</span><br><span class=\"line\">  &quot;&quot;&quot;</span><br><span class=\"line\">  difference of two dataframes</span><br><span class=\"line\">  :param left: left dataframe</span><br><span class=\"line\">  :param right: right dataframe</span><br><span class=\"line\">  :param on: join key</span><br><span class=\"line\">  :return: difference dataframe</span><br><span class=\"line\">  &quot;&quot;&quot;</span><br><span class=\"line\">  df = pd.merge(left, right, how=&#x27;left&#x27;, on=on)</span><br><span class=\"line\">  left_columns = left.columns</span><br><span class=\"line\">  col_y = df.columns[left_columns.size]</span><br><span class=\"line\">  df = df[df[col_y].isnull()]</span><br><span class=\"line\">  df = df.ix[:, 0:left_columns.size]</span><br><span class=\"line\">  df.columns = left_columns</span><br><span class=\"line\">  return df</span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["python","pandas"]},{"title":"Python的pdfkit中文乱码问题处理","url":"/pyhton_pdfkit_code/","content":"<p>生成的文件名不能带有中文字符</p>\n<p>处理方法：<br>我暂时想到的处理方式是先生成英文文件名，再将这个文件重命名为中文的文件名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># coding=utf8</span><br><span class=\"line\">import os</span><br><span class=\"line\">import pdfkit</span><br><span class=\"line\">from uuid import uuid1</span><br><span class=\"line\"></span><br><span class=\"line\">ret = &#x27;测试pdf内容部分&#x27;.decode(&#x27;utf8&#x27;)</span><br><span class=\"line\">file_name = str(uuid1())</span><br><span class=\"line\">pdfkit.from_string(ret, file_name) # file_name不能带有中文 如果有会报错</span><br><span class=\"line\">file_name_new = &#x27;测试.pdf&#x27;</span><br><span class=\"line\">os.rename(file_name, file_name_new)</span><br><span class=\"line\">生成的pdf内容中文为乱码</span><br><span class=\"line\">pd_arr = pd.read_excel(expath)</span><br><span class=\"line\">print pd_arr</span><br><span class=\"line\">print pd_arr.to_html()</span><br><span class=\"line\">header = &#x27;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;&#x27;</span><br><span class=\"line\">pdfkit.from_string(header + pd_arr.to_html(), pdfexpath)</span><br></pre></td></tr></table></figure>\n\n<p>生成的pdf内容中文为乱码原因</p>\n<p><strong>原因1：</strong></p>\n<p>因为<code>pdfkit</code>生成pdf功能其实调用的是webkit的子模块<code>wkhtmltopdf</code>(通过命令行方式)，所以<code>pdfkit</code>生成中文乱码其实是<code>wkhtmltopdf</code>中文乱码导致的；而<code>wkhtmltopdf</code>中文乱码是因为系统中不存在中文字体导致的</p>\n<p>处理方式:<br>在系统中添加中文字体<br>我的本地电脑是ubuntu14.04的字体文件保存在<code>/usr/share/fonts</code>下(包含了中文字体文件具体哪一个我也不知道汗。)，我的服务器是redhat系统(没有中文字体)，所以在我的电脑上操作如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /usr/share/fonts</span><br><span class=\"line\">zip -r fonts.zip ./*</span><br><span class=\"line\">scp fonts.zip 服务器用户名@服务器ip:/usr/share/fonts</span><br></pre></td></tr></table></figure>\n<p>在服务器上操作如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /usr/share/fonts</span><br><span class=\"line\">unzip fonts.zip</span><br><span class=\"line\">fc-cache -fv</span><br><span class=\"line\">fc-list # 查看新添加的字体</span><br></pre></td></tr></table></figure>\n<p>你需要找一台有安装了中文字体的电脑复制一份字体文件(就是<code>/usr/share/fonts</code>下的文件)，然后如我以上操作就可以了。</p>\n<p><strong>原因2：</strong></p>\n<p>需要在html的字符集设置为<code>utf8</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;</span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["python","pdfkit"]},{"title":"Python代码的内存分析器：Memory_profiler","url":"/python_memory_profiler/","content":"<p>Memory_profiler是一个Python模块，可以监视一个进程的内存消耗，甚至可以一行一行的分析Python程序的内存消耗。它纯粹是由Python实现，用户可选psutil模块（强烈推荐）作为依赖。</p>\n<p>示例<br>用<code>@profile</code>修饰你需要监视的函数，这里<code>my_func</code>函数分配列表a和b，然后删除b</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@profile</span><br><span class=\"line\">def my_func():</span><br><span class=\"line\">a = [1] * (10 ** 6)</span><br><span class=\"line\">b = [2] * (2 * 10 ** 7)</span><br><span class=\"line\">del b</span><br><span class=\"line\">return a</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">my_func()</span><br></pre></td></tr></table></figure>\n<p>运行脚本时需传入<code>-m memory_profiler</code>参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ python -m memory_profiler example.py</span><br></pre></td></tr></table></figure>\n<p>以上命令输出如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Line # Mem usage Increment Line Contents</span><br><span class=\"line\">==============================================</span><br><span class=\"line\">3 @profile</span><br><span class=\"line\">4 5.97 MB 0.00 MB def my_func():</span><br><span class=\"line\">5 13.61 MB 7.64 MB a = [1] * (10 ** 6)</span><br><span class=\"line\">6 166.20 MB 152.59 MB b = [2] * (2 * 10 ** 7)</span><br><span class=\"line\">7 13.61 MB -152.59 MB del b</span><br><span class=\"line\">8 13.61 MB 0.00 MB return a</span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["python"]},{"title":"Python使用xlsxwriter生成excel周报日周的统计图表","url":"/python_xlsxwriter/","content":"<p>文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly94bHN4d3JpdGVyLnJlYWR0aGVkb2NzLmlvL2NoYXJ0Lmh0bWw=\">https://xlsxwriter.readthedocs.io/chart.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"案例一\"><a href=\"#案例一\" class=\"headerlink\" title=\"案例一\"></a>案例一</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#coding=utf-8</span><br><span class=\"line\">import xlsxwriter</span><br><span class=\"line\">from xlsxwriter.workbook import Workbook</span><br><span class=\"line\">from xlrd.sheet import Sheet</span><br><span class=\"line\"></span><br><span class=\"line\">def demo1():</span><br><span class=\"line\">    import xlsxwriter</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建excel文件</span><br><span class=\"line\">workbook = xlsxwriter.Workbook(&#x27;demo.xlsx&#x27;)</span><br><span class=\"line\"># 添加worksheet,也可以指定名字</span><br><span class=\"line\">worksheet = workbook.add_worksheet()</span><br><span class=\"line\">worksheet = workbook.add_worksheet(&#x27;Test&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">#设置第一列的宽度</span><br><span class=\"line\">worksheet.set_column(&#x27;A:A&#x27;, len(&#x27;hello &#x27;)+1)</span><br><span class=\"line\"></span><br><span class=\"line\">#添加一个加粗格式方便后面使用</span><br><span class=\"line\">bold = workbook.add_format(&#123;&#x27;bold&#x27;: True&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">#在A1单元格写入纯文本</span><br><span class=\"line\">worksheet.write(&#x27;A1&#x27;, &#x27;Hello&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">#在A2单元格写入带格式的文本</span><br><span class=\"line\">worksheet.write(&#x27;A2&#x27;, &#x27;World&#x27;, bold)</span><br><span class=\"line\"></span><br><span class=\"line\">#指定行列写入数字，下标从0开始</span><br><span class=\"line\">worksheet.write(2, 0, 123)</span><br><span class=\"line\">worksheet.write(3, 0, 123.456)</span><br><span class=\"line\"></span><br><span class=\"line\">#在B5单元格插入图片</span><br><span class=\"line\">worksheet.insert_image(&#x27;B5&#x27;, &#x27;python-logo.png&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">workbook.close()</span><br><span class=\"line\"></span><br><span class=\"line\">def charts():</span><br><span class=\"line\">    workbook = xlsxwriter.Workbook(&#x27;chart_column.xlsx&#x27;)</span><br><span class=\"line\">    worksheet = workbook.add_worksheet()</span><br><span class=\"line\">    bold = workbook.add_format(&#123;&#x27;bold&#x27;: 1&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 这是个数据table的列</span><br><span class=\"line\">headings = [&#x27;Number&#x27;, &#x27;Batch 1&#x27;, &#x27;Batch 2&#x27;]</span><br><span class=\"line\">data = [</span><br><span class=\"line\">    [2, 3, 4, 5, 6, 7],</span><br><span class=\"line\">    [10, 40, 50, 20, 10, 50],</span><br><span class=\"line\">    [30, 60, 70, 50, 40, 30],</span><br><span class=\"line\">]</span><br><span class=\"line\">#写入一行</span><br><span class=\"line\">worksheet.write_row(&#x27;A1&#x27;, headings, bold)</span><br><span class=\"line\">#写入一列</span><br><span class=\"line\">worksheet.write_column(&#x27;A2&#x27;, data[0])</span><br><span class=\"line\">worksheet.write_column(&#x27;B2&#x27;, data[1])</span><br><span class=\"line\">worksheet.write_column(&#x27;C2&#x27;, data[2])</span><br><span class=\"line\"></span><br><span class=\"line\">############################################</span><br><span class=\"line\">#创建一个图表，类型是column</span><br><span class=\"line\">chart1 = workbook.add_chart(&#123;&#x27;type&#x27;: &#x27;column&#x27;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置series,这个和前面worksheet是有关系的。</span><br><span class=\"line\"># 指定图表的数据范围</span><br><span class=\"line\">chart1.add_series(&#123;</span><br><span class=\"line\">    &#x27;name&#x27;: &#x27;=Sheet1!$B$1&#x27;,</span><br><span class=\"line\">    &#x27;categories&#x27;: &#x27;=Sheet1!$A$2:$A$7&#x27;,</span><br><span class=\"line\">    &#x27;values&#x27;: &#x27;=Sheet1!$B$2:$B$7&#x27;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">chart1.add_series(&#123;</span><br><span class=\"line\">    &#x27;name&#x27;: &quot;=Sheet1!$C$1&quot;,</span><br><span class=\"line\">    &#x27;categories&#x27;: &#x27;=Sheet1!$A$2:$A$7&#x27;,</span><br><span class=\"line\">    &#x27;values&#x27;: &#x27;=Sheet1!$C$2:$C$7&#x27;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"># 配置series的另一种方法</span><br><span class=\"line\"># # [sheetname, first_row, first_col, last_row, last_col]</span><br><span class=\"line\"># chart1.add_series(&#123;</span><br><span class=\"line\"># &#x27;name&#x27;: [&#x27;Sheet1&#x27;,0,1],</span><br><span class=\"line\"># &#x27;categories&#x27;: [&#x27;Sheet1&#x27;,1,0,6,0],</span><br><span class=\"line\"># &#x27;values&#x27;: [&#x27;Sheet1&#x27;,1,1,6,1],</span><br><span class=\"line\"># &#125;)</span><br><span class=\"line\">#</span><br><span class=\"line\">#</span><br><span class=\"line\">#</span><br><span class=\"line\"># chart1.add_series(&#123;</span><br><span class=\"line\"># &#x27;name&#x27;: [&#x27;Sheet1&#x27;, 0, 2],</span><br><span class=\"line\"># &#x27;categories&#x27;: [&#x27;Sheet1&#x27;, 1, 0, 6, 0],</span><br><span class=\"line\"># &#x27;values&#x27;: [&#x27;Sheet1&#x27;, 1, 2, 6, 2],</span><br><span class=\"line\"># &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加图表标题和标签</span><br><span class=\"line\">chart1.set_title (&#123;&#x27;name&#x27;: &#x27;Results of sample analysis&#x27;&#125;)</span><br><span class=\"line\">chart1.set_x_axis(&#123;&#x27;name&#x27;: &#x27;Test number&#x27;&#125;)</span><br><span class=\"line\">chart1.set_y_axis(&#123;&#x27;name&#x27;: &#x27;Sample length (mm)&#x27;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置图表风格</span><br><span class=\"line\">chart1.set_style(11)</span><br><span class=\"line\"></span><br><span class=\"line\"># 在D2单元格插入图表（带偏移）</span><br><span class=\"line\">worksheet.insert_chart(&#x27;D2&#x27;, chart1, &#123;&#x27;x_offset&#x27;: 25, &#x27;y_offset&#x27;: 10&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">####################################################################### </span><br><span class=\"line\">#</span><br><span class=\"line\"># 创建一个叠图子类型</span><br><span class=\"line\">chart2 = workbook.add_chart(&#123;&#x27;type&#x27;: &#x27;column&#x27;, &#x27;subtype&#x27;: &#x27;stacked&#x27;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Configure the first series.</span><br><span class=\"line\">chart2.add_series(&#123;</span><br><span class=\"line\">    &#x27;name&#x27;: &#x27;=Sheet1!$B$1&#x27;,</span><br><span class=\"line\">    &#x27;categories&#x27;: &#x27;=Sheet1!$A$2:$A$7&#x27;,</span><br><span class=\"line\">    &#x27;values&#x27;: &#x27;=Sheet1!$B$2:$B$7&#x27;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Configure second series.</span><br><span class=\"line\">chart2.add_series(&#123;</span><br><span class=\"line\">    &#x27;name&#x27;: &#x27;=Sheet1!$C$1&#x27;,</span><br><span class=\"line\">    &#x27;categories&#x27;: &#x27;=Sheet1!$A$2:$A$7&#x27;,</span><br><span class=\"line\">    &#x27;values&#x27;: &#x27;=Sheet1!$C$2:$C$7&#x27;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Add a chart title and some axis labels.</span><br><span class=\"line\">chart2.set_title (&#123;&#x27;name&#x27;: &#x27;Stacked Chart&#x27;&#125;)</span><br><span class=\"line\">chart2.set_x_axis(&#123;&#x27;name&#x27;: &#x27;Test number&#x27;&#125;)</span><br><span class=\"line\">chart2.set_y_axis(&#123;&#x27;name&#x27;: &#x27;Sample length (mm)&#x27;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Set an Excel chart style.</span><br><span class=\"line\">chart2.set_style(12)</span><br><span class=\"line\"></span><br><span class=\"line\"># Insert the chart into the worksheet (with an offset).</span><br><span class=\"line\">worksheet.insert_chart(&#x27;D18&#x27;, chart2, &#123;&#x27;x_offset&#x27;: 25, &#x27;y_offset&#x27;: 10&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">#######################################################################</span><br><span class=\"line\">#</span><br><span class=\"line\"># Create a percentage stacked chart sub-type.</span><br><span class=\"line\">#</span><br><span class=\"line\">chart3 = workbook.add_chart(&#123;&#x27;type&#x27;: &#x27;column&#x27;, &#x27;subtype&#x27;: &#x27;percent_stacked&#x27;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Configure the first series.</span><br><span class=\"line\">chart3.add_series(&#123;</span><br><span class=\"line\">    &#x27;name&#x27;: &#x27;=Sheet1!$B$1&#x27;,</span><br><span class=\"line\">    &#x27;categories&#x27;: &#x27;=Sheet1!$A$2:$A$7&#x27;,</span><br><span class=\"line\">    &#x27;values&#x27;: &#x27;=Sheet1!$B$2:$B$7&#x27;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Configure second series.</span><br><span class=\"line\">chart3.add_series(&#123;</span><br><span class=\"line\">    &#x27;name&#x27;: &#x27;=Sheet1!$C$1&#x27;,</span><br><span class=\"line\">    &#x27;categories&#x27;: &#x27;=Sheet1!$A$2:$A$7&#x27;,</span><br><span class=\"line\">    &#x27;values&#x27;: &#x27;=Sheet1!$C$2:$C$7&#x27;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Add a chart title and some axis labels.</span><br><span class=\"line\">chart3.set_title (&#123;&#x27;name&#x27;: &#x27;Percent Stacked Chart&#x27;&#125;)</span><br><span class=\"line\">chart3.set_x_axis(&#123;&#x27;name&#x27;: &#x27;Test number&#x27;&#125;)</span><br><span class=\"line\">chart3.set_y_axis(&#123;&#x27;name&#x27;: &#x27;Sample length (mm)&#x27;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Set an Excel chart style.</span><br><span class=\"line\">chart3.set_style(13)</span><br><span class=\"line\"></span><br><span class=\"line\"># Insert the chart into the worksheet (with an offset).</span><br><span class=\"line\">worksheet.insert_chart(&#x27;D34&#x27;, chart3, &#123;&#x27;x_offset&#x27;: 25, &#x27;y_offset&#x27;: 10&#125;)</span><br><span class=\"line\">#生成圆饼图</span><br><span class=\"line\">chart4 = workbook.add_chart(&#123;&#x27;type&#x27;:&#x27;pie&#x27;&#125;)</span><br><span class=\"line\">#定义数据</span><br><span class=\"line\">data = [</span><br><span class=\"line\">    [&#x27;Pass&#x27;,&#x27;Fail&#x27;,&#x27;Warn&#x27;,&#x27;NT&#x27;],</span><br><span class=\"line\">    [333,11,12,22],</span><br><span class=\"line\">]</span><br><span class=\"line\">#写入数据</span><br><span class=\"line\">worksheet.write_row(&#x27;A51&#x27;,data[0],bold)</span><br><span class=\"line\">worksheet.write_row(&#x27;A52&#x27;,data[1])</span><br><span class=\"line\"></span><br><span class=\"line\">chart4.add_series(&#123;</span><br><span class=\"line\">    &#x27;name&#x27;: &#x27;接口测试报表图&#x27;,</span><br><span class=\"line\">    &#x27;categories&#x27;: &#x27;=Sheet1!$A$51:$D$51&#x27;,</span><br><span class=\"line\">    &#x27;values&#x27;: &#x27;=Sheet1!$A$52:$D$52&#x27;,</span><br><span class=\"line\">    &#x27;points&#x27;:[</span><br><span class=\"line\">        &#123;&#x27;fill&#x27;:&#123;&#x27;color&#x27;:&#x27;#00CD00&#x27;&#125;&#125;,</span><br><span class=\"line\">        &#123;&#x27;fill&#x27;:&#123;&#x27;color&#x27;:&#x27;red&#x27;&#125;&#125;,</span><br><span class=\"line\">        &#123;&#x27;fill&#x27;:&#123;&#x27;color&#x27;:&#x27;yellow&#x27;&#125;&#125;,</span><br><span class=\"line\">        &#123;&#x27;fill&#x27;:&#123;&#x27;color&#x27;:&#x27;gray&#x27;&#125;&#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"># Add a chart title and some axis labels.</span><br><span class=\"line\">chart4.set_title (&#123;&#x27;name&#x27;: &#x27;接口测试统计&#x27;&#125;)</span><br><span class=\"line\">chart4.set_style(3)</span><br><span class=\"line\"># chart3.set_y_axis(&#123;&#x27;name&#x27;: &#x27;Sample length (mm)&#x27;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">worksheet.insert_chart(&#x27;E52&#x27;, chart4, &#123;&#x27;x_offset&#x27;: 25, &#x27;y_offset&#x27;: 10&#125;)</span><br><span class=\"line\">workbook.close()</span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\"># demo1()</span><br><span class=\"line\">    charts()</span><br><span class=\"line\">    print(&#x27;finished...&#x27;)</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n\n<p>案例二</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#coding: utf-8</span><br><span class=\"line\">import xlsxwriter</span><br><span class=\"line\">import random</span><br><span class=\"line\"></span><br><span class=\"line\">def get_num():</span><br><span class=\"line\">    return random.randrange(0, 201, 2)</span><br><span class=\"line\"></span><br><span class=\"line\">workbook = xlsxwriter.Workbook(&#x27;analyse_spider.xlsx&#x27;) #创建一个Excel文件</span><br><span class=\"line\">worksheet = workbook.add_worksheet() #创建一个工作表对象</span><br><span class=\"line\">chart = workbook.add_chart(&#123;&#x27;type&#x27;: &#x27;column&#x27;&#125;) #创建一个图表对象</span><br><span class=\"line\">#定义数据表头列表</span><br><span class=\"line\">title = [u&#x27;业务名称&#x27;,u&#x27;星期一&#x27;,u&#x27;星期二&#x27;,u&#x27;星期三&#x27;,u&#x27;星期四&#x27;,u&#x27;星期五&#x27;,u&#x27;星期六&#x27;,u&#x27;星期日&#x27;,u&#x27;平均流量&#x27;]</span><br><span class=\"line\">buname= [u&#x27;时光网&#x27;,u&#x27;汽车之家&#x27;,u&#x27;weixin.com&#x27;,u&#x27;163.com&#x27;,u&#x27;baidu.com&#x27;] #定义频道名称</span><br><span class=\"line\">#定义5频道一周7天流量数据列表</span><br><span class=\"line\">data = []</span><br><span class=\"line\">for i in range(5):</span><br><span class=\"line\">    tmp = []</span><br><span class=\"line\">for j in range(7):</span><br><span class=\"line\">    tmp.append(get_num())</span><br><span class=\"line\">data.append(tmp)</span><br><span class=\"line\"></span><br><span class=\"line\">format=workbook.add_format() #定义format格式对象</span><br><span class=\"line\">format.set_border(1) #定义format对象单元格边框加粗(1像素)的格式</span><br><span class=\"line\"></span><br><span class=\"line\">format_title=workbook.add_format() #定义format_title格式对象</span><br><span class=\"line\">format_title.set_border(1) #定义format_title对象单元格边框加粗(1像素)的格式</span><br><span class=\"line\">format_title.set_bg_color(&#x27;#cccccc&#x27;) #定义format_title对象单元格背景颜色为</span><br><span class=\"line\">#&#x27;#cccccc&#x27;的格式</span><br><span class=\"line\">format_title.set_align(&#x27;center&#x27;) #定义format_title对象单元格居中对齐的格式</span><br><span class=\"line\">format_title.set_bold() #定义format_title对象单元格内容加粗的格式</span><br><span class=\"line\"></span><br><span class=\"line\">format_ave=workbook.add_format() #定义format_ave格式对象</span><br><span class=\"line\">format_ave.set_border(1) #定义format_ave对象单元格边框加粗(1像素)的格式</span><br><span class=\"line\">format_ave.set_num_format(&#x27;0.00&#x27;) #定义format_ave对象单元格数字类别显示格式</span><br><span class=\"line\"></span><br><span class=\"line\">#下面分别以行或列写入方式将标题、业务名称、流量数据写入起初单元格，同时引用不同格式对象</span><br><span class=\"line\">worksheet.write_row(&#x27;A1&#x27;,title,format_title)</span><br><span class=\"line\">worksheet.write_column(&#x27;A2&#x27;, buname,format)</span><br><span class=\"line\">worksheet.write_row(&#x27;B2&#x27;, data[0],format)</span><br><span class=\"line\">worksheet.write_row(&#x27;B3&#x27;, data[1],format)</span><br><span class=\"line\">worksheet.write_row(&#x27;B4&#x27;, data[2],format)</span><br><span class=\"line\">worksheet.write_row(&#x27;B5&#x27;, data[3],format)</span><br><span class=\"line\">worksheet.write_row(&#x27;B6&#x27;, data[4],format)</span><br><span class=\"line\"></span><br><span class=\"line\">#定义图表数据系列函数</span><br><span class=\"line\">def chart_series(cur_row):</span><br><span class=\"line\">worksheet.write_formula(&#x27;I&#x27;+cur_row, \\</span><br><span class=\"line\">    &#x27;=AVERAGE(B&#x27;+cur_row+&#x27;:H&#x27;+cur_row+&#x27;)&#x27;,format_ave) #计算（AVERAGE函数）频</span><br><span class=\"line\">    #道周平均流量</span><br><span class=\"line\">    chart.add_series(&#123;</span><br><span class=\"line\">        &#x27;categories&#x27;: &#x27;=Sheet1!$B$1:$H$1&#x27;, #将“星期一至星期日”作为图表数据标签(X轴)</span><br><span class=\"line\">        &#x27;values&#x27;: &#x27;=Sheet1!$B$&#x27;+cur_row+&#x27;:$H$&#x27;+cur_row, #频道一周所有数据作</span><br><span class=\"line\">    #为数据区域</span><br><span class=\"line\">        &#x27;line&#x27;: &#123;&#x27;color&#x27;: &#x27;black&#x27;&#125;, #线条颜色定义为black(黑色)</span><br><span class=\"line\">        &#x27;name&#x27;: &#x27;=Sheet1!$A$&#x27;+cur_row, #引用业务名称为图例项</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">for row in range(2, 7): #数据域以第2～6行进行图表数据系列函数调用</span><br><span class=\"line\">    chart_series(str(row))</span><br><span class=\"line\"></span><br><span class=\"line\">chart.set_size(&#123;&#x27;width&#x27;: 577, &#x27;height&#x27;: 287&#125;) #设置图表大小</span><br><span class=\"line\">chart.set_title (&#123;&#x27;name&#x27;: u&#x27;爬虫分析&#x27;&#125;) #设置图表（上方）大标题</span><br><span class=\"line\">chart.set_y_axis(&#123;&#x27;name&#x27;: &#x27;count&#x27;&#125;) #设置y轴（左侧）小标题</span><br><span class=\"line\"></span><br><span class=\"line\">worksheet.insert_chart(&#x27;A8&#x27;, chart) #在A8单元格插入图表</span><br><span class=\"line\">workbook.close() #关闭Excel文档</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["python"]},{"title":"Python判断文件和文件夹是否存在的方法","url":"/python_file_exits/","content":"<h2 id=\"python判断文件和文件夹是否存在、创建文件夹\"><a href=\"#python判断文件和文件夹是否存在、创建文件夹\" class=\"headerlink\" title=\"python判断文件和文件夹是否存在、创建文件夹\"></a>python判断文件和文件夹是否存在、创建文件夹</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import os</span><br><span class=\"line\">&gt;&gt;&gt; os.path.exists(&#x27;d:/assist&#x27;)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; os.path.exists(&#x27;d:/assist/getTeacherList.py&#x27;)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; os.path.isfile(&#x27;d:/assist&#x27;)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; os.path.isfile(&#x27;d:/assist/getTeacherList.py&#x27;)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; os.makedirs(&#x27;d:/assist/set&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; os.path.exists(&#x27;d:/assist/set&#x27;)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<h2 id=\"python判断文件是否存在\"><a href=\"#python判断文件是否存在\" class=\"headerlink\" title=\"python判断文件是否存在\"></a>python判断文件是否存在</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\"> </span><br><span class=\"line\">filename = r&#x27;/home/tim/workspace/test.txt&#x27;</span><br><span class=\"line\">if os.path.exists(filename):</span><br><span class=\"line\">    message = &#x27;OK, the &quot;%s&quot; file exists.&#x27;</span><br><span class=\"line\">else:</span><br><span class=\"line\">    message = &quot;Sorry, I cannot find the &quot;%s&quot; file.&quot;</span><br><span class=\"line\">print message % filename</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何用Python判断文件是否存在\"><a href=\"#如何用Python判断文件是否存在\" class=\"headerlink\" title=\"如何用Python判断文件是否存在\"></a>如何用Python判断文件是否存在</h2><p>使用<code>os.path.exists()</code>方法可以直接判断文件是否存在。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import os</span><br><span class=\"line\">&gt;&gt;&gt; os.path.exists(r&#x27;C:\\1.TXT&#x27;)</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>如果存在返回值为True，如果不存在则返回False</p>\n<h2 id=\"python判断文件夹是否存在\"><a href=\"#python判断文件夹是否存在\" class=\"headerlink\" title=\"python判断文件夹是否存在\"></a>python判断文件夹是否存在</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ python</span><br><span class=\"line\">Python 2.7.3 (default, Jan  2 2013, 16:53:07) </span><br><span class=\"line\">[GCC 4.7.2] on linux2</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt; import os</span><br><span class=\"line\">&gt;&gt;&gt; </span><br><span class=\"line\">&gt;&gt;&gt; </span><br><span class=\"line\">&gt;&gt;&gt; tobecheckdir = r&#x27;/home/tim/workspace&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; os.path.isdir(tobecheckdir)</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"python检查文件是否存在，以及路径是否为文件\"><a href=\"#python检查文件是否存在，以及路径是否为文件\" class=\"headerlink\" title=\"python检查文件是否存在，以及路径是否为文件\"></a>python检查文件是否存在，以及路径是否为文件</h2><p>在写文件之前通常需要检查文件路径是否可写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from os import path, access, R_OK  # W_OK for write permission.</span><br><span class=\"line\"></span><br><span class=\"line\">PATH=&#x27;./file.txt&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">if path.exists(PATH) and path.isfile(PATH) and access(PATH, R_OK):</span><br><span class=\"line\">    print &quot;File exists and is readable&quot;</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print &quot;Either file is missing or is not readable&quot;</span><br></pre></td></tr></table></figure>\n<p>你也可以通过下面的方式实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">def file_exists(filename):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        with open(filename) as f:</span><br><span class=\"line\">            return True</span><br><span class=\"line\">    except IOError:</span><br><span class=\"line\">        return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"python判断文件和文件夹是否存在\"><a href=\"#python判断文件和文件夹是否存在\" class=\"headerlink\" title=\"python判断文件和文件夹是否存在\"></a>python判断文件和文件夹是否存在</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import os </span><br><span class=\"line\">os.path.isfile(&#x27;test.txt&#x27;) #如果不存在就返回False </span><br><span class=\"line\">os.path.exists(directory) #如果目录不存在就返回False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"os-path-lexist\"><a href=\"#os-path-lexist\" class=\"headerlink\" title=\"os.path.lexist\"></a>os.path.lexist</h2><p>还有<code>os.path.lexists(path)</code><br>对broken的link file也返回True.</p>\n<h2 id=\"python-FTP判断文件夹是否存在\"><a href=\"#python-FTP判断文件夹是否存在\" class=\"headerlink\" title=\"python FTP判断文件夹是否存在\"></a>python FTP判断文件夹是否存在</h2><p>python怎样判断文件夹是否存在？广大网友给出了答案：<br>使用ftp库就可以了，下面是Python核心编程上的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from ftplib import FTP</span><br><span class=\"line\">&gt;&gt;&gt; f = FTP(&#x27;ftp.python.org&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; f.login(&#x27;anonymous&#x27;, &#x27;guido@python.org&#x27;)</span><br><span class=\"line\">&#x27;230 Guest login ok, access restrictions apply.&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; f.dir()</span><br></pre></td></tr></table></figure>\n<p>dir结果中无此文件，就是不存在。<br>或者如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">f.retrbinary(&#x27;RETR %s&#x27; % FILE,open(FILE, &#x27;wb&#x27;).write)</span><br><span class=\"line\">except ftplib.error_perm:</span><br><span class=\"line\">print &#x27;ERROR: cannot read file &quot;%s&quot;&#x27; % FILE 40 os.unlink(FILE)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>不能读此文件，也视为不存在。</p>\n","categories":["Web","Back","python"]},{"title":"Python如何导入自定义模块","url":"/python_import_self_module/","content":"<p>这个问题涉及到包和模块管理。包名和模块名一般是小写。你的文件是下面的结构，需要创建空文件 <code>b/__init__.py</code>，将b目录变成package。</p>\n<p>a&#x2F;a.py</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from b.c import index</span><br><span class=\"line\">index()</span><br></pre></td></tr></table></figure>\n<p>b&#x2F;c.py</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">def index():</span><br><span class=\"line\">    print(&quot;hello&quot;)</span><br></pre></td></tr></table></figure>\n<p><code>b/__init__.pya/a.py</code> 里面有两种引用方式，相对引用和绝对引用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 如果a.py是 library，两种引用方式都可以</span><br><span class=\"line\"></span><br><span class=\"line\">from ..b.c import index</span><br><span class=\"line\"># 如果a.py是 executable，必须使用绝对引用</span><br><span class=\"line\"></span><br><span class=\"line\">from b.c import index</span><br></pre></td></tr></table></figure>\n<p>如果使用绝对引用，需要确保b所在目录在<code>PYTHONPATH (sys.path)</code>里面，比如可以这样执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">env PYTHONPATH=. python a/a.py</span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["python"]},{"title":"Python封装日志功能Logger","url":"/python_logger/","content":"<p>我们对日志功能的需求如下：</p>\n<ul>\n<li>为了便于日志的查看，每个脚本对应一个日志文件，日志文件以脚本的名字命名。</li>\n<li>日志路径以及每个脚本保存的日志容量可以设置，比如设置为5MB，则超过后最老日志被自动覆盖。</li>\n<li>日志功能要使用方便，减少与框架业务功能的耦合。</li>\n</ul>\n<p>现在来逐一分析上述需求。</p>\n<h3 id=\"实现每个脚本一个日志文件\"><a href=\"#实现每个脚本一个日志文件\" class=\"headerlink\" title=\"实现每个脚本一个日志文件\"></a>实现每个脚本一个日志文件</h3><p>需要在日志模块中，根据用例脚本的名字来生成日志文件，这里的关键问题就是怎样在日志模块中获取用例脚本的名字。<br>获取文件名的常用方法有：<code>os.getcwd(), sys.argv[0], __file__</code>，来看下各种的作用：<br>先在一个文件(假设为test.py）中编写如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">    import sys</span><br><span class=\"line\">    def func():</span><br><span class=\"line\">    print os.getcwd()</span><br><span class=\"line\">    print sys.argv[0]</span><br><span class=\"line\">    print __file__</span><br></pre></td></tr></table></figure>\n<p>然后在另一个文件中（假设为script1.py）中<code>import test</code>，然后调用func方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import test</span><br><span class=\"line\">test.func()</span><br></pre></td></tr></table></figure>\n<p>运行script1.py，结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/wwwroot/PythonWorkSpace/python-test</span><br><span class=\"line\">Test/TestLog.py</span><br><span class=\"line\">Test/TestLog.py</span><br></pre></td></tr></table></figure>\n<p>可见，<code>os.getcwd()</code>获取的是执行脚本的目录， <code>sys.argv[0]</code>是执行脚本的绝对路径名， <code>__file__</code>是被执行代码所在文件的绝对路径名。</p>\n<p>现在就清楚了，我们应该用sys.argv[0]来获取执行脚本的名字，由于获取到的是绝对路径，需要做一点处理：<code>sys.argv[0].split(‘/’)[-1].split(‘.’)[0]</code></p>\n<h3 id=\"日志容量问题\"><a href=\"#日志容量问题\" class=\"headerlink\" title=\"日志容量问题\"></a>日志容量问题</h3><p>要实现超过容量后自动覆盖最老日志，采用logging中的RotatingFileHandler类即可，可以设置日志文件的大小，以及备份个数。<br>那么日志路径和容量配置放在哪里呢？<br>让用户直接修改RotatingFileHandler的参数显然不好，最好不要让用户修改框架文件，用户只需调用接口写自己的脚本即可。</p>\n<p>这里采用的方案是将配置信息写入一个文件，XML文件比较适合用来作为配置文件，用户通过修改XML文件来制定配置，日志模块从XML文件读取参数。</p>\n<p>这里为了方便将XML文件放入<code>Common</code>下面，命名为<code>config.xml</code>，内容为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;config&gt;</span><br><span class=\"line\">  &lt;!-- 日志保存路径 --&gt;</span><br><span class=\"line\">  &lt;logpath&gt;E:\\PythonLog&lt;/logpath&gt;</span><br><span class=\"line\">  &lt;!-- 每个脚本对应的日志文件大小，单位MB --&gt;</span><br><span class=\"line\">  &lt;logsize&gt;8&lt;/logsize&gt;</span><br><span class=\"line\">  &lt;!-- 每个脚本保存的日志文件个数 --&gt;</span><br><span class=\"line\">  &lt;lognum&gt;3&lt;/lognum&gt;</span><br><span class=\"line\">&lt;/config&gt;</span><br></pre></td></tr></table></figure>\n<p>读取XML文件内容，使用lxml库非常简单，后面再给出代码。</p>\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>日志功能要使用方便，减少与框架业务功能的耦合。最好就是对日志功能进行封装，只提供记录日志的接口即可。<br>日志接口采用类方法的形式就可以满足上述要求，用户只需要通过类调用日志记录接口，随处调用，使用方便，并且无需定义类实例，与框架业务没有耦合。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>有了上述分析，我们来实现日志模块。<br>由于日志功能也是框架基础的一部分，我们将日志模块也放在Common这个package中，在Common下新建<code>log.py</code>文件，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># coding: utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">from lxml import etree</span><br><span class=\"line\">import logging.handlers</span><br><span class=\"line\">import logging</span><br><span class=\"line\">import os</span><br><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\"># 提供日志功能</span><br><span class=\"line\">class logger:</span><br><span class=\"line\">    # 先读取XML文件中的配置数据</span><br><span class=\"line\">    # 由于config.xml放置在与当前文件相同的目录下，因此通过 __file__ 来获取XML文件的目录，然后再拼接成绝对路径</span><br><span class=\"line\">    # 这里利用了lxml库来解析XML</span><br><span class=\"line\">    root = etree.parse(os.path.join(os.path.dirname(__file__), &#x27;config.xml&#x27;)).getroot()</span><br><span class=\"line\">    # 读取日志文件保存路径</span><br><span class=\"line\">    logpath = root.find(&#x27;logpath&#x27;).text</span><br><span class=\"line\">    # 读取日志文件容量，转换为字节</span><br><span class=\"line\">    logsize = 1024*1024*int(root.find(&#x27;logsize&#x27;).text)</span><br><span class=\"line\">    # 读取日志文件保存个数</span><br><span class=\"line\">    lognum = int(root.find(&#x27;lognum&#x27;).text)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 日志文件名：由用例脚本的名称，结合日志保存路径，得到日志文件的绝对路径</span><br><span class=\"line\">    logname = os.path.join(logpath, sys.argv[0].split(&#x27;/&#x27;)[-1].split(&#x27;.&#x27;)[0])</span><br><span class=\"line\"></span><br><span class=\"line\">    # 初始化logger</span><br><span class=\"line\">    log = logging.getLogger()</span><br><span class=\"line\">    # 日志格式，可以根据需要设置</span><br><span class=\"line\">    fmt = logging.Formatter(&#x27;[%(asctime)s][%(filename)s][line:%(lineno)d][%(levelname)s] %(message)s&#x27;, &#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 日志输出到文件，这里用到了上面获取的日志名称，大小，保存个数</span><br><span class=\"line\">    handle1 = logging.handlers.RotatingFileHandler(logname, maxBytes=logsize, backupCount=lognum)</span><br><span class=\"line\">    handle1.setFormatter(fmt)</span><br><span class=\"line\">    # 同时输出到屏幕，便于实施观察</span><br><span class=\"line\">    handle2 = logging.StreamHandler(stream=sys.stdout)</span><br><span class=\"line\">    handle2.setFormatter(fmt)</span><br><span class=\"line\">    log.addHandler(handle1)</span><br><span class=\"line\">    log.addHandler(handle2)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 设置日志基本，这里设置为INFO，表示只有INFO级别及以上的会打印</span><br><span class=\"line\">    log.setLevel(logging.INFO)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 日志接口，用户只需调用这里的接口即可，这里只定位了INFO, WARNING, ERROR三个级别的日志，可根据需要定义更多接口</span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def info(cls, msg):</span><br><span class=\"line\">        cls.log.info(msg)</span><br><span class=\"line\">        return</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def warning(cls, msg):</span><br><span class=\"line\">        cls.log.warning(msg)</span><br><span class=\"line\">        return</span><br><span class=\"line\"></span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def error(cls, msg):</span><br><span class=\"line\">        cls.log.error(msg)</span><br><span class=\"line\">        return</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>来测试一下，在脚本script1和script2中分别编写下面代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from Common.log import *</span><br><span class=\"line\"></span><br><span class=\"line\">logger.info(&#x27;This is info&#x27;)</span><br><span class=\"line\">logger.warning(&#x27;This is warning&#x27;)</span><br><span class=\"line\">logger.error(&#x27;This is error&#x27;)</span><br></pre></td></tr></table></figure>\n<p>分别运行两个脚本，控制台输出为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[2017-04-27 10:57:03][log.py][line:47][INFO] This is info</span><br><span class=\"line\">[2017-04-27 10:57:03][log.py][line:52][WARNING] This is warning</span><br><span class=\"line\">[2017-04-27 10:57:03][log.py][line:57][ERROR] This is error</span><br></pre></td></tr></table></figure>\n<p>产生的日志文件在<code>config.xml</code> 里边</p>\n","categories":["Web","Back","python"],"tags":["python"]},{"title":"Python操作数据库pymysql","url":"/python_pymysql/","content":"<p>GitHub地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1B5TXlTUUwvUHlNeVNRTA==\">https://github.com/PyMySQL/PyMySQL<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"1-安装pymysql\"><a href=\"#1-安装pymysql\" class=\"headerlink\" title=\"1 安装pymysql\"></a>1 安装pymysql</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install pymysql</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-案例\"><a href=\"#2-案例\" class=\"headerlink\" title=\"2.案例\"></a>2.案例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import pymysql.cursors</span><br><span class=\"line\"></span><br><span class=\"line\"># Connect to the database</span><br><span class=\"line\">connection = pymysql.connect(host=&#x27;localhost&#x27;,</span><br><span class=\"line\">                             user=&#x27;user&#x27;,</span><br><span class=\"line\">                             password=&#x27;passwd&#x27;,</span><br><span class=\"line\">                             db=&#x27;db&#x27;,</span><br><span class=\"line\">                             charset=&#x27;utf8mb4&#x27;,</span><br><span class=\"line\">                             cursorclass=pymysql.cursors.DictCursor)</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    with connection.cursor() as cursor:</span><br><span class=\"line\">        # Create a new record</span><br><span class=\"line\">        sql = &quot;INSERT INTO `users` (`email`, `password`) VALUES (%s, %s)&quot;</span><br><span class=\"line\">        cursor.execute(sql, (&#x27;webmaster@python.org&#x27;, &#x27;very-secret&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">    # connection is not autocommit by default. So you must commit to save</span><br><span class=\"line\">    # your changes.</span><br><span class=\"line\">    connection.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    with connection.cursor() as cursor:</span><br><span class=\"line\">        # Read a single record</span><br><span class=\"line\">        sql = &quot;SELECT `id`, `password` FROM `users` WHERE `email`=%s&quot;</span><br><span class=\"line\">        cursor.execute(sql, (&#x27;webmaster@python.org&#x27;,))</span><br><span class=\"line\">        result = cursor.fetchone()</span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">finally:</span><br><span class=\"line\">    connection.close()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、基本操作：\"><a href=\"#3、基本操作：\" class=\"headerlink\" title=\"3、基本操作：\"></a>3、基本操作：</h2><p>（1）导入<code>pymysql: import pymysql</code><br>（2）连接数据库：<br><code>conn=pymysql.connect(host=&#39;localhost&#39;,user=&#39;root&#39;,passwd=&#39;root&#39;,db=&#39;ere&#39;，charset=&#39;utf8&#39;)</code> 务必注意各等号前面的内容！charset参数可避免中文乱码<br>（3）获取操作游标： <code>cur=conn.cursor()</code><br>（4）执行sql语句,插入记录：<code>sta=cur.execute(&quot;insert 语句&quot;)</code>  执行成功后sta值为1。更新、删除语句与此类似。<br>（5）执行sql语句，查询记录：<code>cur.execute(&quot;select语句&quot;)</code> 执行成功后cur变量中保存了查询结果记录集，然后再用循环打印结果： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">for each in cur:</span><br><span class=\"line\">      print(each[1].decode(&#x27;utf-8&#x27;))     # each[1] 表示当前游标所在行的的第2列值，如果是中文则需要处理编码</span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["python"]},{"title":"Python自定义函数的创建、调用和函数的参数详解","url":"/python_custom_function/","content":"<p>这篇文章主要介绍了Python自定义函数的创建、调用和函数的参数、变量作用域等常见问题,需要的朋友可以参考下</p>\n<p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。<br>函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如<code>print()</code>。但你也可以自己创见函数，这被叫做用户自定义函数。</p>\n<h2 id=\"定义一个函数\"><a href=\"#定义一个函数\" class=\"headerlink\" title=\"定义一个函数\"></a>定义一个函数</h2><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p>\n<p>函数代码块以def关键词开头，后接函数标识符名称和圆括号()。<br>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。<br>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。<br>函数内容以冒号起始，并且缩进。<br><code>Return[expression]</code>结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回<code>None</code>。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">def functionname( parameters ):</span><br><span class=\"line\">    &quot;函数_文档字符串&quot;</span><br><span class=\"line\">    function_suite</span><br><span class=\"line\">    return [expression]</span><br></pre></td></tr></table></figure>\n<p>默认情况下，参数值和参数名称是按函数声明中定义的的顺序匹配起来的。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>以下为一个简单的Python函数，它将一个字符串作为传入参数，再打印到标准显示设备上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">def printme( str ):</span><br><span class=\"line\">    &quot;打印传入的字符串到标准显示设备上&quot;</span><br><span class=\"line\">    print str</span><br><span class=\"line\">    return</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h2><p>定义一个函数只给了函数一个名称，指定了函数里包含的参数，和代码块结构。这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从Python提示符执行。</p>\n<p>如下实例调用了<code>printme()</code>函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"></span><br><span class=\"line\"># Function definition is here</span><br><span class=\"line\">def printme( str ):</span><br><span class=\"line\">    &quot;打印任何传入的字符串&quot;</span><br><span class=\"line\">    print str;</span><br><span class=\"line\">    return;</span><br><span class=\"line\"></span><br><span class=\"line\"># Now you can call printme function</span><br><span class=\"line\">printme(&quot;我要调用用户自定义函数!&quot;);</span><br><span class=\"line\">printme(&quot;再次调用同一函数&quot;);</span><br><span class=\"line\"># 以上实例输出结果：</span><br><span class=\"line\"># 我要调用用户自定义函数!</span><br><span class=\"line\"># 再次调用同一函数</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按值传递参数和按引用传递参数\"><a href=\"#按值传递参数和按引用传递参数\" class=\"headerlink\" title=\"按值传递参数和按引用传递参数\"></a>按值传递参数和按引用传递参数</h2><p>所有参数（自变量）在Python里都是按引用传递。如果你在函数里修改了参数，那么在调用这个函数的函数里，原始的参数也被改变了。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"></span><br><span class=\"line\"># 可写函数说明</span><br><span class=\"line\">def changeme( mylist ):</span><br><span class=\"line\">    &quot;修改传入的列表&quot;</span><br><span class=\"line\">    mylist.append([1,2,3,4]);</span><br><span class=\"line\">    print &quot;函数内取值: &quot;, mylist</span><br><span class=\"line\">    return</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用changeme函数</span><br><span class=\"line\">mylist = [10,20,30];</span><br><span class=\"line\">changeme( mylist );</span><br><span class=\"line\">print &quot;函数外取值: &quot;, mylist</span><br><span class=\"line\"># 传入函数的和在末尾添加新内容的对象用的是同一个引用。故输出结果如下：</span><br><span class=\"line\"># 函数内取值: [10, 20, 30, [1, 2, 3, 4]]</span><br><span class=\"line\"># 函数外取值: [10, 20, 30, [1, 2, 3, 4]]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Python函数可以使用的参数类型：\"><a href=\"#Python函数可以使用的参数类型：\" class=\"headerlink\" title=\"Python函数可以使用的参数类型：\"></a>Python函数可以使用的参数类型：</h2><p>必备参数、命名参数、缺省参数、不定长参数</p>\n<h3 id=\"必备参数\"><a href=\"#必备参数\" class=\"headerlink\" title=\"必备参数\"></a>必备参数</h3><p>必备参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。<br>调用<code>printme()</code>函数，你必须传入一个参数，不然会出现语法错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"></span><br><span class=\"line\"># 可写函数说明</span><br><span class=\"line\">def printme( str ):</span><br><span class=\"line\">    &quot;打印任何传入的字符串&quot;</span><br><span class=\"line\">    print str;</span><br><span class=\"line\">    return;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用printme函数</span><br><span class=\"line\">printme();</span><br><span class=\"line\"># 以上实例输出结果：</span><br><span class=\"line\"># Traceback (most recent call last):</span><br><span class=\"line\"># File &quot;test.py&quot;, line 11, in </span><br><span class=\"line\"># printme();</span><br><span class=\"line\"># TypeError: printme() takes exactly 1 argument (0 given)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命名参数\"><a href=\"#命名参数\" class=\"headerlink\" title=\"命名参数\"></a>命名参数</h3><p>命名参数和函数调用关系紧密，调用方用参数的命名确定传入的参数值。你可以跳过不传的参数或者乱序传参，因为Python解释器能够用参数名匹配参数值。用命名参数调用<code>printme()</code>函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># 可写函数说明</span><br><span class=\"line\">def printme( str ):</span><br><span class=\"line\">    &quot;打印任何传入的字符串&quot;</span><br><span class=\"line\">    print str;</span><br><span class=\"line\">    return;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用printme函数</span><br><span class=\"line\">printme( str = &quot;My string&quot;);</span><br><span class=\"line\"># 以上实例输出结果：</span><br><span class=\"line\"># My string</span><br></pre></td></tr></table></figure>\n<p>下例能将命名参数顺序不重要展示得更清楚：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"></span><br><span class=\"line\">#可写函数说明</span><br><span class=\"line\">def printinfo( name, age ):</span><br><span class=\"line\">    &quot;打印任何传入的字符串&quot;</span><br><span class=\"line\">    print &quot;Name: &quot;, name;</span><br><span class=\"line\">    print &quot;Age &quot;, age;</span><br><span class=\"line\">    return;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用printinfo函数</span><br><span class=\"line\">printinfo( age=50, name=&quot;miki&quot; );</span><br><span class=\"line\"># 以上实例输出结果：</span><br><span class=\"line\"># Name: miki</span><br><span class=\"line\"># Age 50</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"缺省参数\"><a href=\"#缺省参数\" class=\"headerlink\" title=\"缺省参数\"></a>缺省参数</h3><p>调用函数时，缺省参数的值如果没有传入，则被认为是默认值。下例会打印默认的age，如果age没有被传入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"></span><br><span class=\"line\"># 可写函数说明</span><br><span class=\"line\">def printinfo( name, age = 35 ):</span><br><span class=\"line\">    &quot;打印任何传入的字符串&quot;</span><br><span class=\"line\">    print &quot;Name: &quot;, name;</span><br><span class=\"line\">    print &quot;Age &quot;, age;</span><br><span class=\"line\">    return;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用printinfo函数</span><br><span class=\"line\">printinfo( age=50, name=&quot;miki&quot; );</span><br><span class=\"line\">printinfo( name=&quot;miki&quot; );</span><br><span class=\"line\"># 以上实例输出结果：</span><br><span class=\"line\"># Name: miki</span><br><span class=\"line\"># Age 50</span><br><span class=\"line\"># Name: miki</span><br><span class=\"line\"># Age 35</span><br></pre></td></tr></table></figure>\n<h3 id=\"不定长参数\"><a href=\"#不定长参数\" class=\"headerlink\" title=\"不定长参数\"></a>不定长参数</h3><p>你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述2种参数不同，声明时不会命名。基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">def functionname([formal_args,] *var_args_tuple ):</span><br><span class=\"line\">    &quot;函数_文档字符串&quot;</span><br><span class=\"line\">    function_suite</span><br><span class=\"line\">    return [expression]</span><br></pre></td></tr></table></figure>\n<p>加了星号（*）的变量名会存放所有未命名的变量参数。选择不多传参数也可。如下实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"></span><br><span class=\"line\"># 可写函数说明</span><br><span class=\"line\">def printinfo( arg1, *vartuple ):</span><br><span class=\"line\">    &quot;打印任何传入的参数&quot;</span><br><span class=\"line\">    print &quot;输出: &quot;</span><br><span class=\"line\">    print arg1</span><br><span class=\"line\">    for var in vartuple:</span><br><span class=\"line\">        print var</span><br><span class=\"line\">    return;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用printinfo 函数</span><br><span class=\"line\">printinfo( 10 );</span><br><span class=\"line\">printinfo( 70, 60, 50 );</span><br><span class=\"line\"># 以上实例输出结果：</span><br><span class=\"line\"># 输出:</span><br><span class=\"line\"># 10</span><br><span class=\"line\"># 输出:</span><br><span class=\"line\"># 70</span><br><span class=\"line\"># 60</span><br><span class=\"line\"># 50</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h2><p>用lambda关键词能创建小型匿名函数。这种函数得名于省略了用def声明函数的标准步骤。</p>\n<p>Lambda函数能接收任何数量的参数但只能返回一个表达式的值，同时只能不能包含命令或多个表达式。<br>匿名函数不能直接调用print，因为lambda需要一个表达式。<br>lambda函数拥有自己的名字空间，且不能访问自有参数列表之外或全局名字空间里的参数。<br>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</p>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>lambda函数的语法只包含一个语句，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">lambda [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"></span><br><span class=\"line\"># 可写函数说明</span><br><span class=\"line\">sum = lambda arg1, arg2: arg1 + arg2;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用sum函数</span><br><span class=\"line\">print &quot;Value of total : &quot;, sum( 10, 20 )</span><br><span class=\"line\">print &quot;Value of total : &quot;, sum( 20, 20 )</span><br><span class=\"line\"># 以上实例输出结果：</span><br><span class=\"line\"># Value of total : 30</span><br><span class=\"line\"># Value of total : 40</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于return语句\"><a href=\"#关于return语句\" class=\"headerlink\" title=\"关于return语句\"></a>关于return语句</h2><p>return语句表达式退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。之前的例子都没有示范如何返回数值，下例便告诉你怎么做：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"></span><br><span class=\"line\"># 可写函数说明</span><br><span class=\"line\">def sum( arg1, arg2 ):</span><br><span class=\"line\">    # 返回2个参数的和.&quot;</span><br><span class=\"line\">    total = arg1 + arg2</span><br><span class=\"line\">    print &quot;Inside the function : &quot;, total</span><br><span class=\"line\">    return total;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用sum函数</span><br><span class=\"line\">total = sum( 10, 20 );</span><br><span class=\"line\">print &quot;Outside the function : &quot;, total</span><br><span class=\"line\"># 以上实例输出结果：</span><br><span class=\"line\"># Inside the function : 30</span><br><span class=\"line\"># Outside the function : 30</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p>一个程序的所有的变量并不是在哪个位置都可以访问的。访问权限决定于这个变量是在哪里赋值的。</p>\n<p>变量的作用域决定了在哪一部分程序你可以访问哪个特定的变量名称。两种最基本的变量作用域如下：<br>1.全局变量<br>2.局部变量</p>\n<h2 id=\"变量和局部变量\"><a href=\"#变量和局部变量\" class=\"headerlink\" title=\"变量和局部变量\"></a>变量和局部变量</h2><p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。</p>\n<p>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。如下实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"></span><br><span class=\"line\">total = 0; # This is global variable.</span><br><span class=\"line\"># 可写函数说明</span><br><span class=\"line\">def sum( arg1, arg2 ):</span><br><span class=\"line\">    #返回2个参数的和.&quot;</span><br><span class=\"line\">    total = arg1 + arg2; # total在这里是局部变量.</span><br><span class=\"line\">    print &quot;Inside the function local total : &quot;, total</span><br><span class=\"line\">    return total;</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用sum函数</span><br><span class=\"line\">sum( 10, 20 );</span><br><span class=\"line\">print &quot;Outside the function global total : &quot;, total</span><br><span class=\"line\"># 以上实例输出结果：</span><br><span class=\"line\"># Inside the function local total : 30</span><br><span class=\"line\"># Outside the function global total : 0</span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["python"]},{"title":"Python计算给定日期的周内的某一天","url":"/python_date_weekday/","content":"<p>先理一下思路：<br>1、weekday会根据某个日期返回0到6的一个数字来表示星期几对吧，0&#x3D;&#x3D;星期一<br>我们来列一个表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[0,1,2,3,4,5,6]</span><br></pre></td></tr></table></figure>\n<p>2、知道了星期几之后，你可以计算出那一周相对于这个0到6的数字的差值（比如你确定一个比较值0，那么取得该日期的weekday值假设为n，那么这个差值就是0-n对吧，针对第一条发现的列表，假设我们指定的日期是星期二，weekday数值为1：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[0,1,2,3,4,5,6]</span><br><span class=\"line\">   n</span><br></pre></td></tr></table></figure>\n<p>就是说n在列表中1的位置，数值也是1，那么前面星期一是否就刚好是0-1的相对位置了呢？<br>理解了么？0-n就刚好是星期一所代表的相对位置。<br>那么星期二呢？是不是就是0-n+1？<br>自然的，星期三就是0-n+2<br>0-n+3<br>0-n+4<br>0-n+5<br>0-n+6，就是星期日</p>\n<p>3、知道了相对位置，那么只需要进行日期的叠加就可以了。<br>以下的代码不推荐你直接使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import datetime,time</span><br><span class=\"line\"></span><br><span class=\"line\">def thisweek(str_date):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        #尝试将参数转换成为datetime.date格式，1是方便后面的日期加减，2是验证日期是否有效。</span><br><span class=\"line\">        date_input = datetime.date.fromtimestamp(time.mktime(time.strptime(str_date,&quot;%Y-%m-%d&quot;)))</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        raise &#x27;参数错误：错误的日期，期待值2016-01-01格式&#x27;</span><br><span class=\"line\">        </span><br><span class=\"line\">    n = datetime.datetime.weekday(date_input)</span><br><span class=\"line\">    weeklist = []</span><br><span class=\"line\">    for i in range(7):</span><br><span class=\"line\">        this_day=date_input  + datetime.timedelta(0-n+i)</span><br><span class=\"line\">        weeklist.append([i,this_day])</span><br><span class=\"line\">        </span><br><span class=\"line\">    return weeklist</span><br></pre></td></tr></table></figure>\n<p>运行结果为：【星期几,日期】，同样0表示星期一</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">thisweek(&#x27;2016-07-18&#x27;)</span><br><span class=\"line\">[[0, datetime.date(2016, 7, 18)], [1, datetime.date(2016, 7, 19)], [2, datetime.date(2016, 7, 20)], [3, datetime.date(2016, 7, 21)], [4, datetime.date(2016, 7, 22)], [5, datetime.date(2016, 7, 23)], [6, datetime.date(2016, 7, 24)]]</span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["python"]},{"title":"Python两个list比较去除重复元素，然后合并","url":"/python_list_duplicate_merge/","content":"<p>方法一</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a = [1,3,5,7]</span><br><span class=\"line\">&gt;&gt;&gt; b = [1,3,4,6,8]</span><br><span class=\"line\">&gt;&gt;&gt; c = list(set(a+b))</span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\">[1, 3, 5, 7]</span><br><span class=\"line\">&gt;&gt;&gt; b</span><br><span class=\"line\">[1, 3, 4, 6, 8]</span><br><span class=\"line\">&gt;&gt;&gt; c</span><br><span class=\"line\">[1, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure>\n<p>方法二</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = [1,3,5,7]</span><br><span class=\"line\">b = [1,3,4,6,8]</span><br><span class=\"line\">c = list(set(a) | set(b))</span><br></pre></td></tr></table></figure>\n<p>方法三</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = [1,3,5,7]</span><br><span class=\"line\">b = [1,3,4,6,8]</span><br><span class=\"line\">c=list(set(a).union(set(b)))</span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["python"]},{"title":"Python中pandas库中DataFrame对行和列的操作使用方法","url":"/python_pandas_dataframe/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">import pandas as pd</span><br><span class=\"line\">from pandas import Sereis, DataFrame</span><br><span class=\"line\"></span><br><span class=\"line\">ser = Series(np.arange(3.))</span><br><span class=\"line\"></span><br><span class=\"line\">data = DataFrame(np.arange(16).reshape(4,4),index=list(&#x27;abcd&#x27;),columns=list(&#x27;wxyz&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">data[&#x27;w&#x27;] #选择表格中的&#x27;w&#x27;列，使用类字典属性,返回的是Series类型</span><br><span class=\"line\"></span><br><span class=\"line\">data.w #选择表格中的&#x27;w&#x27;列，使用点属性,返回的是Series类型</span><br><span class=\"line\"></span><br><span class=\"line\">data[[&#x27;w&#x27;]] #选择表格中的&#x27;w&#x27;列，返回的是DataFrame类型</span><br><span class=\"line\"></span><br><span class=\"line\">data[[&#x27;w&#x27;,&#x27;z&#x27;]] #选择表格中的&#x27;w&#x27;、&#x27;z&#x27;列</span><br><span class=\"line\"></span><br><span class=\"line\">data[0:2] #返回第1行到第2行的所有行，前闭后开，包括前不包括后</span><br><span class=\"line\"></span><br><span class=\"line\">data[1:2] #返回第2行，从0计，返回的是单行，通过有前后值的索引形式，</span><br><span class=\"line\"># 如果采用data[1]则报错</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[1:2] #返回第2行的第三种方法，返回的是DataFrame，跟data[1:2]同</span><br><span class=\"line\"></span><br><span class=\"line\">data[&#x27;a&#x27;:&#x27;b&#x27;] #利用index值进行切片，返回的是**前闭后闭**的DataFrame,</span><br><span class=\"line\"># 即末端是包含的</span><br><span class=\"line\">data.irow(0) #取data的第一行</span><br><span class=\"line\">data.icol(0) #取data的第一列</span><br><span class=\"line\"></span><br><span class=\"line\">data.head() #返回data的前几行数据，默认为前五行，需要前十行则data.head(10)</span><br><span class=\"line\">data.tail() #返回data的后几行数据，默认为后五行，需要后十行则data.tail(10)</span><br><span class=\"line\"></span><br><span class=\"line\">ser.iget_value(0) #选取ser序列中的第一个</span><br><span class=\"line\">ser.iget_value(-1) #选取ser序列中的最后一个，这种轴索引包含索引器的series不能采用ser[-1]去获取最后一个，这会引起歧义。</span><br><span class=\"line\"></span><br><span class=\"line\">data.iloc[-1] #选取DataFrame最后一行，返回的是Series</span><br><span class=\"line\">data.iloc[-1:] #选取DataFrame最后一行，返回的是DataFrame</span><br><span class=\"line\"></span><br><span class=\"line\">data.loc[&#x27;a&#x27;,[&#x27;w&#x27;,&#x27;x&#x27;]] #返回‘a’行&#x27;w&#x27;、&#x27;x&#x27;列，这种用于选取行索引列索引已知</span><br><span class=\"line\"></span><br><span class=\"line\">data.iat[1,1] #选取第二行第二列，用于已知行、列位置的选取。</span><br></pre></td></tr></table></figure>\n<p>下面是简单的例子使用验证：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import pandas as pd</span><br><span class=\"line\">from pandas import Series, DataFrame</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">data = DataFrame(np.arange(15).reshape(3,5),index=[&#x27;one&#x27;,&#x27;two&#x27;,&#x27;three&#x27;],columns=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">data</span><br><span class=\"line\"> Out[7]:</span><br><span class=\"line\"> a b c d e</span><br><span class=\"line\"> one 0 1 2 3 4</span><br><span class=\"line\"> two 5 6 7 8 9</span><br><span class=\"line\"> three 10 11 12 13 14</span><br><span class=\"line\"></span><br><span class=\"line\"># 对列的操作方法有如下几种</span><br><span class=\"line\"></span><br><span class=\"line\">data.icol(0) #选取第一列</span><br><span class=\"line\">E:\\Anaconda2\\lib\\site-packages\\spyder\\utils\\ipython\\start_kernel.py:1: FutureWarning: icol(i) is deprecated. Please use .iloc[:,i]</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\"> Out[35]:</span><br><span class=\"line\"> one 0</span><br><span class=\"line\"> two 5</span><br><span class=\"line\"> three 10</span><br><span class=\"line\"> Name: a, dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\">data[&#x27;a&#x27;]</span><br><span class=\"line\"> Out[8]:</span><br><span class=\"line\"> one 0</span><br><span class=\"line\"> two 5</span><br><span class=\"line\"> three 10</span><br><span class=\"line\"> Name: a, dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\">data.a</span><br><span class=\"line\"> Out[9]:</span><br><span class=\"line\"> one 0</span><br><span class=\"line\"> two 5</span><br><span class=\"line\"> three 10</span><br><span class=\"line\"> Name: a, dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\">data[[&#x27;a&#x27;]]</span><br><span class=\"line\"> Out[10]:</span><br><span class=\"line\"> a</span><br><span class=\"line\"> one 0</span><br><span class=\"line\"> two 5</span><br><span class=\"line\"> three 10</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[:,[0,1,2]] #不知道列名只知道列的位置时</span><br><span class=\"line\"> Out[13]:</span><br><span class=\"line\"> a b c</span><br><span class=\"line\"> one 0 1 2</span><br><span class=\"line\"> two 5 6 7</span><br><span class=\"line\"> three 10 11 12</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[1,[0]] #选择第2行第1列的值</span><br><span class=\"line\"> Out[14]:</span><br><span class=\"line\"> a 5</span><br><span class=\"line\"> Name: two, dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[[1,2],[0]] #选择第2,3行第1列的值</span><br><span class=\"line\"> Out[15]:</span><br><span class=\"line\"> a</span><br><span class=\"line\"> two 5</span><br><span class=\"line\"> three 10</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[1:3,[0,2]] #选择第2-4行第1、3列的值</span><br><span class=\"line\"> Out[17]:</span><br><span class=\"line\"> a c</span><br><span class=\"line\"> two 5 7</span><br><span class=\"line\"> three 10 12</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[1:2,2:4] #选择第2-3行，3-5（不包括5）列的值</span><br><span class=\"line\"> Out[29]:</span><br><span class=\"line\"> c d</span><br><span class=\"line\"> two 7 8</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[data.a&gt;5,3]</span><br><span class=\"line\"> Out[30]:</span><br><span class=\"line\"> three 13</span><br><span class=\"line\"> Name: d, dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[data.b&gt;6,3:4] #选择&#x27;b&#x27;列中大于6所在的行中的第4列，有点拗口</span><br><span class=\"line\"> Out[31]:</span><br><span class=\"line\"> d</span><br><span class=\"line\"> three 13</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[data.a&gt;5,2:4] #选择&#x27;a&#x27;列中大于5所在的行中的第3-5（不包括5）列</span><br><span class=\"line\"> Out[32]:</span><br><span class=\"line\"> c d</span><br><span class=\"line\"> three 12 13</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[data.a&gt;5,[2,2,2]] #选择&#x27;a&#x27;列中大于5所在的行中的第2列并重复3次</span><br><span class=\"line\"> Out[33]:</span><br><span class=\"line\"> c c c</span><br><span class=\"line\"> three 12 12 12</span><br><span class=\"line\"></span><br><span class=\"line\"># 还可以行数或列数跟行名列名混着用</span><br><span class=\"line\">data.ix[1:3,[&#x27;a&#x27;,&#x27;e&#x27;]]</span><br><span class=\"line\"> Out[24]:</span><br><span class=\"line\"> a e</span><br><span class=\"line\"> two 5 9</span><br><span class=\"line\"> three 10 14</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[&#x27;one&#x27;:&#x27;two&#x27;,[2,1]]</span><br><span class=\"line\"> Out[25]:</span><br><span class=\"line\"> c b</span><br><span class=\"line\"> one 2 1</span><br><span class=\"line\"> two 7 6</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[[&#x27;one&#x27;,&#x27;three&#x27;],[2,2]]</span><br><span class=\"line\"> Out[26]:</span><br><span class=\"line\"> c c</span><br><span class=\"line\"> one 2 2</span><br><span class=\"line\"> three 12 12</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[&#x27;one&#x27;:&#x27;three&#x27;,[&#x27;a&#x27;,&#x27;c&#x27;]]</span><br><span class=\"line\"> Out[27]:</span><br><span class=\"line\"> a c</span><br><span class=\"line\"> one 0 2</span><br><span class=\"line\"> two 5 7</span><br><span class=\"line\"> three 10 12</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[[&#x27;one&#x27;,&#x27;one&#x27;],[&#x27;a&#x27;,&#x27;e&#x27;,&#x27;d&#x27;,&#x27;d&#x27;,&#x27;d&#x27;]]</span><br><span class=\"line\"> Out[28]:</span><br><span class=\"line\"> a e d d d</span><br><span class=\"line\"> one 0 4 3 3 3</span><br><span class=\"line\"> one 0 4 3 3 3</span><br><span class=\"line\"></span><br><span class=\"line\"># 对行的操作有如下几种：</span><br><span class=\"line\">data[1:2] #（不知道列索引时）选择第2行，不能用data[1]，可以用data.ix[1]</span><br><span class=\"line\"> Out[18]:</span><br><span class=\"line\"> a b c d e</span><br><span class=\"line\"> two 5 6 7 8 9</span><br><span class=\"line\"></span><br><span class=\"line\">data.irow(1) #选取第二行</span><br><span class=\"line\"> Out[36]:</span><br><span class=\"line\"> a 5</span><br><span class=\"line\"> b 6</span><br><span class=\"line\"> c 7</span><br><span class=\"line\"> d 8</span><br><span class=\"line\"> e 9</span><br><span class=\"line\"> Name: two, dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[1] #选择第2行</span><br><span class=\"line\"> Out[20]:</span><br><span class=\"line\"> a 5</span><br><span class=\"line\"> b 6</span><br><span class=\"line\"> c 7</span><br><span class=\"line\"> d 8</span><br><span class=\"line\"> e 9</span><br><span class=\"line\"> Name: two, dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\">data[&#x27;one&#x27;:&#x27;two&#x27;] #当用已知的行索引时为前闭后闭区间，这点与切片稍有不同。</span><br><span class=\"line\"> Out[22]:</span><br><span class=\"line\"> a b c d e</span><br><span class=\"line\"> one 0 1 2 3 4</span><br><span class=\"line\"> two 5 6 7 8 9</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[1:3] #选择第2到4行，不包括第4行，即前闭后开区间。</span><br><span class=\"line\"> Out[23]:</span><br><span class=\"line\"> a b c d e</span><br><span class=\"line\"> two 5 6 7 8 9</span><br><span class=\"line\"> three 10 11 12 13 14</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[-1:] #取DataFrame中最后一行，返回的是DataFrame类型,**注意**这种取法是有使用条件的，只有当行索引不是数字索引时才可以使用，否则可以选用`data[-1:]`--返回DataFrame类型或`data.irow(-1)`--返回Series类型</span><br><span class=\"line\"> Out[11]:</span><br><span class=\"line\"> a b c d e</span><br><span class=\"line\"> three 10 11 12 13 14</span><br><span class=\"line\"></span><br><span class=\"line\">data[-1:] #跟上面一样，取DataFrame中最后一行，返回的是DataFrame类型</span><br><span class=\"line\"> Out[12]:</span><br><span class=\"line\"> a b c d e</span><br><span class=\"line\"> three 10 11 12 13 14</span><br><span class=\"line\"></span><br><span class=\"line\">data.ix[-1] #取DataFrame中最后一行，返回的是Series类型，这个一样，行索引不能是数字时才可以使用</span><br><span class=\"line\"> Out[13]:</span><br><span class=\"line\"> a 10</span><br><span class=\"line\"> b 11</span><br><span class=\"line\"> c 12</span><br><span class=\"line\"> d 13</span><br><span class=\"line\"> e 14</span><br><span class=\"line\"> Name: three, dtype: int32</span><br><span class=\"line\"></span><br><span class=\"line\">data.tail(1) #返回DataFrame中的最后一行</span><br><span class=\"line\">data.head(1) #返回DataFrame中的第一行</span><br></pre></td></tr></table></figure>\n<p>最近处理数据时发现当<code>pd.read_csv()</code>数据时有时候会有读取到未命名的列，且该列也用不到，一般是索引列被换掉后导致的，有强迫症的看着难受，这时候<code>dataframe.drop([columns,])</code>是没法处理的，怎么办呢，<br>最笨的方法是直接给列索引重命名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">data6</span><br><span class=\"line\"></span><br><span class=\"line\">Unnamed: 0 high symbol time</span><br><span class=\"line\"> date</span><br><span class=\"line\"> 2016-11-01 0 3317.4 IF1611 18:10:44.8</span><br><span class=\"line\"> 2016-11-01 1 3317.4 IF1611 06:01:04.5</span><br><span class=\"line\"> 2016-11-01 2 3317.4 IF1611 07:46:25.5</span><br><span class=\"line\"> 2016-11-01 3 3318.4 IF1611 09:30:04.0</span><br><span class=\"line\"> 2016-11-01 4 3321.8 IF1611 09:31:04.0</span><br><span class=\"line\"></span><br><span class=\"line\">data6.columns = list(&#x27;abcd&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">data6</span><br><span class=\"line\"></span><br><span class=\"line\">a b c d</span><br><span class=\"line\"> date</span><br><span class=\"line\"> 2016-11-01 0 3317.4 IF1611 18:10:44.8</span><br><span class=\"line\"> 2016-11-01 1 3317.4 IF1611 06:01:04.5</span><br><span class=\"line\"> 2016-11-01 2 3317.4 IF1611 07:46:25.5</span><br><span class=\"line\"> 2016-11-01 3 3318.4 IF1611 09:30:04.0</span><br><span class=\"line\"> 2016-11-01 4 3321.8 IF1611 09:31:04.0</span><br></pre></td></tr></table></figure>\n<p>重新命名后就可以用<code>dataframe.drop([columns])</code>来删除了，当然不用我这样全部给列名替换掉了，可以只是改变未命名的那个列，然后删除。不过这个用起来总是觉得有点low，有没有更好的方法呢，有，可以不去删除，直接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">data7 = data6.ix[:,1:]</span><br></pre></td></tr></table></figure>\n<p>这样既不改变原有数据，也达到了删除神烦列，当然我这里时第0列删除，可以根据实际选择所在的列删除之，至于这个原理，可以看下前面的对列的操作。</p>\n","categories":["Web","Back","python"],"tags":["python","pandas"]},{"title":"Python中用pandas处理Excel文件","url":"/python_pandas_excel/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import pandas as pd</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">d = &#123;&#x27;one&#x27; : pd.Series([1., 2., 3.], index=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]),&#x27;two&#x27; : pd.Series([1., 2., 3., 4.], index=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;])&#125;</span><br><span class=\"line\">df=pd.DataFrame(d)</span><br><span class=\"line\">print df</span><br><span class=\"line\">mean=df.mean()</span><br><span class=\"line\">print mean</span><br><span class=\"line\">#可以通过传递一个list对象来创建一个Series，pandas会默认创建整型索引：</span><br><span class=\"line\">#通过传递一个numpy array，时间索引以及列标签来创建一个DataFrame：</span><br><span class=\"line\">dates=pd.date_range(&#x27;20161120&#x27;,periods=6)</span><br><span class=\"line\">print dates</span><br><span class=\"line\"></span><br><span class=\"line\">df1=pd.DataFrame(np.random.randn(6,4),index=dates,columns=list(&#x27;ABCD&#x27;))</span><br><span class=\"line\">print df1</span><br><span class=\"line\">#通过传递一个能够被转换成类似序列结构的字典对象来创建一个DataFrame：</span><br><span class=\"line\">df2=pd.DataFrame(&#123;&#x27;A&#x27;:1.,&#x27;B&#x27;:pd.Series(1,index=list(range(5)),dtype=&#x27;float32&#x27;),&#x27;C&#x27;:pd.Timestamp(&#x27;20161124&#x27;),&#x27;D&#x27;:np.array([3]*5,dtype=&#x27;int32&#x27;),&#x27;E&#x27;:pd.Categorical([&#x27;test&#x27;,&#x27;train&#x27;,&#x27;test&#x27;,&#x27;train&#x27;,&#x27;test&#x27;]),&#x27;F&#x27;:&#x27;foo&#x27;&#125;)</span><br><span class=\"line\">print df2</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看frame中头部和尾部的行：</span><br><span class=\"line\">print df1.tail(1)</span><br><span class=\"line\"></span><br><span class=\"line\">print df1.head(3)</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示索引、列和底层的numpy数据：</span><br><span class=\"line\">print df2.index</span><br><span class=\"line\"></span><br><span class=\"line\">print df2.columns</span><br><span class=\"line\"></span><br><span class=\"line\">print df2.values</span><br><span class=\"line\"></span><br><span class=\"line\"># describe()函数对于数据的快速统计汇总：</span><br><span class=\"line\">print df1.describe()</span><br><span class=\"line\"></span><br><span class=\"line\"># 对数据的转置：</span><br><span class=\"line\">print df1.T</span><br><span class=\"line\"></span><br><span class=\"line\"># 按轴进行排序</span><br><span class=\"line\">print df1.sort_index(axis=1,ascending=False)</span><br><span class=\"line\"></span><br><span class=\"line\"># 按值进行排序</span><br><span class=\"line\">print df1.sort(columns=&#x27;B&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 选择一个单独的列，这将会返回一个Series，等同于df.A：</span><br><span class=\"line\"></span><br><span class=\"line\">print &#x27;df1[A]&#x27;+&#x27;\\n&#x27;,df1[&#x27;A&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过[]进行选择，这将会对行进行切片</span><br><span class=\"line\"></span><br><span class=\"line\">print &#x27;df1[0:3]&#x27;+&#x27;\\n&#x27;,df1[0:2],&#x27;\\n&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用标签来获取一个交叉的区域</span><br><span class=\"line\">print df1.loc[dates[0]],&#x27;\\n\\n&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过标签来在多个轴上进行选择</span><br><span class=\"line\">print df1.loc[dates[0:2],[&#x27;C&#x27;,&#x27;A&#x27;]]</span><br><span class=\"line\"># pandas使用浮点值NaN（Not a Number）表示浮点和非浮点数组中的缺失数据。  </span><br><span class=\"line\"># NA处理办法  </span><br><span class=\"line\">dropna      根据各标签值中是否存在缺失数据对轴标签进行过滤，可通过阀值调节对缺失值的容忍度  </span><br><span class=\"line\">fillna      用指定的或插值方法(如ffil或bfill)填充缺失数据  </span><br><span class=\"line\">isnull      返回一个含有布尔值的对象，这些布尔值表示哪些值是缺失值/NA，该对象的类型与源类型一样  </span><br><span class=\"line\">notnull     isnull的否定式</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["python","pandas"]},{"title":"使用Pandas压缩存储hdf5文件","url":"/python_pandas_hdf5/","content":"<h2 id=\"关于股票数据存储\"><a href=\"#关于股票数据存储\" class=\"headerlink\" title=\"关于股票数据存储\"></a>关于股票数据存储</h2><p>股票数据比较特殊，需要做数据统计的。都需要一次进行批量查询多个数据，然后进行分析。<br>所以股票数据不一定要放到数据库中存储。因为一般就两个维度。<br>那只股票，和那天的股票信息，然后使用模型进行分析预测。<br>所以数据可以存储为：<code>/data/stock/yyyy/yyyMM/yyyyMMdd.hdf5</code><br>存储的数据是hdf5：<br><code>Hierarchical Data Format</code>，可以存储不同类型的图像和数码数据的文件格式</p>\n<h2 id=\"安装hdf5库\"><a href=\"#安装hdf5库\" class=\"headerlink\" title=\"安装hdf5库\"></a>安装hdf5库</h2><p>首先安装hdf5库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install hdf5 hdf5-devel</span><br><span class=\"line\">pip install unittest2</span><br><span class=\"line\">pip install --upgrade  tables</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试读写hdf5文件\"><a href=\"#测试读写hdf5文件\" class=\"headerlink\" title=\"测试读写hdf5文件\"></a>测试读写hdf5文件</h2><p>参考pytables<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5weXRhYmxlcy5vcmcvdXNlcnNndWlkZS90dXRvcmlhbHMuaHRtbA==\">官方文档<i class=\"fa fa-external-link-alt\"></i></span>。<br>这里使用的是pandas封装的接口直接使用，而不是使用tables。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># python </span><br><span class=\"line\">Python 2.6.6 (r266:84292, Jul 23 2015, 15:22:56) </span><br><span class=\"line\">[GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux2</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt; import numpy as np</span><br><span class=\"line\">&gt;&gt;&gt; import pandas as pd</span><br><span class=\"line\"></span><br><span class=\"line\">###su</span><br><span class=\"line\">&gt;&gt;&gt; a = np.random.standard_normal((9,4))</span><br><span class=\"line\">&gt;&gt;&gt; b = pd.DataFrame(a)</span><br><span class=\"line\">&gt;&gt;&gt; b.columns = [[&#x27;num1&#x27;,&#x27;num2&#x27;,&#x27;num3&#x27;,&#x27;num4&#x27;]]</span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\">array([[-2.36198849, -1.27547933, -1.40351822, -0.6638619 ],</span><br><span class=\"line\">       [ 1.89159066, -0.31838519, -0.2065942 , -1.02327987],</span><br><span class=\"line\">       [-2.02771503, -0.81333254, -0.93644288, -0.91592467],</span><br><span class=\"line\">       [-1.3939496 ,  0.25899342,  1.11591841, -0.7423286 ],</span><br><span class=\"line\">       [-1.05104415, -0.79069151, -1.46536873, -0.01449547],</span><br><span class=\"line\">       [ 1.32483444,  0.32030117, -1.23575344,  0.51455106],</span><br><span class=\"line\">       [ 0.91297435,  0.43242834,  1.77235337,  1.14879289],</span><br><span class=\"line\">       [ 0.93476429,  0.18592698,  0.30198234, -0.61861642],</span><br><span class=\"line\">       [ 0.04462872, -0.99275411, -0.86382085, -1.53064223]])</span><br><span class=\"line\">&gt;&gt;&gt; b</span><br><span class=\"line\">       num1      num2      num3      num4</span><br><span class=\"line\">0 -2.361988 -1.275479 -1.403518 -0.663862</span><br><span class=\"line\">1  1.891591 -0.318385 -0.206594 -1.023280</span><br><span class=\"line\">2 -2.027715 -0.813333 -0.936443 -0.915925</span><br><span class=\"line\">3 -1.393950  0.258993  1.115918 -0.742329</span><br><span class=\"line\">4 -1.051044 -0.790692 -1.465369 -0.014495</span><br><span class=\"line\">5  1.324834  0.320301 -1.235753  0.514551</span><br><span class=\"line\">6  0.912974  0.432428  1.772353  1.148793</span><br><span class=\"line\">7  0.934764  0.185927  0.301982 -0.618616</span><br><span class=\"line\">8  0.044629 -0.992754 -0.863821 -1.530642</span><br><span class=\"line\">&gt;&gt;&gt; b.sum()</span><br><span class=\"line\">num1   -1.725905</span><br><span class=\"line\">num2   -2.992993</span><br><span class=\"line\">num3   -2.921244</span><br><span class=\"line\">num4   -3.845805</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; b.mean()</span><br><span class=\"line\">num1   -0.191767</span><br><span class=\"line\">num2   -0.332555</span><br><span class=\"line\">num3   -0.324583</span><br><span class=\"line\">num4   -0.427312</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">###写hdf5文件：</span><br><span class=\"line\">&gt;&gt;&gt; h5 = pd.HDFStore(&#x27;/data/stock/test1.h5&#x27;,&#x27;w&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; h5[&#x27;data&#x27;] = b</span><br><span class=\"line\">&gt;&gt;&gt; h5.close()</span><br><span class=\"line\">&gt;&gt;&gt; </span><br><span class=\"line\">&gt;&gt;&gt; b</span><br><span class=\"line\">       num1      num2      num3      num4</span><br><span class=\"line\">0 -2.361988 -1.275479 -1.403518 -0.663862</span><br><span class=\"line\">1  1.891591 -0.318385 -0.206594 -1.023280</span><br><span class=\"line\">2 -2.027715 -0.813333 -0.936443 -0.915925</span><br><span class=\"line\">3 -1.393950  0.258993  1.115918 -0.742329</span><br><span class=\"line\">4 -1.051044 -0.790692 -1.465369 -0.014495</span><br><span class=\"line\">5  1.324834  0.320301 -1.235753  0.514551</span><br><span class=\"line\">6  0.912974  0.432428  1.772353  1.148793</span><br><span class=\"line\">7  0.934764  0.185927  0.301982 -0.618616</span><br><span class=\"line\">8  0.044629 -0.992754 -0.863821 -1.530642</span><br><span class=\"line\"></span><br><span class=\"line\">###读hdf5文件。</span><br><span class=\"line\">&gt;&gt;&gt; h5 = pd.HDFStore(&#x27;/data/stock/test1.h5&#x27;,&#x27;r&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; c = h5[&#x27;data&#x27;]</span><br><span class=\"line\">&gt;&gt;&gt; c</span><br><span class=\"line\">       num1      num2      num3      num4</span><br><span class=\"line\">0 -2.361988 -1.275479 -1.403518 -0.663862</span><br><span class=\"line\">1  1.891591 -0.318385 -0.206594 -1.023280</span><br><span class=\"line\">2 -2.027715 -0.813333 -0.936443 -0.915925</span><br><span class=\"line\">3 -1.393950  0.258993  1.115918 -0.742329</span><br><span class=\"line\">4 -1.051044 -0.790692 -1.465369 -0.014495</span><br><span class=\"line\">5  1.324834  0.320301 -1.235753  0.514551</span><br><span class=\"line\">6  0.912974  0.432428  1.772353  1.148793</span><br><span class=\"line\">7  0.934764  0.185927  0.301982 -0.618616</span><br><span class=\"line\">8  0.044629 -0.992754 -0.863821 -1.530642</span><br><span class=\"line\">&gt;&gt;&gt; h5.close()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TuShare读取股票数据存储\"><a href=\"#TuShare读取股票数据存储\" class=\"headerlink\" title=\"TuShare读取股票数据存储\"></a>TuShare读取股票数据存储</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import tushare as ts</span><br><span class=\"line\">&gt;&gt;&gt; d = ts.get_tick_data(&#x27;600848&#x27;,date=&#x27;2015-01-09&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; type(d)</span><br><span class=\"line\">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class=\"line\">&gt;&gt;&gt; len(d)</span><br><span class=\"line\">1212</span><br><span class=\"line\">###保存数据</span><br><span class=\"line\">&gt;&gt;&gt; h5 = pd.HDFStore(&#x27;/data/stock/test2.h5&#x27;,&#x27;w&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; h5[&#x27;data&#x27;] = d</span><br><span class=\"line\">&gt;&gt;&gt; h5.close()</span><br><span class=\"line\">&gt;&gt;&gt; </span><br><span class=\"line\">&gt;&gt;&gt; </span><br><span class=\"line\">###读取数据</span><br><span class=\"line\">&gt;&gt;&gt; h5 = pd.HDFStore(&#x27;/data/stock/test2.h5&#x27;,&#x27;r&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; e = h5[&#x27;data&#x27;]</span><br><span class=\"line\">&gt;&gt;&gt; h5.close()</span><br><span class=\"line\">&gt;&gt;&gt; </span><br><span class=\"line\">&gt;&gt;&gt; type(e)</span><br><span class=\"line\">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class=\"line\">&gt;&gt;&gt; len(e)</span><br><span class=\"line\">1212</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用文件直接存储到本地还是非常方便的。pandas直接封装的函数3行解决问题。</p>\n<p>同时pandas封装的读出数据还是数组，可以直接进行操作。灰常方便。</p>\n","categories":["Web","Back","python"],"tags":["python","pandas"]},{"title":"使用Python将HTML转成PDF","url":"/python_html_pdf/","content":"<p>主要使用的是<code>wkhtmltopdf</code>的Python封装——<code>pdfkit</code></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>Install python-pdfkit:<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pip install pdfkit</span><br></pre></td></tr></table></figure></li>\n<li>Install wkhtmltopdf:<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Debian/Ubuntu:</span><br><span class=\"line\">$ sudo apt-get install wkhtmltopdf</span><br><span class=\"line\">Redhat/CentOS</span><br><span class=\"line\">sudo yum intsall wkhtmltopdf</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>一个简单的例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import pdfkit</span><br><span class=\"line\">pdfkit.from_url(&#x27;http://google.com&#x27;, &#x27;out.pdf&#x27;)</span><br><span class=\"line\">pdfkit.from_file(&#x27;test.html&#x27;, &#x27;out.pdf&#x27;)</span><br><span class=\"line\">pdfkit.from_string(&#x27;Hello!&#x27;, &#x27;out.pdf&#x27;)</span><br></pre></td></tr></table></figure>\n<p>你也可以传递一个url或者文件名列表:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pdfkit.from_url([&#x27;google.com&#x27;, &#x27;yandex.ru&#x27;, &#x27;engadget.com&#x27;], &#x27;out.pdf&#x27;)</span><br><span class=\"line\">pdfkit.from_file([&#x27;file1.html&#x27;, &#x27;file2.html&#x27;], &#x27;out.pdf&#x27;)</span><br></pre></td></tr></table></figure>\n<p>也可以传递一个打开的文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">with open(&#x27;file.html&#x27;) as f:</span><br><span class=\"line\">pdfkit.from_file(f, &#x27;out.pdf&#x27;)</span><br></pre></td></tr></table></figure>\n<p>如果你想对生成的PDF作进一步处理， 你可以将其读取到一个变量中:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 设置输出文件为False，将结果赋给一个变量</span><br><span class=\"line\">pdf = pdfkit.from_url(&#x27;http://google.com&#x27;, False)</span><br></pre></td></tr></table></figure>\n<p>你可以制定所有的 wkhtmltopdf . 你可以移除选项名字前面的 ‘–‘ .如果选项没有值, 使用None, False or * 作为字典值:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">options = &#123;</span><br><span class=\"line\">    &#x27;page-size&#x27;: &#x27;Letter&#x27;,</span><br><span class=\"line\">    &#x27;margin-top&#x27;: &#x27;0.75in&#x27;,</span><br><span class=\"line\">    &#x27;margin-right&#x27;: &#x27;0.75in&#x27;,</span><br><span class=\"line\">    &#x27;margin-bottom&#x27;: &#x27;0.75in&#x27;,</span><br><span class=\"line\">    &#x27;margin-left&#x27;: &#x27;0.75in&#x27;,</span><br><span class=\"line\">    &#x27;encoding&#x27;: &quot;UTF-8&quot;,</span><br><span class=\"line\">    &#x27;no-outline&#x27;: None</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pdfkit.from_url(&#x27;http://google.com&#x27;, &#x27;out.pdf&#x27;, options=options)</span><br></pre></td></tr></table></figure>\n<p>默认情况下, PDFKit 将会显示所有的 wkhtmltopdf 输出. 如果你不想看到这些信息，你需要传递一个 quiet 选项:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">options = &#123;</span><br><span class=\"line\">    &#x27;quiet&#x27;: &#x27;&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pdfkit.from_url(&#x27;google.com&#x27;, &#x27;out.pdf&#x27;, options=options)</span><br></pre></td></tr></table></figure>\n<p>由于wkhtmltopdf的命令语法 , TOC 和 Cover 选项必须分开指定:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">toc = &#123;</span><br><span class=\"line\">    &#x27;xsl-style-sheet&#x27;: &#x27;toc.xsl&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cover = &#x27;cover.html&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">pdfkit.from_file(&#x27;file.html&#x27;, options=options, toc=toc, cover=cover)</span><br></pre></td></tr></table></figure>\n<p>当你转换文件、或字符串的时候，你可以通过css选项指定扩展的 CSS 文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 单个 CSS 文件</span><br><span class=\"line\">css = &#x27;example.css&#x27;</span><br><span class=\"line\">pdfkit.from_file(&#x27;file.html&#x27;, options=options, css=css)</span><br><span class=\"line\"></span><br><span class=\"line\"># Multiple CSS files</span><br><span class=\"line\">css = [&#x27;example.css&#x27;, &#x27;example2.css&#x27;]</span><br><span class=\"line\">pdfkit.from_file(&#x27;file.html&#x27;, options=options, css=css)</span><br></pre></td></tr></table></figure>\n<p>你也可以通过你的HTML中的meta tags传递任意选项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">body = &quot;&quot;&quot;</span><br><span class=\"line\">    &lt;html&gt;</span><br><span class=\"line\">      &lt;head&gt;</span><br><span class=\"line\">        &lt;meta name=&quot;pdfkit-page-size&quot; content=&quot;Legal&quot;/&gt;</span><br><span class=\"line\">        &lt;meta name=&quot;pdfkit-orientation&quot; content=&quot;Landscape&quot;/&gt;</span><br><span class=\"line\">      &lt;/head&gt;</span><br><span class=\"line\">      Hello World!</span><br><span class=\"line\">      &lt;/html&gt;</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">pdfkit.from_string(body, &#x27;out.pdf&#x27;) #with --page-size=Legal and --orientation=Landscape</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>每个API调用都有一个可选的参数。这应该是<code>pdfkit.configuration()</code>API 调用的一个实例. 采用<code>configuration</code>选项作为初始化参数。可用的选项有:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">wkhtmltopdf ——wkhtmltopdf 二进制文件所在的位置。默认情况下pdfkit 会尝试使用which (在类UNIX系统中) 或 where (在Windows系统中)来判断.</span><br><span class=\"line\">meta_tag_prefix — pdfkit的前缀指定 meta tags（元标签） – 默认情况是pdfkit-</span><br></pre></td></tr></table></figure>\n\n<p>示例 ：针对wkhtmltopdf不在系统路径中（不在$PATH里面）:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">config = pdfkit.configuration(wkhtmltopdf=&#x27;/opt/bin/wkhtmltopdf&#x27;))</span><br><span class=\"line\">pdfkit.from_string(html_string, output_file, configuration=config)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p><code>IOError: &#39;No wkhtmltopdf executable found&#39;:</code><br>确保 wkhtmltopdf 在你的系统路径中（$PATH）， 会通过 configuration进行了配置 (详情看上文描述)。 在Windows系统中使用<code>where wkhtmltopdf</code>命令或在<code>linux</code>系统中使用 <code>which wkhtmltopdf</code> 会返回 <code>wkhtmltopdf</code>二进制可执行文件所在的确切位置.</p>\n<p><code>IOError: &#39;Command Failed&#39;</code><br>如果出现这个错误意味着 PDFKit不能处理一个输入。你可以尝试直接在错误信息后面直接运行一个命令来查看是什么导致了这个错误 （某些版本的 wkhtmltopdf会因为段错误导致处理失败）</p>\n<p>正常生成，但是出现中文乱码<br>确保两项：<br>1）、你的系统中有中文字体<br>2）、在html中加入</p>\n<p>下面是我随便写的一个HTML表格：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;table width=&quot;400&quot; border=&quot;1&quot;&gt;</span><br><span class=\"line\"> &lt;tr&gt;</span><br><span class=\"line\">  &lt;th align=&quot;left&quot;&gt;Item....&lt;/th&gt;</span><br><span class=\"line\">  &lt;th align=&quot;right&quot;&gt;1&lt;/th&gt;</span><br><span class=\"line\"> &lt;/tr&gt;</span><br><span class=\"line\"> &lt;tr&gt;</span><br><span class=\"line\">  &lt;td align=&quot;left&quot;&gt;衣服&lt;/td&gt;</span><br><span class=\"line\">  &lt;td align=&quot;right&quot;&gt;$241.10&lt;/td&gt;</span><br><span class=\"line\"> &lt;/tr&gt;</span><br><span class=\"line\"> &lt;tr&gt;</span><br><span class=\"line\">  &lt;td align=&quot;left&quot;&gt;化妆品&lt;/td&gt;</span><br><span class=\"line\">  &lt;td align=&quot;right&quot;&gt;$30.00&lt;/td&gt;</span><br><span class=\"line\"> &lt;/tr&gt;</span><br><span class=\"line\"> &lt;tr&gt;</span><br><span class=\"line\">  &lt;td align=&quot;left&quot;&gt;食物&lt;/td&gt;</span><br><span class=\"line\">  &lt;td align=&quot;right&quot;&gt;$730.40&lt;/td&gt;</span><br><span class=\"line\"> &lt;/tr&gt;</span><br><span class=\"line\"> &lt;tr&gt;</span><br><span class=\"line\">  &lt;th align=&quot;left&quot;&gt;tOTAL&lt;/th&gt;</span><br><span class=\"line\">  &lt;th align=&quot;right&quot;&gt;$1001.50&lt;/th&gt;</span><br><span class=\"line\"> &lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["python","pandas"]},{"title":"奇怪的Python三元符","url":"/python_if_else/","content":"<p>一些语言（如PHP）的三元表达式形如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">判定条件 ? 为真时的结果 : 为假时的结果  </span><br><span class=\"line\"></span><br><span class=\"line\">if(1==1) ? true : false</span><br></pre></td></tr></table></figure>\n\n<p>Python的三元表达式有如下几种书写方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    a = &#x27;&#x27;</span><br><span class=\"line\">    b = &#x27;True&#x27;</span><br><span class=\"line\">    c = &#x27;False&#x27;</span><br><span class=\"line\">    #方法一：为真时的结果 if 判定条件 else 为假时的结果</span><br><span class=\"line\">    d = b if a else c</span><br><span class=\"line\">    print(&#x27;方法一输出结果：&#x27; + d)</span><br><span class=\"line\">    #方法二：判定条件 and 为真时的结果 or 为假时的结果</span><br><span class=\"line\">    d = a and b or c</span><br><span class=\"line\">    print(&#x27;方法二输出结果：&#x27; + d)</span><br><span class=\"line\">    #以上两种方法方法等同于if ... else ...</span><br><span class=\"line\">    if a:</span><br><span class=\"line\">        d = b</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        d = c</span><br><span class=\"line\">    print(&#x27;if语句的输出结果：&#x27; + d)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p>方法一输出结果：<code>False</code><br>方法二输出结果：<code>False</code><br>if语句的输出结果：<code>False</code></p>\n<p>说明：<br>判断条件：a为空串，所以判断条件为假</p>\n<p>当判断条件为真时的结果：d &#x3D; b</p>\n<p>当判断条件为假时的结果：d &#x3D; c</p>\n","categories":["Web","Back","python"],"tags":["python"]},{"title":"Python中的字典详细介绍","url":"/python_dict/","content":"<p>这篇文章主要介绍了python中的字典详细介绍,字典是Python中最强大的数据类型之一,本文讲解了什么是字典、创建字典和给字典赋值 、字典的基本操作、映射类型操作符、映射相关的函数、字典的方法等内容,需要的朋友可以参考下</p>\n<h2 id=\"什么是字典？\"><a href=\"#什么是字典？\" class=\"headerlink\" title=\"什么是字典？\"></a>什么是字典？</h2><p>字典是Python语言中唯一的映射类型。</p>\n<p>映射类型对象里哈希值（键，key）和指向的对象（值，value）是一对多的的关系，通常被认为是可变的哈希表。</p>\n<p>字典对象是可变的，它是一个容器类型，能存储任意个数的Python对象，其中也可包括其他容器类型。</p>\n<p>字典类型与序列类型的区别：</p>\n<ul>\n<li>存取和访问数据的方式不同。</li>\n<li>序列类型只用数字类型的键（从序列的开始按数值顺序索引）；</li>\n<li>映射类型可以用其他对象类型作键（如：数字、字符串、元祖，一般用字符串作键），和序列类型的键不同，映射类型的键直接或间接地和存储数据值相关联。</li>\n<li>映射类型中的数据是无序排列的。这和序列类型是不一样的，序列类型是以数值序排列的。</li>\n<li>映射类型用键直接“映射”到值。</li>\n</ul>\n<p>字典是Python中最强大的数据类型之一。</p>\n<h2 id=\"如何创建字典和给字典赋值\"><a href=\"#如何创建字典和给字典赋值\" class=\"headerlink\" title=\"如何创建字典和给字典赋值\"></a>如何创建字典和给字典赋值</h2><p>简单地说字典就是用大括号包裹的键值对的集合。（键值对也被称作项）<br>一般形式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">adict = &#123;&#125;</span><br><span class=\"line\">adict = &#123;key1：value2， key2：value2， …&#125;</span><br></pre></td></tr></table></figure>\n<p>或用<code>dict()</code>函数，如，<code>adict = dict()</code> 或 <code>adict = dict（（[‘x’,1],[‘y’,2]））</code>这样写对吗？<code>adict = dict（[‘x’,1],[‘y’,2]）</code>。关键字参数创建字典，如：<code>adict= dict(name=’allen’,age=’40′)</code><br>或用<code>fromkeys()</code>方法，如，<code>adict = &#123;&#125;.fromkeys((‘x’,’y’), -1)</code> 这样创建的字典的value是一样的，若不给值，默认为None。</p>\n<p>特点：</p>\n<ol>\n<li>键与值用冒号“：”分开；</li>\n<li>项与项用逗号“，”分开；</li>\n<li>字典中的键必须是唯一的，而值可以不唯一。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">adict = &#123;‘name&#x27;:&#x27;allen&#x27;, ‘name&#x27;:&#x27;lucy&#x27;, ‘age&#x27;:&#x27;40′&#125; 与 bdict = &#123;‘name&#x27;:&#x27;allen&#x27;, ‘name2′:&#x27;allen&#x27;, ‘age&#x27;:&#x27;40′&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：如果字典中的值为数字，最好使用字符串数字形式，如：<code>’age’:’040′</code> 而不用 <code>‘age’:040</code></p>\n<h2 id=\"字典的基本操作\"><a href=\"#字典的基本操作\" class=\"headerlink\" title=\"字典的基本操作\"></a>字典的基本操作</h2><h3 id=\"如何访问字典中的值？\"><a href=\"#如何访问字典中的值？\" class=\"headerlink\" title=\"如何访问字典中的值？\"></a>如何访问字典中的值？</h3><p>adict[key] 形式返回键key对应的值value，如果key不在字典中会引发一个KeyError。</p>\n<h3 id=\"如何检查key是否在字典中？\"><a href=\"#如何检查key是否在字典中？\" class=\"headerlink\" title=\"如何检查key是否在字典中？\"></a>如何检查key是否在字典中？</h3><p>a、has_key()方法 形如：adict.haskey(‘name’) 有–&gt;True，无–&gt;False<br>b、in 、not in   形如：’name’ in adict      有–&gt;True，无–&gt;False</p>\n<h3 id=\"如何更新字典？\"><a href=\"#如何更新字典？\" class=\"headerlink\" title=\"如何更新字典？\"></a>如何更新字典？</h3><h4 id=\"添加一个数据项（新元素）或键值对\"><a href=\"#添加一个数据项（新元素）或键值对\" class=\"headerlink\" title=\"添加一个数据项（新元素）或键值对\"></a>添加一个数据项（新元素）或键值对</h4><p><code>adict[new_key] = value</code> 形式添加一个项</p>\n<h4 id=\"更新一个数据项（元素）或键值对\"><a href=\"#更新一个数据项（元素）或键值对\" class=\"headerlink\" title=\"更新一个数据项（元素）或键值对\"></a>更新一个数据项（元素）或键值对</h4><p><code>adict[old_key] = new_value</code></p>\n<h4 id=\"删除一个数据项（元素）或键值对\"><a href=\"#删除一个数据项（元素）或键值对\" class=\"headerlink\" title=\"删除一个数据项（元素）或键值对\"></a>删除一个数据项（元素）或键值对</h4><p><code>del adict[key]</code> 删除键key的项 &#x2F; del adict 删除整个字典<br><code>adict.pop(key)</code> 删除键key的项并返回key对应的 value值</p>\n<h2 id=\"映射类型操作符\"><a href=\"#映射类型操作符\" class=\"headerlink\" title=\"映射类型操作符\"></a>映射类型操作符</h2><p>标准类型操作符<code>（+，-，*，&lt;,&gt;,&lt;=,&gt;=,==,!=,and,or, not)</code></p>\n<h3 id=\"a、字典不支持拼接和重复操作符（-，-）\"><a href=\"#a、字典不支持拼接和重复操作符（-，-）\" class=\"headerlink\" title=\"a、字典不支持拼接和重复操作符（+，*）\"></a>a、字典不支持拼接和重复操作符<code>（+，*）</code></h3><h3 id=\"b、字典的比较操作\"><a href=\"#b、字典的比较操作\" class=\"headerlink\" title=\"b、字典的比较操作\"></a>b、字典的比较操作</h3><p>先比较字典的长度也就是字典的元素个数<br>键比较<br>值比较<br>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">adict = &#123;&#125;</span><br><span class=\"line\">bdict = &#123;‘name&#x27;:&#x27;allen&#x27;, ‘age&#x27;:&#x27;40′&#125;</span><br><span class=\"line\">cmp(adict, bdict)  &lt; –&gt;-1 or &gt; –&gt;1 or ==  –&gt;0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"映射相关的函数\"><a href=\"#映射相关的函数\" class=\"headerlink\" title=\"映射相关的函数\"></a>映射相关的函数</h2><ul>\n<li>1、<code>len()</code> 返回字典的长度</li>\n<li>2、<code>hash()</code> 返回对象的哈希值，可以用来判断一个对象能否用来作为字典的键</li>\n<li>3、<code>dict()</code> 工厂函数，用来创建字典</li>\n</ul>\n<h2 id=\"字典的方法\"><a href=\"#字典的方法\" class=\"headerlink\" title=\"字典的方法\"></a>字典的方法</h2><ul>\n<li>1、adict.keys() 返回一个包含字典所有KEY的列表；</li>\n<li>2、adict.values() 返回一个包含字典所有value的列表；</li>\n<li>3、adict.items() 返回一个包含所有（键，值）元祖的列表；</li>\n<li>4、adict.clear() 删除字典中的所有项或元素；</li>\n<li>5、adict.copy() 返回一个字典浅拷贝的副本；</li>\n<li>6、adict.fromkeys(seq, val&#x3D;None) 创建并返回一个新字典，以seq中的元素做该字典的键，val做该字典中所有键对应的初始值（默认为None）；</li>\n<li>7、adict.get(key, default &#x3D; None) 返回字典中key对应的值，若key不存在字典中，则返回default的值（default默认为None）；</li>\n<li>8、adict.has_key(key) 如果key在字典中，返回True，否则返回False。 现在用 in 、 not in；</li>\n<li>9、adict.iteritems()、adict.iterkeys()、adict.itervalues() 与它们对应的非迭代方法一样，不同的是它们返回一个迭代子，而不是一个列表；</li>\n<li>10、adict.pop(key[,default]) 和get方法相似。如果字典中存在key，删除并返回key对应的vuale；如果key不存在，且没有给出default的值，则引发keyerror异常；</li>\n<li>11、adict.setdefault(key, default&#x3D;None) 和set()方法相似，但如果字典中不存在Key键，由 adict[key] &#x3D; default 为它赋值；</li>\n<li>12、adict.update(bdict) 将字典bdict的键值对添加到字典adict中。</li>\n</ul>\n<h2 id=\"字典的遍历\"><a href=\"#字典的遍历\" class=\"headerlink\" title=\"字典的遍历\"></a>字典的遍历</h2><h3 id=\"1、遍历字典的key（键）\"><a href=\"#1、遍历字典的key（键）\" class=\"headerlink\" title=\"1、遍历字典的key（键）\"></a>1、遍历字典的key（键）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">for key in adict.keys():</span><br><span class=\"line\">    print key</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、遍历字典的value（值）\"><a href=\"#2、遍历字典的value（值）\" class=\"headerlink\" title=\"2、遍历字典的value（值）\"></a>2、遍历字典的value（值）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">for value in adict.values():</span><br><span class=\"line\">    print value</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、遍历字典的项（元素）\"><a href=\"#3、遍历字典的项（元素）\" class=\"headerlink\" title=\"3、遍历字典的项（元素）\"></a>3、遍历字典的项（元素）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">for item in adict.items():</span><br><span class=\"line\">    print item</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、遍历字典的key-value\"><a href=\"#4、遍历字典的key-value\" class=\"headerlink\" title=\"4、遍历字典的key-value\"></a>4、遍历字典的key-value</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">for item，value in adict.items(): </span><br><span class=\"line\">    print &#x27;key=%s, value=%s&#x27; %(item, value)  </span><br></pre></td></tr></table></figure>\n<p>或   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">for item，value in adict.iteritems(): </span><br><span class=\"line\">    print &#x27;key=%s, value=%s&#x27; %(item, value)</span><br></pre></td></tr></table></figure>\n<p>注意：<code>for item,value in adict.items(): print ‘key=%s’, ‘value=%s’, %(item, value)</code> 这种写法是错误的</p>\n<h2 id=\"使用字典的注意事项\"><a href=\"#使用字典的注意事项\" class=\"headerlink\" title=\"使用字典的注意事项\"></a>使用字典的注意事项</h2><ul>\n<li>1、不能允许一键对应多个值；</li>\n<li>2、键必须是可哈希的。</li>\n</ul>\n","categories":["Web","Back","python"],"tags":["python"]},{"title":"Mac安装pip","url":"/mac_pip/","content":"<p>Mac已经自带<span class=\"exturl\" data-url=\"aHR0cDovL2xpYi5jc2RuLm5ldC9iYXNlL3B5dGhvbg==\">Python<i class=\"fa fa-external-link-alt\"></i></span>,我的Mac系统是yosemite, 自带python版本是2.7.10. 但是ipython要自己安装，网上有很多方法，但没有一个简单并能很快解决问题的。<br>本人将今天自己安装ipython的步骤简单记录如下：<br>本人是通过pip安装ipython，pip是python的包管理工具 </p>\n<p><strong>一、安装 pip</strong></p>\n<p>mac默认是不带pip的，所以第一步要先安装pip。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo easy_install pip</span><br><span class=\"line\">… …</span><br><span class=\"line\">…此处省略N行…</span><br><span class=\"line\">… …</span><br><span class=\"line\">Installed /Library/Python/2.7/site-packages/pip-7.1.2-py2.7.egg</span><br><span class=\"line\">Processing dependencies for pip Finished processing dependencies for</span><br><span class=\"line\">pip</span><br></pre></td></tr></table></figure>\n\n<p>成功安装会显示上面的信息</p>\n<p><strong>二、 使用pip安装ipython</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo pip install ipython </span><br><span class=\"line\">… … … </span><br><span class=\"line\">… 省略N行… </span><br><span class=\"line\">…… … </span><br></pre></td></tr></table></figure>\n\n<p>安装成功将会显示成功安装的信息。<br>这时命令行 输入ipython,就会进入ipthon shell 模式，比python的默认shell 编写代码要方便的多，比如tab 键可以自动补全等。。。<br>关于ipython的使用可以自行搜索</p>\n<p>如果不带sudo,可能会出现 下面的错误提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">IOError: \\[Errno 13\\] Permission denied**: ‘/Library/Python/2.7/site-packages/decorator.py’</span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"],"tags":["mac","python"]},{"title":"Python的常用时间操作","url":"/python_time/","content":"<h3 id=\"Python获取当前系统时间\"><a href=\"#Python获取当前系统时间\" class=\"headerlink\" title=\"Python获取当前系统时间\"></a>Python获取当前系统时间</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">#返回当前时间</span><br><span class=\"line\"></span><br><span class=\"line\">def GetNowTime():</span><br><span class=\"line\"></span><br><span class=\"line\">    return time.strftime(“%Y-%m-%d %H:%M:%S”,time.localtime(time.time()))</span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>python中时间日期格式化符号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">%y 两位数的年份表示（00-99）</span><br><span class=\"line\"></span><br><span class=\"line\">%Y 四位数的年份表示（000-9999）</span><br><span class=\"line\"></span><br><span class=\"line\">%m 月份（01-12）</span><br><span class=\"line\"></span><br><span class=\"line\">%d 月内中的一天（0-31）</span><br><span class=\"line\"></span><br><span class=\"line\">%H 24小时制小时数（0-23）</span><br><span class=\"line\"></span><br><span class=\"line\">%I 12小时制小时数（01-12）</span><br><span class=\"line\"></span><br><span class=\"line\">%M 分钟数（00=59）</span><br><span class=\"line\"></span><br><span class=\"line\">%S 秒（00-59）</span><br><span class=\"line\"></span><br><span class=\"line\">%a 本地简化星期名称</span><br><span class=\"line\"></span><br><span class=\"line\">%A 本地完整星期名称</span><br><span class=\"line\"></span><br><span class=\"line\">%b 本地简化的月份名称</span><br><span class=\"line\"></span><br><span class=\"line\">%B 本地完整的月份名称</span><br><span class=\"line\"></span><br><span class=\"line\">%c 本地相应的日期表示和时间表示</span><br><span class=\"line\"></span><br><span class=\"line\">%j 年内的一天（001-366）</span><br><span class=\"line\"></span><br><span class=\"line\">%p 本地A.M.或P.M.的等价符</span><br><span class=\"line\"></span><br><span class=\"line\">%U 一年中的星期数（00-53）星期天为星期的开始</span><br><span class=\"line\"></span><br><span class=\"line\">%w 星期（0-6），星期天为星期的开始</span><br><span class=\"line\"></span><br><span class=\"line\">%W 一年中的星期数（00-53）星期一为星期的开始</span><br><span class=\"line\"></span><br><span class=\"line\">%x 本地相应的日期表示</span><br><span class=\"line\"></span><br><span class=\"line\">%X 本地相应的时间表示</span><br><span class=\"line\"></span><br><span class=\"line\">%Z 当前时区的名称</span><br><span class=\"line\"></span><br><span class=\"line\">%% %号本身</span><br></pre></td></tr></table></figure>\n<p><code>pandas.to_datetime</code> 中 <code>unit</code> 参数 <code>D,s,ms,us,ns 日，秒，毫秒，微秒，纳秒</code></p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><h4 id=\"python获取当前时间\"><a href=\"#python获取当前时间\" class=\"headerlink\" title=\"python获取当前时间\"></a>python获取当前时间</h4><p>   time.time() 获取当前时间戳<br>   time.localtime() 当前时间的struct_time形式<br>   time.ctime() 当前时间的字符串形式<br>   int(time.ctime()) 当前整型11位时间戳<br>   int(time.ctime()*1000) 当前整型13位时间戳</p>\n<h4 id=\"python格式化字符串\"><a href=\"#python格式化字符串\" class=\"headerlink\" title=\"python格式化字符串\"></a>python格式化字符串</h4><p>  格式化成2009-03-20 11:45:39形式<br>  time.strftime(“%Y-%m-%d %H:%M:%S”, time.localtime()) </p>\n<p>  格式化成Sat Mar 28 22:24:24 2009形式<br>  time.strftime(“%a %b %d %H:%M:%S %Y”, time.localtime())</p>\n<h4 id=\"将格式字符串转换为时间戳\"><a href=\"#将格式字符串转换为时间戳\" class=\"headerlink\" title=\"将格式字符串转换为时间戳\"></a>将格式字符串转换为时间戳</h4><p>  a &#x3D; “Sat Mar 28 22:24:24 2009”<br>  b &#x3D; time.mktime(time.strptime(a,”%a %b %d %H:%M:%S %Y”))</p>\n<h4 id=\"时间戳转换为指定格式日期\"><a href=\"#时间戳转换为指定格式日期\" class=\"headerlink\" title=\"时间戳转换为指定格式日期:\"></a>时间戳转换为指定格式日期:</h4><p>  方法一:<br>    利用localtime()转换为时间数组,然后格式化为需要的格式,如<br>    timeStamp &#x3D; 1381419600<br>    timeArray &#x3D; time.localtime(timeStamp)<br>    otherStyleTime &#x3D; time.strftime(“%Y-%m-%d %H:%M:%S”, timeArray)<br>    otherStyletime &#x3D;&#x3D; “2013-10-10 23:40:00”<br>  方法二:<br>    import datetime<br>    timeStamp &#x3D; 1381419600<br>    dateArray &#x3D; datetime.datetime.utcfromtimestamp(timeStamp)<br>    otherStyleTime &#x3D; dateArray.strftime( class&#x3D;”java string”&gt;”%Y-%m-%d %H:%M:%S” ) otherStyletime &#x3D;&#x3D;  “2013-10-10 23:40:00”</p>\n","categories":["Web","Back","python"]},{"title":"最常用Python开源框架有哪些？","url":"/python_frame/","content":"<p><strong>Python开源框架</strong>有很多，像Django、Flask、webpy等等，但哪些是最常用到的呢？</p>\n<h2 id=\"一、Python名气最大的框架：Django\"><a href=\"#一、Python名气最大的框架：Django\" class=\"headerlink\" title=\"一、Python名气最大的框架：Django\"></a>一、Python名气最大的框架：Django</h2><p>在学习到python基础和python进阶时，一般不会使用到框架。但初学Python时，你一定听到过Django，这两者就好像是一对好朋友。 </p>\n<p>Django它是个开放源代码的Web应用框架，由Python写成的Django应该是最出名的Python框架之一。</p>\n<p>GAE还有Erlang都和python密切相关。</p>\n<p>Django是给人的感觉是高大尚，它十分出色的是其全自动化的管理后台：只需要使用起ORM做简单的对象定义，就能自动生成数据库结构，以及全功能的管理后台。  </p>\n<h2 id=\"二、用Python编写的小巧轻量级的Web应用框架：Flask\"><a href=\"#二、用Python编写的小巧轻量级的Web应用框架：Flask\" class=\"headerlink\" title=\"二、用Python编写的小巧轻量级的Web应用框架：Flask\"></a>二、用Python编写的小巧轻量级的Web应用框架：Flask</h2><p>Flask也是一个Web应用框架，不同于Django它是轻量级Web应用框架。<br>基于Werkzeug WSGI工具箱和Jinja2 模板引擎。<br>Flask也被称为“microframework”，因为它使用简单的核心，用extension增加其他功能。<br>Flask没有默认使用的数据库、窗体验证工具。但是Flask是可以扩增的，你可以使用可以用<code>Flask-extension</code>增加前边没有的一些功能。  </p>\n<h2 id=\"三、实时Web服务的理想框架：Tornado异步非阻塞IO的Python-Web框架\"><a href=\"#三、实时Web服务的理想框架：Tornado异步非阻塞IO的Python-Web框架\" class=\"headerlink\" title=\"三、实时Web服务的理想框架：Tornado异步非阻塞IO的Python Web框架\"></a>三、实时Web服务的理想框架：Tornado异步非阻塞IO的Python Web框架</h2><p>Tornado它的全称是Torado Web Server，仅仅从它的名字上我们就可以知道它可以用作Web服务器，但同时它也是一个Python Web的开发框架。<br>Tornado 和现在的主流 Web 服务器框架和大多数Python框架有着明显的区别：它是非阻塞式服务器，而且速度相当快。也是比较常被使用的Python开源框架之一。  <br>还有许多Python开源框架在被不同需求的人们使用，Python Web网站开发框架之TurboGears、Web2py全栈式Web框架、 Falcon高性能Python框架、 Buildbot持续集成测试框架、和Scrapy爬虫框架等等，在这里就不意义例举了。</p>\n","categories":["Web","Back","python"]},{"title":"Pythonbrew：管理不同Python版本的利器","url":"/python_pythonbrew/","content":"<p>当你需要在一台机器上同时安装多个不同版本的python的时候，你可能就需要使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3V0YWh0YS9weXRob25icmV3\">pythonbrew<i class=\"fa fa-external-link-alt\"></i></span> 。 pythonbrew可以帮你下载安装不同版本的python并且可以自由的在多个版本间进行切换,它和ruby的rvm类似。 Pythonbrew可以安装不同版本的Python，并且进行版本切换，还整合了Virtualenv。可惜该项目已经不再积极开发中，用户可以尝试它替代<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3l5dXUvcHllbnY=\">pyenv<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>终端输入 <code>curl -kL http://xrl.us/pythonbrewinstall | bash</code><br>执行完成之后它会安装在 <code>~/.pythonbrew.</code> 目录下<br>如果你想将pythonbrew安装到指定的位置你需要这样做</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">export PYTHONBREW_ROOT=/path/to/pythonbrew</span><br><span class=\"line\">curl -kLO http://xrl.us/pythonbrewinstall</span><br><span class=\"line\">chmod +x pythonbrewinstall</span><br><span class=\"line\">./pythonbrewinstall</span><br></pre></td></tr></table></figure>\n\n<p>在<code>~/.bashrc</code>添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[[ -s $HOME/.pythonbrew/etc/bashrc ]] &amp;&amp; source $HOME/.pythonbrew/etc/bashrc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><strong><code>pythonbrew command \\[options\\]</code></strong></p>\n<h4 id=\"安装不同版本的python\"><a href=\"#安装不同版本的python\" class=\"headerlink\" title=\"安装不同版本的python\"></a>安装不同版本的python</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pythonbrew install 2.7.2</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew install --verbose 2.7.2</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew install --test 2.7.2</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew install --test --force 2.7.2</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew install --configure=&amp;quot;CC=gcc_4.1&amp;quot; 2.7.2</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew install --no-setuptools 2.7.2</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew install http://www.python.org/ftp/python/2.7/Python-2.7.2.tgz</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew install /path/to/Python-2.7.2.tgz</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew install /path/to/Python-2.7.2</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew install 2.7.2 3.2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"永久使用某版本python\"><a href=\"#永久使用某版本python\" class=\"headerlink\" title=\"永久使用某版本python\"></a>永久使用某版本python</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pythonbrew switch 2.7.2</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew switch 3.2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在当前shell下使用某版本python\"><a href=\"#在当前shell下使用某版本python\" class=\"headerlink\" title=\"在当前shell下使用某版本python\"></a>在当前shell下使用某版本python</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pythonbrew use 2.7.2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"用某版本或所有版本python运行一个python文件\"><a href=\"#用某版本或所有版本python运行一个python文件\" class=\"headerlink\" title=\"用某版本或所有版本python运行一个python文件\"></a>用某版本或所有版本python运行一个python文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pythonbrew py test.py</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew py -v test.py \\# Show verbose output</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew py -p 2.7.2 -p 3.2 test.py \\# Use the specified pythons</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列出已安装的python\"><a href=\"#列出已安装的python\" class=\"headerlink\" title=\"列出已安装的python\"></a>列出已安装的python</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pythonbrew list</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列出可安装的python\"><a href=\"#列出可安装的python\" class=\"headerlink\" title=\"列出可安装的python\"></a>列出可安装的python</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pythonbrew list -k</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"卸载某版本python\"><a href=\"#卸载某版本python\" class=\"headerlink\" title=\"卸载某版本python\"></a>卸载某版本python</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pythonbrew uninstall 2.7.2</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew uninstall 2.7.2 3.2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除源文件存档：\"><a href=\"#删除源文件存档：\" class=\"headerlink\" title=\"删除源文件存档：\"></a>删除源文件存档：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pythonbrew cleanup</span><br></pre></td></tr></table></figure>\n<h4 id=\"更新pythonbrew\"><a href=\"#更新pythonbrew\" class=\"headerlink\" title=\"更新pythonbrew\"></a>更新pythonbrew</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pythonbrew update</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew update --master</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew update --develop</span><br></pre></td></tr></table></figure>\n<h4 id=\"禁用pythonbrew\"><a href=\"#禁用pythonbrew\" class=\"headerlink\" title=\"禁用pythonbrew\"></a>禁用pythonbrew</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pythonbrew off</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加或删除python符号链结\"><a href=\"#添加或删除python符号链结\" class=\"headerlink\" title=\"添加或删除python符号链结\"></a>添加或删除python符号链结</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pythonbrew symlink \\# Create a symbolic link, like %py2.7.2%;, for each installed version</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew symlink -p 2.7.2</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew symlink pip \\# Create a symbolic link to the specified script in bin directory</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew symlink -r \\# Remove a symbolic link</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew symlink -v foo \\# Create a symbolic link to the specified virtual environment python in bin directory</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行buildout\"><a href=\"#运行buildout\" class=\"headerlink\" title=\"运行buildout\"></a>运行buildout</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pythonbrew buildout</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew buildout -p 2.6.6</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基于virtualenv创造一个虚拟python环境\"><a href=\"#基于virtualenv创造一个虚拟python环境\" class=\"headerlink\" title=\"基于virtualenv创造一个虚拟python环境\"></a>基于virtualenv创造一个虚拟python环境</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pythonbrew venv init</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew venv create proj</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew venv list</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew venv use proj</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew venv delete proj</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew venv rename proj proj2</span><br><span class=\"line\"></span><br><span class=\"line\">pythonbrew venv clone proj proj2</span><br></pre></td></tr></table></figure>\n\n<p>github主页：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3V0YWh0YS9weXRob25icmV3\">https://github.com/utahta/pythonbrew<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Web","Back","python"],"tags":["python"]},{"title":"Python类型转换函数","url":"/python_change_type/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">int(x [,base ]) 将x转换为一个整数</span><br><span class=\"line\">long(x [,base ]) 将x转换为一个长整数</span><br><span class=\"line\">float 将x转换到一个浮点数</span><br><span class=\"line\">complex(real [,imag ]) 创建一个复数</span><br><span class=\"line\">str(x ) 将对象 x 转换为字符串</span><br><span class=\"line\">repr(x ) 将对象 x 转换为表达式字符串</span><br><span class=\"line\">eval(str ) 用来计算在字符串中的有效Python表达式,并返回一个对象</span><br><span class=\"line\">tuple(s ) 将序列 s 转换为一个元组</span><br><span class=\"line\">list(s ) 将序列 s 转换为一个列表</span><br><span class=\"line\">chr(x ) 将一个整数转换为一个字符</span><br><span class=\"line\">unichr(x ) 将一个整数转换为Unicode字符</span><br><span class=\"line\">ord(x ) 将一个字符转换为它的整数值</span><br><span class=\"line\">hex(x ) 将一个整数转换为一个十六进制字符串</span><br><span class=\"line\">oct(x ) 将一个整数转换为一个八进制字符串</span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"]},{"title":"Python：获取目录名，创建多级目录，获取文件名","url":"/python_dirs/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">outnewpath = os.path.dirname(path)  # 获得目录名</span><br><span class=\"line\"># gp.AddMessage(&quot;目录gisoracle:======&quot;+outnewpath)</span><br><span class=\"line\">if not os.path.exists(outnewpath):  #判断目录是否存在</span><br><span class=\"line\">    # 创建多级目录</span><br><span class=\"line\">    os.makedirs(outnewpath)</span><br><span class=\"line\">print os.path.basename(path)  # 仅仅获得文件名</span><br><span class=\"line\">print path + &#x27;okcoin.cn.kline.1min&#x27;</span><br><span class=\"line\">print path</span><br></pre></td></tr></table></figure>","categories":["Web","Back","python"]},{"title":"详细记录python的range()函数用法","url":"/python_range/","content":"<p>使用python的人都知道<code>range()</code>函数很方便，今天再用到他的时候发现了很多以前看到过但是忘记的细节。这里记录一下<code>range()</code>,复习下list的slide，最后分析一个好玩儿的冒泡程序。</p>\n<p>这里记录一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt; range(1,5) #代表从1到5(不包含5)</span><br><span class=\"line\">[1, 2, 3, 4]</span><br><span class=\"line\">&gt;&gt;&gt; range(1,5,2) #代表从1到5，间隔2(不包含5)</span><br><span class=\"line\">[1, 3]</span><br><span class=\"line\">&gt;&gt;&gt; range(5) #代表从0到5(不包含5)</span><br><span class=\"line\">[0, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure>\n<p>再看看list的操作:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">array = [1, 2, 5, 3, 6, 8, 4]</span><br><span class=\"line\">#其实这里的顺序标识是</span><br><span class=\"line\">[1, 2, 5, 3, 6, 8, 4]</span><br><span class=\"line\">(0，1，2，3，4，5，6)</span><br><span class=\"line\">(-7,-6,-5,-4,-3,-2,-1)</span><br><span class=\"line\">&gt;&gt;&gt; array[0:] #列出0以后的</span><br><span class=\"line\">[1, 2, 5, 3, 6, 8, 4]</span><br><span class=\"line\">&gt;&gt;&gt; array[1:] #列出1以后的</span><br><span class=\"line\">[2, 5, 3, 6, 8, 4]</span><br><span class=\"line\">&gt;&gt;&gt; array[:-1] #列出-1之前的</span><br><span class=\"line\">[1, 2, 5, 3, 6, 8]</span><br><span class=\"line\">&gt;&gt;&gt; array[3:-3] #列出3到-3之间的</span><br><span class=\"line\">[3]</span><br></pre></td></tr></table></figure>\n<p>那么两个[::]会是什么那？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt; array[::2]</span><br><span class=\"line\">[1, 5, 6, 4]</span><br><span class=\"line\">&gt;&gt;&gt; array[2::]</span><br><span class=\"line\">[5, 3, 6, 8, 4]</span><br><span class=\"line\">&gt;&gt;&gt; array[::3]</span><br><span class=\"line\">[1, 3, 4]</span><br><span class=\"line\">&gt;&gt;&gt; array[::4]</span><br><span class=\"line\">[1, 6]</span><br></pre></td></tr></table></figure>\n<p>如果想让他们颠倒形成reverse函数的效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; array[::-1]</span><br><span class=\"line\">[4, 8, 6, 3, 5, 2, 1]</span><br><span class=\"line\">&gt;&gt;&gt; array[::-2]</span><br><span class=\"line\">[4, 6, 5, 1]</span><br></pre></td></tr></table></figure>\n<p>感觉自己懂了吧，那么来个冒泡吧：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">array = [1, 2, 5, 3, 6, 8, 4]</span><br><span class=\"line\">for i in range(len(array) - 1, 0, -1):</span><br><span class=\"line\">print i</span><br><span class=\"line\">for j in range(0, i):</span><br><span class=\"line\">print j</span><br><span class=\"line\">if array[j] &gt; array[j + 1]:</span><br><span class=\"line\">array[j], array[j + 1] = array[j + 1], array[j]</span><br><span class=\"line\">print array</span><br></pre></td></tr></table></figure>\n<p>一行一行的来看：</p>\n<p>line 1：<code>array = [1, 2, 5, 3, 6, 8, 4]</code> ：一个乱序的list没什么好解释的</p>\n<p>line 2：<code>for i in range(len(array) - 1, 0, -1)</code>：这就是上边给的例子的第二条，我们替换下就成为range(6,1,-1)，意思是从6到1间隔-1,也就是倒叙的range(2,7,1),随后把这些值循环赋给i，那么i的值将会是[6, 5, 4, 3, 2]</p>\n<p>line 3：<code>for j in range(0, i)</code>:这是一个循环赋值给j，j的值将会是[0, 1, 2, 3, 4, 5][0, 1, 2, 3, 4][0, 1, 2, 3][0, 1, 2][0, 1]</p>\n<p>line 4：<code>if array[j] &gt; array[j + 1]</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; array = [1, 2, 5, 3, 6, 8, 4]</span><br><span class=\"line\">&gt;&gt;&gt; array[0]</span><br><span class=\"line\">1</span><br><span class=\"line\">&gt;&gt;&gt; array[1]</span><br><span class=\"line\">2</span><br><span class=\"line\">&gt;&gt;&gt; array[2]</span><br><span class=\"line\">5</span><br><span class=\"line\">&gt;&gt;&gt; array[3]</span><br><span class=\"line\">3</span><br><span class=\"line\">&gt;&gt;&gt; array[4]</span><br><span class=\"line\">6</span><br><span class=\"line\">&gt;&gt;&gt; array[5]</span><br><span class=\"line\">8</span><br><span class=\"line\">&gt;&gt;&gt; array[6]</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<p>其实·就是使用这个把这个没有顺序的<code>array = [1, 2, 5, 3, 6, 8, 4]</code>排序</p>\n<p>line 5：<code>array[j], array[j + 1] = array[j + 1], array[j]</code> 替换赋值</p>\n<p>line 6：打印出来</p>\n<p>其实要想省事儿，<code>sort()</code>函数一句就能搞定…….</p>\n","categories":["Web","Back","python"]},{"title":"Python数据分析包：pandas基础","url":"/python_pandas_basis/","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>pandas</code> 是基于<code>Numpy</code>构建的含有更高级数据结构和工具的数据分析包</p>\n<p>类似于<code>Numpy</code>的核心是<code>ndarray</code>，<code>pandas</code>也是围绕着<code>Series</code>和<code>DataFrame</code>两个核心数据结构展开的。<code>Series</code> 和 <code>DataFrame</code> 分别对应于一维的序列和二维的表结构。<code>pandas</code> 约定俗成的导入方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from pandas import Series,DataFrame</span><br><span class=\"line\">import pandas as pd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Series\"><a href=\"#Series\" class=\"headerlink\" title=\"Series\"></a>Series</h2><p>Series 可以看做一个定长的有序字典。基本任意的一维数据都可以用来构造 Series 对象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; s = Series([1,2,3.0,&#x27;abc&#x27;])</span><br><span class=\"line\">&gt;&gt;&gt; s</span><br><span class=\"line\">0      1</span><br><span class=\"line\">1      2</span><br><span class=\"line\">2      3</span><br><span class=\"line\">3    abc</span><br><span class=\"line\">dtype: object</span><br></pre></td></tr></table></figure>\n<p>虽然 <code>dtype:object</code> 可以包含多种基本数据类型，但总感觉会影响性能的样子，最好还是保持单纯的 <code>dtype</code>。</p>\n<p><code>Series</code> 对象包含两个主要的属性：<code>index</code> 和 <code>values</code>，分别为上例中左右两列。因为传给构造器的是一个列表，所以 <code>index</code> 的值是从 0 起递增的整数，如果传入的是一个类字典的键值对结构，就会生成 <code>index-value</code> 对应的 <code>Series</code>；或者在初始化的时候以关键字参数显式指定一个 <code>index</code> 对象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; s = Series(data=[1,3,5,7],index = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;x&#x27;,&#x27;y&#x27;])</span><br><span class=\"line\">&gt;&gt;&gt; s</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    3</span><br><span class=\"line\">x    5</span><br><span class=\"line\">y    7</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\">&gt;&gt;&gt; s.index</span><br><span class=\"line\">Index([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;x&#x27;, &#x27;y&#x27;], dtype=&#x27;object&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; s.values</span><br><span class=\"line\">array([1, 3, 5, 7], dtype=int64)</span><br></pre></td></tr></table></figure>\n\n<p><code>Series</code> 对象的元素会严格依照给出的 index 构建，这意味着：如果 data 参数是有键值对的，那么只有 index 中含有的键会被使用；以及如果 data 中缺少响应的键，即使给出 NaN 值，这个键也会被添加。</p>\n<p>注意<code>Series</code>的<code>index</code>和 <code>values</code> 的元素之间虽然存在对应关系，但这与字典的映射不同。<code>index</code> 和 <code>values</code> 实际仍为互相独立的 <code>ndarray</code> 数组，因此 <code>Series</code> 对象的性能完全 ok。</p>\n<p><code>Series</code> 这种使用键值对的数据结构最大的好处在于，<code>Series</code> 间进行算术运算时，<code>index</code> 会自动对齐。</p>\n<p>另外，<code>Series</code> 对象和它的 index 都含有一个 name 属性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; s.name = &#x27;a_series&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; s.index.name = &#x27;the_index&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; s</span><br><span class=\"line\">the_index</span><br><span class=\"line\">a            1</span><br><span class=\"line\">b            3</span><br><span class=\"line\">x            5</span><br><span class=\"line\">y            7</span><br><span class=\"line\">Name: a_series, dtype: int64</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DataFrame\"><a href=\"#DataFrame\" class=\"headerlink\" title=\"DataFrame\"></a>DataFrame</h2><p><code>DataFrame</code> 是一个表格型的数据结构，它含有一组有序的列（类似于 index），每列可以是不同的值类型（不像 <code>ndarray</code> 只能有一个 dtype）。基本上可以把 <code>DataFrame</code> 看成是共享同一个 <code>index</code> 的 <code>Series</code> 的集合。</p>\n<p><code>DataFrame</code> 的构造方法与 <code>Series</code> 类似，只不过可以同时接受多条一维数据源，每一条都会成为单独的一列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; data = &#123;&#x27;state&#x27;:[&#x27;Ohino&#x27;,&#x27;Ohino&#x27;,&#x27;Ohino&#x27;,&#x27;Nevada&#x27;,&#x27;Nevada&#x27;],</span><br><span class=\"line\">        &#x27;year&#x27;:[2000,2001,2002,2001,2002],</span><br><span class=\"line\">        &#x27;pop&#x27;:[1.5,1.7,3.6,2.4,2.9]&#125;</span><br><span class=\"line\">&gt;&gt;&gt; df = DataFrame(data)</span><br><span class=\"line\">&gt;&gt;&gt; df</span><br><span class=\"line\">   pop   state  year</span><br><span class=\"line\">0  1.5   Ohino  2000</span><br><span class=\"line\">1  1.7   Ohino  2001</span><br><span class=\"line\">2  3.6   Ohino  2002</span><br><span class=\"line\">3  2.4  Nevada  2001</span><br><span class=\"line\">4  2.9  Nevada  2002</span><br><span class=\"line\"></span><br><span class=\"line\">[5 rows x 3 columns]</span><br></pre></td></tr></table></figure>\n<p>虽然参数 <code>data</code> 看起来是个字典，但字典的键并非充当 <code>DataFrame</code> 的 <code>index</code> 的角色，而是 <code>Series</code> 的 “name” 属性。这里生成的 <code>index</code> 仍是 “01234”。</p>\n<p>较完整的 <code>DataFrame</code> 构造器参数为：<code>DataFrame(data=None,index=None,coloumns=None)</code>，<code>columns</code> 即 “name”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; df = DataFrame(data,index=[&#x27;one&#x27;,&#x27;two&#x27;,&#x27;three&#x27;,&#x27;four&#x27;,&#x27;five&#x27;],</span><br><span class=\"line\">               columns=[&#x27;year&#x27;,&#x27;state&#x27;,&#x27;pop&#x27;,&#x27;debt&#x27;])</span><br><span class=\"line\">&gt;&gt;&gt; df</span><br><span class=\"line\">       year   state  pop debt</span><br><span class=\"line\">one    2000   Ohino  1.5  NaN</span><br><span class=\"line\">two    2001   Ohino  1.7  NaN</span><br><span class=\"line\">three  2002   Ohino  3.6  NaN</span><br><span class=\"line\">four   2001  Nevada  2.4  NaN</span><br><span class=\"line\">five   2002  Nevada  2.9  NaN</span><br><span class=\"line\"></span><br><span class=\"line\">[5 rows x 4 columns]</span><br></pre></td></tr></table></figure>\n<p>同样缺失值由 <code>NaN</code> 补上。看一下 <code>index、columns</code> 和 索引的类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; df.index</span><br><span class=\"line\">Index([&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;, &#x27;four&#x27;, &#x27;five&#x27;], dtype=&#x27;object&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; df.columns</span><br><span class=\"line\">Index([&#x27;year&#x27;, &#x27;state&#x27;, &#x27;pop&#x27;, &#x27;debt&#x27;], dtype=&#x27;object&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; type(df[&#x27;debt&#x27;])</span><br><span class=\"line\">&lt;class &#x27;pandas.core.series.Series&#x27;&gt;</span><br></pre></td></tr></table></figure>\n<p><code>DataFrame</code> 面向行和面向列的操作基本是平衡的，任意抽出一列都是 <code>Series</code>。</p>\n<h2 id=\"对象属性\"><a href=\"#对象属性\" class=\"headerlink\" title=\"对象属性\"></a>对象属性</h2><h3 id=\"重新索引\"><a href=\"#重新索引\" class=\"headerlink\" title=\"重新索引\"></a>重新索引</h3><p><code>Series</code> 对象的重新索引通过其 <code>.reindex(index=None,**kwargs)</code> 方法实现。<code>**kwargs</code> 中常用的参数有俩：<code>method=None,fill_value=np.NaN</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ser = Series([4.5,7.2,-5.3,3.6],index=[&#x27;d&#x27;,&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;])</span><br><span class=\"line\">&gt;&gt;&gt; a = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]</span><br><span class=\"line\">&gt;&gt;&gt; ser.reindex(a)</span><br><span class=\"line\">a   -5.3</span><br><span class=\"line\">b    7.2</span><br><span class=\"line\">c    3.6</span><br><span class=\"line\">d    4.5</span><br><span class=\"line\">e    NaN</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; ser.reindex(a,fill_value=0)</span><br><span class=\"line\">a   -5.3</span><br><span class=\"line\">b    7.2</span><br><span class=\"line\">c    3.6</span><br><span class=\"line\">d    4.5</span><br><span class=\"line\">e    0.0</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; ser.reindex(a,method=&#x27;ffill&#x27;)</span><br><span class=\"line\">a   -5.3</span><br><span class=\"line\">b    7.2</span><br><span class=\"line\">c    3.6</span><br><span class=\"line\">d    4.5</span><br><span class=\"line\">e    4.5</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; ser.reindex(a,fill_value=0,method=&#x27;ffill&#x27;)</span><br><span class=\"line\">a   -5.3</span><br><span class=\"line\">b    7.2</span><br><span class=\"line\">c    3.6</span><br><span class=\"line\">d    4.5</span><br><span class=\"line\">e    4.5</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p><code>.reindex()</code> 方法会返回一个新对象，其 <code>index</code> 严格遵循给出的参数，<code>method:&#123;&#39;backfill&#39;, &#39;bfill&#39;, &#39;pad&#39;, &#39;ffill&#39;, None&#125;</code> 参数用于指定插值（填充）方式，当没有给出时，自动用 <code>fill_value</code> 填充，默认为 <code>NaN（ffill = pad，bfill = back fill</code>，分别指插值时向前还是向后取值）</p>\n<p><code>DataFrame</code> 对象的重新索引方法为：<code>.reindex(index=None,columns=None,**kwargs)</code>。仅比 <code>Series</code> 多了一个可选的 <code>columns</code> 参数，用于给列索引。用法与上例类似，只不过插值方法 method 参数只能应用于行，即轴 0。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; state = [&#x27;Texas&#x27;,&#x27;Utha&#x27;,&#x27;California&#x27;]</span><br><span class=\"line\">&gt;&gt;&gt; df.reindex(columns=state,method=&#x27;ffill&#x27;)</span><br><span class=\"line\">    Texas  Utha  California</span><br><span class=\"line\">a      1   NaN           2</span><br><span class=\"line\">c      4   NaN           5  </span><br><span class=\"line\">d      7   NaN           8</span><br><span class=\"line\"></span><br><span class=\"line\">[3 rows x 3 columns]</span><br><span class=\"line\">&gt;&gt;&gt; df.reindex(index=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;],columns=state,method=&#x27;ffill&#x27;)</span><br><span class=\"line\">   Texas  Utha  California</span><br><span class=\"line\">a      1   NaN           2</span><br><span class=\"line\">b      1   NaN           2</span><br><span class=\"line\">c      4   NaN           5</span><br><span class=\"line\">d      7   NaN           8</span><br><span class=\"line\"></span><br><span class=\"line\">[4 rows x 3 columns]</span><br></pre></td></tr></table></figure>\n<p>不过 <code>fill_value</code> 依然对有效。聪明的小伙伴可能已经想到了，可不可以通过 <code>df.T.reindex(index,method=&#39;**&#39;).T</code>这样的方式来实现在列上的插值呢，答案是可行的。另外要注意，使用 <code>reindex(index,method=&#39;**&#39;)</code> 的时候，<code>index</code> 必须是单调的，否则就会引发一个 <code>ValueError: Must be monotonic for forward fill</code>，比如上例中的最后一次调用，如果使用 <code>index=[&#39;a&#39;,&#39;b&#39;,&#39;d&#39;,&#39;c&#39;]</code> 的话就不行。</p>\n<h3 id=\"删除指定轴上的项\"><a href=\"#删除指定轴上的项\" class=\"headerlink\" title=\"删除指定轴上的项\"></a>删除指定轴上的项</h3><p>即删除 <code>Serie</code>s 的元素或 <code>DataFrame</code> 的某一行（列）的意思，通过对象的 <code>.drop(labels, axis=0)</code> 方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; ser</span><br><span class=\"line\">d    4.5</span><br><span class=\"line\">b    7.2</span><br><span class=\"line\">a   -5.3</span><br><span class=\"line\">c    3.6</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; df</span><br><span class=\"line\">   Ohio  Texas  California</span><br><span class=\"line\">a     0      1           2</span><br><span class=\"line\">c     3      4           5</span><br><span class=\"line\">d     6      7           8</span><br><span class=\"line\"></span><br><span class=\"line\">[3 rows x 3 columns]</span><br><span class=\"line\">&gt;&gt;&gt; ser.drop(&#x27;c&#x27;)</span><br><span class=\"line\">d    4.5</span><br><span class=\"line\">b    7.2</span><br><span class=\"line\">a   -5.3</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; df.drop(&#x27;a&#x27;)</span><br><span class=\"line\">   Ohio  Texas  California</span><br><span class=\"line\">c     3      4           5</span><br><span class=\"line\">d     6      7           8</span><br><span class=\"line\"></span><br><span class=\"line\">[2 rows x 3 columns]</span><br><span class=\"line\">&gt;&gt;&gt; df.drop([&#x27;Ohio&#x27;,&#x27;Texas&#x27;],axis=1)</span><br><span class=\"line\">   California</span><br><span class=\"line\">a           2</span><br><span class=\"line\">c           5</span><br><span class=\"line\">d           8</span><br><span class=\"line\"></span><br><span class=\"line\">[3 rows x 1 columns]</span><br></pre></td></tr></table></figure>\n<p><code>.drop()</code> 返回的是一个新对象，元对象不会被改变。</p>\n<h3 id=\"索引和切片\"><a href=\"#索引和切片\" class=\"headerlink\" title=\"索引和切片\"></a>索引和切片</h3><p>就像 <code>Numpy</code>，<code>pandas</code> 也支持通过 <code>obj[::]</code> 的方式进行索引和切片，以及通过布尔型数组进行过滤。</p>\n<p>不过须要注意，因为 <code>pandas</code> 对象的 <code>index</code> 不限于整数，所以当使用非整数作为切片索引时，它是末端包含的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; foo</span><br><span class=\"line\">a    4.5</span><br><span class=\"line\">b    7.2</span><br><span class=\"line\">c   -5.3</span><br><span class=\"line\">d    3.6</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; bar</span><br><span class=\"line\">0    4.5</span><br><span class=\"line\">1    7.2</span><br><span class=\"line\">2   -5.3</span><br><span class=\"line\">3    3.6</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; foo[:2]</span><br><span class=\"line\">a    4.5</span><br><span class=\"line\">b    7.2</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; bar[:2]</span><br><span class=\"line\">0    4.5</span><br><span class=\"line\">1    7.2</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; foo[:&#x27;c&#x27;]</span><br><span class=\"line\">a    4.5</span><br><span class=\"line\">b    7.2</span><br><span class=\"line\">c   -5.3</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p>这里 <code>foo</code> 和 <code>bar</code> 只有 <code>index</code> 不同——bar 的 <code>index</code> 是整数序列。可见当使用整数索引切片时，结果与 <code>Python</code> 列表或 <code>Numpy</code> 的默认状况相同；换成 ‘c’ 这样的字符串索引时，结果就包含了这个边界元素。</p>\n<p>另外一个特别之处在于 <code>DataFrame</code> 对象的索引方式，因为他有两个轴向（双重索引）。</p>\n<p>可以这么理解：DataFrame 对象的标准切片语法为：<code>.ix[::,::]</code>。<code>ix</code> 对象可以接受两套切片，分别为行<code>（axis=0）</code>和列<code>（axis=1）</code>的方向：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; df</span><br><span class=\"line\">   Ohio  Texas  California</span><br><span class=\"line\">a     0      1           2</span><br><span class=\"line\">c     3      4           5</span><br><span class=\"line\">d     6      7           8</span><br><span class=\"line\"></span><br><span class=\"line\">[3 rows x 3 columns]</span><br><span class=\"line\">&gt;&gt;&gt; df.ix[:2,:2]</span><br><span class=\"line\">   Ohio  Texas</span><br><span class=\"line\">a     0      1</span><br><span class=\"line\">c     3      4</span><br><span class=\"line\"></span><br><span class=\"line\">[2 rows x 2 columns]</span><br><span class=\"line\">&gt;&gt;&gt; df.ix[&#x27;a&#x27;,&#x27;Ohio&#x27;]</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<p>而不使用 <code>ix</code> ，直接切的情况就特殊了：</p>\n<p>索引时，选取的是列<br>切片时，选取的是行<br>这看起来有点不合逻辑，但作者解释说 “这种语法设定来源于实践”，我们信他。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; df[&#x27;Ohio&#x27;]</span><br><span class=\"line\">a    0</span><br><span class=\"line\">c    3</span><br><span class=\"line\">d    6</span><br><span class=\"line\">Name: Ohio, dtype: int32</span><br><span class=\"line\">&gt;&gt;&gt; df[:&#x27;c&#x27;]</span><br><span class=\"line\">   Ohio  Texas  California</span><br><span class=\"line\">a     0      1           2</span><br><span class=\"line\">c     3      4           5</span><br><span class=\"line\"></span><br><span class=\"line\">[2 rows x 3 columns]</span><br><span class=\"line\">&gt;&gt;&gt; df[:2]</span><br><span class=\"line\">   Ohio  Texas  California</span><br><span class=\"line\">a     0      1           2</span><br><span class=\"line\">c     3      4           5</span><br><span class=\"line\"></span><br><span class=\"line\">[2 rows x 3 columns]</span><br></pre></td></tr></table></figure>\n<p>使用布尔型数组的情况，注意行与列的不同切法（列切法的 <code>:</code> 不能省）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; df[&#x27;Texas&#x27;]&gt;=4</span><br><span class=\"line\">a    False</span><br><span class=\"line\">c     True</span><br><span class=\"line\">d     True</span><br><span class=\"line\">Name: Texas, dtype: bool</span><br><span class=\"line\">&gt;&gt;&gt; df[df[&#x27;Texas&#x27;]&gt;=4]</span><br><span class=\"line\">   Ohio  Texas  California</span><br><span class=\"line\">c     3      4           5</span><br><span class=\"line\">d     6      7           8</span><br><span class=\"line\"></span><br><span class=\"line\">[2 rows x 3 columns]</span><br><span class=\"line\">&gt;&gt;&gt; df.ix[:,df.ix[&#x27;c&#x27;]&gt;=4]</span><br><span class=\"line\">   Texas  California</span><br><span class=\"line\">a      1           2</span><br><span class=\"line\">c      4           5</span><br><span class=\"line\">d      7           8</span><br><span class=\"line\"></span><br><span class=\"line\">[3 rows x 2 columns]</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<h3 id=\"算术运算和数据对齐\"><a href=\"#算术运算和数据对齐\" class=\"headerlink\" title=\"算术运算和数据对齐\"></a>算术运算和数据对齐</h3><p><code>pandas</code> 最重要的一个功能是，它可以对不同索引的对象进行算术运算。在将对象相加时，结果的索引取索引对的并集。自动的数据对齐在不重叠的索引处引入空值，默认为 <code>NaN</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; foo = Series(&#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2&#125;)</span><br><span class=\"line\">&gt;&gt;&gt; foo</span><br><span class=\"line\">a    1</span><br><span class=\"line\">b    2</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\">&gt;&gt;&gt; bar = Series(&#123;&#x27;b&#x27;:3,&#x27;d&#x27;:4&#125;)</span><br><span class=\"line\">&gt;&gt;&gt; bar</span><br><span class=\"line\">b    3</span><br><span class=\"line\">d    4</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\">&gt;&gt;&gt; foo + bar</span><br><span class=\"line\">a   NaN</span><br><span class=\"line\">b     5</span><br><span class=\"line\">d   NaN</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p><code>DataFrame</code> 的对齐操作会同时发生在行和列上。</p>\n<p>当不希望在运算结果中出现 <code>NA</code> 值时，可以使用前面 <code>reindex</code> 中提到过 <code>fill_value</code> 参数，不过为了传递这个参数，就需要使用对象的方法，而不是操作符：<code>df1.add(df2,fill_value=0)</code>。其他算术方法还有：<code>sub(), div(), mul()</code>。</p>\n<p><code>Series</code> 和 <code>DataFrame</code> 之间的算术运算涉及广播，暂时先不讲。</p>\n<h3 id=\"函数应用和映射\"><a href=\"#函数应用和映射\" class=\"headerlink\" title=\"函数应用和映射\"></a>函数应用和映射</h3><p><code>Numpy</code> 的 <code>ufuncs</code>（元素级数组方法）也可用于操作 <code>pandas</code> 对象。</p>\n<p>当希望将函数应用到 <code>DataFrame</code> 对象的某一行或列时，可以使用 <code>.apply(func, axis=0, args=(), **kwds)</code> 方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">f = lambda x:x.max()-x.min()</span><br><span class=\"line\">&gt;&gt;&gt; df</span><br><span class=\"line\">   Ohio  Texas  California</span><br><span class=\"line\">a     0      1           2</span><br><span class=\"line\">c     3      4           5</span><br><span class=\"line\">d     6      7           8</span><br><span class=\"line\"></span><br><span class=\"line\">[3 rows x 3 columns]</span><br><span class=\"line\">&gt;&gt;&gt; df.apply(f)</span><br><span class=\"line\">Ohio          6</span><br><span class=\"line\">Texas         6</span><br><span class=\"line\">California    6</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\">&gt;&gt;&gt; df.apply(f,axis=1)</span><br><span class=\"line\">a    2</span><br><span class=\"line\">c    2</span><br><span class=\"line\">d    2</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排序和排名\"><a href=\"#排序和排名\" class=\"headerlink\" title=\"排序和排名\"></a>排序和排名</h3><p><code>Series</code> 的 <code>sort_index(ascending=True)</code> 方法可以对 <code>index</code> 进行排序操作，<code>ascending</code> 参数用于控制升序或降序，默认为升序。</p>\n<p>若要按值对 <code>Series</code> 进行排序，当使用 <code>.order()</code> 方法，任何缺失值默认都会被放到 <code>Series</code> 的末尾。</p>\n<p>在 <code>DataFrame</code> 上，<code>.sort_index(axis=0, by=None, ascending=True)</code> 方法多了一个轴向的选择参数与一个 <code>by</code> 参数，<code>by</code> 参数的作用是针对某一（些）列进行排序（不能对行使用 by 参数）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; df.sort_index(by=&#x27;Ohio&#x27;)</span><br><span class=\"line\">   Ohio  Texas  California</span><br><span class=\"line\">a     0      1           2</span><br><span class=\"line\">c     3      4           5</span><br><span class=\"line\">d     6      7           8</span><br><span class=\"line\"></span><br><span class=\"line\">[3 rows x 3 columns]</span><br><span class=\"line\">&gt;&gt;&gt; df.sort_index(by=[&#x27;California&#x27;,&#x27;Texas&#x27;])</span><br><span class=\"line\">   Ohio  Texas  California</span><br><span class=\"line\">a     0      1           2</span><br><span class=\"line\">c     3      4           5</span><br><span class=\"line\">d     6      7           8</span><br><span class=\"line\"></span><br><span class=\"line\">[3 rows x 3 columns]</span><br><span class=\"line\">&gt;&gt;&gt; df.sort_index(axis=1)</span><br><span class=\"line\">   California  Ohio  Texas</span><br><span class=\"line\">a           2     0      1</span><br><span class=\"line\">c           5     3      4</span><br><span class=\"line\">d           8     6      7</span><br><span class=\"line\"></span><br><span class=\"line\">[3 rows x 3 columns]</span><br></pre></td></tr></table></figure>\n<p>排名<code>（Series.rank(method=&#39;average&#39;, ascending=True)）</code>的作用与排序的不同之处在于，他会把对象的 <code>values </code>替换成名次（从 1 到 n）。这时唯一的问题在于如何处理平级项，方法里的 <code>method</code> 参数就是起这个作用的，他有四个值可选：<code>average, min, max, first</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; ser=Series([3,2,0,3],index=list(&#x27;abcd&#x27;))</span><br><span class=\"line\">&gt;&gt;&gt; ser</span><br><span class=\"line\">a    3</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    0</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\">&gt;&gt;&gt; ser.rank()</span><br><span class=\"line\">a    3.5</span><br><span class=\"line\">b    2.0</span><br><span class=\"line\">c    1.0</span><br><span class=\"line\">d    3.5</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; ser.rank(method=&#x27;min&#x27;)</span><br><span class=\"line\">a    3</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    1</span><br><span class=\"line\">d    3</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; ser.rank(method=&#x27;max&#x27;)</span><br><span class=\"line\">a    4</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    1</span><br><span class=\"line\">d    4</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; ser.rank(method=&#x27;first&#x27;)</span><br><span class=\"line\">a    3</span><br><span class=\"line\">b    2</span><br><span class=\"line\">c    1</span><br><span class=\"line\">d    4</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p>注意在 <code>ser[0]=ser[3]</code> 这对平级项上，不同 <code>method</code> 参数表现出的不同名次。</p>\n<p><code>DataFrame</code> 的 <code>.rank(axis=0, method=&#39;average&#39;, ascending=True)</code> 方法多了个 <code>axis</code> 参数，可选择按行或列分别进行排名，暂时好像没有针对全部元素的排名方法。</p>\n<h3 id=\"统计方法\"><a href=\"#统计方法\" class=\"headerlink\" title=\"统计方法\"></a>统计方法</h3><p><code>pandas</code> 对象有一些统计方法。它们大部分都属于约简和汇总统计，用于从 <code>Series</code> 中提取单个值，或从 <code>DataFrame</code> 的行或列中提取一个 <code>Series</code>。</p>\n<p>比如 <code>DataFrame.mean(axis=0,skipna=True)</code>方法，当数据集中存在 <code>NA</code> 值时，这些值会被简单跳过，除非整个切片（行或列）全是 NA，如果不想这样，则可以通过 <code>skipna=False</code> 来禁用此功能：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; df</span><br><span class=\"line\">    one  two</span><br><span class=\"line\">a  1.40  NaN</span><br><span class=\"line\">b  7.10 -4.5</span><br><span class=\"line\">c   NaN  NaN</span><br><span class=\"line\">d  0.75 -1.3</span><br><span class=\"line\"></span><br><span class=\"line\">[4 rows x 2 columns]</span><br><span class=\"line\">&gt;&gt;&gt; df.mean()</span><br><span class=\"line\">one    3.083333</span><br><span class=\"line\">two   -2.900000</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; df.mean(axis=1)</span><br><span class=\"line\">a    1.400</span><br><span class=\"line\">b    1.300</span><br><span class=\"line\">c      NaN</span><br><span class=\"line\">d   -0.275</span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">&gt;&gt;&gt; df.mean(axis=1,skipna=False)</span><br><span class=\"line\">a      NaN</span><br><span class=\"line\">b    1.300</span><br><span class=\"line\">c      NaN</span><br><span class=\"line\">d   -0.275</span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p>其他常用的统计方法有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">count\t非 NA 值的数量</span><br><span class=\"line\">describe\t针对 Series 或 DF 的列计算汇总统计</span><br><span class=\"line\">min , max\t最小值和最大值</span><br><span class=\"line\">argmin , argmax\t最小值和最大值的索引位置（整数）</span><br><span class=\"line\">idxmin , idxmax\t最小值和最大值的索引值</span><br><span class=\"line\">quantile\t样本分位数（0 到 1）</span><br><span class=\"line\">sum\t求和</span><br><span class=\"line\">mean\t均值</span><br><span class=\"line\">median\t中位数</span><br><span class=\"line\">mad\t根据均值计算平均绝对离差</span><br><span class=\"line\">var\t方差</span><br><span class=\"line\">std\t标准差</span><br><span class=\"line\">skew\t样本值的偏度（三阶矩）</span><br><span class=\"line\">kurt\t样本值的峰度（四阶矩）</span><br><span class=\"line\">cumsum\t样本值的累计和</span><br><span class=\"line\">cummin , cummax\t样本值的累计最大值和累计最小值</span><br><span class=\"line\">cumprod\t样本值的累计积</span><br><span class=\"line\">diff\t计算一阶差分（对时间序列很有用）</span><br><span class=\"line\">pct_change\t计算百分数变化</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"处理缺失数据\"><a href=\"#处理缺失数据\" class=\"headerlink\" title=\"处理缺失数据\"></a>处理缺失数据</h3><p><code>pandas</code> 中 NA 的主要表现为 <code>np.nan</code>，另外 Python 内建的 <code>None</code> 也会被当做 <code>NA</code> 处理。</p>\n<p>处理 <code>NA</code> 的方法有四种：<code>dropna , fillna , isnull , notnull</code> 。</p>\n<h4 id=\"is-not-null\"><a href=\"#is-not-null\" class=\"headerlink\" title=\"is(not)null\"></a>is(not)null</h4><p>这一对方法对对象做元素级应用，然后返回一个布尔型数组，一般可用于布尔型索引。</p>\n<h4 id=\"dropna\"><a href=\"#dropna\" class=\"headerlink\" title=\"dropna\"></a>dropna</h4><p>对于一个 Series，dropna 返回一个仅含非空数据和索引值的 Series。</p>\n<p>问题在于对 DataFrame 的处理方式，因为一旦 <code>drop</code> 的话，至少要丢掉一行（列）。这里的解决方式与前面类似，还是通过一个额外的参数：<code>dropna(axis=0, how=&#39;any&#39;, thresh=None)</code> ，<code>how</code> 参数可选的值为 <code>any</code> 或者 <code>all</code>。<code>all</code> 仅在切片元素全为 <code>NA</code> 时才抛弃该行(列)。另外一个有趣的参数是 <code>thresh</code>，该参数的类型为整数，它的作用是，比如 <code>thresh=3</code>，会在一行中至少有 3 个非 <code>NA</code> 值时将其保留。</p>\n<h4 id=\"fillna\"><a href=\"#fillna\" class=\"headerlink\" title=\"fillna\"></a>fillna</h4><p><code>fillna(value=None, method=None, axis=0)</code> 中的 <code>value</code> 参数除了基本类型外，还可以使用字典，这样可以实现对不同的列填充不同的值。<code>method</code> 的用法与前面 <code>.reindex()</code> 方法相同，这里不再赘述。</p>\n<h3 id=\"inplace-参数\"><a href=\"#inplace-参数\" class=\"headerlink\" title=\"inplace 参数\"></a>inplace 参数</h3><p>前面有个点一直没讲，结果整篇示例写下来发现还挺重要的。就是 <code>Series</code> 和 <code>DataFrame</code> 对象的方法中，凡是会对数组作出修改并返回一个新数组的，往往都有一个 <code>replace=False</code> 的可选参数。如果手动设定为 <code>True</code>，那么原数组就可以被替换。</p>\n","categories":["Web","Back","python"],"tags":["python","pandas"]},{"title":"python_clean","url":"/python_clean/","content":"<p>官网pkg安装的python版本</p>\n<p>安装：</p>\n<p>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMvbWFjLW9zeC8=\">官网<i class=\"fa fa-external-link-alt\"></i></span> 找到相关下载链接。最好用二进制比较方便。如：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9mdHAvcHl0aG9uLzMuNi41L3B5dGhvbi0zLjYuNS1tYWNvc3gxMC45LnBrZw==\">https://www.python.org/ftp/python/3.6.5/python-3.6.5-macosx10.9.pkg<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>直接下一步下一步就完事了。</p>\n<p>mac还可以用 brew</p>\n<p>或者可以使用 conda</p>\n<p>第一步：删除框架</p>\n<p>sudo rm -rf &#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;2.7</p>\n<p>第二步：删除应用目录</p>\n<p>sudo rm -rf “&#x2F;Applications&#x2F;Python 2.7”</p>\n<p>第三步：删除指向python的链接</p>\n<p>cd &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</p>\n<p>ls -l &#x2F;usr&#x2F;local&#x2F;bin | grep ‘&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;2.7’                             # 查看链接</p>\n<p>brew cleanup                 # 清除链接和目录</p>\n","categories":["Web","Back","python"],"tags":["python"]},{"title":"DOM是什么","url":"/js_dom/","content":"<h3 id=\"一、DOM全称\"><a href=\"#一、DOM全称\" class=\"headerlink\" title=\"一、DOM全称\"></a>一、DOM全称</h3><p>文档对象模型（Document Object Model）</p>\n<h3 id=\"二、DOM是什么\"><a href=\"#二、DOM是什么\" class=\"headerlink\" title=\"二、DOM是什么\"></a>二、DOM是什么</h3><p>DOM就是一个编程接口，就是一套API。</p>\n<p>DOM是针对HTML文档、XML等文档的一套API。就类似于JDBC是针对数据库的一套API一样。</p>\n<h3 id=\"三、DOM的用途\"><a href=\"#三、DOM的用途\" class=\"headerlink\" title=\"三、DOM的用途\"></a>三、DOM的用途</h3><p>DOM 是用来访问或操作HTML文档、XHTML文档、XML文档中的节点元素。</p>\n<p>现在基本上所有的浏览器都都执行了W3C发布的DOM规范，所以在浏览器上就可以用DOM的这些API。</p>\n<h3 id=\"四、DOM与其他技术的联系\"><a href=\"#四、DOM与其他技术的联系\" class=\"headerlink\" title=\"四、DOM与其他技术的联系\"></a>四、DOM与其他技术的联系</h3><p>JavaScript 可以通过 DOM 来访问和操作HTML文档所有的元素。</p>\n<p>JavaScript是一种脚本语言，DOM是用来获得和操作HTML文档的节点属性。JavaScript通常是通过DOM来获得和操作HTML属性的。这就是二者的区别与联系。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    function test()&#123;</span><br><span class=\"line\">        window.alert(“成功。”);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;input type=button value=“提交” onclick=“test()”&gt;</span><br></pre></td></tr></table></figure>\n\n<p>把上述代码复制到一个文件里，改成.html扩展名后，打开此html文档，点击”提交”按钮会弹出”成功”对话框。</p>\n<p>其中：</p>\n<p>第1，2，4，5行是JavaScript代码。</p>\n<p>第3行是DOM代码（此行一定不要混淆成是JavaScript代码）。这就是JavaScript调用DOM的例子。</p>\n<p>第6行是html代码。</p>\n<h3 id=\"五、DOM详细说明\"><a href=\"#五、DOM详细说明\" class=\"headerlink\" title=\"五、DOM详细说明\"></a>五、DOM详细说明</h3><p>HTML文档是树状结构，根为<HTML>；DOM也是树状结构，根为window或document对象。</p>\n<p>所以DOM就可以把HTML以树状的形式呈现出来。</p>\n<h3 id=\"六、DOM的分类\"><a href=\"#六、DOM的分类\" class=\"headerlink\" title=\"六、DOM的分类\"></a>六、DOM的分类</h3><p>核心 DOM：定义了一套标准的可以针对任何文档的对象。</p>\n<p>HTML DOM：针对HTML文档的DOM。</p>\n<p>XML DOM：针对XML文档的DOM。</p>\n<h3 id=\"七、DOM的级别Level\"><a href=\"#七、DOM的级别Level\" class=\"headerlink\" title=\"七、DOM的级别Level\"></a>七、DOM的级别Level</h3><p>DOM0：不是W3C规范。</p>\n<p>DOM1：开始是W3C规范。专注于HTML文档和XML文档。</p>\n<p>DOM2：对DOM1增加了样式表对象模型</p>\n<p>DOM3：对DOM2增加了内容模型 (DTD 、Schemas) 和文档验证。</p>\n","categories":["Web","Front","css"],"tags":["js","dom"]},{"title":"Css-选择器笔记","url":"/js_css/","content":"<p>笔记分为两个部分，今天是CSS的选择器，以后还有一部分xPath的选择器。今天的笔记中包括44个选择器，基本涵盖了CSS 2和CSS 3的所有规定。</p>\n<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<p>CSS选择器笔记</p>\n<h2 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h2><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.</td>\n<td><code>*</code></td>\n<td>通用元素选择器，匹配任何元素</td>\n</tr>\n<tr>\n<td>2.</td>\n<td><code>E</code></td>\n<td>标签选择器，匹配所有使用E标签的元素</td>\n</tr>\n<tr>\n<td>3.</td>\n<td><code>.info</code></td>\n<td>class选择器，匹配所有class属性中包含info的元素</td>\n</tr>\n<tr>\n<td>4.</td>\n<td><code>#footer</code></td>\n<td>id选择器，匹配所有id属性等于footer的元素</td>\n</tr>\n</tbody></table>\n<p>实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123; margin:0; padding:0; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p &#123; font-size:2em; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.info &#123; background:#ff0; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p.info &#123; background:#ff0; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p.info.error &#123; color:#900; font-weight:bold; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#info &#123; background:#ff0; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p#info &#123; background:#ff0; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多元素的组合选择器\"><a href=\"#多元素的组合选择器\" class=\"headerlink\" title=\"多元素的组合选择器\"></a>多元素的组合选择器</h2><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5.</td>\n<td><code>E,F</code>\t多元素选择器，同时匹配所有E元素或F元素，E和F之间用逗号分隔</td>\n<td></td>\n</tr>\n<tr>\n<td>6.</td>\n<td><code>E F</code>\t后代元素选择器，匹配所有属于E元素后代的F元素，E和F之间用空格分隔</td>\n<td></td>\n</tr>\n<tr>\n<td>7.</td>\n<td><code>E &gt; F</code>\t子元素选择器，匹配所有E元素的子元素F</td>\n<td></td>\n</tr>\n<tr>\n<td>8.</td>\n<td><code>E + F</code>\t毗邻元素选择器，匹配所有紧随E元素之后的同级元素F</td>\n<td></td>\n</tr>\n<tr>\n<td>实例：</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">div p &#123; color:#f00; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#nav li &#123; display:inline; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#nav a &#123; font-weight:bold; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div &gt; strong &#123; color:#f00; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p + p &#123; color:#f00; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS-2-1-属性选择器\"><a href=\"#CSS-2-1-属性选择器\" class=\"headerlink\" title=\"CSS 2.1 属性选择器\"></a>CSS 2.1 属性选择器</h2><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>9.</td>\n<td><code>E[att]</code></td>\n<td>匹配所有具有att属性的E元素，不考虑它的值。（注意：E在此处可以省略，比如“[cheacked]”。以下同。）</td>\n</tr>\n<tr>\n<td>10.</td>\n<td><code>E[att=val]</code></td>\n<td>匹配所有att属性等于“val”的E元素</td>\n</tr>\n<tr>\n<td>11.</td>\n<td><code>E[att~=val]</code></td>\n<td>匹配所有att属性具有多个空格分隔的值、其中一个值等于“val”的E元素</td>\n</tr>\n<tr>\n<td>12.</td>\n<td><code>E[att&amp;#124;=val]</code></td>\n<td>匹配所有att属性具有多个连字号分隔（hyphen-separated）的值、其中一个值以“val”开头的E元素，主要用于lang属性，比如“en”、“en-us”、“en-gb”等等</td>\n</tr>\n</tbody></table>\n<p>实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">p</span><br><span class=\"line\"></span><br><span class=\"line\">&#123; color:#f00; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div[class=error] &#123; color:#f00; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">td[headers~=col1] &#123; color:#f00; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p[lang|=en] &#123; color:#f00; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">blockquote[class=quote][cite] &#123; color:#f00; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS-2-1中的伪类\"><a href=\"#CSS-2-1中的伪类\" class=\"headerlink\" title=\"CSS 2.1中的伪类\"></a>CSS 2.1中的伪类</h2><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>13.</td>\n<td><code>E:first-child</code></td>\n<td>匹配父元素的第一个子元素</td>\n</tr>\n<tr>\n<td>14.</td>\n<td><code>E:link</code></td>\n<td>匹配所有未被点击的链接</td>\n</tr>\n<tr>\n<td>15.</td>\n<td><code>E:visited</code></td>\n<td>匹配所有已被点击的链接</td>\n</tr>\n<tr>\n<td>16.</td>\n<td><code>E:active</code></td>\n<td>匹配鼠标已经其上按下、还没有释放的E元素</td>\n</tr>\n<tr>\n<td>17.</td>\n<td><code>E:hover</code></td>\n<td>匹配鼠标悬停其上的E元素</td>\n</tr>\n<tr>\n<td>18.</td>\n<td><code>E:focus</code></td>\n<td>匹配获得当前焦点的E元素</td>\n</tr>\n<tr>\n<td>19.</td>\n<td><code>E:lang(c)</code></td>\n<td>匹配lang属性等于c的E元素</td>\n</tr>\n<tr>\n<td>实例：</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">p:first-child &#123; font-style:italic; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">input[type=text]:focus &#123; color:#000; background:#ffe; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">input[type=text]:focus:hover &#123; background:#fff; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">q:lang(sv) &#123; quotes: “\\201D” “\\201D” “\\2019” “\\2019”; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS-2-1中的伪元素\"><a href=\"#CSS-2-1中的伪元素\" class=\"headerlink\" title=\"CSS 2.1中的伪元素\"></a>CSS 2.1中的伪元素</h2><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>20.</td>\n<td><code>E:first-line</code></td>\n<td>匹配E元素的第一行</td>\n</tr>\n<tr>\n<td>21.</td>\n<td><code>E:first-letter</code></td>\n<td>匹配E元素的第一个字母</td>\n</tr>\n<tr>\n<td>22.</td>\n<td><code>E:before</code></td>\n<td>在E元素之前插入生成的内容</td>\n</tr>\n<tr>\n<td>23.</td>\n<td><code>E:after</code></td>\n<td>在E元素之后插入生成的内容</td>\n</tr>\n</tbody></table>\n<p>实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">p:first-line &#123; font-weight:bold; color;#600; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.preamble:first-letter &#123; font-size:1.5em; font-weight:bold; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.cbb:before &#123; content:””; display:block; height:17px; width:18px; background:url(top.png) no-repeat 0 0; margin:0 0 0 -18px; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a:link:after &#123; content: ” (” attr(href) “) “; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS-3的同级元素通用选择器\"><a href=\"#CSS-3的同级元素通用选择器\" class=\"headerlink\" title=\"CSS 3的同级元素通用选择器\"></a>CSS 3的同级元素通用选择器</h2><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>24.</td>\n<td><code>E ~ F</code></td>\n<td>匹配任何在E元素之后的同级F元素</td>\n</tr>\n</tbody></table>\n<p>实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">p ~ ul &#123; background:#ff0; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS-3-属性选择器\"><a href=\"#CSS-3-属性选择器\" class=\"headerlink\" title=\"CSS 3 属性选择器\"></a>CSS 3 属性选择器</h2><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>25.</td>\n<td><code>E[att^=”val”]</code></td>\n<td>属性att的值以”val”开头的元素</td>\n</tr>\n<tr>\n<td>26.</td>\n<td><code>E[att$=”val”]</code></td>\n<td>属性att的值以”val”结尾的元素</td>\n</tr>\n<tr>\n<td>27.</td>\n<td><code>E[att*=”val”]</code></td>\n<td>属性att的值包含”val”字符串的元素</td>\n</tr>\n<tr>\n<td>实例：</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">div[id^=”nav”] &#123; background:#ff0; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS-3中与用户界面有关的伪类\"><a href=\"#CSS-3中与用户界面有关的伪类\" class=\"headerlink\" title=\"CSS 3中与用户界面有关的伪类\"></a>CSS 3中与用户界面有关的伪类</h2><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>28.</td>\n<td><code>E:enabled</code></td>\n<td>匹配表单中激活的元素</td>\n</tr>\n<tr>\n<td>29.</td>\n<td><code>E:disabled</code></td>\n<td>匹配表单中禁用的元素</td>\n</tr>\n<tr>\n<td>30.</td>\n<td><code>E:checked</code></td>\n<td>匹配表单中被选中的radio（单选框）或checkbox（复选框）元素</td>\n</tr>\n<tr>\n<td>31.</td>\n<td><code>E::selection</code></td>\n<td>匹配用户当前选中的元素</td>\n</tr>\n<tr>\n<td>实例：</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">input[type=”text”]:disabled &#123; background:#ddd; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS-3中的结构性伪类\"><a href=\"#CSS-3中的结构性伪类\" class=\"headerlink\" title=\"CSS 3中的结构性伪类\"></a>CSS 3中的结构性伪类</h2><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>32.</td>\n<td><code>E:root</code></td>\n<td>匹配文档的根元素，对于HTML文档，就是HTML元素</td>\n</tr>\n<tr>\n<td>33.</td>\n<td><code>E:nth-child(n)</code></td>\n<td>匹配其父元素的第n个子元素，第一个编号为1</td>\n</tr>\n<tr>\n<td>34.</td>\n<td><code>E:nth-last-child(n)</code></td>\n<td>匹配其父元素的倒数第n个子元素，第一个编号为1</td>\n</tr>\n<tr>\n<td>35.</td>\n<td><code>E:nth-of-type(n)</code></td>\n<td>与:nth-child()作用类似，但是仅匹配使用同种标签的元素</td>\n</tr>\n<tr>\n<td>36.</td>\n<td><code>E:nth-last-of-type(n)</code></td>\n<td>与:nth-last-child() 作用类似，但是仅匹配使用同种标签的元素</td>\n</tr>\n<tr>\n<td>37.</td>\n<td><code>E:last-child</code></td>\n<td>匹配父元素的最后一个子元素，等同于:nth-last-child(1)</td>\n</tr>\n<tr>\n<td>38.</td>\n<td><code>E:first-of-type</code></td>\n<td>匹配父元素下使用同种标签的第一个子元素，等同于:nth-of-type(1)</td>\n</tr>\n<tr>\n<td>39.</td>\n<td><code>E:last-of-type</code></td>\n<td>匹配父元素下使用同种标签的最后一个子元素，等同于:nth-last-of-type(1)</td>\n</tr>\n<tr>\n<td>40.</td>\n<td><code>E:only-child</code></td>\n<td>匹配父元素下仅有的一个子元素，等同于:first-child:last-child或 :nth-child(1):nth-last-child(1)</td>\n</tr>\n<tr>\n<td>41.</td>\n<td><code>E:only-of-type</code></td>\n<td>匹配父元素下使用同种标签的唯一一个子元素，等同于:first-of-type:last-of-type或 :nth-of-type(1):nth-last-of-type(1)</td>\n</tr>\n<tr>\n<td>42.</td>\n<td><code>E:empty</code></td>\n<td>匹配一个不包含任何子元素的元素，注意，文本节点也被看作子元素</td>\n</tr>\n<tr>\n<td>实例：</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">p:nth-child(3) &#123; color:#f00; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p:nth-child(odd) &#123; color:#f00; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p:nth-child(even) &#123; color:#f00; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p:nth-child(3n+0) &#123; color:#f00; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p:nth-child(3n) &#123; color:#f00; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tr:nth-child(2n+11) &#123; background:#ff0; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tr:nth-last-child(2) &#123; background:#ff0; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p:last-child &#123; background:#ff0; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p:only-child &#123; background:#ff0; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p:empty &#123; background:#ff0; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS-3的反选伪类\"><a href=\"#CSS-3的反选伪类\" class=\"headerlink\" title=\"CSS 3的反选伪类\"></a>CSS 3的反选伪类</h2><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>43.</td>\n<td><code>E:not(s)</code></td>\n<td>匹配不符合当前选择器的任何元素</td>\n</tr>\n<tr>\n<td>实例：</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">:not(p) &#123; border:1px solid #ccc; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS-3中的-target-伪类\"><a href=\"#CSS-3中的-target-伪类\" class=\"headerlink\" title=\"CSS 3中的 :target 伪类\"></a>CSS 3中的 :target 伪类</h2><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>44.</td>\n<td><code>E:target</code></td>\n<td>匹配文档中特定”id”点击后的效果</td>\n</tr>\n</tbody></table>\n<p>请参看HTML DOG上关于该选择器的<span class=\"exturl\" data-url=\"aHR0cDovL2h0bWxkb2cuY29tL2FydGljbGVzL3N1Y2tlcmZpc2gvdGFyZ2V0Lw==\">详细解释<i class=\"fa fa-external-link-alt\"></i></span>和<span class=\"exturl\" data-url=\"aHR0cDovL2h0bWxkb2cuY29tL2FydGljbGVzL3N1Y2tlcmZpc2gvdGFyZ2V0L2V4YW1wbGUv\">实例<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n","categories":["Web","Front","css"],"tags":["js","css"]},{"title":"DateRangePicker 中文化以及老版本的一些初始化问题，不能选择秒的问题","url":"/js_date_range_picker/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(&#x27;#headlineAddForm #rangeTime&#x27;).daterangepicker(&#123;  </span><br><span class=\"line\">        showDropdowns : true,  </span><br><span class=\"line\">        timePicker : true, //是否显示小时和分钟  </span><br><span class=\"line\">        timePicker24Hour: true,  </span><br><span class=\"line\">        timePickerIncrement : 1, //时间的增量，单位为分钟  </span><br><span class=\"line\">        timePickerSeconds : true,  </span><br><span class=\"line\">        linkedCalendars : false,  </span><br><span class=\"line\">        locale : &#123;  </span><br><span class=\"line\">            format: &quot;YYYY-MM-DD HH:mm:ss&quot;,  //控件中from和to 显示的日期格式  </span><br><span class=\"line\">            separator : &quot; - &quot;,  </span><br><span class=\"line\">            applyLabel : &quot;确定&quot;,  </span><br><span class=\"line\">            cancelLabel : &quot;取消&quot;,  </span><br><span class=\"line\">            fromLabel : &quot;开始&quot;,  </span><br><span class=\"line\">            toLabel: &quot;结束&quot;,  </span><br><span class=\"line\">            customRangeLabel : &quot;自定义&quot;,  </span><br><span class=\"line\">            weekLabel : &quot;W&quot;,  </span><br><span class=\"line\">            daysOfWeek : [&quot;日&quot;, &quot;一&quot;, &quot;二&quot;, &quot;三&quot;, &quot;四&quot;, &quot;五&quot;, &quot;六&quot;],  </span><br><span class=\"line\">            monthNames : [&quot;一月&quot;, &quot;二月&quot;, &quot;三月&quot;, &quot;四月&quot;, &quot;五月&quot;, &quot;六月&quot;, &quot;七月&quot;, &quot;八月&quot;, &quot;九月&quot;, &quot;十月&quot;, &quot;十一月&quot;, &quot;十二月 &quot;],  </span><br><span class=\"line\">            firstDay : 1  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;, function(start, end, label) &#123;  </span><br><span class=\"line\">        $(&quot;#headlineAddForm #startTime&quot;).val(start.unix());  </span><br><span class=\"line\">        $(&quot;#headlineAddForm #endTime&quot;).val(end.unix());  </span><br><span class=\"line\">    &#125;).on(&#x27;hide.daterangepicker&#x27;, function() &#123;  </span><br><span class=\"line\">        $(&#x27;#headlineAddForm&#x27;).data(&#x27;bootstrapValidator&#x27;).updateStatus(&#x27;rangeTime&#x27;, &#x27;NOT_VALIDATED&#x27;,null).validateField(&#x27;rangeTime&#x27;);  </span><br><span class=\"line\">    &#125;).on(&#x27;cancel.daterangepicker&#x27;, function() &#123;  </span><br><span class=\"line\">        $(&#x27;#headlineAddForm #rangeTime&#x27;).val(&quot;&quot;);  </span><br><span class=\"line\">        $(&#x27;#headlineAddForm&#x27;).data(&#x27;bootstrapValidator&#x27;).updateStatus(&#x27;rangeTime&#x27;, &#x27;NOT_VALIDATED&#x27;,null).validateField(&#x27;rangeTime&#x27;);  </span><br><span class=\"line\">    &#125;).on(&#x27;apply.daterangepicker&#x27;, function() &#123;  </span><br><span class=\"line\">        if($.trim($(&quot;#headlineAddForm #startTime&quot;).val()).length == 0) &#123;  </span><br><span class=\"line\">            $(&#x27;#headlineAddForm #rangeTime&#x27;).val(&quot;&quot;);  </span><br><span class=\"line\">            $(&#x27;#headlineAddForm&#x27;).data(&#x27;bootstrapValidator&#x27;).updateStatus(&#x27;rangeTime&#x27;, &#x27;NOT_VALIDATED&#x27;,null).validateField(&#x27;rangeTime&#x27;);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">&#125;);  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(&#x27;#headlineModifyForm #rangeTime&#x27;).daterangepicker(&#123;  </span><br><span class=\"line\">       showDropdowns : true,  </span><br><span class=\"line\">       timePicker : true, //是否显示小时和分钟  </span><br><span class=\"line\">       timePicker24Hour: true,  </span><br><span class=\"line\">       timePickerIncrement : 1, //时间的增量，单位为分钟  </span><br><span class=\"line\">       timePickerSeconds : true,  </span><br><span class=\"line\">       linkedCalendars : false,  </span><br><span class=\"line\">       locale : &#123;  </span><br><span class=\"line\">           format: &quot;YYYY-MM-DD HH:mm:ss&quot;,  //控件中from和to 显示的日期格式  </span><br><span class=\"line\">           separator : &quot; - &quot;,  </span><br><span class=\"line\">           applyLabel : &quot;确定&quot;,  </span><br><span class=\"line\">           cancelLabel : &quot;取消&quot;,  </span><br><span class=\"line\">           fromLabel : &quot;开始&quot;,  </span><br><span class=\"line\">           toLabel: &quot;结束&quot;,  </span><br><span class=\"line\">           customRangeLabel : &quot;自定义&quot;,  </span><br><span class=\"line\">           weekLabel : &quot;W&quot;,  </span><br><span class=\"line\">           daysOfWeek : [&quot;日&quot;, &quot;一&quot;, &quot;二&quot;, &quot;三&quot;, &quot;四&quot;, &quot;五&quot;, &quot;六&quot;],  </span><br><span class=\"line\">           monthNames : [&quot;一月&quot;, &quot;二月&quot;, &quot;三月&quot;, &quot;四月&quot;, &quot;五月&quot;, &quot;六月&quot;, &quot;七月&quot;, &quot;八月&quot;, &quot;九月&quot;, &quot;十月&quot;, &quot;十一月&quot;, &quot;十二月 &quot;],  </span><br><span class=\"line\">           firstDay : 1  </span><br><span class=\"line\">       &#125;  </span><br><span class=\"line\">   &#125;, function(start, end, label) &#123;  </span><br><span class=\"line\">       $(&quot;#headlineModifyForm #startTime&quot;).val(start.unix());  </span><br><span class=\"line\">       $(&quot;#headlineModifyForm #endTime&quot;).val(end.unix());  </span><br><span class=\"line\">   &#125;).on(&#x27;hide.daterangepicker&#x27;, function() &#123;  </span><br><span class=\"line\">       $(&#x27;#headlineModifyForm&#x27;).data(&#x27;bootstrapValidator&#x27;).updateStatus(&#x27;rangeTime&#x27;, &#x27;NOT_VALIDATED&#x27;,null).validateField(&#x27;rangeTime&#x27;);  </span><br><span class=\"line\">   &#125;);  </span><br></pre></td></tr></table></figure>","categories":["Web","Front","js"],"tags":["js","DateRangePicker"]},{"title":"Javascript时间戳和日期字符串相互转换","url":"/js_time_string/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">// 获取当前时间戳(以s为单位)</span><br><span class=\"line\">var timestamp = Date.parse(new Date());</span><br><span class=\"line\">timestamp = timestamp / 1000;</span><br><span class=\"line\">//当前时间戳为：1403149534</span><br><span class=\"line\">console.log(&quot;当前时间戳为：&quot; + timestamp);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取某个时间格式的时间戳</span><br><span class=\"line\">var stringTime = &quot;2014-07-10 10:21:12&quot;;</span><br><span class=\"line\">var timestamp2 = Date.parse(new Date(stringTime));</span><br><span class=\"line\">timestamp2 = timestamp2 / 1000;</span><br><span class=\"line\">//2014-07-10 10:21:12的时间戳为：1404958872 </span><br><span class=\"line\">console.log(stringTime + &quot;的时间戳为：&quot; + timestamp2);</span><br><span class=\"line\"></span><br><span class=\"line\">// 将当前时间换成时间格式字符串</span><br><span class=\"line\">var timestamp3 = 1403058804;</span><br><span class=\"line\">var newDate = new Date();</span><br><span class=\"line\">newDate.setTime(timestamp3 * 1000);</span><br><span class=\"line\">// Wed Jun 18 2014 </span><br><span class=\"line\">console.log(newDate.toDateString());</span><br><span class=\"line\">// Wed, 18 Jun 2014 02:33:24 GMT </span><br><span class=\"line\">console.log(newDate.toGMTString());</span><br><span class=\"line\">// 2014-06-18T02:33:24.000Z</span><br><span class=\"line\">console.log(newDate.toISOString());</span><br><span class=\"line\">// 2014-06-18T02:33:24.000Z </span><br><span class=\"line\">console.log(newDate.toJSON());</span><br><span class=\"line\">// 2014年6月18日 </span><br><span class=\"line\">console.log(newDate.toLocaleDateString());</span><br><span class=\"line\">// 2014年6月18日 上午10:33:24 </span><br><span class=\"line\">console.log(newDate.toLocaleString());</span><br><span class=\"line\">// 上午10:33:24 </span><br><span class=\"line\">console.log(newDate.toLocaleTimeString());</span><br><span class=\"line\">// Wed Jun 18 2014 10:33:24 GMT+0800 (中国标准时间)</span><br><span class=\"line\">console.log(newDate.toString());</span><br><span class=\"line\">// 10:33:24 GMT+0800 (中国标准时间) </span><br><span class=\"line\">console.log(newDate.toTimeString());</span><br><span class=\"line\">// Wed, 18 Jun 2014 02:33:24 GMT</span><br><span class=\"line\">console.log(newDate.toUTCString());</span><br><span class=\"line\"></span><br><span class=\"line\">Date.prototype.format = function(format) &#123;</span><br><span class=\"line\">       var date = &#123;</span><br><span class=\"line\">              &quot;M+&quot;: this.getMonth() + 1,</span><br><span class=\"line\">              &quot;d+&quot;: this.getDate(),</span><br><span class=\"line\">              &quot;h+&quot;: this.getHours(),</span><br><span class=\"line\">              &quot;m+&quot;: this.getMinutes(),</span><br><span class=\"line\">              &quot;s+&quot;: this.getSeconds(),</span><br><span class=\"line\">              &quot;q+&quot;: Math.floor((this.getMonth() + 3) / 3),</span><br><span class=\"line\">              &quot;S+&quot;: this.getMilliseconds()</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       if (/(y+)/i.test(format)) &#123;</span><br><span class=\"line\">              format = format.replace(RegExp.$1, (this.getFullYear() + &#x27;&#x27;).substr(4 - RegExp.$1.length));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       for (var k in date) &#123;</span><br><span class=\"line\">              if (new RegExp(&quot;(&quot; + k + &quot;)&quot;).test(format)) &#123;</span><br><span class=\"line\">                     format = format.replace(RegExp.$1, RegExp.$1.length == 1</span><br><span class=\"line\">                            ? date[k] : (&quot;00&quot; + date[k]).substr((&quot;&quot; + date[k]).length));</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return format;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(newDate.format(&#x27;yyyy-MM-dd h:m:s&#x27;));</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>","categories":["Web","Front","js"],"tags":["js"]},{"title":"Js-apply方法的使用详细解析","url":"/js_apply/","content":"<p>1、对象的继承，一般的做法是复制：<code>Object.extend</code><br>prototype.js的实现方式是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\">extend</span> = <span class=\"keyword\">function</span>(<span class=\"params\">destination, source</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (property <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">    destination[property] = source[property];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> destination;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除此之外，还有种方法，就是：<code>Function.apply</code>（当然使用<code>Function.call</code>也是可以的）</p>\n<p><code>apply</code>方法能劫持另外一个对象的方法，继承另外一个对象的属性</p>\n<p><code>Function.apply(obj,args)</code>方法能接收两个参数</p>\n<p>obj：这个对象将代替Function类里this对象</p>\n<p>args：这个是数组，它将作为参数传给Function（args–&gt;arguments）</p>\n<p>apply示范代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age</span>)&#123; <span class=\"comment\">//定义一个类，人类</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>=name; <span class=\"comment\">//名字</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span>=age; <span class=\"comment\">//年龄</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">sayhello</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"title function_\">alert</span>(“hello”)&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Print</span>(<span class=\"params\"></span>)&#123;<span class=\"comment\">//显示类的属性</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">funcName</span>=”<span class=\"title class_\">Print</span>”;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">show</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> msg=[];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> <span class=\"variable language_\">this</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"title function_\">typeof</span>(<span class=\"variable language_\">this</span>[key])!=”<span class=\"keyword\">function</span>”)&#123;</span><br><span class=\"line\">        msg.<span class=\"title function_\">push</span>([key,”:”,<span class=\"variable language_\">this</span>[key]].<span class=\"title function_\">join</span>(“”));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(msg.<span class=\"title function_\">join</span>(” “));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\">name,age,grade,school</span>)&#123; <span class=\"comment\">//学生类</span></span><br><span class=\"line\">  <span class=\"title class_\">Person</span>.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>,<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">  <span class=\"title class_\">Print</span>.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>,<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">grade</span>=grade; <span class=\"comment\">//年级</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">school</span>=school; <span class=\"comment\">//学校</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(“jake”,<span class=\"number\">10</span>);</span><br><span class=\"line\">p1.<span class=\"title function_\">sayhello</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s1=<span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(“tom”,<span class=\"number\">13</span>,<span class=\"number\">6</span>,”清华小学”);</span><br><span class=\"line\">s1.<span class=\"title function_\">show</span>();</span><br><span class=\"line\">s1.<span class=\"title function_\">sayhello</span>();</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(s1.<span class=\"property\">funcName</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>学生类本来不具备任何方法，但是在<code>Person.apply(this,arguments)</code>后，他就具备了Person类的sayhello方法和所有属性。</p>\n<p>在<code>Print.apply(this,arguments)</code>后就自动得到了<code>show()</code>方法</p>\n<p>2、利用Apply的参数数组化来提高</p>\n<p><code>Function.apply()</code>在提升程序性能方面的技巧</p>\n<p>我们先从<code>Math.max()</code>函数说起，<code>Math.max</code>后面可以接任意个参数，最后返回所有参数中的最大值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">5</span>,<span class=\"number\">8</span>)) <span class=\"comment\">//8</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>)) <span class=\"comment\">//9</span></span><br></pre></td></tr></table></figure>\n\n<p>但是在很多情况下，我们需要找出数组中最大的元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(arr)); <span class=\"comment\">// 这样却是不行的。一定要这样写function getMax(arr)&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrLen=arr.<span class=\"property\">length</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>,ret=arr[<span class=\"number\">0</span>];i&lt;arrLen;i++)&#123;</span><br><span class=\"line\">  ret=<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(ret,arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样写麻烦而且低效。如果用<code>apply</code>呢，看代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getMax2</span>(<span class=\"params\">arr</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"property\">max</span>.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>,arr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两段代码达到了同样的目的，但是getMax2却优雅，高效，简洁得多。</p>\n<p>再比如数组的push方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1=[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2=[<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<p>如果我们要把 <code>arr2</code>展开，然后一个一个追加到arr1中去，最后让<code>arr1=[1,3,4,3,4,5]</code><br><code>arr1.push(arr2)</code>显然是不行的。 因为这样做会得到<code>[1,3,4,[3,4,5]]</code></p>\n<p>我们只能用一个循环去一个一个的<code>push</code>(当然也可以用<code>arr1.concat(arr2)</code>，但是<code>concat</code>方法并不改变arr1本身)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arrLen = arr2.<span class=\"property\">length</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arrLen;i++)&#123;</span><br><span class=\"line\">  arr1.<span class=\"title function_\">push</span>(arr2[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自从有了Apply,事情就变得如此简单</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span>.<span class=\"title function_\">apply</span>(arr1,arr2)</span><br></pre></td></tr></table></figure>","categories":["Web","Front","js"],"tags":["js","apply"]},{"title":"Npm加速设置镜像站","url":"/js_npm_soon/","content":"<p>由于 npm官方站总是抽风, 安装时下载速度很慢甚至连接不上, 怎么办呢?<br>我们可以切换到npm的镜像站点</p>\n<p>1.npm install 时临时指定镜像源:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install –registry http://registry.cnpmjs.org express #从中国镜像安装express</span><br></pre></td></tr></table></figure>\n<p>2.永久设置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm config set registry http://registry.cnpmjs.org  #设置为中国镜像</span><br></pre></td></tr></table></figure>\n<p>然后照常使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install express 即可</span><br></pre></td></tr></table></figure>\n<p>3.使用cnmp</p>\n<p>你可以使用我们定制的 <code>cnpm</code> (gzip 压缩支持) 命令行工具代替默认的 npm:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>或者你直接通过添加 <code>npm</code> 参数 <code>alias</code> 一个新命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">alias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \\</span><br><span class=\"line\">--cache=$HOME/.npm/.cache/cnpm \\</span><br><span class=\"line\">--disturl=https://npm.taobao.org/dist \\</span><br><span class=\"line\">--userconfig=$HOME/.cnpmrc&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Or alias it in .bashrc or .zshrc</span><br><span class=\"line\">$ echo &#x27;\\n#alias for cnpm\\nalias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \\</span><br><span class=\"line\">  --cache=$HOME/.npm/.cache/cnpm \\</span><br><span class=\"line\">  --disturl=https://npm.taobao.org/dist \\</span><br><span class=\"line\">  --userconfig=$HOME/.cnpmrc&quot;&#x27; &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n\n<p>目前已知的npm 镜像源站点:</p>\n<p>淘宝镜像cnmp：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ucG0udGFvYmFvLm9yZy8=\">https://npm.taobao.org/<i class=\"fa fa-external-link-alt\"></i></span><br>中国镜像站: <span class=\"exturl\" data-url=\"aHR0cDovL3JlZ2lzdHJ5LmNucG1qcy5vcmcv\">http://registry.cnpmjs.org<i class=\"fa fa-external-link-alt\"></i></span><br>官方站: <span class=\"exturl\" data-url=\"aHR0cDovL3JlZ2lzdHJ5Lm5wbWpzLm9yZy8=\">http://registry.npmjs.org<i class=\"fa fa-external-link-alt\"></i></span><br>各国镜像:<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWdpc3RyeS5ub2Rlaml0c3UuY29tLw==\">https://registry.nodejitsu.com<i class=\"fa fa-external-link-alt\"></i></span>  美国<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ucG0uc3Ryb25nbG9vcC5jb20v\">https://npm.strongloop.com<i class=\"fa fa-external-link-alt\"></i></span> 美国<br><span class=\"exturl\" data-url=\"aHR0cDovL3JlZ2lzdHJ5Lm5wbWpzLm9yZy5hdS8=\">http://registry.npmjs.org.au<i class=\"fa fa-external-link-alt\"></i></span> 澳大利亚<br><span class=\"exturl\" data-url=\"aHR0cDovL3JlZ2lzdHJ5Lm5wbWpzLmV1Lw==\">http://registry.npmjs.eu<i class=\"fa fa-external-link-alt\"></i></span> 德国</p>\n","categories":["Web","Front","js"],"tags":["js","node"]},{"title":"PM2使用介绍","url":"/js_pm2/","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>PM2 是一个带有负载均衡功能的 Node 应用的进程管理器。</p>\n<p>当你要把你的独立代码利用全部的服务器上的所有 CPU，并保证进程永远都活着，0 秒的重载， PM2 是完美的。它非常适合 IaaS 结构，但不要把它用于 PaaS 方案（随后将开发 Paas 的解决方案）。</p>\n<p>备注：<br><code>SaaS</code>、<code>PaaS</code> 和 <code>IaaS</code> 是云服务模式</p>\n<p><code>SaaS</code> 软件即服务，例如 Google 的 Gmail 邮箱服务，面向应用型用户<br><code>PaaS</code> 平台即服务，例如 Google 的 GAE，面向开发型用户<br><code>IaaS</code> 基础架构即服务，例如亚马逊的 AWS，IaaS 对于不知道新推出的应用程序&#x2F;网站会有多成功的创业公司来说非常有用</p>\n<p>云服务模式：SaaS、PaaS 和 IaaS，哪一种适合你？</p>\n<h3 id=\"主要特性\"><a href=\"#主要特性\" class=\"headerlink\" title=\"主要特性\"></a>主要特性</h3><p>内建负载均衡（使用 Node cluster 集群模块）<br>后台运行<br>0 秒停机重载，我理解大概意思是维护升级的时候不需要停机.<br>具有 Ubuntu 和 CentOS 的启动脚本<br>停止不稳定的进程（避免无限循环）<br>控制台检测<br>提供 HTTP API<br>远程控制和实时的接口 API ( Nodejs 模块，允许和 PM2 进程管理器交互 )<br>测试过 Nodejs v0.11&#x2F;v0.10&#x2F;v0.8 版本，兼容 CoffeeScript，基于 Linux 和 MacOS。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 第一种方式</span><br><span class=\"line\">npm install -g pm2</span><br><span class=\"line\"># 第二种方式</span><br><span class=\"line\">$ git clone https://github.com/Unitech/pm2.git</span><br><span class=\"line\">$ cd pm2</span><br><span class=\"line\">$ npm install  # 或者 npm install --dev ，如果devDependencies 没有安装</span><br><span class=\"line\">$ npm test</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install pm2 -g     # 命令行安装 pm2 </span><br><span class=\"line\">$ pm2 start app.js -i 4  # 后台运行pm2，启动4个app.js </span><br><span class=\"line\">                         # 也可以把&#x27;max&#x27; 参数传递给 start</span><br><span class=\"line\">                         # 正确的进程数目依赖于Cpu的核心数目</span><br><span class=\"line\">$ pm2 start app.js --name my-api # 命名进程</span><br><span class=\"line\">$ pm2 list               # 显示所有进程状态</span><br><span class=\"line\">$ pm2 monit              # 监视所有进程</span><br><span class=\"line\">$ pm2 logs               # 显示所有进程日志</span><br><span class=\"line\">$ pm2 stop all           # 停止所有进程</span><br><span class=\"line\">$ pm2 restart all        # 重启所有进程</span><br><span class=\"line\">$ pm2 reload all         # 0 秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class=\"line\">$ pm2 stop 0             # 停止指定的进程</span><br><span class=\"line\">$ pm2 restart 0          # 重启指定的进程</span><br><span class=\"line\">$ pm2 startup            # 产生 init 脚本 保持进程活着</span><br><span class=\"line\">$ pm2 web                # 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class=\"line\">$ pm2 delete 0           # 杀死指定的进程</span><br><span class=\"line\">$ pm2 delete all         # 杀死全部进程</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行进程的不同方式\"><a href=\"#运行进程的不同方式\" class=\"headerlink\" title=\"运行进程的不同方式\"></a>运行进程的不同方式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pm2 start app.js -i max    # 根据有效CPU数目启动最大进程数目</span><br><span class=\"line\">$ pm2 start app.js -i 3      # 启动3个进程</span><br><span class=\"line\">$ pm2 start app.js -x        #用fork模式启动 app.js 而不是使用 cluster</span><br><span class=\"line\">$ pm2 start app.js -x -- -a 23   # 用fork模式启动 app.js 并且传递参数 (-a 23)</span><br><span class=\"line\">$ pm2 start app.js --name serverone  # 启动一个进程并把它命名为 serverone</span><br><span class=\"line\">$ pm2 stop serverone       # 停止 serverone 进程</span><br><span class=\"line\">$ pm2 start app.json        # 启动进程, 在 app.json里设置选项</span><br><span class=\"line\">$ pm2 start app.js -i max -- -a 23                   #在--之后给 app.js 传递参数</span><br><span class=\"line\">$ pm2 start app.js -i max -e err.log -o out.log  # 启动 并 生成一个配置文件</span><br></pre></td></tr></table></figure>\n\n<p>你也可以执行用其他语言编写的app  ( fork 模式):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pm2 start my-bash-script.sh    -x --interpreter bash</span><br><span class=\"line\">$ pm2 start my-python-script.py -x --interpreter python</span><br></pre></td></tr></table></figure>\n<p>0 秒停机重载：这项功能允许你重新载入代码而不用失去请求连接。</p>\n<p>注意：<br>仅能用于 web 应用<br>运行于 <code>Node 0.11.x </code>版本<br>运行于 <code>cluster</code> 模式（默认模式）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pm2 reload all</span><br><span class=\"line\">CoffeeScript:</span><br><span class=\"line\">$ pm2 start my_app.coffee  #这就是全部</span><br></pre></td></tr></table></figure>","categories":["Web","Front","js"],"tags":["pm2","js"]},{"title":"Js-事件代理和委托","url":"/js_event_agent_delegate/","content":"<p>在javasript中<code>delegate</code>这个词经常出现，看字面的意思，代理、委托。那么它究竟在什么样的情况下使用？它的原理又是什么？在各种框架中，也经常能看到<code>delegate</code>相关的接口。这些接口又有什么特殊的用法呢？这篇文章就主要介绍一下<code>javascript delegate</code>的用法和原理，以及<code>Dojo</code>，<code>jQuery</code>等框架中<code>delegate</code>的接口。</p>\n<h3 id=\"JavaScript事件代理\"><a href=\"#JavaScript事件代理\" class=\"headerlink\" title=\"JavaScript事件代理\"></a>JavaScript事件代理</h3><p>首先介绍一下JavaScript的事件代理。事件代理在JS世界中一个非常有用也很有趣的功能。当我们需要对很多元素添加事件的时候，可以通过将事件添加到它们的父节点而将事件委托给父节点来触发处理函数。这主要得益于浏览器的事件冒泡机制，后面会详细介绍。下面我们具体举个例子来解释如何使用这个特性。这个例子主要取自<span class=\"exturl\" data-url=\"aHR0cDovL2Rhdmlkd2Fsc2gubmFtZS8=\">David Walsh<i class=\"fa fa-external-link-alt\"></i></span>的相关<span class=\"exturl\" data-url=\"aHR0cDovL2Rhdmlkd2Fsc2gubmFtZS9ldmVudC1kZWxlZ2F0ZQ==\">文章（How JavaScript Event Delegation Works）<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<p>假设有一个 UL 的父节点，包含了很多个 Li 的子节点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul id=&quot;parent-list&quot;&gt;</span><br><span class=\"line\">  &lt;li id=&quot;post-1&quot;&gt;Item 1&lt;/li&gt;</span><br><span class=\"line\">  &lt;li id=&quot;post-2&quot;&gt;Item 2&lt;/li&gt;</span><br><span class=\"line\">  &lt;li id=&quot;post-3&quot;&gt;Item 3&lt;/li&gt;</span><br><span class=\"line\">  &lt;li id=&quot;post-4&quot;&gt;Item 4&lt;/li&gt;</span><br><span class=\"line\">  &lt;li id=&quot;post-5&quot;&gt;Item 5&lt;/li&gt;</span><br><span class=\"line\">  &lt;li id=&quot;post-6&quot;&gt;Item 6&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当我们的鼠标移到Li上的时候，需要获取此Li的相关信息并飘出悬浮窗以显示详细信息，或者当某个Li被点击的时候需要触发相应的处理事件。我们通常的写法，是为每个Li都添加一些类似onMouseOver或者onClick之类的事件监听。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function addListeners4Li(liNode)&#123;</span><br><span class=\"line\">    liNode.onclick = function clickHandler()&#123;...&#125;;</span><br><span class=\"line\">    liNode.onmouseover = function mouseOverHandler()&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function()&#123;</span><br><span class=\"line\">    var ulNode = document.getElementById(&quot;parent-list&quot;);</span><br><span class=\"line\">    var liNodes = ulNode.getElementByTagName(&quot;Li&quot;);</span><br><span class=\"line\">    for(var i=0, l = liNodes.length; i &lt; l; i++)&#123;</span><br><span class=\"line\">        addListeners4Li(liNodes[i]);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果这个UL中的Li子元素会频繁地添加或者删除，我们就需要在每次添加Li的时候都调用这个addListeners4Li方法来为每个Li节点添加事件处理函数。这就添加的复杂度和出错的可能性。 更简单的方法是使用事件代理机制，当事件被抛到更上层的父节点的时候，我们通过检查事件的目标对象（target）来判断并获取事件源Li。下面的代码可以完成我们想要的效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 获取父节点，并为它添加一个click事件</span><br><span class=\"line\">document.getElementById(&quot;parent-list&quot;).addEventListener(&quot;click&quot;,function(e) &#123;</span><br><span class=\"line\">  // 检查事件源e.targe是否为Li</span><br><span class=\"line\">  if(e.target &amp;&amp; e.target.nodeName.toUpperCase == &quot;LI&quot;) &#123;</span><br><span class=\"line\">    // 真正的处理过程在这里</span><br><span class=\"line\">    console.log(&quot;List item &quot;,e.target.id.replace(&quot;post-&quot;),&quot; was clicked!&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>为父节点添加一个click事件，当子节点被点击的时候，click事件会从子节点开始向上冒泡。父节点捕获到事件之后，通过判断e.target.nodeName来判断是否为我们需要处理的节点。并且通过e.target拿到了被点击的Li节点。从而可以获取到相应的信息，并作处理。</p>\n<h3 id=\"事件冒泡及捕获\"><a href=\"#事件冒泡及捕获\" class=\"headerlink\" title=\"事件冒泡及捕获\"></a>事件冒泡及捕获</h3><p>之前的介绍中已经说到了浏览器的事件冒泡机制。这里再详细介绍一下浏览器处理DOM事件的过程。对于事件的捕获和处理，不同的浏览器厂商有不同的处理机制，这里我们主要介绍W3C对DOM2.0定义的标准事件。<br>DOM2.0模型将事件处理流程分为三个阶段：<br>一、事件捕获阶段，<br>二、事件目标阶段，<br>三、事件起泡阶段。</p>\n<p>如图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190422143028.png\"></p>\n<p>事件捕获：当某个元素触发某个事件（如onclick），顶层对象document就会发出一个事件流，随着DOM树的节点向目标元素节点流去，直到到达事件真正发生的目标元素。在这个过程中，事件相应的监听函数是不会被触发的。 </p>\n<p>事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。 </p>\n<p>事件起泡：从目标元素开始，往顶层元素传播。途中如果有节点绑定了相应的事件处理函数，这些函数都会被一次触发。如果想阻止事件起泡，可以使用e.stopPropagation()（Firefox）或者e.cancelBubble&#x3D;true（IE）来组织事件的冒泡传播。</p>\n<h3 id=\"jQuery和Dojo中delegate函数\"><a href=\"#jQuery和Dojo中delegate函数\" class=\"headerlink\" title=\"jQuery和Dojo中delegate函数\"></a>jQuery和Dojo中delegate函数</h3><p>下面看一下Dojo和jQuery中提供的事件代理接口的使用方法。 首先是jQuery：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(&quot;#link-list&quot;).delegate(&quot;a&quot;, &quot;click&quot;, function()&#123;</span><br><span class=\"line\">  // &quot;$(this)&quot; is the node that was clicked</span><br><span class=\"line\">  console.log(&quot;you clicked a link!&quot;,$(this));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>jQuery的delegate的方法需要三个参数，一个选择器，一个时间名称，和事件处理函数。 而Dojo的与jQuery相似，仅是两者的编程风格上的差别：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">require([&quot;dojo/query&quot;,&quot;dojox/NodeList/delegate&quot;], function(query,delegate)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    query(&quot;#link-list&quot;).delegate(&quot;a&quot;,&quot;onclick&quot;,function(event) &#123;</span><br><span class=\"line\">    // &quot;this.node&quot; is the node that was clicked</span><br><span class=\"line\">    console.log(&quot;you clicked a link!&quot;,this);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Dojo的delegate模块在dojox.NodeList中，提供的接口与jQuery一样，参数也相同。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>通过上面的介绍，大家应该能够体会到使用事件委托对于web应用程序带来的几个优点：<br>1.管理的函数变少了。不需要为每个元素都添加监听函数。对于同一个父节点下面类似的子元素，可以通过委托给父元素的监听函数来处理事件。 </p>\n<p>2.可以方便地动态添加和修改元素，不需要因为元素的改动而修改事件绑定。 </p>\n<p>3.JavaScript和DOM节点之间的关联变少了，这样也就减少了因循环引用而带来的内存泄漏发生的概率。 写到这里，突然想起了之前对于Dojo DataGrid的困惑：那么多的rows和cells，如何处理他们事件之间的关系。现在想想，使用委托就很简单了。所有的事件委托到grid最外层的节点上，当事件发生的时候通过一些方法来获取和添加事件的额外属性，如rowIndex, cellIndex，之后在分配到onRowClick,onCellClick之类的处理函数上。</p>\n<h3 id=\"在JavaScript编程中使用代理\"><a href=\"#在JavaScript编程中使用代理\" class=\"headerlink\" title=\"在JavaScript编程中使用代理\"></a>在JavaScript编程中使用代理</h3><p>上面介绍的是对DOM事件处理时，利用浏览器冒泡机制为DOM元素添加事件代理。其实在纯JS编程中，我们也可以使用这样的编程模式，来创建代理对象来操作目标对象。这里引用<span class=\"exturl\" data-url=\"aHR0cDovL2hvbWUuY25ibG9ncy5jb20vdS9ydWJ5bG91dnJlLw==\">司徒正美<i class=\"fa fa-external-link-alt\"></i></span>相关<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9ydWJ5bG91dnJlL2FyY2hpdmUvMjAwOS8wOC8wOS8xNTQyMTc0Lmh0bWw=\">文章<i class=\"fa fa-external-link-alt\"></i></span>中的一个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var delegate = function(client, clientMethod) &#123;</span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">        return clientMethod.apply(client, arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var ClassA = function() &#123;</span><br><span class=\"line\">    var _color = &quot;red&quot;;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        getColor: function() &#123;</span><br><span class=\"line\">            console.log(&quot;Color: &quot; + _color);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        setColor: function(color) &#123;</span><br><span class=\"line\">            _color = color;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = new ClassA();</span><br><span class=\"line\">a.getColor();</span><br><span class=\"line\">a.setColor(&quot;green&quot;);</span><br><span class=\"line\">a.getColor();</span><br><span class=\"line\">console.log(&quot;执行代理！&quot;);</span><br><span class=\"line\">var d = delegate(a, a.setColor);</span><br><span class=\"line\">d(&quot;blue&quot;);</span><br><span class=\"line\">console.log(&quot;执行完毕！&quot;);</span><br><span class=\"line\">a.getColor();</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中，通过调用delegate()函数创建的代理函数d来操作对a的修改。这种方式尽管是使用了apply（call也可以）来实现了调用对象的转移，但是从编程模式上实现了对某些对象的隐藏，可以保护这些对象不被随便访问和修改。 在很多框架中都引用了委托这个概念用来指定方法的运行作用域。比较典型的如dojo.hitch(scope,method)和ExtJS的createDelegate(obj,args)。有兴趣的同学可以看一下他们的源代码，主要也是js函数的apply方法来制定执行作用域。</p>\n","categories":["Web","Front","js"],"tags":["js"]},{"title":"JS判断手机端是否安装了某个客户端APP","url":"/js_app_check/","content":"<p>虽然在Js中可以启动某个app，但是并不能判断该app是否安装；</p>\n<p>但是，但是….还是有奇思淫巧滴，启动app需要的时间较长，js中断时间长，如果没安装，js瞬间就执行完毕。直接上代码吧！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function testApp(url) &#123;</span><br><span class=\"line\">    var timeout, t = 1000, hasApp = true;</span><br><span class=\"line\">    setTimeout(function () &#123;</span><br><span class=\"line\">        if (hasApp) &#123;</span><br><span class=\"line\">            alert(&#x27;安装了app&#x27;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            alert(&#x27;未安装app&#x27;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        document.body.removeChild(ifr);</span><br><span class=\"line\">    &#125;, 2000)</span><br><span class=\"line\"></span><br><span class=\"line\">    var t1 = Date.now();</span><br><span class=\"line\">    var ifr = document.createElement(&quot;iframe&quot;);</span><br><span class=\"line\">    ifr.setAttribute(&#x27;src&#x27;, url);</span><br><span class=\"line\">    ifr.setAttribute(&#x27;style&#x27;, &#x27;display:none&#x27;);</span><br><span class=\"line\">    document.body.appendChild(ifr);</span><br><span class=\"line\">    timeout = setTimeout(function () &#123;</span><br><span class=\"line\">         var t2 = Date.now();</span><br><span class=\"line\">         if (!t1 || t2 - t1 &lt; t + 100) &#123;</span><br><span class=\"line\">             hasApp = false;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;, t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function isInstalled()&#123;</span><br><span class=\"line\">        var the_href=$(&quot;.down_app&quot;).attr(&quot;href&quot;);//获得下载链接</span><br><span class=\"line\">        window.location=&quot;apps custom url schemes&quot;;//打开某手机上的某个app应用</span><br><span class=\"line\">        setTimeout(function()&#123;</span><br><span class=\"line\">            window.location=the_href;//如果超时就跳转到app下载页</span><br><span class=\"line\">        &#125;,500);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>apps custom url schemes</code>是什么呢？</p>\n<p>其实就是你与app约定的一个协议URL，在IOS客户端或者Android客户端中可以设置一个URL Scheme。例如，设置<code>URL Scheme：app</code>，然后其他的程序就可以通过<code>URLString=app://</code>调用该应用。还可以传参数，如：<code>app://reaction/?uid=1</code></p>\n<p>以上介绍了怎么创建该本地协议及调用该本地协议的方法。但这里还有个关键就是怎么判断用户是否安装了该呢？原理如下：</p>\n<p>在手机浏览器中用js代码请求该协议，如果在500ms内，如果有应用程序能解析这个协议，那么就能打开该应用；如果超过500ms就跳转到app下载页。</p>\n","categories":["Web","Front","js"],"tags":["js"]},{"title":"利用PushState开发无刷页面切换","url":"/js_pushstate/","content":"<h2 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h2><p>1.页面的跳转（前进后退，点击等）不重新请求页面<br>2.页面URL与页面展现内容一致（符合人们对传统网页的认识）<br>3.在不支持的浏览器下降级成传统网页的方式</p>\n<h2 id=\"使用到的API\"><a href=\"#使用到的API\" class=\"headerlink\" title=\"使用到的API\"></a>使用到的API</h2><h3 id=\"history-state\"><a href=\"#history-state\" class=\"headerlink\" title=\"history.state\"></a>history.state</h3><p>当前URL下对应的状态信息。如果当前URL不是通过pushState或者replaceState产生的，那么history.state是null。</p>\n<h3 id=\"history-pushState-state-title-url\"><a href=\"#history-pushState-state-title-url\" class=\"headerlink\" title=\"history.pushState(state, title, url)\"></a>history.pushState(state, title, url)</h3><p>将当前URL和history.state加入到history中，并用新的state和URL替换当前。不会造成页面刷新。 state：与要跳转到的URL对应的状态信息。 title：不知道干啥用，传空字符串就行了。 url：要跳转到的URL地址，不能跨域。</p>\n<h3 id=\"history-replaceState\"><a href=\"#history-replaceState\" class=\"headerlink\" title=\"history.replaceState\"></a>history.replaceState</h3><p>用新的state和URL替换当前。不会造成页面刷新。 state：与要跳转到的URL对应的状态信息。 title：不知道干啥用，传空字符串就行了。 url：要跳转到的URL地址，不能跨域。</p>\n<h3 id=\"window-onpopstate\"><a href=\"#window-onpopstate\" class=\"headerlink\" title=\"window.onpopstate\"></a>window.onpopstate</h3><p>history.go和history.back（包括用户按浏览器历史前进后退按钮）触发，并且页面无刷的时候（由于使用pushState修改了history）会触发popstate事件，事件发生时浏览器会从history中取出URL和对应的state对象替换当前的URL和history.state。通过event.state也可以获取history.state。</p>\n<h2 id=\"支持性判断\"><a href=\"#支持性判断\" class=\"headerlink\" title=\"支持性判断\"></a>支持性判断</h2><p>if (‘pushState’ in history) {…}</p>\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><p>用户通过“点击触发”，“操作历史”，“直接访问URL”的方式修改当前URL。这三种触发方式会使浏览器做出不同的行为。如果页面做无刷跳转，那么页面具体显示什么内容需要js来控制，js则需要根据一些信息来知道当前应该显示什么内容，这个信息就是history.state。这样我们只要保持URL和history.state一一对应，就能保证URL和内容一一对应。大部分情况下URL和history.state都是一一对应的，但通过直接URL访问页面的方式进入页面，history.state是null，所以我们需要把URL转换成对应的history.state写入。我们不能直接写入history.state，需要通过replaceState的方式写入。对于不支持pushstate的浏览器，一律修改href跳转页面，等同于直接访问URL。示意图如下。 </p>\n<p><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/img/img/20190422142154.png\"></p>\n","categories":["Web","Front","js"],"tags":["js"]},{"title":"Js银行卡号Luhm校验","url":"/js_card_luhm/","content":"<p>银行卡号校验</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//Description: 银行卡号Luhm校验</span><br><span class=\"line\">//Luhm校验规则：16位银行卡号（19位通用）:</span><br><span class=\"line\">// 1.将未带校验位的 15（或18）位卡号从右依次编号 1 到 15（18），位于奇数位号上的数字乘以 2。</span><br><span class=\"line\">// 2.将奇位乘积的个十位全部相加，再加上所有偶数位上的数字。</span><br><span class=\"line\">// 3.将加法和加上校验位能被 10 整除。</span><br><span class=\"line\"></span><br><span class=\"line\">function luhmCheck(bankno)&#123;</span><br><span class=\"line\">    if (bankno.length &lt; 16 || bankno.length &gt; 19) &#123;</span><br><span class=\"line\">      //$(“#banknoInfo”).html(“银行卡号长度必须在16到19之间”);</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var num = /^\\d*$/; //全数字</span><br><span class=\"line\">    if (!num.exec(bankno)) &#123;</span><br><span class=\"line\">      //$(“#banknoInfo”).html(“银行卡号必须全为数字”);</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //开头6位 </span><br><span class=\"line\">    var strBin=”10,18,30,35,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,62,65,68,69,84,87,88,94,95,98,99″;</span><br><span class=\"line\">    if (strBin.indexOf(bankno.substring(0, 2))== -1) &#123;</span><br><span class=\"line\">      //$(“#banknoInfo”).html(“银行卡号开头6位不符合规范”);</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var lastNum=bankno.substr(bankno.length-1,1);//取出最后一位（与luhm进行比较）</span><br><span class=\"line\">    var first15Num=bankno.substr(0,bankno.length-1);//前15或18位</span><br><span class=\"line\">    var newArr=new Array();</span><br><span class=\"line\">    for(var i=first15Num.length-1;i&gt;-1;i–)&#123;  //前15或18位倒序存进数组</span><br><span class=\"line\">      newArr.push(first15Num.substr(i,1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var arrJiShu=new Array(); //奇数位*2的积 &lt;9</span><br><span class=\"line\">    var arrJiShu2=new Array(); //奇数位*2的积 &gt;9</span><br><span class=\"line\">    var arrOuShu=new Array(); //偶数位数组</span><br><span class=\"line\">    for(var j=0;j&lt;newArr.length;j++)&#123;</span><br><span class=\"line\">      if((j+1)%2==1)&#123;//奇数位</span><br><span class=\"line\">        if(parseInt(newArr[j])*2&lt;9)</span><br><span class=\"line\">        arrJiShu.push(parseInt(newArr[j])*2);</span><br><span class=\"line\">        else</span><br><span class=\"line\">        arrJiShu2.push(parseInt(newArr[j])*2);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else //偶数位</span><br><span class=\"line\">      arrOuShu.push(newArr[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var jishu_child1=new Array();//奇数位*2 &gt;9 的分割之后的数组个位数</span><br><span class=\"line\">    var jishu_child2=new Array();//奇数位*2 &gt;9 的分割之后的数组十位数</span><br><span class=\"line\">    for(var h=0;h&lt;arrJiShu2.length;h++)&#123;</span><br><span class=\"line\">      jishu_child1.push(parseInt(arrJiShu2[h])%10);</span><br><span class=\"line\">      jishu_child2.push(parseInt(arrJiShu2[h])/10);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var sumJiShu=0; //奇数位*2 &lt; 9 的数组之和</span><br><span class=\"line\">    var sumOuShu=0; //偶数位数组之和</span><br><span class=\"line\">    var sumJiShuChild1=0; //奇数位*2 &gt;9 的分割之后的数组个位数之和</span><br><span class=\"line\">    var sumJiShuChild2=0; //奇数位*2 &gt;9 的分割之后的数组十位数之和</span><br><span class=\"line\">    var sumTotal=0;</span><br><span class=\"line\">    for(var m=0;m&lt;arrJiShu.length;m++)&#123;</span><br><span class=\"line\">      sumJiShu=sumJiShu+parseInt(arrJiShu[m]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(var n=0;n&lt;arrOuShu.length;n++)&#123;</span><br><span class=\"line\">      sumOuShu=sumOuShu+parseInt(arrOuShu[n]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(var p=0;p&lt;jishu_child1.length;p++)&#123;</span><br><span class=\"line\">      sumJiShuChild1=sumJiShuChild1+parseInt(jishu_child1[p]);</span><br><span class=\"line\">      sumJiShuChild2=sumJiShuChild2+parseInt(jishu_child2[p]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //计算总和</span><br><span class=\"line\">    sumTotal=parseInt(sumJiShu)+parseInt(sumOuShu)+parseInt(sumJiShuChild1)+parseInt(sumJiShuChild2);</span><br><span class=\"line\">    //计算Luhm值</span><br><span class=\"line\">    var k= parseInt(sumTotal)%10==0?10:parseInt(sumTotal)%10;</span><br><span class=\"line\">    var luhm= 10-k;</span><br><span class=\"line\">    if(lastNum==luhm)&#123;</span><br><span class=\"line\">    $(“#banknoInfo”).html(“Luhm验证通过”);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">    $(“#banknoInfo”).html(“银行卡号必须符合Luhm校验”);</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>邮箱验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var reg_email=/^[A-Za-z0-9](([_\\.\\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\\.\\-]?[a-zA-Z0-9]+)*)\\.([A-Za-z]&#123;2,&#125;)$/;</span><br></pre></td></tr></table></figure>","categories":["Web","Front","js"],"tags":["js"]},{"title":"前端面试题终结版","url":"/front_facing_questions/","content":"<h3 id=\"1-渐进增强-progressive-enhancement-和优雅降级-graceful-degradation\"><a href=\"#1-渐进增强-progressive-enhancement-和优雅降级-graceful-degradation\" class=\"headerlink\" title=\"1.渐进增强 (progressive enhancement) 和优雅降级 (graceful degradation)\"></a>1.渐进增强 (progressive enhancement) 和优雅降级 (graceful degradation)</h3><p>持优雅降级观点者认为，应该针对最高级、最完善的浏览器来设计网站。然后，再为那些被认为过时或有功能缺失的浏览器提供候选方案，使之基本可用，但不至于完全失效。这样一来，新特性在老浏览器中会降级，且一般会有一个分界点，声明不支持哪些老浏览器。有时候会警告使用老浏览器的用户，建议更换，如“您的浏览器已经老掉牙了，建议使用现代浏览器！”。</p>\n<p>与优雅降级正好相反，持渐进增强观点者则认为，应该关注于内容本身。首先，保证最核心的功能，让任何低端的浏览器都能看到网站的内容。然后，再通过CSS或Javascript来进行效果、交互等改进，为更先进的浏览器提供渐进式增强，带来更好的用户体验。</p>\n<h3 id=\"2-JavaScript-数据类型\"><a href=\"#2-JavaScript-数据类型\" class=\"headerlink\" title=\"2.JavaScript 数据类型\"></a>2.JavaScript 数据类型</h3><p>栈：原始数据类型（字符换，数字，布尔，Null，Undefined）<br>堆：引用数据类型（数组）</p>\n<p>原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；<br>引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其<br>在栈中的地址，取得地址后从堆中获得实体</p>\n<h3 id=\"3-盒子模型\"><a href=\"#3-盒子模型\" class=\"headerlink\" title=\"3.盒子模型\"></a>3.盒子模型</h3><p>content-》padding-》border-》margin</p>\n<h3 id=\"4-box-sizing\"><a href=\"#4-box-sizing\" class=\"headerlink\" title=\"4.box-sizing\"></a>4.box-sizing</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">box-sizing: content-box;</span><br><span class=\"line\">box-sizing: border-box;</span><br></pre></td></tr></table></figure>\n<p>box-sizing属性可以指定盒子模型种类，<br>content-box指定盒子模型为W3C标准盒模型，元素的高宽设定&#x3D;content<br>border-box为IE6混杂模式盒模型。元素的高宽设定&#x3D;border+padding+content<br>inherit 继承父元素的box-sizing属性</p>\n<h3 id=\"5-promise\"><a href=\"#5-promise\" class=\"headerlink\" title=\"5.promise\"></a>5.promise</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Promise里面传入一个函数类型的参数，这个函数类型的参数接收两个参数resolve reject</span><br><span class=\"line\">var p = new Promise(function(resolve,reject)&#123;</span><br><span class=\"line\">     // 异步操作</span><br><span class=\"line\">     setTimeout(function()&#123;</span><br><span class=\"line\">         console.log(&#x27;icessun&#x27;);  // 两秒之后打印出icessun</span><br><span class=\"line\">         resolve(&#x27;icessun2&#x27;); // resolve是成功后的回调函数 里面的icessun2是传入的参数</span><br><span class=\"line\">      &#125;,2000)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">// 那么p是一个实例对象，可以使用then方法（Promise原型上面的方法）</span><br><span class=\"line\">p.then(function()&#123;</span><br><span class=\"line\">    console.log(arguments);  // 会打印出一个类数组 [&#x27;icessun2&#x27;]</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">p.then(function(data)&#123;</span><br><span class=\"line\">    console.log(data);  // 会打印出icessun2 data接收了resolve里面的参数</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>方便链式回调，resolve 是成功回调，reject为失败回调。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function getNumber()&#123;</span><br><span class=\"line\">   var p=new Promise(function(resolve,reject)&#123;</span><br><span class=\"line\">      setTimeout(function()&#123;</span><br><span class=\"line\">          var num=Math.ceil(Math.random()*10); // 生成1-10 之间的随机数 Math.ceil(): 大于或等于给定数字的最小整数</span><br><span class=\"line\">          if(num&lt;=5)&#123;</span><br><span class=\"line\">            resolve(num);</span><br><span class=\"line\">           &#125;else&#123;</span><br><span class=\"line\">             reject(&#x27;数字太大了&#x27;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,2000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">   return p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getNumber().then(function(data)&#123;</span><br><span class=\"line\">                console.log(&#x27;resolved&#x27;);</span><br><span class=\"line\">                console.log(data);</span><br><span class=\"line\">            &#125;,function(reason,data)&#123;</span><br><span class=\"line\">                console.log(&#x27;resolved&#x27;);</span><br><span class=\"line\">                console.log(reason); // 数字太大</span><br><span class=\"line\">                console.log(data); // undefined</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Promise</span><br><span class=\"line\">       .all([runAsync1(),runAsync2(),runAsync3()])</span><br><span class=\"line\">       .then(function(results)&#123;</span><br><span class=\"line\">          console.log(results);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<p>Promise.all来执行前面的三个异步的函数，all()接收一个数组参数，里面的执行最终都返回Promise对象，只有等三个异步操作都执行完成后才会进入到then里面，all会把所有的异步操作的结果放在一个数组中传给then，就是上面的results.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Promise</span><br><span class=\"line\">      .race([runAsync1(),runAsync2(),runAsync3()])</span><br><span class=\"line\">       .then(function(results)&#123;</span><br><span class=\"line\">         console.log(results);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n\n<p>race也是Promise类上面的私有方法，对于前面的all方法来说是：谁的程序执行的慢，就等谁执行完才回调。但是对于race来说：谁的程序执行的快，就以它为标准调用回调函数，其用法基本上是一样的，把上面runAsync1函数的延迟改为1秒</p>\n<h3 id=\"6-原型与继承的过程\"><a href=\"#6-原型与继承的过程\" class=\"headerlink\" title=\"6.原型与继承的过程\"></a>6.原型与继承的过程</h3><p>Js所有的函数都有一个prototype属性，这个属性引用了一个对象，即原型对象，也简称原型。</p>\n<h3 id=\"7-闭包\"><a href=\"#7-闭包\" class=\"headerlink\" title=\"7.闭包\"></a>7.闭包</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">( function()&#123;</span><br><span class=\"line\">    var i = 1;</span><br><span class=\"line\">    console.log(i)</span><br><span class=\"line\">&#125; )</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1.函数嵌套函数 </li>\n<li>2.函数内部可以引用外部的参数和变量 </li>\n<li>3.参数和变量不会被垃圾回收机制回收</li>\n</ul>\n<h3 id=\"8-柯里化\"><a href=\"#8-柯里化\" class=\"headerlink\" title=\"8.柯里化\"></a>8.柯里化</h3><p>在计算机科学中，柯里化（Currying），又译为卡瑞化或加里化，是把接收多个参数的函数变换成接收一个单一参数（最初函数的第一个参数）的函数，并返回接受剩余的参数而且返回结果的新函数的技术。这个技术由克里斯托弗·斯特雷奇以逻辑学家哈斯凯尔·加里命名的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//函数定义</span><br><span class=\"line\"></span><br><span class=\"line\"> function add(x,y)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   return x + y；</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> //函数调用</span><br><span class=\"line\"></span><br><span class=\"line\"> add(3,5);//8</span><br></pre></td></tr></table></figure>\n<p> 采用柯里化将接受两个参数的函数变成接受单一参数的函数<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//函数表达式</span><br><span class=\"line\"></span><br><span class=\"line\"> var add = function(x)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   return function(y)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     return x + y;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> //函数调用</span><br><span class=\"line\"></span><br><span class=\"line\"> add(3)(5);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9-箭头函数的使用\"><a href=\"#9-箭头函数的使用\" class=\"headerlink\" title=\"9.箭头函数的使用\"></a>9.箭头函数的使用</h3><p>es6 箭头函数的使用，颠覆了js的编程习惯。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// es5</span><br><span class=\"line\">var foo = function() &#123;</span><br><span class=\"line\">    var a = 20；</span><br><span class=\"line\">    var b = 30;</span><br><span class=\"line\">    return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// es6</span><br><span class=\"line\">const foo = () =&gt; &#123;</span><br><span class=\"line\">   const a = 20;</span><br><span class=\"line\">   const b = 30;</span><br><span class=\"line\">   return a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-var-let-const\"><a href=\"#10-var-let-const\" class=\"headerlink\" title=\"10.var let const\"></a>10.var let const</h3><p>var 是全局<br>let 块级操作，值可变<br>const 值不会变</p>\n<h3 id=\"11-模板字符\"><a href=\"#11-模板字符\" class=\"headerlink\" title=\"11.模板字符\"></a>11.模板字符</h3><p>模板字符是为了解决使用+号拼接字符串的不便利出现的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// es6</span><br><span class=\"line\">const a = 20;</span><br><span class=\"line\">const b = 30;</span><br><span class=\"line\">const string = `$&#123;a&#125;+$&#123;b&#125;=$&#123;a+b&#125;`;</span><br><span class=\"line\"></span><br><span class=\"line\">// es5</span><br><span class=\"line\">var a = 20;</span><br><span class=\"line\">var b = 30;</span><br><span class=\"line\">var string = a + &quot;+&quot; + b + &quot;=&quot; + (a + b);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-展开运算符\"><a href=\"#12-展开运算符\" class=\"headerlink\" title=\"12.展开运算符\"></a>12.展开运算符</h3><p>在ES6中用…来表示展开运算符，它可以将数组方法或者对象进行展开。先来看一个例子它是如何使用的。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">const arr1 = [1, 2, 3];</span><br><span class=\"line\">const arr2 = [...arr1, 10, 20, 30];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-执行顺序\"><a href=\"#13-执行顺序\" class=\"headerlink\" title=\"13.执行顺序\"></a>13.执行顺序</h3><p>先执行脚本，然后 setTimeout 会延迟执行，那么执行到 console.log 的时候，i已经变成5了。</p>\n<h3 id=\"14-async-和-awit\"><a href=\"#14-async-和-awit\" class=\"headerlink\" title=\"14.async 和 awit\"></a>14.async 和 awit</h3><p><code>async</code>用来申明里面包裹的内容可以进行同步的方式执行，await则是进行执行顺序控制，每次执行一个await，程序都会暂停等待await返回值，然后再执行之后的await。<br><code>await</code>后面调用的函数需要返回一个promise，另外这个函数是一个普通的函数即可，而不是generator。<br><code>await</code>只能用在async函数之中，用在普通函数中会报错。<br><code>await</code>命令后面的 Promise 对象，运行结果可能是 rejected，所以最好把 await 命令放在 <code>try...catch</code> 代码块中。</p>\n<h3 id=\"15-函数声明\"><a href=\"#15-函数声明\" class=\"headerlink\" title=\"15.函数声明\"></a>15.函数声明</h3><p>函数声明：<code>function fnName () &#123;…&#125;;</code>使用function关键字声明一个函数，再指定一个函数名，叫函数声明。</p>\n<p>函数表达式：<code>var fnName = function () &#123;…&#125;;</code>使用function关键字声明一个函数，但未给函数命名，最后将匿名函数赋予一个变量，叫函数表达式，这是最常见的函数表达式语法形式。</p>\n<p>匿名函数：<code>function () &#123;&#125;;</code> 使用function关键字声明一个函数，但未给函数命名，所以叫匿名函数，匿名函数属于函数表达式，匿名函数有很多作用，赋予一个变量则创建函数，赋予一个事件则成为事件处理程序或创建闭包等等。</p>\n<p><code>( function()&#123;…&#125; )()</code>和<code>( function ()&#123;…&#125; () )</code>是两种javascript立即执行函数的常见写法</p>\n<h3 id=\"16-事件代理\"><a href=\"#16-事件代理\" class=\"headerlink\" title=\"16.事件代理\"></a>16.事件代理</h3><p>当我们需要对很多元素添加事件的时候，可以通过将事件添加到它们的父节点而将事件委托给父节点来触发处理函数</p>\n<h3 id=\"17-AMD-CMD-CommonJS\"><a href=\"#17-AMD-CMD-CommonJS\" class=\"headerlink\" title=\"17.AMD CMD CommonJS\"></a>17.AMD CMD CommonJS</h3><p>CommonJS 适用于服务端，比如node 执行环境。同步加载不同模块之所以采用同步，是因为模块文件都存放在服务器的各个硬盘上，实际的加载时间就是硬盘的文件读取时间。</p>\n<p>AMD ，Asynchronous Module Definition 异步模块定义。<code>require js</code>一次性加载全部的js文件到客户端。</p>\n<p>CMD，common module definition ，是<code>seajs</code>的规范，依赖就近，用的时候再require。</p>\n<h3 id=\"18-doctype-文档类型-的作用是什么\"><a href=\"#18-doctype-文档类型-的作用是什么\" class=\"headerlink\" title=\"18.doctype(文档类型) 的作用是什么\"></a>18.doctype(文档类型) 的作用是什么</h3><p>用来说明web设计中所用的html或xhtml的类型，指出浏览器或者其他阅读程序按照什么样的规则（W3C所发布的一个文档类型定义即DTD）集去解释文档中的标记.<br>在W3C标准出来之前，浏览器对页面的渲染没有同一的标准，产生了差异，quirks mod（混杂模式或者兼容模式），但在W3C标准出台之后，浏览器对页面的渲染有了同一的标准即（严格模式或标准模式）。但是为了保证以前就得页面仍然正常显示，有的浏览器就保存了这两种渲染模式（标准兼容模式）。那么究竟采用哪一种方式进行渲染，就要看DOCTYPE生命中的DTD。</p>\n<p><code>DOCTYPE</code>使浏览器按照DTD指定的渲染方式对页面进行渲染。<br><code>Web</code> 世界中存在许多不同的文档。只有了解文档的类型，浏览器才能正确地显示文档。<br><code>HTML</code> 也有多个不同的版本，只有完全明白页面中使用的确切 <code>HTML</code> 版本，浏览器才能完全正确地显示出 <code>HTML</code> 页面。这就是 <code>&lt;!DOCTYPE&gt;</code> 的用处。<br><code>&lt;!DOCTYPE&gt;</code> 不是 HTML 标签。它为浏览器提供一项信息（声明），即 HTML 是用什么版本编写的。<br>如果你的页面添加了<code>&lt;!DOCTYPE html&gt;</code>那么，那么就等同于开启了标准模式，那么浏览器就得老老实实的按照W3C的标准。</p>\n<h3 id=\"19-浏览器标准模式-standards-mode-、几乎标准模式（almost-standards-mode）和怪异模式-quirks-mode-之间的区别是什么？\"><a href=\"#19-浏览器标准模式-standards-mode-、几乎标准模式（almost-standards-mode）和怪异模式-quirks-mode-之间的区别是什么？\" class=\"headerlink\" title=\"19.浏览器标准模式 (standards mode) 、几乎标准模式（almost standards mode）和怪异模式 (quirks mode) 之间的区别是什么？\"></a>19.浏览器标准模式 (standards mode) 、几乎标准模式（almost standards mode）和怪异模式 (quirks mode) 之间的区别是什么？</h3><p>所谓的标准模式是指，浏览器按W3C标准解析执行代码；怪异模式则是使用浏览器自己的方式解析执行代码，因为不同浏览器解析执行的方式不一样，所以我们称之为怪异模式。浏览器解析时到底使用标准模式还是怪异模式，与你网页中的DTD声明直接相关，DTD声明定义了标准文档的类型（标准模式解析）文档类型，会使浏览器使用相应的方式加载网页并显示，忽略DTD声明,将使网页进入怪异模式(quirks mode)。<br>几乎标准模式（almost standards mode）是Firefox1+的设定的，类似于标准模式。</p>\n<h3 id=\"20-HTML-和-XHTML-有什么区别？\"><a href=\"#20-HTML-和-XHTML-有什么区别？\" class=\"headerlink\" title=\"20.HTML 和 XHTML 有什么区别？\"></a>20.HTML 和 XHTML 有什么区别？</h3><p>HTML是一种基本的WEB网页设计语言，XHTML是一个基于XML的置标语言，看起来与HTML有些相象，只有一些小的但重要的区别，XHTML就是一个扮演着类似HTML的角色的XML，所以，本质上说，XHTML是一个过渡技术，结合了XML(有几分)的强大功能及HTML(大多数)的简单特性。<br>HTML 和 XHTML 的区别简单来说，XHTML 可以认为是 XML 版本的 HTML，为符合 XML 要求，XHTML 语法上要求更严谨些。<br>以下是 XHTML 相对 HTML 的几大区别：<br>XHTML 要求正确嵌套<br>XHTML 所有元素必须关闭<br>XHTML 区分大小写<br>XHTML 属性值要用双引号<br>XHTML 用 id 属性代替 name 属性<br>XHTML 特殊字符的处理</p>\n<h3 id=\"21-如果页面使用-‘application-x2F-xhtml-xml’-会有什么问题吗\"><a href=\"#21-如果页面使用-‘application-x2F-xhtml-xml’-会有什么问题吗\" class=\"headerlink\" title=\"21.如果页面使用 ‘application&#x2F;xhtml+xml’ 会有什么问题吗\"></a>21.如果页面使用 ‘application&#x2F;xhtml+xml’ 会有什么问题吗</h3><p>比较严格,必须有head、body标签且每个元素必须是关闭的。 一些老的浏览器不支持,实际上,任何最新的浏览器都将支持application&#x2F;xhtml+xml媒体类型。</p>\n<h3 id=\"22-BFC规范的理解\"><a href=\"#22-BFC规范的理解\" class=\"headerlink\" title=\"22.BFC规范的理解\"></a>22.BFC规范的理解</h3><p>BFC，块级格式化上下文，一个创建了新的BFC的盒子是独立布局的，盒子里面的子元素的样式不会影响到外面的元素。在同一个BFC中的两个毗邻的块级盒在垂直方向（和布局方向有关系）的margin会发生折叠。</p>\n<h3 id=\"23-你有哪些性能优化的方法？\"><a href=\"#23-你有哪些性能优化的方法？\" class=\"headerlink\" title=\"23.你有哪些性能优化的方法？\"></a>23.你有哪些性能优化的方法？</h3><ul>\n<li>减少http请求次数：CSS Sprites，JS, CSS源码压缩，图片大小控制合适，网页Gzip，CDN托管，data缓存，图片服务器。</li>\n<li>前端模板js+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量不用请求，减少请求次数。</li>\n<li>空的src。</li>\n</ul>\n<h3 id=\"24-XSS原理及防范\"><a href=\"#24-XSS原理及防范\" class=\"headerlink\" title=\"24.XSS原理及防范\"></a>24.XSS原理及防范</h3><p>Xss(cross-site scripting)攻击指的是攻击者往Web页面里插入恶意html标签或者javascript代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取cookie中的用户私密信息；或者攻击者在论坛中加一个恶意表单， 当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点。</p>\n<h3 id=\"25-XSS防范方法\"><a href=\"#25-XSS防范方法\" class=\"headerlink\" title=\"25.XSS防范方法\"></a>25.XSS防范方法</h3><ul>\n<li>1.代码里对用户输入的地方和变量都需要仔细检查长度和对”&lt;”,”&gt;”,”;”,”’”等字符做过滤；其次任何内容写到页面之前都必须加以encode，避免不小心把html tag 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击。 </li>\n<li>2.避免直接在cookie 中泄露用户隐私，例如email、密码等等。 </li>\n<li>3.通过使cookie 和系统ip 绑定来降低cookie 泄露后的危险。这样攻击者得到的cookie 没有实际价值，不可能拿来重放。 </li>\n<li>4.尽量采用POST 而非GET 提交表单。</li>\n</ul>\n<h3 id=\"26-XSS与CSRF有什么区别吗？\"><a href=\"#26-XSS与CSRF有什么区别吗？\" class=\"headerlink\" title=\"26.XSS与CSRF有什么区别吗？\"></a>26.XSS与CSRF有什么区别吗？</h3><p>XSS是获取信息，不需要提前知道其他用户页面的代码和数据包。CSRF是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。</p>\n<p>要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p>\n<ul>\n<li>1.登录受信任网站A，并在本地生成Cookie。</li>\n<li>2.在不登出A的情况下，访问危险网站B。</li>\n</ul>\n<p>　　<br>CSRF的防御</p>\n<ul>\n<li>1.服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。</li>\n<li>2.使用验证码。</li>\n</ul>\n<h3 id=\"27-JavaScript-的同源策略。\"><a href=\"#27-JavaScript-的同源策略。\" class=\"headerlink\" title=\"27.JavaScript 的同源策略。\"></a>27.JavaScript 的同源策略。</h3><p>协议，域名，端口相同，同源策略是一种安全协议。 指一段脚本只能读取来自同一来源的窗口和文档的属性。</p>\n<p>为什么要有同源限制？<br>我们举例说明：比如一个黑客程序，他利用Iframe把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过Javascript读取到你的表单中input中的内容，这样用户名，密码就轻松到手了。</p>\n<h3 id=\"28-解释CSS-Sprites-以及你要如何使用\"><a href=\"#28-解释CSS-Sprites-以及你要如何使用\" class=\"headerlink\" title=\"28.解释CSS Sprites, 以及你要如何使用?\"></a>28.解释CSS Sprites, 以及你要如何使用?</h3><p>CSS Sprites其实就是把网页中一些背景图片整合到一张图片文件中，再利用CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位，background-position可以用数字能精确的定位出背景图片的位置。</p>\n<h3 id=\"29-data-属性的作用\"><a href=\"#29-data-属性的作用\" class=\"headerlink\" title=\"29.data-*属性的作用\"></a>29.data-*属性的作用</h3><p>为前端开发者提供自定义的属性，这些属性集可以通过对象的dataset属性获取，不支持该属性的浏览器可以通过 getAttribute方法获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div data-author=<span class=\"string\">&quot;david&quot;</span> data-time=<span class=\"string\">&quot;2011-06-20&quot;</span> data-comment-num=<span class=\"string\">&quot;10&quot;</span>&gt;...&lt;/div&gt;</span><br><span class=\"line\">div.<span class=\"property\">dataset</span>.<span class=\"property\">commentNum</span>; <span class=\"comment\">// 可通过js获取 10</span></span><br></pre></td></tr></table></figure>\n\n<p>data-之后的以连字符分割的多个单词组成的属性，获取的时候使用驼峰风格。</p>\n<h3 id=\"30-二分查找\"><a href=\"#30-二分查找\" class=\"headerlink\" title=\"30.二分查找\"></a>30.二分查找</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 递归算法</span><br><span class=\"line\">function binary_search(arr,low, high, key) &#123;</span><br><span class=\"line\">    if (low &gt; high)&#123;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var mid = parseInt((high + low) / 2);</span><br><span class=\"line\">    if(arr[mid] == key)&#123;</span><br><span class=\"line\">        return mid;</span><br><span class=\"line\">    &#125;else if (arr[mid] &gt; key)&#123;</span><br><span class=\"line\">        high = mid - 1;</span><br><span class=\"line\">        return binary_search(arr, low, high, key);</span><br><span class=\"line\">    &#125;else if (arr[mid] &lt; key)&#123;</span><br><span class=\"line\">        low = mid + 1;</span><br><span class=\"line\">        return binary_search(arr, low, high, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var arr = [1,2,3,4,5,6,7,8,9,10,11,23,44,86];</span><br><span class=\"line\">var result = binary_search(arr, 0, 13, 10);</span><br><span class=\"line\">alert(result); // 9 返回目标元素的索引值  </span><br></pre></td></tr></table></figure>","categories":["Web","Front","js"],"tags":["js","css"]},{"title":"简单又好看的博客站免费部署方式 - GithubPages + HEXO","url":"/blog_hexo/","content":"<p>在疫情这两年准备英语留学的事儿，反而少了写作。生活逐渐的回归到正轨，写作是一个好的习惯，还是坚持起来。在整理和收集的过程中，自己会不断的思考，也是在加强和锻炼的过程。所以打开了尘封已久的博客网站，发现博客框架升级了大的版本，产生了一些BUG需要修复。在过去使用markdown进行排版的时候并没有很规范，也在这个过程将278篇文章整理一下。本篇文章记录部署的过程以做后续的查看。最终使用的技能栈为 GithubPages + HEXO + NEXT + VsCode + PicGo。更新为 GitHub 的 action 自动触发的另一个好处是可以在网页上直接进行编辑，会自动编译发布。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"下载最新的-node-和-npm-版本\"><a href=\"#下载最新的-node-和-npm-版本\" class=\"headerlink\" title=\"下载最新的 node 和 npm 版本\"></a>下载最新的 <code>node</code> 和 <code>npm</code> 版本</h2><p>本篇文章更新的时候，<code>node</code> 为 <code>18.12.1</code>，<code>npm</code> 为 <code>8.19.2</code>。网上有很多不同的安装攻略，请按照自己喜欢进行选择。</p>\n<ol>\n<li>官网的链接为 (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">https://nodejs.org/en/<i class=\"fa fa-external-link-alt\"></i></span>)</li>\n<li>常使用MAC系统，默认是使用命令<code>brew install node</code>。</li>\n<li>但是有多版本的需求，最终使用<code>nvm</code>进行管理多版本。下载最新稳定版本 <code>nvm install --lts</code>，使用最新版本<code>nvm use --lts</code>。</li>\n</ol>\n<h2 id=\"创建-Github-仓库并下载到本地\"><a href=\"#创建-Github-仓库并下载到本地\" class=\"headerlink\" title=\"创建 Github 仓库并下载到本地\"></a>创建 Github 仓库并下载到本地</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:ucfyao/blog.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-hexo-静态博客框架\"><a href=\"#使用-hexo-静态博客框架\" class=\"headerlink\" title=\"使用 hexo 静态博客框架\"></a>使用 hexo 静态博客框架</h2><p>安装 hexo 脚手架</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli </span><br></pre></td></tr></table></figure>\n\n<p>先把blog的.git文件挪移出去，不然初始化会报错。然后使用命令进行初始化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n\n<p>创建一篇文章进行预览。<br>因为我之前有很多的文章，直接将source下面的文件，迁移到初始化后新框架即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo n 第一篇文章</span><br></pre></td></tr></table></figure>\n\n<p>生成静态文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<p>启动服务器进行查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s --debug</span><br></pre></td></tr></table></figure>\n\n<p>常用的<code>hexo</code>命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo -g <span class=\"comment\"># 安装Hexo</span></span><br><span class=\"line\">npm update hexo -g <span class=\"comment\"># 升级</span></span><br><span class=\"line\">hexo init <span class=\"comment\"># 初始化博客</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最常用的：</span></span><br><span class=\"line\">hexo n <span class=\"string\">&quot;第一篇文章&quot;</span> == hexo new <span class=\"string\">&quot;第一篇文章&quot;</span> <span class=\"comment\"># 新建文章</span></span><br><span class=\"line\">hexo g == hexo generate <span class=\"comment\"># 生成静态文件</span></span><br><span class=\"line\">hexo s == hexo server <span class=\"comment\"># 启动服务预览</span></span><br><span class=\"line\">hexo d == hexo deploy <span class=\"comment\"># 部署</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每次写完新文章都可以使用如下命令，启动服务进行预览</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下一般人估计也不咋用：</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># Hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class=\"line\">hexo server -s <span class=\"comment\"># 静态模式</span></span><br><span class=\"line\">hexo server -p 5000 <span class=\"comment\"># 更改端口</span></span><br><span class=\"line\">hexo server -i 192.168.1.1 <span class=\"comment\"># 自定义 IP</span></span><br><span class=\"line\">hexo clean <span class=\"comment\"># 清除缓存，若是网页正常情况下可以忽略这条命令</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h2><p>我选择的是<code>next</code>主题。官网中还有很多可以选择。使用以下命令将主题下载到themes文件夹中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>下载完毕后修改主目录下的主题配置 <code>_config.yml</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme</span>: next</span><br></pre></td></tr></table></figure>\n\n<p>如果主题需要更新，可使用<code>git</code>的方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> themes/next</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他插件\"><a href=\"#其他插件\" class=\"headerlink\" title=\"其他插件\"></a>其他插件</h2><h3 id=\"统计数字\"><a href=\"#统计数字\" class=\"headerlink\" title=\"统计数字\"></a>统计数字</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure>\n\n<p>在主配置文件中修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time</span>:</span><br><span class=\"line\">  # 文章字数统计</span><br><span class=\"line\">  <span class=\"attr\">symbols</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  # 文章阅读时间统计</span><br><span class=\"line\">  <span class=\"attr\">time</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  # 站点总字数统计</span><br><span class=\"line\">  <span class=\"attr\">total_symbols</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  # 站点总阅读时间统计</span><br><span class=\"line\">  <span class=\"attr\">total_time</span>: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>在主题配置文件中修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time</span>:</span><br><span class=\"line\">  # 是否另起一行</span><br><span class=\"line\">  <span class=\"attr\">separated_meta</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  # 是否显示文章统计的文字描述</span><br><span class=\"line\">  <span class=\"attr\">item_text_post</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  # 是否显示总望着那统计的文字描述</span><br><span class=\"line\">  <span class=\"attr\">item_text_total</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  # 平均字长</span><br><span class=\"line\">  <span class=\"attr\">awl</span>: <span class=\"number\">4</span></span><br><span class=\"line\">  # 每分钟阅读字数，用于预估文章阅读时间</span><br><span class=\"line\">  <span class=\"attr\">wpm</span>: <span class=\"number\">400</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加站内搜索\"><a href=\"#添加站内搜索\" class=\"headerlink\" title=\"添加站内搜索\"></a>添加站内搜索</h3><p>安装插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-search</span><br><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n\n<p>编辑站点配置文件，添加以下内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search</span>:</span><br><span class=\"line\">  <span class=\"attr\">path</span>: search.<span class=\"property\">xml</span></span><br><span class=\"line\">  <span class=\"attr\">field</span>: post</span><br><span class=\"line\">  <span class=\"attr\">format</span>: html</span><br><span class=\"line\">  <span class=\"attr\">limit</span>: <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑主题配置文件，设置 <code>local_search</code> 为 <code>ture</code>。</p>\n<h3 id=\"SEO-支持\"><a href=\"#SEO-支持\" class=\"headerlink\" title=\"SEO 支持\"></a>SEO 支持</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<p>根目录配置文件添加：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"># <span class=\"variable constant_\">SEO</span> </span><br><span class=\"line\"><span class=\"attr\">sitemap</span>: </span><br><span class=\"line\">  <span class=\"attr\">path</span>: sitemap.<span class=\"property\">xml</span></span><br><span class=\"line\"><span class=\"attr\">baidusitemap</span>:</span><br><span class=\"line\">  <span class=\"attr\">path</span>: baidusitemap.<span class=\"property\">xml</span></span><br></pre></td></tr></table></figure>\n\n<p>主题配置文件修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">baidu_push</span>: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"点击时候出现烟花特效\"><a href=\"#点击时候出现烟花特效\" class=\"headerlink\" title=\"点击时候出现烟花特效\"></a>点击时候出现烟花特效</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install next-theme/hexo-next-fireworks</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"首页显示缩略内容\"><a href=\"#首页显示缩略内容\" class=\"headerlink\" title=\"首页显示缩略内容\"></a>首页显示缩略内容</h3><p>这里最新的next7版本修改了新的写法，之前的配置不可用了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">auto_excerpt</span>:</span><br><span class=\"line\">  <span class=\"attr\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"number\">150</span></span><br></pre></td></tr></table></figure>\n\n<p>现在只能打开开关，使用在md文件中表头部分添加 <code>description</code> 或者使用 <code>&lt;!-- more --&gt;</code>进行截断。<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9kb2NzL3RoZW1lLXNldHRpbmdzL3Bvc3RzLmh0bWw=\">官方<i class=\"fa fa-external-link-alt\"></i></span> 更推荐使用 <code>&lt;!-- more --&gt;</code>进行截断的方式。那么原来的文章中都需要添加，这就麻烦了。</p>\n<p>点击<code>阅读更多</code>进入文章页面，会跳到<code>#more</code>开始，个人感觉是不合理的，所以替换了下面这行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;a <span class=\"keyword\">class</span>=<span class=\"string\">&quot;btn&quot;</span> href=<span class=\"string\">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> rel=<span class=\"string\">&quot;contents&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加速\"><a href=\"#加速\" class=\"headerlink\" title=\"加速\"></a>加速</h3><p>通过在空闲时间预取in-viewport链接来加快后续页面加载速度。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save quicklink</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动加空格\"><a href=\"#自动加空格\" class=\"headerlink\" title=\"自动加空格\"></a>自动加空格</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install pangu --save</span><br></pre></td></tr></table></figure>\n\n<p>修改主题配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"># <span class=\"title class_\">Pangu</span> <span class=\"title class_\">Support</span></span><br><span class=\"line\"># <span class=\"title class_\">For</span> more <span class=\"attr\">information</span>: <span class=\"attr\">https</span>:<span class=\"comment\">//github.com/vinta/pangu.js</span></span><br><span class=\"line\"># 神器啊，盘古之白：自动在中文字和半形的英文、数字、符号之间插入空白。</span><br><span class=\"line\"><span class=\"attr\">pangu</span>: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加rss\"><a href=\"#添加rss\" class=\"headerlink\" title=\"添加rss\"></a>添加rss</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h3><p>安装插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install lozad --save</span><br></pre></td></tr></table></figure>\n\n<p>修改主题配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 图片懒加载</span><br><span class=\"line\"><span class=\"attr\">lazyload</span>: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开启-Pjax-加速\"><a href=\"#开启-Pjax-加速\" class=\"headerlink\" title=\"开启 Pjax 加速\"></a>开启 Pjax 加速</h3><p>Pjax 主要用于加速 Web 页面的切换速度，同时也可以用来解决 Aplayer 音频播发器切换页面后播放出现中断的问题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install pjax --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"顶部进度条\"><a href=\"#顶部进度条\" class=\"headerlink\" title=\"顶部进度条\"></a>顶部进度条</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next-pace <span class=\"built_in\">source</span>/lib/pace</span><br></pre></td></tr></table></figure>\n\n<p>编辑主题配置文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pace</span>:</span><br><span class=\"line\">  <span class=\"attr\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  # <span class=\"title class_\">Themes</span> <span class=\"attr\">list</span>:可选样式列表</span><br><span class=\"line\">  # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br><span class=\"line\">  # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br><span class=\"line\">  <span class=\"attr\">theme</span>: minimal</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"阅读进度条\"><a href=\"#阅读进度条\" class=\"headerlink\" title=\"阅读进度条\"></a>阅读进度条</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"># <span class=\"title class_\">Reading</span> progress bar</span><br><span class=\"line\"><span class=\"attr\">reading_progress</span>:</span><br><span class=\"line\">  <span class=\"attr\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  # <span class=\"title class_\">Available</span> <span class=\"attr\">values</span>: top | bottom</span><br><span class=\"line\">  <span class=\"attr\">position</span>: top</span><br><span class=\"line\">  <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#37c6c0&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">height</span>: 3px</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"标签云\"><a href=\"#标签云\" class=\"headerlink\" title=\"标签云\"></a>标签云</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 我觉得不好看，就没配了。如有需要可以自行搜一下。</span></span><br><span class=\"line\">npm install hexo-tag-cloud --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 代码复制</span><br><span class=\"line\"><span class=\"attr\">copy_button</span>:</span><br><span class=\"line\">  <span class=\"attr\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 打开标签的图标和统计数量</span><br><span class=\"line\"><span class=\"attr\">menu_settings</span>:</span><br><span class=\"line\">  <span class=\"attr\">icons</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">badges</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 把<span class=\"title class_\">Github</span>的小图标变成红的</span><br><span class=\"line\"><span class=\"attr\">android_chrome_color</span>: <span class=\"string\">&quot;#FF5733&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 文章底部<span class=\"string\">`#`</span>修改</span><br><span class=\"line\"><span class=\"attr\">tag_icon</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 访客计数</span><br><span class=\"line\"><span class=\"attr\">busuanzi_count</span>:</span><br><span class=\"line\">  <span class=\"attr\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 点击图片放大</span><br><span class=\"line\"><span class=\"attr\">fancybox</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 数学公式</span><br><span class=\"line\"><span class=\"attr\">math</span>:</span><br><span class=\"line\">  <span class=\"attr\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"GitHub-Actions-自动化部署\"><a href=\"#GitHub-Actions-自动化部署\" class=\"headerlink\" title=\"GitHub Actions 自动化部署\"></a>GitHub Actions 自动化部署</h2><p>在默认的方式中，<code>hexo d</code> 会将 <code>hexo g</code> 生成的静态文件发送到远程的repo，然后通过访问默认的 <code>&lt;username&gt;.github.io</code>就可以进行访问了。但是每次都需要同步两个库就比较麻烦。CICD的方式自动化部署才是程序员的最爱。我们期望的效果是本地仓库直接<code>push</code>，触发 <code>GitHub Actions</code> 自动构建发布。</p>\n<h3 id=\"安装相关插件\"><a href=\"#安装相关插件\" class=\"headerlink\" title=\"安装相关插件\"></a>安装相关插件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-devloyer-git --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加配置\"><a href=\"#添加配置\" class=\"headerlink\" title=\"添加配置\"></a>添加配置</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy</span>:</span><br><span class=\"line\">  <span class=\"attr\">type</span>: git</span><br><span class=\"line\">  <span class=\"attr\">repository</span>: <span class=\"attr\">https</span>:<span class=\"comment\">//github.com/xxx/xxx.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch</span>: main</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行部署\"><a href=\"#执行部署\" class=\"headerlink\" title=\"执行部署\"></a>执行部署</h3><p>执行完毕后，生成的静态文件应该就会发布到GitHub的仓库中，就可以使用 <code>xxx.github.io</code> 进行访问了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：在部署的时候，如果没有添加过secret key，可能会提示你输出账号密码。我在开发中经常使用的方式是添加secret key 到GitHub中，避免每次输入账号密码比较麻烦。详细步骤可以参考我<a href=\"https://yaozihao.com/git_ssh_key/\">之前的文章</a>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYXV0aGVudGljYXRpb24vY29ubmVjdGluZy10by1naXRodWItd2l0aC1zc2gvYWJvdXQtc3No\">GitHub 官方文档<i class=\"fa fa-external-link-alt\"></i></span>写的也很详细。</p>\n</blockquote>\n<h3 id=\"绑定个性域名\"><a href=\"#绑定个性域名\" class=\"headerlink\" title=\"绑定个性域名\"></a>绑定个性域名</h3><ol>\n<li>个性的域名有助于更好的被记住。可以在域名代理商处购买一个自己喜欢的域名。比如我的个人博客域名为： yaozihao.com。</li>\n<li>在购买域名后，可以登录后台，将购买的域名添加解析指向到 <code>xxx.github.io</code>。添加三条解析记录，其中两个是GitHub的IP地址。你也可以ping你的 <code>http://xxxx.github.io</code> 的ip地址填入进去，比如：<code>192.30.252.153</code> 。有一个记录类型是<code>CNAME</code>，CNAME的记录值是：<code>xxx.github.io</code>。</li>\n<li>在项目根目录<code>source</code> 下创建文件<code>CNAME</code>，内容为域名：<code>yaozihao.com</code>。</li>\n</ol>\n<h3 id=\"设置自动部署\"><a href=\"#设置自动部署\" class=\"headerlink\" title=\"设置自动部署\"></a>设置自动部署</h3><p>参考官方推荐的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NtYTExYmxhY2svaGV4by1hY3Rpb24=\">文档<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<ol>\n<li><p>在GitHub的项目库<code>xxx.github.io</code>中找到<code>settings</code>。</p>\n</li>\n<li><p>使用以下命令创建一对公私钥：<code>ssh-keygen -t rsa -b 4096 -C &quot;$(git config user.email)&quot; -f gh-pages -N &quot;&quot;</code></p>\n</li>\n<li><p>在<code>xxx.github.io</code> 的 <code>setting</code> 页面中找到<code>Security</code>&#x3D;&gt;<code>Deploy keys</code>将生成的公钥 *.pub 添加。</p>\n</li>\n<li><p>在<code>blog</code>的 <code>setting</code> 页面中找到<code>Security</code>&#x3D;&gt;<code>Secrets</code>&#x3D;&gt;<code>Actions</code>将生成的私钥添加。名字<code>DEPLOY_KEY</code>要和yml中的一样。</p>\n</li>\n<li><p>在项目中建立 <code>.github/workflows/pages.yml</code>，并填入以下内容 (获取到node版本进行替换)：</p>\n <figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Pages</span>  <span class=\"comment\"># workflow name</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span> <span class=\"comment\"># 触发事件</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">main</span> <span class=\"comment\"># default branch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">pages:</span> <span class=\"comment\"># job1 id</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span> <span class=\"comment\"># 运行环境为最新版 Ubuntu</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span> <span class=\"comment\"># step1 获取源码  # 使用 actions/checkout@v1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Use</span> <span class=\"string\">Node.js</span> <span class=\"number\">18.</span><span class=\"string\">x</span> <span class=\"comment\"># step2</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&quot;18&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.)</span></span><br><span class=\"line\">      <span class=\"comment\"># 缓存压缩 node_modules，不用每次下载，使用时解压，可以加快工作流的执行过程，超过 7 天没有使用将删除压缩包。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Cache</span> <span class=\"string\">NPM</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/cache@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.OS</span> <span class=\"string\">&#125;&#125;-npm-cache</span></span><br><span class=\"line\">          <span class=\"attr\">restore-keys:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Dependencies</span>  <span class=\"comment\"># step3 name</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"comment\"># 安装 node modules 相关依赖</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\"># Deploy hexo blog website.</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">sma11black/hexo-action@v1.0.3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">deploy_key:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.DEPLOY_KEY</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">user_name:</span> <span class=\"string\">name</span>  <span class=\"comment\"># (or delete this input setting to use bot account)</span></span><br><span class=\"line\">          <span class=\"attr\">user_email:</span> <span class=\"string\">email</span> <span class=\"comment\"># (or delete this input setting to use bot account)</span></span><br><span class=\"line\">          <span class=\"attr\">commit_msg:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.event.head_commit.message</span> <span class=\"string\">&#125;&#125;</span>  <span class=\"comment\"># (or delete this input setting to use hexo default settings)</span></span><br><span class=\"line\">      <span class=\"comment\"># Use the output from the `deploy` step(use for test action)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Get</span> <span class=\"string\">the</span> <span class=\"string\">output</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">echo</span> <span class=\"string\">&quot;$<span class=\"template-variable\">&#123;&#123; steps.deploy.outputs.notify &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后将项目push上去，就会自动触发github 的 action 功能。</p>\n</li>\n<li><p>这里有两点需要注意，github 仓库中现在不能够上传其他库的.git。需要进行忽略或者删除。如果出现执行失败，可以将该文件添加到<code>.gitignore</code>中或者删除。</p>\n</li>\n</ol>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">themes/next/.<span class=\"property\">git</span>/</span><br><span class=\"line\">source/lib/pace/.<span class=\"property\">git</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置图床\"><a href=\"#设置图床\" class=\"headerlink\" title=\"设置图床\"></a>设置图床</h2><p>图片默认是放在 image 目录下的，但是访问速度比较感人，每次插入的时候也是很麻烦，可以使用图床解决这个问题。推荐使用 vscode + picgo + github 的免费白嫖图床。</p>\n<h3 id=\"创建图片仓库\"><a href=\"#创建图片仓库\" class=\"headerlink\" title=\"创建图片仓库\"></a>创建图片仓库</h3><p>在github上创建新的仓库存放图片，仓库必须是public的，否则存储的图片不能正常访问。注意现在默认的主分支都是main。</p>\n<h3 id=\"Vscode-安装并配置插件\"><a href=\"#Vscode-安装并配置插件\" class=\"headerlink\" title=\"Vscode 安装并配置插件\"></a>Vscode 安装并配置插件</h3><p>查找 picgo 插件进行下载。然后进行vscode配置：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1BpY0dvL3ZzLXBpY2dv\">官方文档<i class=\"fa fa-external-link-alt\"></i></span>。也可以从官方文档<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waWNnby5naXRodWIuaW8vUGljR28tRG9jL3poL2d1aWRlLyNwaWNnby1pcy1oZXJl\">下载客户端<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<ol>\n<li>配置uploader，选择github。</li>\n<li><img data-src=\"https://raw.githubusercontent.com/ucfyao/image/master/20221129150551.png\" alt=\"20221129150551\"></li>\n<li>打开MD文件，粘贴一个图片。</li>\n<li>mac 使用快捷键 Cmd + Opt + U从剪切板上传图片。</li>\n</ol>\n","categories":["Web","Front","Js"],"tags":["js"]},{"title":"浏览器通讯技术:webPush","url":"/web_push/","content":"<p>Web推送要求从后端触发的推送消息通过 <span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWlldGYtd2VicHVzaC1wcm90b2NvbA==\">Web推送协议完成<i class=\"fa fa-external-link-alt\"></i></span> ，如果要使用推送消息发送数据，则还必须根据<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWlldGYtd2VicHVzaC1lbmNyeXB0aW9u\">Message Pushption for Web Push规范<i class=\"fa fa-external-link-alt\"></i></span>对该数据进行<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWlldGYtd2VicHVzaC1lbmNyeXB0aW9u\">加密<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<p>此模块可以轻松发送消息，还可以处理依赖GCM进行消息发送&#x2F;传递的浏览器的传统支持。</p>\n<p>本文中主要介绍了node 的用法，如果是其他语言请参考GitHub中给出的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dlYi1wdXNoLWxpYnM=\">其他案例<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install web-push --save</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><h3 id=\"订阅\"><a href=\"#订阅\" class=\"headerlink\" title=\"订阅\"></a>订阅</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">subscribeUserToPush</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">getSWRegistration</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">registration</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> subscribeOptions = &#123;</span><br><span class=\"line\">      <span class=\"attr\">userVisibleOnly</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">applicationServerKey</span>: <span class=\"title function_\">urlBase64ToUint8Array</span>(</span><br><span class=\"line\">        <span class=\"string\">&#x27;BEl62iUYgUivxIkv69yViEuiBIa-Ib9-SkvMeAtA3LFgDzkrxZJjSgSnfckjBJuBkr3qBUYIHBQFLXYp5Nksh8U&#x27;</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> registration.<span class=\"property\">pushManager</span>.<span class=\"title function_\">subscribe</span>(subscribeOptions);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">pushSubscription</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Received PushSubscription: &#x27;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(pushSubscription));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pushSubscription;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"订阅信息发给后端\"><a href=\"#订阅信息发给后端\" class=\"headerlink\" title=\"订阅信息发给后端\"></a>订阅信息发给后端</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> subscriptionObject = &#123;</span><br><span class=\"line\">  <span class=\"attr\">endpoint</span>: pushSubscription.<span class=\"property\">endpoint</span>,</span><br><span class=\"line\">  <span class=\"attr\">keys</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">p256dh</span>: pushSubscription.<span class=\"title function_\">getKeys</span>(<span class=\"string\">&#x27;p256dh&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">auth</span>: pushSubscription.<span class=\"title function_\">getKeys</span>(<span class=\"string\">&#x27;auth&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sendSubscriptionToBackEnd</span>(<span class=\"params\">subscription</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;/api/save-subscription/&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(subscription)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!response.<span class=\"property\">ok</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Bad status code from server.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">responseData</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(responseData.<span class=\"property\">data</span> &amp;&amp; responseData.<span class=\"property\">data</span>.<span class=\"property\">success</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Bad response from server.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后端存储订阅信息\"><a href=\"#后端存储订阅信息\" class=\"headerlink\" title=\"后端存储订阅信息\"></a>后端存储订阅信息</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/api/save-subscription/&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title function_\">isValidSaveRequest</span>(req, res)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">saveSubscriptionToDatabase</span>(req.<span class=\"property\">body</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">subscriptionId</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">data</span>: &#123; <span class=\"attr\">success</span>: <span class=\"literal\">true</span> &#125; &#125;));</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">error</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: <span class=\"string\">&#x27;unable-to-save-subscription&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&#x27;The subscription was received but we were unable to save it to our database.&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpush = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;web-push&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// VAPID keys should only be generated only once.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vapidKeys = webpush.<span class=\"title function_\">generateVAPIDKeys</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">webpush.<span class=\"title function_\">setGCMAPIKey</span>(<span class=\"string\">&#x27;&lt;Your GCM API Key Here&gt;&#x27;</span>);</span><br><span class=\"line\">webpush.<span class=\"title function_\">setVapidDetails</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;mailto:example@yourdomain.org&#x27;</span>,</span><br><span class=\"line\">  vapidKeys.<span class=\"property\">publicKey</span>,</span><br><span class=\"line\">  vapidKeys.<span class=\"property\">privateKey</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This is the same output of calling JSON.stringify on a PushSubscription</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pushSubscription = &#123;</span><br><span class=\"line\">  <span class=\"attr\">endpoint</span>: <span class=\"string\">&#x27;.....&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">keys</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">auth</span>: <span class=\"string\">&#x27;.....&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">p256dh</span>: <span class=\"string\">&#x27;.....&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">webpush.<span class=\"title function_\">sendNotification</span>(pushSubscription, <span class=\"string\">&#x27;Your Push Payload Text&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm test</span><br></pre></td></tr></table></figure>","categories":["Web","Front","js"]},{"title":"0x03--智能合约之Solidity基础知识","url":"/eth_0x03_contract_solidity/","content":"<h1 id=\"一个简单的例子\"><a href=\"#一个简单的例子\" class=\"headerlink\" title=\"一个简单的例子\"></a>一个简单的例子</h1><span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.21;</span><br><span class=\"line\"></span><br><span class=\"line\">contract SimpleAuction &#123;</span><br><span class=\"line\">    // Parameters of the auction. Times are either</span><br><span class=\"line\">    // absolute unix timestamps (seconds since 1970-01-01)</span><br><span class=\"line\">    // or time periods in seconds.</span><br><span class=\"line\">    address public beneficiary;</span><br><span class=\"line\">    uint public auctionEnd;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Current state of the auction.</span><br><span class=\"line\">    address public highestBidder;</span><br><span class=\"line\">    uint public highestBid;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Allowed withdrawals of previous bids</span><br><span class=\"line\">    mapping(address =&gt; uint) pendingReturns;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Set to true at the end, disallows any change</span><br><span class=\"line\">    bool ended;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Events that will be fired on changes.</span><br><span class=\"line\">    event HighestBidIncreased(address bidder, uint amount);</span><br><span class=\"line\">    event AuctionEnded(address winner, uint amount);</span><br><span class=\"line\"></span><br><span class=\"line\">    // The following is a so-called natspec comment,</span><br><span class=\"line\">    // recognizable by the three slashes.</span><br><span class=\"line\">    // It will be shown when the user is asked to</span><br><span class=\"line\">    // confirm a transaction.</span><br><span class=\"line\"></span><br><span class=\"line\">    /// Create a simple auction with `_biddingTime`</span><br><span class=\"line\">    /// seconds bidding time on behalf of the</span><br><span class=\"line\">    /// beneficiary address `_beneficiary`.</span><br><span class=\"line\">    function SimpleAuction(</span><br><span class=\"line\">        uint _biddingTime,</span><br><span class=\"line\">        address _beneficiary</span><br><span class=\"line\">    ) public &#123;</span><br><span class=\"line\">        beneficiary = _beneficiary;</span><br><span class=\"line\">        auctionEnd = now + _biddingTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// Bid on the auction with the value sent</span><br><span class=\"line\">    /// together with this transaction.</span><br><span class=\"line\">    /// The value will only be refunded if the</span><br><span class=\"line\">    /// auction is not won.</span><br><span class=\"line\">    function bid() public payable &#123;</span><br><span class=\"line\">        // No arguments are necessary, all</span><br><span class=\"line\">        // information is already part of</span><br><span class=\"line\">        // the transaction. The keyword payable</span><br><span class=\"line\">        // is required for the function to</span><br><span class=\"line\">        // be able to receive Ether.</span><br><span class=\"line\"></span><br><span class=\"line\">        // Revert the call if the bidding</span><br><span class=\"line\">        // period is over.</span><br><span class=\"line\">        require(now &lt;= auctionEnd);</span><br><span class=\"line\"></span><br><span class=\"line\">        // If the bid is not higher, send the</span><br><span class=\"line\">        // money back.</span><br><span class=\"line\">        require(msg.value &gt; highestBid);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (highestBid != 0) &#123;</span><br><span class=\"line\">            // Sending back the money by simply using</span><br><span class=\"line\">            // highestBidder.send(highestBid) is a security risk</span><br><span class=\"line\">            // because it could execute an untrusted contract.</span><br><span class=\"line\">            // It is always safer to let the recipients</span><br><span class=\"line\">            // withdraw their money themselves.</span><br><span class=\"line\">            pendingReturns[highestBidder] += highestBid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        highestBidder = msg.sender;</span><br><span class=\"line\">        highestBid = msg.value;</span><br><span class=\"line\">        emit HighestBidIncreased(msg.sender, msg.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// Withdraw a bid that was overbid.</span><br><span class=\"line\">    function withdraw() public returns (bool) &#123;</span><br><span class=\"line\">        uint amount = pendingReturns[msg.sender];</span><br><span class=\"line\">        if (amount &gt; 0) &#123;</span><br><span class=\"line\">            // It is important to set this to zero because the recipient</span><br><span class=\"line\">            // can call this function again as part of the receiving call</span><br><span class=\"line\">            // before `send` returns.</span><br><span class=\"line\">            pendingReturns[msg.sender] = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (!msg.sender.send(amount)) &#123;</span><br><span class=\"line\">                // No need to call throw here, just reset the amount owing</span><br><span class=\"line\">                pendingReturns[msg.sender] = amount;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// End the auction and send the highest bid</span><br><span class=\"line\">    /// to the beneficiary.</span><br><span class=\"line\">    function auctionEnd() public &#123;</span><br><span class=\"line\">        // It is a good guideline to structure functions that interact</span><br><span class=\"line\">        // with other contracts (i.e. they call functions or send Ether)</span><br><span class=\"line\">        // into three phases:</span><br><span class=\"line\">        // 1. checking conditions</span><br><span class=\"line\">        // 2. performing actions (potentially changing conditions)</span><br><span class=\"line\">        // 3. interacting with other contracts</span><br><span class=\"line\">        // If these phases are mixed up, the other contract could call</span><br><span class=\"line\">        // back into the current contract and modify the state or cause</span><br><span class=\"line\">        // effects (ether payout) to be performed multiple times.</span><br><span class=\"line\">        // If functions called internally include interaction with external</span><br><span class=\"line\">        // contracts, they also have to be considered interaction with</span><br><span class=\"line\">        // external contracts.</span><br><span class=\"line\"></span><br><span class=\"line\">        // 1. Conditions</span><br><span class=\"line\">        require(now &gt;= auctionEnd); // auction did not yet end</span><br><span class=\"line\">        require(!ended); // this function has already been called</span><br><span class=\"line\"></span><br><span class=\"line\">        // 2. Effects</span><br><span class=\"line\">        ended = true;</span><br><span class=\"line\">        emit AuctionEnded(highestBidder, highestBid);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 3. Interaction</span><br><span class=\"line\">        beneficiary.transfer(highestBid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"文件布局\"><a href=\"#文件布局\" class=\"headerlink\" title=\"文件布局\"></a>文件布局</h1><h2 id=\"声明引用的版本号\"><a href=\"#声明引用的版本号\" class=\"headerlink\" title=\"声明引用的版本号\"></a>声明引用的版本号</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引入其他文件\"><a href=\"#引入其他文件\" class=\"headerlink\" title=\"引入其他文件\"></a>引入其他文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &quot;filename&quot;;</span><br><span class=\"line\">import * as symbolName from &quot;filename&quot;;</span><br><span class=\"line\">import &#123;symbol1 as alias, symbol2&#125; from &quot;filename&quot;;</span><br><span class=\"line\">import &quot;filename&quot; as symbolName;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"引入路径\"><a href=\"#引入路径\" class=\"headerlink\" title=\"引入路径\"></a>引入路径</h2><p>所有路径名都被视为绝对路径，默认从主目录下引入。要从当前文件的同一目录中导入文件x，使用import “.&#x2F;x”作为x<br>在编译中还可以使用映射源文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &quot;github.com/ethereum/dapp-bin/library/iterable_mapping.sol&quot; as it_mapping;</span><br><span class=\"line\"></span><br><span class=\"line\">solc github.com/ethereum/dapp-bin/=/usr/local/dapp-bin/ source.sol</span><br><span class=\"line\"></span><br><span class=\"line\">solc module1:github.com/ethereum/dapp-bin/=/usr/local/dapp-bin/ \\</span><br><span class=\"line\">     module2:github.com/ethereum/dapp-bin/=/usr/local/dapp-bin_old/ \\</span><br><span class=\"line\">     source.sol</span><br></pre></td></tr></table></figure>\n<h2 id=\"Remix中的映射\"><a href=\"#Remix中的映射\" class=\"headerlink\" title=\"Remix中的映射\"></a>Remix中的映射</h2><p>允许直接使用网络地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &quot;github.com/ethereum/dapp-bin/library/iterable_mapping.sol&quot; as it_mapping;.</span><br></pre></td></tr></table></figure>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// This is a single-line comment.</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">This is a</span><br><span class=\"line\">multi-line comment.</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>参考格式：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRG94eWdlbg==\">Doxygen<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h1 id=\"智能合约结构\"><a href=\"#智能合约结构\" class=\"headerlink\" title=\"智能合约结构\"></a>智能合约结构</h1><blockquote>\n<p>Solidity合同与面向对象语言中的类相似。每个合约都可以包含<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby9lbi92MC40LjIxL3N0cnVjdHVyZS1vZi1hLWNvbnRyYWN0Lmh0bWwjc3RydWN0dXJlLXN0YXRlLXZhcmlhYmxlcw==\">状态变量<i class=\"fa fa-external-link-alt\"></i></span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby9lbi92MC40LjIxL3N0cnVjdHVyZS1vZi1hLWNvbnRyYWN0Lmh0bWwjc3RydWN0dXJlLWZ1bmN0aW9ucw==\">函数<i class=\"fa fa-external-link-alt\"></i></span>， <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby9lbi92MC40LjIxL3N0cnVjdHVyZS1vZi1hLWNvbnRyYWN0Lmh0bWwjc3RydWN0dXJlLWZ1bmN0aW9uLW1vZGlmaWVycw==\">函数修饰符<i class=\"fa fa-external-link-alt\"></i></span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby9lbi92MC40LjIxL3N0cnVjdHVyZS1vZi1hLWNvbnRyYWN0Lmh0bWwjc3RydWN0dXJlLWV2ZW50cw==\">事件<i class=\"fa fa-external-link-alt\"></i></span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby9lbi92MC40LjIxL3N0cnVjdHVyZS1vZi1hLWNvbnRyYWN0Lmh0bWwjc3RydWN0dXJlLXN0cnVjdC10eXBlcw==\">结构类型<i class=\"fa fa-external-link-alt\"></i></span>和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby9lbi92MC40LjIxL3N0cnVjdHVyZS1vZi1hLWNvbnRyYWN0Lmh0bWwjc3RydWN0dXJlLWVudW0tdHlwZXM=\">枚举类型的声明<i class=\"fa fa-external-link-alt\"></i></span>。此外，合同可以继承其他合同。</p>\n</blockquote>\n<h1 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h1><p>由于Solidity是一个静态类型的语言，所以编译时需明确指定变量的类型（包括本地或状态变量）Solidity编程语言提供了一些元类型(elementary types)可以组合成复杂类型。变量也支持在表达式运算，后面有一些关于运算符执行的先后顺序说明。</p>\n<p>类型本身包括后面讲到的值类型(Value Types),引用类型(Refrence Type)，一些复杂的内置数据结构等。</p>\n<h2 id=\"值类型-Value-Type\"><a href=\"#值类型-Value-Type\" class=\"headerlink\" title=\"值类型(Value Type)\"></a>值类型(Value Type)</h2><p>值类型又包含：</p>\n<ul>\n<li><p>布尔(Booleans)<br>bool : 返回值为 <code>true</code> or <code>false</code></p>\n</li>\n<li><p>整型(Integer)<br>int &#x2F; uint : 有符号和无符号整型</p>\n</li>\n<li><p>地址(Address)<br>address：20个字节的值<br>  地址成员：</p>\n<ul>\n<li>balance 和 transfer</li>\n<li>send</li>\n<li>call，callcode和delegatecall</li>\n</ul>\n</li>\n<li><p>字节数组(byte arrays)<br>byte 为bytes1的alias，引用连接<br>成员：</p>\n<ul>\n<li>.length</li>\n</ul>\n<p>动态大小的字节数组：</p>\n<ul>\n<li>bytes ： 动态大小的字节数组</li>\n<li>string：动态大小的UTF-8编码字符串</li>\n</ul>\n</li>\n<li><p>有理数和整型(Rational and Integer Literals，String literals)<br>取值范围 0-9</p>\n</li>\n<li><p>字符串文字<br>字符串文字用双引号或单引号（”foo”或’bar’）编写，隐式转换</p>\n</li>\n<li><p>十六进制字面量(Hexadecimal Literals)<br>十六进制文字以前缀为关键字hex，并用双引号或单引号<code>（hex&quot;001122FF&quot;）</code>括起来。它们的内容必须是十六进制字符串，它们的值将是这些值的二进制表示。</p>\n</li>\n<li><p>枚举类型(Enums)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">enum ActionChoices &#123; GoLeft, GoRight, GoStraight, SitStill &#125;</span><br><span class=\"line\">  ActionChoices choice;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数(Function Types)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function (&lt;parameter types&gt;) &#123;internal|external&#125; [pure|constant|view|payable] [returns (&lt;return types&gt;)]</span><br></pre></td></tr></table></figure></li>\n<li><p>存储类型</p>\n<ul>\n<li>memory：内存</li>\n<li>storage：存储</li>\n<li>calldata：存储函数参数的不可修改的非持久性区域</li>\n</ul>\n</li>\n<li><p>数组（array）<br>成员：</p>\n<ul>\n<li>.length<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uint[] memory a = new uint[](7);</span><br><span class=\"line\">bytes memory b = new bytes(len);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>结构（Structs）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Defines a new type with two fields.</span><br><span class=\"line\">struct Funder &#123;</span><br><span class=\"line\">    address addr;</span><br><span class=\"line\">    uint amount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>映射（Mapping）</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mapping(_KeyType =&gt; _ValueType)_KeyType_ValueType</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">delete a</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本类型之间的转换\"><a href=\"#基本类型之间的转换\" class=\"headerlink\" title=\"基本类型之间的转换\"></a>基本类型之间的转换</h2><h3 id=\"隐式转换\"><a href=\"#隐式转换\" class=\"headerlink\" title=\"隐式转换\"></a>隐式转换</h3><p>uint8可以转换为 uint16 and int128 to int256<br>但是 int8 不能转换为 uint256 ，因为uint256不能为-1</p>\n<h3 id=\"显式转换\"><a href=\"#显式转换\" class=\"headerlink\" title=\"显式转换\"></a>显式转换</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">int8  y  =  - 3 ; </span><br><span class=\"line\">uint  x  =  uint （y ）;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自动会默认一个类型\"><a href=\"#自动会默认一个类型\" class=\"headerlink\" title=\"自动会默认一个类型\"></a>自动会默认一个类型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uint24  x  =  0x123 ; </span><br><span class=\"line\">var  y  =  x ;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"单位和全局可用变量\"><a href=\"#单位和全局可用变量\" class=\"headerlink\" title=\"单位和全局可用变量\"></a>单位和全局可用变量</h1><h2 id=\"Ether-单位：\"><a href=\"#Ether-单位：\" class=\"headerlink\" title=\"Ether 单位：\"></a>Ether 单位：</h2><p>wei，finney，szabo或ether</p>\n<h2 id=\"时间单位\"><a href=\"#时间单位\" class=\"headerlink\" title=\"时间单位\"></a>时间单位</h2><p>seconds，minutes，hours，days，weeks和 years</p>\n<h2 id=\"特殊变量和函数\"><a href=\"#特殊变量和函数\" class=\"headerlink\" title=\"特殊变量和函数\"></a>特殊变量和函数</h2><h3 id=\"阻止和事务属性\"><a href=\"#阻止和事务属性\" class=\"headerlink\" title=\"阻止和事务属性\"></a>阻止和事务属性</h3><ul>\n<li>block.blockhash(uint blockNumber) returns (bytes32)：给定块的hash - 仅适用于256个最新块，不包括当前块</li>\n<li>block.coinbase（address）：当前块矿工的地址</li>\n<li>block.difficulty（uint）：当前难度</li>\n<li>block.gaslimit（uint）：当前块gaslimit</li>\n<li>block.number（uint）：当前块数</li>\n<li>block.timestamp（uint）：当前块时间戳，因为unix时期以来的秒数</li>\n<li>gasleft() returns (uint256)：剩余gas</li>\n<li>msg.data（bytes）：完成calldata</li>\n<li>msg.sender（address）：消息的发送者（当前发送地址）</li>\n<li>msg.sig（bytes4）：calldata的前四个字节（即函数标识符）</li>\n<li>msg.value（uint）：与消息一起发送的wei的数量</li>\n<li>now（uint）：当前块时间戳（别名为block.timestamp）</li>\n<li>tx.gasprice（uint）：交易的gas价格</li>\n<li>tx.origin（address）：交易的发送者</li>\n</ul>\n<h3 id=\"错误处理（Error-Handling）\"><a href=\"#错误处理（Error-Handling）\" class=\"headerlink\" title=\"错误处理（Error Handling）\"></a>错误处理（Error Handling）</h3><ul>\n<li>assert(bool condition):<br>如果条件不满足则抛出 - 用于内部错误。</li>\n<li>require(bool condition):<br>如果条件未满足则抛出 - 用于输入或外部组件中的错误。</li>\n<li>revert():<br>中止执行并恢复状态更改</li>\n</ul>\n<h3 id=\"数学和加密函数\"><a href=\"#数学和加密函数\" class=\"headerlink\" title=\"数学和加密函数\"></a>数学和加密函数</h3><ul>\n<li><p>addmod(uint x, uint y, uint k) returns (uint)<br>计算添加以任意精度执行的位置</p>\n</li>\n<li><p>mulmod(uint x, uint y, uint k) returns (uint)：<br>计算以任意精度执行乘法的位置</p>\n</li>\n<li><p>keccak256(…) returns (bytes32)<br>计算<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby9lbi92MC40LjIxL2FiaS1zcGVjLmh0bWwjYWJpLXBhY2tlZC1tb2Rl\">（紧密排列的）参数<i class=\"fa fa-external-link-alt\"></i></span>的Ethereum-SHA-3（Keccak-256）散列</p>\n</li>\n<li><p>sha256(…) returns (bytes32)<br>计算<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby9lbi92MC40LjIxL2FiaS1zcGVjLmh0bWwjYWJpLXBhY2tlZC1tb2Rl\">（紧密排列）参数<i class=\"fa fa-external-link-alt\"></i></span>的SHA-256哈希值</p>\n</li>\n<li><p>sha3(…) returns (bytes32)<br>别名 keccak256</p>\n</li>\n<li><p>ripemd160(…) returns (bytes20)<br>计算<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby9lbi92MC40LjIxL2FiaS1zcGVjLmh0bWwjYWJpLXBhY2tlZC1tb2Rl\">（紧密排列）参数的<i class=\"fa fa-external-link-alt\"></i></span> RIPEMD-160哈希值</p>\n</li>\n<li><p>ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)：<br>从椭圆曲线签名中恢复与公钥相关的地址，或在错误时返回零（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldGhlcmV1bS5zdGFja2V4Y2hhbmdlLmNvbS9xLzE3NzcvMjIy\">示例用法<i class=\"fa fa-external-link-alt\"></i></span>）</p>\n</li>\n</ul>\n<h3 id=\"地址相关\"><a href=\"#地址相关\" class=\"headerlink\" title=\"地址相关\"></a>地址相关</h3><ul>\n<li><address>.balance (uint256)\n地址的余额，单位wei。 </li>\n<li><address>.transfer(uint256 amount)\n发起转账。failure：throws ，损失2300gas。</li>\n<li><address>.send(uint256 amount) returns (bool)\n发起转账。failure：return false ，损失2300gas。</li>\n<li><address>.call(...) returns (bool)\n发起低级别转账。failure：return false ，损失全部gas，可以调整</li>\n<li><address>.callcode(...) returns (bool)\n发起低级别转账。failure：return false ，损失全部gas，可以调整\n</li>\n<li><address>.delegatecall(...) returns (bool)\n发起低级别转账。failure：return false ，损失全部gas，可以调整</li>\n</ul>\n<h3 id=\"合同相关\"><a href=\"#合同相关\" class=\"headerlink\" title=\"合同相关\"></a>合同相关</h3><ul>\n<li>this 当前合同</li>\n<li>selfdestruct(address recipient)<br>销毁当前合同，将资金发送到指定地址</li>\n<li>suicide(address recipient)<br>selfdestruct 别名</li>\n</ul>\n<h1 id=\"表达式和控制结构\"><a href=\"#表达式和控制结构\" class=\"headerlink\" title=\"表达式和控制结构\"></a>表达式和控制结构</h1><h2 id=\"输入参数和输出参数\"><a href=\"#输入参数和输出参数\" class=\"headerlink\" title=\"输入参数和输出参数\"></a>输入参数和输出参数</h2><h3 id=\"输入参数\"><a href=\"#输入参数\" class=\"headerlink\" title=\"输入参数\"></a>输入参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.16;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Simple &#123;</span><br><span class=\"line\">    function taker(uint _a, uint _b) public pure &#123;</span><br><span class=\"line\">        // do something with _a and _b.</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出参数\"><a href=\"#输出参数\" class=\"headerlink\" title=\"输出参数\"></a>输出参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">return v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"返回多个值\"><a href=\"#返回多个值\" class=\"headerlink\" title=\"返回多个值\"></a>返回多个值</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">return (v0, v1, ..., vn)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"控制结构\"><a href=\"#控制结构\" class=\"headerlink\" title=\"控制结构\"></a>控制结构</h2><ul>\n<li>switch</li>\n<li>goto.</li>\n<li>if, else</li>\n<li>while, do, for, break, continue,</li>\n<li>return,</li>\n<li>? :</li>\n</ul>\n<h2 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.g(8);</span><br><span class=\"line\">c.g(2);</span><br></pre></td></tr></table></figure>\n<h3 id=\"内部函数调用\"><a href=\"#内部函数调用\" class=\"headerlink\" title=\"内部函数调用\"></a>内部函数调用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.16;</span><br><span class=\"line\"></span><br><span class=\"line\">contract C &#123;</span><br><span class=\"line\">    function g(uint a) public pure returns (uint ret) &#123; return f(); &#125;</span><br><span class=\"line\">    function f() internal pure returns (uint ret) &#123; return g(7) + f(); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"外部函数调用\"><a href=\"#外部函数调用\" class=\"headerlink\" title=\"外部函数调用\"></a>外部函数调用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract InfoFeed &#123;</span><br><span class=\"line\">    function info() public payable returns (uint ret) &#123; return 42; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Consumer &#123;</span><br><span class=\"line\">    InfoFeed feed;</span><br><span class=\"line\">    function setFeed(address addr) public &#123; feed = InfoFeed(addr); &#125;</span><br><span class=\"line\">    function callFeed() public &#123; feed.info.value(10).gas(800)(); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"命名的呼叫和匿名功能参数\"><a href=\"#命名的呼叫和匿名功能参数\" class=\"headerlink\" title=\"命名的呼叫和匿名功能参数\"></a>命名的呼叫和匿名功能参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract InfoFeed &#123;</span><br><span class=\"line\">    function info() public payable returns (uint ret) &#123; return 42; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Consumer &#123;</span><br><span class=\"line\">    InfoFeed feed;</span><br><span class=\"line\">    function setFeed(address addr) public &#123; feed = InfoFeed(addr); &#125;</span><br><span class=\"line\">    function callFeed() public &#123; feed.info.value(10).gas(800)(); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"省略函数参数名称\"><a href=\"#省略函数参数名称\" class=\"headerlink\" title=\"省略函数参数名称\"></a>省略函数参数名称</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.16;</span><br><span class=\"line\"></span><br><span class=\"line\">contract C &#123;</span><br><span class=\"line\">    // omitted name for parameter</span><br><span class=\"line\">    function func(uint k, uint) public pure returns(uint) &#123;</span><br><span class=\"line\">        return k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"通过-new-创建合同\"><a href=\"#通过-new-创建合同\" class=\"headerlink\" title=\"通过 new 创建合同\"></a>通过 new 创建合同</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract D &#123;</span><br><span class=\"line\">    uint x;</span><br><span class=\"line\">    function D(uint a) public payable &#123;</span><br><span class=\"line\">        x = a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract C &#123;</span><br><span class=\"line\">    D d = new D(4); // will be executed as part of C&#x27;s constructor</span><br><span class=\"line\"></span><br><span class=\"line\">    function createD(uint arg) public &#123;</span><br><span class=\"line\">        D newD = new D(arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function createAndEndowD(uint arg, uint amount) public payable &#123;</span><br><span class=\"line\">        // Send ether along with the creation</span><br><span class=\"line\">        D newD = (new D).value(amount)(arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"合同\"><a href=\"#合同\" class=\"headerlink\" title=\"合同\"></a>合同</h1><h2 id=\"函数修饰符\"><a href=\"#函数修饰符\" class=\"headerlink\" title=\"函数修饰符\"></a>函数修饰符</h2><ul>\n<li>external<br>外部函数，可以从其他合同和交易中调用它们。不能在内部调用，也就是说<code>f()</code>不起作用，但是可以使用<code>this.f()</code>来调用。在接收大量数据的时候更高效。</li>\n<li>public<br>公共函数。默认值。<br>可以在内部或者通过消息调用。</li>\n<li>internal<br>内部函数。只能在内部合约进行使用，不能使用this。</li>\n<li>private<br>私有函数。只能在当前合约内使用。<blockquote>\n<p>所有外部观察者都可以看到合约内的所有内容。private 只会阻止其他合约访问和修改信息，但在区块链之外，整个世界仍然可以看到代码。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Getter函数\"><a href=\"#Getter函数\" class=\"headerlink\" title=\"Getter函数\"></a>Getter函数</h3><p>编译器会自动为所有的public 函数或者变量生成 Getter函数。</p>\n<h3 id=\"添加验证（-Modifier-）\"><a href=\"#添加验证（-Modifier-）\" class=\"headerlink\" title=\"添加验证（ Modifier ）\"></a>添加验证（ Modifier ）</h3><p>使用方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * @dev Allows owner to remove an employee.</span><br><span class=\"line\">     * @param employeeId The id of the employee.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function removeEmployee(address employeeId)</span><br><span class=\"line\">        public</span><br><span class=\"line\">        onlyOwner</span><br><span class=\"line\">        employee_exist(employeeId)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _settlePayment(employeeId);</span><br><span class=\"line\">        _totalSalary = _totalSalary.sub(employees[employeeId].salary);</span><br><span class=\"line\">        delete employees[employeeId];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>译自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby8=\">官方文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"恒定状态变量\"><a href=\"#恒定状态变量\" class=\"headerlink\" title=\"恒定状态变量\"></a>恒定状态变量</h3><p>状态变量可以声明为constant。</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"声明-View\"><a href=\"#声明-View\" class=\"headerlink\" title=\"声明 View\"></a>声明 View</h3><p>函数可以声明view，在这种情况下，它们保证不修改状态。</p>\n<ul>\n<li>写入状态变量。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby9lbi92MC40LjIxL2NvbnRyYWN0cy5odG1sI2V2ZW50cw==\">发射事件<i class=\"fa fa-external-link-alt\"></i></span>。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby9lbi92MC40LjIxL2NvbnRyb2wtc3RydWN0dXJlcy5odG1sI2NyZWF0aW5nLWNvbnRyYWN0cw==\">创建其他合同<i class=\"fa fa-external-link-alt\"></i></span>。*   使用<code>selfdestruct</code>。</li>\n<li>通过电话发送以太。</li>\n<li>调用任何未标记的功能<code>view</code>或<code>pure</code>。</li>\n<li>使用低级别呼叫。</li>\n<li>使用包含某些操作码的内联汇编</li>\n</ul>\n<h3 id=\"声明pure\"><a href=\"#声明pure\" class=\"headerlink\" title=\"声明pure\"></a>声明pure</h3><p>函数可以声明为pure，在这种情况下，它们保证不读取或修改状态。</p>\n<p>以下内容被认为是从状态中读取的：</p>\n<ul>\n<li>从状态变量读取。</li>\n<li>访问this.balance或<address>.balance。</li>\n<li>访问任何成员block，tx，msg（与除外msg.sig和msg.data）。</li>\n<li>调用任何未标记的功能pure。</li>\n<li>使用包含某些操作码的内联汇编。</li>\n</ul>\n<h3 id=\"Fallback-函数\"><a href=\"#Fallback-函数\" class=\"headerlink\" title=\"Fallback 函数\"></a>Fallback 函数</h3><p>合同可以有一个未命名的功能。这个函数不能有参数，也不能返回任何东西。如果没有其他函数与给定的函数标识符匹配（或者根本没有提供数据），它将在对合同的调用中执行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Test &#123;</span><br><span class=\"line\">    // This function is called for all messages sent to</span><br><span class=\"line\">    // this contract (there is no other function).</span><br><span class=\"line\">    // Sending Ether to this contract will cause an exception,</span><br><span class=\"line\">    // because the fallback function does not have the `payable`</span><br><span class=\"line\">    // modifier.</span><br><span class=\"line\">    function() public &#123; x = 1; &#125;</span><br><span class=\"line\">    uint x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// This contract keeps all Ether sent to it with no way</span><br><span class=\"line\">// to get it back.</span><br><span class=\"line\">contract Sink &#123;</span><br><span class=\"line\">    function() public payable &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Caller &#123;</span><br><span class=\"line\">    function callTest(Test test) public &#123;</span><br><span class=\"line\">        test.call(0xabcdef01); // hash does not exist</span><br><span class=\"line\">        // results in test.x becoming == 1.</span><br><span class=\"line\"></span><br><span class=\"line\">        // The following will not compile, but even</span><br><span class=\"line\">        // if someone sends ether to that contract,</span><br><span class=\"line\">        // the transaction will fail and reject the</span><br><span class=\"line\">        // Ether.</span><br><span class=\"line\">        //test.send(2 ether);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h3><p>允许有相同名称但是不同参数的方法共存</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.16;</span><br><span class=\"line\"></span><br><span class=\"line\">contract A &#123;</span><br><span class=\"line\">    function f(uint _in) public pure returns (uint out) &#123;</span><br><span class=\"line\">        out = 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function f(uint _in, bytes32 _key) public pure returns (uint out) &#123;</span><br><span class=\"line\">        out = 2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Events\"><a href=\"#Events\" class=\"headerlink\" title=\"Events\"></a>Events</h3><p>事件方便外部进行监听。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract ClientReceipt &#123;</span><br><span class=\"line\">    event Deposit(</span><br><span class=\"line\">        address indexed _from,</span><br><span class=\"line\">        bytes32 indexed _id,</span><br><span class=\"line\">        uint _value</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    function deposit(bytes32 _id) public payable &#123;</span><br><span class=\"line\">        // Events are emitted using `emit`, followed by</span><br><span class=\"line\">        // the name of the event and the arguments</span><br><span class=\"line\">        // (if any) in parentheses. Any such invocation</span><br><span class=\"line\">        // (even deeply nested) can be detected from</span><br><span class=\"line\">        // the JavaScript API by filtering for `Deposit`.</span><br><span class=\"line\">        emit Deposit(msg.sender, _id, msg.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在web3中调用事件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var abi = /* abi as generated by the compiler */;</span><br><span class=\"line\">var ClientReceipt = web3.eth.contract(abi);</span><br><span class=\"line\">var clientReceipt = ClientReceipt.at(&quot;0x1234...ab67&quot; /* address */);</span><br><span class=\"line\"></span><br><span class=\"line\">var event = clientReceipt.Deposit();</span><br><span class=\"line\"></span><br><span class=\"line\">// watch for changes</span><br><span class=\"line\">event.watch(function(error, result)&#123;</span><br><span class=\"line\">    // result will contain various information</span><br><span class=\"line\">    // including the argumets given to the `Deposit`</span><br><span class=\"line\">    // call.</span><br><span class=\"line\">    if (!error)</span><br><span class=\"line\">        console.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Or pass a callback to start watching immediately</span><br><span class=\"line\">var event = clientReceipt.Deposit(function(error, result) &#123;</span><br><span class=\"line\">    if (!error)</span><br><span class=\"line\">        console.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"日志记录\"><a href=\"#日志记录\" class=\"headerlink\" title=\"日志记录\"></a>日志记录</h3><p>log0, log1, log2, log3, log4…</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.10;</span><br><span class=\"line\"></span><br><span class=\"line\">contract C &#123;</span><br><span class=\"line\">    function f() public payable &#123;</span><br><span class=\"line\">        bytes32 _id = 0x420042;</span><br><span class=\"line\">        log3(</span><br><span class=\"line\">            bytes32(msg.value),</span><br><span class=\"line\">            bytes32(0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20),</span><br><span class=\"line\">            bytes32(msg.sender),</span><br><span class=\"line\">            _id</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"继承（Inheritance-）\"><a href=\"#继承（Inheritance-）\" class=\"headerlink\" title=\"继承（Inheritance ）\"></a>继承（Inheritance ）</h3><p>详细的路径可以参考专门写继承的一个<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC84OTBjMWM0MjU0NTA=\">C3 Linearization 线性化python<i class=\"fa fa-external-link-alt\"></i></span>。<br>如果想使用父类方法，需要声明 <code>super</code>。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>同名函数为构造函数，也就是在调用的时候默认会执行的函数。可以声明为public，internal。</p>\n<h3 id=\"抽象合约\"><a href=\"#抽象合约\" class=\"headerlink\" title=\"抽象合约\"></a>抽象合约</h3><p>仅仅声明，没有实体</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Feline &#123;</span><br><span class=\"line\">    function utterance() public returns (bytes32);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>接口与抽象类似，但是还有更多的限制。</p>\n<ul>\n<li>无法继承其他合同或接口。</li>\n<li>无法定义构造函数。</li>\n<li>无法定义变量。</li>\n<li>无法定义结构。</li>\n<li>无法定义枚举。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.11;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Token &#123;</span><br><span class=\"line\">    function transfer(address recipient, uint amount) public;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"库\"><a href=\"#库\" class=\"headerlink\" title=\"库\"></a>库</h3><p>部署在特定地址的公用函数</p>\n<h3 id=\"Using-For\"><a href=\"#Using-For\" class=\"headerlink\" title=\"Using For\"></a>Using For</h3><p>我理解类似apply或者中间件的意思，所有的参数使用先经过这个use 函数的处理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">contract C &#123;</span><br><span class=\"line\">    using Set for Set.Data; // this is the crucial change</span><br><span class=\"line\">    Set.Data knownValues;</span><br><span class=\"line\"></span><br><span class=\"line\">    function register(uint value) public &#123;</span><br><span class=\"line\">        // Here, all variables of type Set.Data have</span><br><span class=\"line\">        // corresponding member functions.</span><br><span class=\"line\">        // The following function call is identical to</span><br><span class=\"line\">        // `Set.insert(knownValues, value)`</span><br><span class=\"line\">        require(knownValues.insert(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h1><table>\n<thead>\n<tr>\n<th>Precedence</th>\n<th>Description</th>\n<th>Operator</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>1</em></td>\n<td>Postfix increment and decrement</td>\n<td><code>++</code>, <code>--</code></td>\n</tr>\n<tr>\n<td></td>\n<td>New expression</td>\n<td><code>new &lt;typename&gt;</code></td>\n</tr>\n<tr>\n<td></td>\n<td>Array subscripting</td>\n<td><code>&lt;array&gt;[&lt;index&gt;]</code></td>\n</tr>\n<tr>\n<td></td>\n<td>Member access</td>\n<td><code>&lt;object&gt;.&lt;member&gt;</code></td>\n</tr>\n<tr>\n<td></td>\n<td>Function-like call</td>\n<td><code>&lt;func&gt;(&lt;args...&gt;)</code></td>\n</tr>\n<tr>\n<td></td>\n<td>Parentheses</td>\n<td><code>(&lt;statement&gt;)</code></td>\n</tr>\n<tr>\n<td><em>2</em></td>\n<td>Prefix increment and decrement</td>\n<td><code>++</code>, <code>--</code></td>\n</tr>\n<tr>\n<td></td>\n<td>Unary plus and minus</td>\n<td><code>+</code>, <code>-</code></td>\n</tr>\n<tr>\n<td></td>\n<td>Unary operations</td>\n<td><code>delete</code></td>\n</tr>\n<tr>\n<td></td>\n<td>Logical NOT</td>\n<td><code>!</code></td>\n</tr>\n<tr>\n<td></td>\n<td>Bitwise NOT</td>\n<td><code>~</code></td>\n</tr>\n<tr>\n<td><em>3</em></td>\n<td>Exponentiation</td>\n<td><code>**</code></td>\n</tr>\n<tr>\n<td><em>4</em></td>\n<td>Multiplication, division and modulo</td>\n<td><code>*</code>, <code>/</code>, <code>%</code></td>\n</tr>\n<tr>\n<td><em>5</em></td>\n<td>Addition and subtraction</td>\n<td><code>+</code>, <code>-</code></td>\n</tr>\n<tr>\n<td><em>6</em></td>\n<td>Bitwise shift operators</td>\n<td><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td>\n</tr>\n<tr>\n<td><em>7</em></td>\n<td>Bitwise AND</td>\n<td><code>&amp;</code></td>\n</tr>\n<tr>\n<td><em>8</em></td>\n<td>Bitwise XOR</td>\n<td><code>^</code></td>\n</tr>\n<tr>\n<td><em>9</em></td>\n<td>Bitwise OR</td>\n<td>&amp;#124;</td>\n</tr>\n<tr>\n<td><em>10</em></td>\n<td>Inequality operators</td>\n<td><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></td>\n</tr>\n<tr>\n<td><em>11</em></td>\n<td>Equality operators</td>\n<td><code>==</code>, <code>!=</code></td>\n</tr>\n<tr>\n<td><em>12</em></td>\n<td>Logical AND</td>\n<td><code>&amp;&amp;</code></td>\n</tr>\n<tr>\n<td><em>13</em></td>\n<td>Logical OR</td>\n<td>&amp;#124;&amp;#124;</td>\n</tr>\n<tr>\n<td><em>14</em></td>\n<td>Ternary operator</td>\n<td><code>&lt;conditional&gt; ? &lt;if-true&gt; : &lt;if-false&gt;</code></td>\n</tr>\n<tr>\n<td><em>15</em></td>\n<td>Assignment operators</td>\n<td><code>=</code>, &amp;#124;&#x3D;, <code>^=</code>, <code>&amp;=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code></td>\n</tr>\n<tr>\n<td><em>16</em></td>\n<td>Comma operator</td>\n<td><code>,</code></td>\n</tr>\n</tbody></table>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"比特币英文版白皮书","url":"/bitcoin_en_white_paper/","content":"<p>未来已来，你来不来。<br>区块链毫无疑问改变了新一代技术。比特币的白皮书值得多读几遍，不管是技术上还是经济理念上绝对是超前的存在。<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iaXRjb2luLm9yZy9iaXRjb2luLnBkZg==\">Bitcoin: A Peer-to-Peer Electronic Cash System<i class=\"fa fa-external-link-alt\"></i></span><br>  Satoshi Nakamoto: <span class=\"exturl\" data-url=\"bWFpbHRvOiYjeDczOyYjeDYxOyYjeDc0OyYjMTExOyYjeDczOyYjMTA0OyYjMTA1OyYjMTEwOyYjeDQwOyYjeDY3OyYjMTA5OyYjMTIwOyYjeDJlOyYjOTk7JiN4NmY7JiN4NmQ7\">&#x73;&#x61;&#x74;&#111;&#x73;&#104;&#105;&#110;&#x40;&#x67;&#109;&#120;&#x2e;&#99;&#x6f;&#x6d;<i class=\"fa fa-external-link-alt\"></i></span><br>  <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iaXRjb2luLm9yZy8=\">www.bitcoin.org<i class=\"fa fa-external-link-alt\"></i></span></p>\n<span id=\"more\"></span>\n\n<h2 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h2><p>A purely peer-to-peer version of electronic cash would allow online payments to be sent directly from one party to another without going through a financial institution. Digital signatures provide part of the solution, but the main benefits are lost if a trusted third party is still required to prevent double-spending. We propose a solution to the double-spending problem using a peer-to-peer network. The network timestamps transactions by hashing them into an ongoing chain of hash-based proof-of-work, forming a record that cannot be changed without redoing the proof-of work. The longest chain not only serves as proof of the sequence of events witnessed, but proof that it came from the largest pool of CPU power. As long as a majority of CPU power is controlled by nodes that are not cooperating to attack the network, they’ll generate the longest chain and outpace attackers. The network itself requires minimal structure. Messages are broadcast on a best effort basis, and nodes can leave and rejoin the network at will, accepting the longest proof-of-work chain as proof of what happened while they were gone.</p>\n<!-- more -->\n\n<h2 id=\"1-Introduction\"><a href=\"#1-Introduction\" class=\"headerlink\" title=\"1. Introduction\"></a>1. Introduction</h2><p>Commerce on the Internet has come to rely almost exclusively on financial institutions serving as trusted third parties to process electronic payments. While the system works well enough for most transactions, it still suffers from the inherent weaknesses of the trust based model. Completely non-reversible transactions are not really possible, since financial institutions cannot avoid mediating disputes. The cost of mediation increases transaction costs, limiting the minimum practical transaction size and cutting off the possibility for small casual transactions, and there is a broader cost in the loss of ability to make non-reversible payments for nonreversible services. With the possibility of reversal, the need for trust spreads. Merchants must be wary of their customers, hassling them for more information than they would otherwise need. A certain percentage of fraud is accepted as unavoidable. These costs and payment uncertainties can be avoided in person by using physical currency, but no mechanism exists to make payments over a communications channel without a trusted party.</p>\n<p>What is needed is an electronic payment system based on cryptographic proof instead of trust, allowing any two willing parties to transact directly with each other without the need for a trusted third party. Transactions that are computationally impractical to reverse would protect sellers from fraud, and routine escrow mechanisms could easily be implemented to protect buyers. In this paper, we propose a solution to the double-spending problem using a peer-to-peer distributed timestamp server to generate computational proof of the chronological order of transactions. The system is secure as long as honest nodes collectively control more CPU power than any cooperating group of attacker nodes.</p>\n<h2 id=\"2-Transactions\"><a href=\"#2-Transactions\" class=\"headerlink\" title=\"2. Transactions\"></a>2. Transactions</h2><p>We define an electronic coin as a chain of digital signatures. Each owner transfers the coin to the next by digitally signing a hash of the previous transaction and the public key of the next owner and adding these to the end of the coin. A payee can verify the signatures to verify the chain of ownership.</p>\n<p>The problem of course is the payee can’t verify that one of the owners did not double-spend the coin. A common solution is to introduce a trusted central authority, or mint, that checks every transaction for double spending. After each transaction, the coin must be returned to the mint to issue a new coin, and only coins issued directly from the mint are trusted not to be double-spent. The problem with this solution is that the fate of the entire money system depends on the company running the mint, with every transaction having to go through them, just like a bank.</p>\n<p>We need a way for the payee to know that the previous owners did not sign any earlier transactions. For our purposes, the earliest transaction is the one that counts, so we don’t care about later attempts to double-spend. The only way to confirm the absence of a transaction is to be aware of all transactions. In the mint based model, the mint was aware of all transactions and decided which arrived first. To accomplish this without a trusted party, transactions must be publicly announced [1], and we need a system for participants to agree on a single history of the order in which they were received. The payee needs proof that at the time of each transaction, the majority of nodes agreed it was the first received.</p>\n<h2 id=\"3-Timestamp-Server\"><a href=\"#3-Timestamp-Server\" class=\"headerlink\" title=\"3. Timestamp Server\"></a>3. Timestamp Server</h2><p>The solution we propose begins with a timestamp server. A timestamp server works by taking a hash of a block of items to be timestamped and widely publishing the hash, such as in a newspaper or Usenet post [2-5]. The timestamp proves that the data must have existed at the time, obviously, in order to get into the hash. Each timestamp includes the previous timestamp in its hash, forming a chain, with each additional timestamp reinforcing the ones before it.</p>\n<h2 id=\"4-Proof-of-Work\"><a href=\"#4-Proof-of-Work\" class=\"headerlink\" title=\"4. Proof-of-Work\"></a>4. Proof-of-Work</h2><p>To implement a distributed timestamp server on a peer-to-peer basis, we will need to use a proof of-work system similar to Adam Back’s Hashcash [6], rather than newspaper or Usenet posts. The proof-of-work involves scanning for a value that when hashed, such as with SHA-256, the hash begins with a number of zero bits. The average work required is exponential in the number of zero bits required and can be verified by executing a single hash.</p>\n<p>For our timestamp network, we implement the proof-of-work by incrementing a nonce in the block until a value is found that gives the block’s hash the required zero bits. Once the CPU effort has been expended to make it satisfy the proof-of-work, the block cannot be changed without redoing the work. As later blocks are chained after it, the work to change the block would include redoing all the blocks after it.</p>\n<p>The proof-of-work also solves the problem of determining representation in majority decision making. If the majority were based on one-IP-address-one-vote, it could be subverted by anyone able to allocate many IPs. Proof-of-work is essentially one-CPU-one-vote. The majority decision is represented by the longest chain, which has the greatest proof of-work effort invested in it. If a majority of CPU power is controlled by honest nodes, the honest chain will grow the fastest and outpace any competing chains. To modify a past block, an attacker would have to redo the proof-of work of the block and all blocks after it and then catch up with and surpass the work of the honest nodes. We will show later that the probability of a slower attacker catching up diminishes exponentially as subsequent blocks are added.</p>\n<p>To compensate for increasing hardware speed and varying interest in running nodes over time, the proof-of-work difficulty is determined by a moving average targeting an average number of blocks per hour. If they’re generated too fast, the difficulty increases.</p>\n<h2 id=\"5-Network\"><a href=\"#5-Network\" class=\"headerlink\" title=\"5. Network\"></a>5. Network</h2><p>The steps to run the network are as follows:</p>\n<ol>\n<li>New transactions are broadcast to all nodes.</li>\n<li>Each node collects new transactions into a block.</li>\n<li>Each node works on finding a difficult proof-of-work for its block.</li>\n<li>When a node finds a proof-of-work, it broadcasts the block to all nodes.</li>\n<li>Nodes accept the block only if all transactions in it are valid and not already spent.</li>\n<li>Nodes express their acceptance of the block by working on creating the next block in the chain, using the hash of the accepted block as the previous hash.</li>\n</ol>\n<p>Nodes always consider the longest chain to be the correct one and will keep working on extending it. If two nodes broadcast different versions of the next block simultaneously, some nodes may receive one or the other first. In that case, they work on the first one they received, but save the other branch in case it becomes longer. The tie will be broken when the next proofof-work is found and one branch becomes longer; the nodes that were working on the other branch will then switch to the longer one.</p>\n<p>New transaction broadcasts do not necessarily need to reach all nodes. As long as they reach many nodes, they will get into a block before long. Block broadcasts are also tolerant of dropped messages. If a node does not receive a block, it will request it when it receives the next block and realizes it missed one.</p>\n<h2 id=\"6-Incentive\"><a href=\"#6-Incentive\" class=\"headerlink\" title=\"6. Incentive\"></a>6. Incentive</h2><p>By convention, the first transaction in a block is a special transaction that starts a new coin owned by the creator of the block. This adds an incentive for nodes to support the network, and provides a way to initially distribute coins into circulation, since there is no central authority to issue them. The steady addition of a constant of amount of new coins is analogous to gold miners expending resources to add gold to circulation. In our case, it is CPU time and electricity that is expended.</p>\n<p>The incentive can also be funded with transaction fees. If the output value of a transaction is less than its input value, the difference is a transaction fee that is added to the incentive value of the block containing the transaction. Once a predetermined number of coins have entered circulation, the incentive can transition entirely to transaction fees and be completely inflation free.</p>\n<p>The incentive may help encourage nodes to stay honest. If a greedy attacker is able to assemble more CPU power than all the honest nodes, he would have to choose between using it to defraud people by stealing back his payments, or using it to generate new coins. He ought to find it more profitable to play by the rules, such rules that favour him with more new coins than everyone else combined, than to undermine the system and the validity of his own wealth.</p>\n<h2 id=\"7-Reclaiming-Disk-Space\"><a href=\"#7-Reclaiming-Disk-Space\" class=\"headerlink\" title=\"7. Reclaiming Disk Space\"></a>7. Reclaiming Disk Space</h2><p>Once the latest transaction in a coin is buried under enough blocks, the spent transactions before it can be discarded to save disk space. To facilitate this without breaking the block’s hash, transactions are hashed in a Merkle Tree [7][2][5], with only the root included in the block’s hash. Old blocks can then be compacted by stubbing off branches of the tree. The interior hashes do not need to be stored.</p>\n<p>A block header with no transactions would be about 80 bytes. If we suppose blocks are generated every 10 minutes, 80 bytes * 6 * 24 * 365 &#x3D; 4.2MB per year. With computer systems typically selling with 2GB of RAM as of 2008, and Moore’s Law predicting current growth of 1.2GB per year, storage should not be a problem even if the block headers must be kept in memory.</p>\n<h2 id=\"8-Simplified-Payment-Verification\"><a href=\"#8-Simplified-Payment-Verification\" class=\"headerlink\" title=\"8. Simplified Payment Verification\"></a>8. Simplified Payment Verification</h2><p>It is possible to verify payments without running a full network node. A user only needs to keep a copy of the block headers of the longest proof-of-work chain, which he can get by querying network nodes until he’s convinced he has the longest chain, and obtain the Merkle branch linking the transaction to the block it’s timestamped in. He can’t check the transaction for himself, but by linking it to a place in the chain, he can see that a network node has accepted it, and blocks added after it further confirm the network has accepted it.</p>\n<p>As such, the verification is reliable as long as honest nodes control the network, but is more vulnerable if the network is overpowered by an attacker. While network nodes can verify transactions for themselves, the simplified method can be fooled by an attacker’s fabricated transactions for as long as the attacker can continue to overpower the network. One strategy to protect against this would be to accept alerts from network nodes when they detect an invalid block, prompting the user’s software to download the full block and alerted transactions to confirm the inconsistency. Businesses that receive frequent payments will probably still want to run their own nodes for more independent security and quicker verification.</p>\n<h2 id=\"9-Combining-and-Splitting-Value\"><a href=\"#9-Combining-and-Splitting-Value\" class=\"headerlink\" title=\"9. Combining and Splitting Value\"></a>9. Combining and Splitting Value</h2><p>Although it would be possible to handle coins individually, it would be unwieldy to make a separate transaction for every cent in a transfer. To allow value to be split and combined, transactions contain multiple inputs and outputs. Normally there will be either a single input from a larger previous transaction or multiple inputs combining smaller amounts, and at most two outputs: one for the payment, and one returning the change, if any, back to the sender.</p>\n<p>It should be noted that fan-out, where a transaction depends on several transactions, and those transactions depend on many more, is not a problem here. There is never the need to extract a complete standalone copy of a transaction’s history.</p>\n<h2 id=\"10-Privacy\"><a href=\"#10-Privacy\" class=\"headerlink\" title=\"10. Privacy\"></a>10. Privacy</h2><p>The traditional banking model achieves a level of privacy by limiting access to information to the parties involved and the trusted third party. The necessity to announce all transactions publicly precludes this method, but privacy can still be maintained by breaking the flow of information in another place: by keeping public keys anonymous. The public can see that someone is sending an amount to someone else, but without information linking the transaction to anyone. This is similar to the level of information released by stock exchanges, where the time and size of individual trades, the “tape”, is made public, but without telling who the parties were.</p>\n<p>As an additional firewall, a new key pair should be used for each transaction to keep them from being linked to a common owner. Some linking is still unavoidable with multi-input transactions, which necessarily reveal that their inputs were owned by the same owner. The risk is that if the owner of a key is revealed, linking could reveal other transactions that belonged to the same owner.</p>\n<h2 id=\"11-Calculations\"><a href=\"#11-Calculations\" class=\"headerlink\" title=\"11. Calculations\"></a>11. Calculations</h2><p>We consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain. Even if this is accomplished, it does not throw the system open to arbitrary changes, such as creating value out of thin air or taking money that never belonged to the attacker. Nodes are not going to accept an invalid transaction as payment, and honest nodes will never accept a block containing them. An attacker can only try to change one of his own transactions to take back money he recently spent.</p>\n<p>The race between the honest chain and an attacker chain can be characterized as a Binomial Random Walk. The success event is the honest chain being extended by one block, increasing its lead by +1, and the failure event is the attacker’s chain being extended by one block, reducing the gap by -1.</p>\n<p>The probability of an attacker catching up from a given deficit is analogous to a Gambler’s Ruin problem. Suppose a gambler with unlimited credit starts at a deficit and plays potentially an infinite number of trials to try to reach breakeven. We can calculate the probability he ever reaches breakeven, or that an attacker ever catches up with the honest chain, as follows [8]:</p>\n<p>Given our assumption that p q, the probability drops exponentially as the number of blocks the attacker has to catch up with increases. With the odds against him, if he doesn’t make a lucky lunge forward early on, his chances become vanishingly small as he falls further behind.</p>\n<p>We now consider how long the recipient of a new transaction needs to wait before being sufficiently certain the sender can’t change the transaction. We assume the sender is an attacker who wants to make the recipient believe he paid him for a while, then switch it to pay back to himself after some time has passed. The receiver will be alerted when that happens, but the sender hopes it will be too late.</p>\n<p>The receiver generates a new key pair and gives the public key to the sender shortly before signing. This prevents the sender from preparing a chain of blocks ahead of time by working on it continuously until he is lucky enough to get far enough ahead, then executing the transaction at that moment. Once the transaction is sent, the dishonest sender starts working in secret on a parallel chain containing an alternate version of his transaction.</p>\n<p>The recipient waits until the transaction has been added to a block and z blocks have been linked after it. He doesn’t know the exact amount of progress the attacker has made, but assuming the honest blocks took the average expected time per block, the attacker’s potential progress will be a Poisson distribution with expected value:</p>\n<p>To get the probability the attacker could still catch up now, we multiply the Poisson density for each amount of progress he could have made by the probability he could catch up from that point:</p>\n<p>Rearranging to avoid summing the infinite tail of the distribution…</p>\n<p>Converting to C code…</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> double AttackerSuccessProbability(double q, int z)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">double</span> p = <span class=\"number\">1.0</span> - q;</span><br><span class=\"line\">  <span class=\"type\">double</span> lambda = z * (q / p);</span><br><span class=\"line\">  <span class=\"type\">double</span> sum = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> i, k;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt;= z; k++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> poisson = <span class=\"built_in\">exp</span>(-lambda);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= k; i++)</span><br><span class=\"line\">      poisson *= lambda / i;</span><br><span class=\"line\">      sum -= poisson * (<span class=\"number\">1</span> - <span class=\"built_in\">pow</span>(q / p, z - k));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Running some results, we can see the probability drop off exponentially with z.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">q=<span class=\"number\">0.1</span></span><br><span class=\"line\">z=<span class=\"number\">0</span> P=<span class=\"number\">1.0000000</span></span><br><span class=\"line\">z=<span class=\"number\">1</span> P=<span class=\"number\">0.2045873</span></span><br><span class=\"line\">z=<span class=\"number\">2</span> P=<span class=\"number\">0.0509779</span></span><br><span class=\"line\">z=<span class=\"number\">3</span> P=<span class=\"number\">0.0131722</span></span><br><span class=\"line\">z=<span class=\"number\">4</span> P=<span class=\"number\">0.0034552</span></span><br><span class=\"line\">z=<span class=\"number\">5</span> P=<span class=\"number\">0.0009137</span></span><br><span class=\"line\">z=<span class=\"number\">6</span> P=<span class=\"number\">0.0002428</span></span><br><span class=\"line\">z=<span class=\"number\">7</span> P=<span class=\"number\">0.0000647</span></span><br><span class=\"line\">z=<span class=\"number\">8</span> P=<span class=\"number\">0.0000173</span></span><br><span class=\"line\">z=<span class=\"number\">9</span> P=<span class=\"number\">0.0000046</span></span><br><span class=\"line\">z=<span class=\"number\">10</span> P=<span class=\"number\">0.0000012</span></span><br><span class=\"line\">q=<span class=\"number\">0.3</span></span><br><span class=\"line\">z=<span class=\"number\">0</span> P=<span class=\"number\">1.0000000</span></span><br><span class=\"line\">z=<span class=\"number\">5</span> P=<span class=\"number\">0.1773523</span></span><br><span class=\"line\">z=<span class=\"number\">10</span> P=<span class=\"number\">0.0416605</span></span><br><span class=\"line\">z=<span class=\"number\">15</span> P=<span class=\"number\">0.0101008</span></span><br><span class=\"line\">z=<span class=\"number\">20</span> P=<span class=\"number\">0.0024804</span></span><br><span class=\"line\">z=<span class=\"number\">25</span> P=<span class=\"number\">0.0006132</span></span><br><span class=\"line\">z=<span class=\"number\">30</span> P=<span class=\"number\">0.0001522</span></span><br><span class=\"line\">z=<span class=\"number\">35</span> P=<span class=\"number\">0.0000379</span></span><br><span class=\"line\">z=<span class=\"number\">40</span> P=<span class=\"number\">0.0000095</span></span><br><span class=\"line\">z=<span class=\"number\">45</span> P=<span class=\"number\">0.0000024</span></span><br><span class=\"line\">z=<span class=\"number\">50</span> P=<span class=\"number\">0.0000006</span></span><br></pre></td></tr></table></figure>\n\n<p>Solving for P less than 0.1%…</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">P &lt; <span class=\"number\">0.001</span></span><br><span class=\"line\">q=<span class=\"number\">0.10</span> z=<span class=\"number\">5</span></span><br><span class=\"line\">q=<span class=\"number\">0.15</span> z=<span class=\"number\">8</span></span><br><span class=\"line\">q=<span class=\"number\">0.20</span> z=<span class=\"number\">11</span></span><br><span class=\"line\">q=<span class=\"number\">0.25</span> z=<span class=\"number\">15</span></span><br><span class=\"line\">q=<span class=\"number\">0.30</span> z=<span class=\"number\">24</span></span><br><span class=\"line\">q=<span class=\"number\">0.35</span> z=<span class=\"number\">41</span></span><br><span class=\"line\">q=<span class=\"number\">0.40</span> z=<span class=\"number\">89</span></span><br><span class=\"line\">q=<span class=\"number\">0.45</span> z=<span class=\"number\">340</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-Conclusion\"><a href=\"#12-Conclusion\" class=\"headerlink\" title=\"12. Conclusion\"></a>12. Conclusion</h2><p>We have proposed a system for electronic transactions without relying on trust. We started with the usual framework of coins made from digital signatures, which provides strong control of ownership, but is incomplete without a way to prevent double-spending. To solve this, we proposed a peer-to-peer network using proof-of-work to record a public history of transactions that quickly becomes computationally impractical for an attacker to change if honest nodes control a majority of CPU power. The network is robust in its unstructured simplicity. Nodes work all at once with little coordination. They do not need to be identified, since messages are not routed to any particular place and only need to be delivered on a best effort basis. Nodes can leave and rejoin the network at will, accepting the proof-of work chain as proof of what happened while they were gone. They vote with their CPU power, expressing their acceptance of valid blocks by working on extending them and rejecting invalid blocks by refusing to work on them. Any needed rules and incentives can be enforced with this consensus mechanism.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] W. Dai, “b-money,” <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53ZWlkYWkuY29tL2Jtb25leS50eHQ=\">http://www.weidai.com/bmoney.txt<i class=\"fa fa-external-link-alt\"></i></span>, 1998.<br>[2] H. Massias, X.S. Avila, and J.-J. Quisquater, “Design of a secure timestamping service with minimal<br>trust requirements,” In 20th Symposium on Information Theory in the Benelux, May 1999.<br>[3] S. Haber, W.S. Stornetta, “How to time-stamp a digital document,” In Journal of Cryptology, vol 3, no<br>2, pages 99-111, 1991.<br>[4] D. Bayer, S. Haber, W.S. Stornetta, “Improving the efficiency and reliability of digital time-stamping,”<br>In Sequences II: Methods in Communication, Security and Computer Science, pages 329-334, 1993.<br>[5] S. Haber, W.S. Stornetta, “Secure names for bit-strings,” In Proceedings of the 4th ACM Conference<br>on Computer and Communications Security, pages 28-35, April 1997.<br>[6] A. Back, “Hashcash - a denial of service counter-measure,”<br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5oYXNoY2FzaC5vcmcvcGFwZXJzL2hhc2hjYXNoLnBkZg==\">http://www.hashcash.org/papers/hashcash.pdf<i class=\"fa fa-external-link-alt\"></i></span>, 2002.<br>[7] R.C. Merkle, “Protocols for public key cryptosystems,” In Proc. 1980 Symposium on Security and<br>Privacy, IEEE Computer Society, pages 122-133, April 1980.<br>[8] W. Feller, “An introduction to probability theory and its applications,” 1957.</p>\n","categories":["BlockChain"],"tags":["Blockchain","BTC"]},{"title":"重温周金涛周期论：2018年之后大家能明白我说的话的意义.md","url":"/review_zhoujintao_cycle_theory/","content":"<blockquote>\n<p>为了交作业，我把车停在路边。我相信周期论，相信命运轮回，历史的起伏浩荡，无时无刻不在告诉我们万物阴阳相对，有盛有衰。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"60年的经济周期：人生有三次财富机会\"><a href=\"#60年的经济周期：人生有三次财富机会\" class=\"headerlink\" title=\"60年的经济周期：人生有三次财富机会\"></a>60年的经济周期：人生有三次财富机会</h2><p>重要经济周期理论开创者是两个，第一个康波周期，实际上它是全球经济运动的决定力量，也是在座各位人生财富规划的根本理论。</p>\n<p>我有一句名言叫“人生发财靠康波”，这句话的意思就是说，我们每个人的财富积累，一定不要以为是你多有本事，财富积累完全来源于经济周期运动的时间给你的机会。</p>\n<p>比如过去的十年，中国暴富的典型是煤老板，肯定大家在心里认为煤老板肯定是不如我有本事。为什么他成为煤老板，原因就是在于天时给的机会。按照康德拉季耶夫理论来看这是大宗商品的牛市，就给煤老板人生发财的机会。</p>\n<p>但是在座各位可不可以成为煤老板？应该今生不会看到，这是它的理论描述的。一个人的一生中所能够获得的机会，理论上来讲只有三次，如果每一个机会都没抓到，你肯定一生的财富就没有了。如果抓住其中一个机会，你就能够至少是个中产阶级。</p>\n<p>这句话是什么意思呢？就是说我们人生的财富轨迹是有迹可循的。人生的财富轨迹就是康德拉季耶夫周期。我先给大家介绍一下康德拉季耶夫周期。</p>\n<p>在世界经济周期运动中最长的周期是康德拉季耶夫周期，它一个循环是60年一次。大家知道60年就是一个人的自然寿命是60年，中国讲60甲子，循环一次就是一个康德拉季耶夫周期。它分为回升、繁荣、衰退、箫条。</p>\n<h2 id=\"未来十年注定在萧条中渡过\"><a href=\"#未来十年注定在萧条中渡过\" class=\"headerlink\" title=\"未来十年注定在萧条中渡过\"></a>未来十年注定在萧条中渡过</h2><p>现在这次经历的康德拉季耶夫周期，在座各位经历的是从衰退向箫条的转换点，在座各位未来十年注定在箫条中渡过，这是康德拉季耶夫不可改变的规律。</p>\n<p>到了2017年中期，大家就可以知道我的判断对与不对。我曾经在2007年的时候判断2008年将发生康德拉季耶夫周期衰退一次冲击，就是大家看到的次贷危机。</p>\n<p>2014年10月份，我发表报告认为，2015年二季度发生二次冲击，二季度之后股市暴跌，人民币贬值，这些都是有规律可寻的，资产价格的运动绝不属于规律，这个都是大家可以看到的。</p>\n<p>2017年中期，三季度之后，我们将看到中国和美国的资产价格全线回落，2019年出现最终低点。那个低点可能远比大家想像的低。这就是现在可以告诉大家的康波理论。</p>\n<p>一个康波的运动是技术创新推动的，本次康波1982年开始回升，大家知道1975年到1982年是上一次康波的箫条阶段。</p>\n<p>如果了解世界经济史应该知道，全球滞胀，美国英国做供给侧改革。我看大家很兴高采烈的谈论供给侧改革问题，供给侧改革是全球进入箫条的标志，似乎没有必要兴高采烈的，实际上真的谈到供给侧改革，一定要进入箫条的。</p>\n<p>繁华是1991年到1994年的美国信息技术泡沫，是康波繁荣的标志，当美国的泡沫破灭之后，后面经济又增长了七八年。</p>\n<p>所以，2008年之前是世界经济的本次康波的黄金阶段，从2004年到2015年应该是本次康波的衰退期，衰退期能看到的就是，虽然经济增长不怎么样，但我们还能够从资产价格中获得很大的意义，这个大家能够感受到。比如我们的股市、债市，2009年以来，大的角度来看都是上升趋势，都是有利可图的，这是康波中的衰退阶段。</p>\n<h2 id=\"2018年后能明白我说的话的意义\"><a href=\"#2018年后能明白我说的话的意义\" class=\"headerlink\" title=\"2018年后能明白我说的话的意义\"></a>2018年后能明白我说的话的意义</h2><p>去年我有一个判断，2015年是全球经济及资产价格的重要拐点，过去6年，下半场会讲一下，过去6年投资看一个指标就是央行，美国、中国央行不断放水你就有钱抓，这是过去6年投资的唯一标的，就是宽松。</p>\n<p>大家今年放水不管用了，这就是资产价格的转换点。我看去年大家讨论资产荒，资产荒就是我钱多，但是没有收益率，这是很危险的信号，这是一个转折点，转折点意味着未来四到五年的总体的资产收益率不仅不赚钱，甚至可能要亏损。</p>\n<p>我在去年底给各个机构的建议是，要做好大幅降低资产收益率的心理预期的准备，同时要做好应对未来在2017年到2019年可能发生流动性危机的准备。</p>\n<p>我觉得今天的会议是很好的，为什么呢？因为我觉得如果现在大家通过发债能圈应该多圈点，到2019年你应该能感受到参加今天这次会议的意义。我奉劝大家，比如说如果想发债最好发五年的，2018年之后就能够感到我说的话的意义。</p>\n<h2 id=\"消灭中产阶级财富的两个方法\"><a href=\"#消灭中产阶级财富的两个方法\" class=\"headerlink\" title=\"消灭中产阶级财富的两个方法\"></a>消灭中产阶级财富的两个方法</h2><p>2015年之后，全球应该进入的康波的箫条阶段，在康波的箫条来临之前，会发生哪个现象？这个现象相信大家都已经看到了，我们觉得手中有很多流动性，大家这个流动性过去6年还通过炒股票赚到钱，大家2015年开始不赚钱。</p>\n<p>怎么办？我需要为我手中的钱保值，所以，大家想了一个办法就是买进一线城市核心区域的房地产。第二个办法搞点新兴产业，很多人投了很多新三板。从我的本心出发，这两个办法都是消灭中产阶级财富的方法。</p>\n<p>我自己投资的纪律是2014年之后第一不买房，现在是中国房地产周期反弹阶段，就是只有一小戳涨，所以大家看到的一定是熊市中的反弹。怎么办？卖，不应该买，炒股票的人全都理解的一个最简单的道理。所以现在应该是房地产的兑现阶段。</p>\n<p>第二个大家追逐的新兴产业，因为我是研究长波理论的，我看的很清楚，实际上所谓的互联网+，就是本次康波的技术创新，信息技术的最后成熟阶段。</p>\n<p>大家知道，信息技术爆发期在80年代，90年代在美国主导国的展开期。当技术从主导国传导到中国，中国是本轮康波中的追赶人，传导到中国扩散到生活的每一个角落，那么你们想这个技术还有什么前途可言？</p>\n<p>一个技术当它在追赶国的渗透到达了无孔不入的时候，一定到达了它生命周期的最后阶段，这个技术后面就是一个成熟并衰落的趋势。</p>\n<p>所以，去年我跟朋友说，2016年和2017年是新三板的兑现阶段，能不能兑现要看你的命运了，这个东西不是我能够左右的。大家不要认为一定要兑现。</p>\n<p>当大家看到这两个现象的时候，意味着康波要进入箫条期，你突然会发现，在经历一次滞胀之后，2016年到2017年是一次滞胀，一次滞胀发现你手中持有的流动性差的资产可能就没人要了。</p>\n<p>在这个阶段之后，将进入货币消灭机制，就是这些资产的价格将下跌，这个就是康波理论告诉我们的。</p>\n<p>每一次的康波的箫条都是一次滞胀展开，滞胀之后就是消灭通胀的阶段。所以，未来可能大家突然会觉得，手中的流动性资产不够或者没有。这也是让大家赶紧发债的原因，你可以有现金流用，甚至以现在低的价格买进资产。到2025年，都是第五次康波箫条阶段。</p>\n<p>第四次康波的箫条在一九七几年，第三次是一九二几年，就是美国的大箫条，康波理论描述了一套世界经济的长期的运转。</p>\n<h2 id=\"40岁以上的人，第二次机会在2019年\"><a href=\"#40岁以上的人，第二次机会在2019年\" class=\"headerlink\" title=\"40岁以上的人，第二次机会在2019年\"></a>40岁以上的人，第二次机会在2019年</h2><p>我们作为一个人如何在这样的过程中来规划你的人生财富呢？以我的长期研究来看的话，你的人生的机会基本上由康波的运动给予的。</p>\n<p>十年前你在中信建投证券找了一份工作不是太重要，大家十年前在中信建投证券旁边买一套房子真的很重要，因为中信建投在北京朝阳门，现在房子涨十倍，大家挣十年也挣不到。人生的财富不是靠工资，而是靠你对于资产价格的投资。</p>\n<p>你对资产价格的投资是时间规律呢？一定是低点买进才有意义，这个时候买进房子这些没有什么意义。在一个人60岁的人生中，其中30年参与经济生活，30年中康波给予你的财富机会只有三次，不以你的主观意志为转移。</p>\n<p>40岁以上的人，人生第一次机会在2008年，如果那时候买股票、房子，你的人生是很成功的。2008年之前的上一次人生机会1999年，40岁的人抓住那次机会的人不多，所以2008年是第一次机会。</p>\n<p>第二次机会在2019年，最后一次在30年附近，能够抓住一次你就能够成为中产阶级，这就是人生发财靠康波的道理。</p>\n<p>巴菲特没什么，为什么能够投资成功，原因就在于他出生在第五次康波周期的回升阶段，所以他能成功，如果现在一样不会成功，这个就是有宿命决定的。</p>\n<p>为什么那个年代的美国会出现比尔盖茨，因为技术在那个年代展开的，现在中国出不了比尔盖茨，你的人生机会由康波的运动决定的，有人觉得自己很牛，很大的本事，赚很大的钱，事实上每个人都是在命之中运行。这就是我研究完经济周期以后我非常相信的一点，人的生命都是宿命的。</p>\n<p>最简单的就是1985年之后出生的人，现在30岁以下的人，注定你的人生机会第一次只能在2019年出现，35岁之前出现，所以现在25岁到30岁的人，未来的5年，只能依靠在浙商银行好好工作。因为买房什么都不行，这是由你的人生的财富的命运所决定的，这个是没有办法的。</p>\n<p>我的意思是说，我们在做人生财富规划的时候，一定知道每个人都是在社会的大系统中运行，社会大系统给你时间机会，你就有时间机会。这个大系统没给你机会，你在这方面再努力也是没有用的。</p>\n<h2 id=\"房地产周期20年轮回一次\"><a href=\"#房地产周期20年轮回一次\" class=\"headerlink\" title=\"房地产周期20年轮回一次\"></a>房地产周期20年轮回一次</h2><p>一个人的人生财富有哪些？理论上只能有这么几类：</p>\n<h3 id=\"第一类就是大宗商品\"><a href=\"#第一类就是大宗商品\" class=\"headerlink\" title=\"第一类就是大宗商品\"></a>第一类就是大宗商品</h3><p>这个实际上大家不要小看，在60年巡回中，大宗商品是最暴利的行业。就是刚才讲的，中国人觉得最爆发的煤老板，原因就在此。</p>\n<p>因为大宗商品的牛市是几十年出现一次，我们这次的大宗商品牛市是2000年到2002年，这次是康波的衰退阶段。第四次康波的衰退阶段70年代是石油危机，也是大的商品牛市，所以商品是最暴利的资产。</p>\n<p>在座各位所经历的第五次康波，商品的牛市已经结束，以后不可能依靠商品取得暴利。2011年至少到30年，商品的走势都是熊市，所以不可能在商品方面取得大的收益的。你说能不能做空，不行！2015年之前商品可以做空，大家2016年之后不能再做空，未来商品走的是熊市。所以在座的各位的人生的最主要的资产，不管是否曾经拥有，后面不可能再有，这是第一类。</p>\n<h3 id=\"第二类资产是房地产\"><a href=\"#第二类资产是房地产\" class=\"headerlink\" title=\"第二类资产是房地产\"></a>第二类资产是房地产</h3><p>就是经济周期理论中的枯枿周期，房地产周期20年轮回一次，一个人当中可以碰到两次房地产周期。为什么呢？人的一生作为群体来讲会两次买房，第一次是结婚的时候，平均27岁，第二次是二次置业，改善性需求是42岁左右。一个人的消费高峰，最高峰出现在46岁的时候，46岁之后这个人的消费就往下走，你的消费逐渐由房子这些变成医疗养老。</p>\n<p>房子一生中大致消费两次，大概20年一次。房地产周期是20年轮回一次。中国本轮房地产周期1999年开启，按照房地产周期规律分为三波，第一波2000到2007年，2009年之后又涨一波，2013年、2014年一波，三波上去，全国房地产周期的高点判断是在2014年，这个是中国房地产周期的高点，后面价格下来。</p>\n<p>但是，到2015年的时候大家突然发现，房子又好卖了，2016年一线城市核心区域房地产暴涨，但这不是房地产重新开始，而是碧浪。三四线城市的房子能涨才是牛市，垃圾股不涨，一小戳股票涨不是牛市，这是房地产周期的碧浪反弹。</p>\n<p>所以，2017年上半年附近，中国的这次反弹会结束。如果你拥有一下城市的核心区域的房地产，并且不是自住房，我认为应该在未来的一年之内卖掉，这就是我对于大家的建议。</p>\n<p>卖掉房子之后，你发现可以买到好多很便宜的资产，性价比已经发生变化，这就是房地产周期。不要以为房地产卖出去买不回来，这个世界上没有只涨不跌的东西。2019年房价会是一个低点，2017年、2018年房价是要回落的。一个房地产周期的循环就是这样，20年的循环，15年上升，5年下降，美国也是一样。</p>\n<p>2007年美国房子开始跌，跌到2011年附近触底反弹。大家到美国买房有点不一样，我的研究主要就是全球大类资产配置，美国欧洲都研究，中国在世界的东半球，美国在西半球，东西半球的房地产周期起点差十点。</p>\n<p>中国房地产的起点是2000年，美国是2010年，2010年之后美国出现房子的牛市，2017年是第一波的高点，如果到美国买房，也可以再等等，现在也是第一波高点。大家现在买也不会被套，因为上升期没有结束。</p>\n<p>作为广义大众来讲，不管你的知识怎么样，你跟大妈没有区别。意思是说，这种东西跟智商没关系，这个就是你的人生的机遇就是看你能不能把握。</p>\n<p>人的一生，房子是最核心资产，商品不一定能绑住，房子至少一辈子搞两次，这是第二类资产。</p>\n<h3 id=\"第三类资产是股票\"><a href=\"#第三类资产是股票\" class=\"headerlink\" title=\"第三类资产是股票\"></a>第三类资产是股票</h3><p>股票不是长周期问题，随时波动，这个在我们周期中没法明确定义。</p>\n<h3 id=\"第四类资产就是艺术品市场\"><a href=\"#第四类资产就是艺术品市场\" class=\"headerlink\" title=\"第四类资产就是艺术品市场\"></a>第四类资产就是艺术品市场</h3><p>像古玩、翡翠这类东西，过去一些年涨的很快的，反腐之后下降厉害，这些来看就没有只涨不跌的东西，你的人生资产总会在涨涨跌跌中渡过。</p>\n<h2 id=\"保值和流动性是未来五年最核心问题\"><a href=\"#保值和流动性是未来五年最核心问题\" class=\"headerlink\" title=\"保值和流动性是未来五年最核心问题\"></a>保值和流动性是未来五年最核心问题</h2><p>作为人生财富规划，你要明确现在这个时点应该做什么。刚才已经说了四类资产，这四类资产中如何进行波动？我的看法是，未来五年是资产的下降期，这个时候大家尽量持有流动性好的资产，而不要持有流动性不好的资产。像高位的房子就是流动性不好的资产，还有一级市场的股权也是流动性不好的资产。</p>\n<p>为什么提新三板，因为流动性很差，想卖很难卖。在未来的投资，大家一定注意，赚钱不重要，第一目标是保值，第二是流动性。这两个是未来五年大家在投资的时候我觉得一定要非常注意的一个，应该是一个最核心的问题。</p>\n<p>这是用康德拉季耶夫理论进行人生规划。60年运动中，会套着三个房地产周期，20年波动一次，一个房地产周期套着两个固定资产投资周期，十年波动一次。一个固定资产投资周期套着三个库存周期。</p>\n<p>所以，你的人生就是一次康波，三次房地产周期，九次固定资产投资周期和十八次库存周期，人的一生就是这样的过程。</p>\n<p>我在中国这两个周期当中是开拓者，康德拉季耶夫周期理论和库存周期理论。现在很多实业同事，制造业的价格波动最短决定周期就是库存周期。我在去年10月份写报告，认为2016年一季度中国经济将触底，中国经济的库存周期将反弹，大家看到商品价格触底反弹了，这就是用我这套理论做出来的东西，所以我最近很忙。</p>\n<p>前两天有很多人发表与我不同的观点，周期要换面，有些人发这样的观点，实际上这些都是对我的观点的反驳，没关系，我们可以用未来的时间来看。</p>\n<h2 id=\"2017年中期之后进入中周期的最后下降阶段\"><a href=\"#2017年中期之后进入中周期的最后下降阶段\" class=\"headerlink\" title=\"2017年中期之后进入中周期的最后下降阶段\"></a>2017年中期之后进入中周期的最后下降阶段</h2><p>今年最主要的机会在哪里？刚才已经讲了，最核心的机会就在于两个字：涨价。大家所有炒作的东西都来源于涨价，除了我刚才说的大宗商品，农产品中的鸡鸭也涨价，房子也涨价，包括最近股票炒的维生素也涨价。</p>\n<p>过去我们是赚钱靠什么？过去三年赚钱靠炒小股票，把估值炒上去，玩虚的。2016年我的总结叫脱虚向实，就是大家发现虚的已经没法玩，到头了，这个时候发现，央行的货币政策到边际高点，货币乘数上升了，库存周期带动货币乘数上升，这时候基本逻辑就是通胀，2016年一开年，小股票下来了，大宗商品开始涨了，这是大逻辑的转换。</p>\n<p>大家每年做投资，开年之前都要想想，这年做投资的主逻辑，过去几年炒小股票，但是未来，2016年就是炒涨价。作为个人投资来讲，还是那句话，不能买流动性差的资产。商品资源股可以，别的流动性差的资产也是不划算的。根源在于货币乘数上升，会出现通胀。</p>\n<p>我们看去年，2015年发生了什么？股票下跌，人民币贬值，这些意味着什么？2015年是全球的中周期高点，刚才讲平均8.6年、9年一个中周期循环，在一个中周期中有三个库存周期，会出现三个高点。</p>\n<p>一般来讲，中周期的最高点可以出现在三个高点的任何一个高点上。2015年以美国代表的全球的中周期高点，2014年12月份是美国的固定资产投资和PMI的高点，我当时就说美国经济进入最高点，后面资产价格就会有反应，大家看到2015年出现了美国股市跌了。</p>\n<p>同时在去年，我们还看到美联储加息，从2000年反危机之后第一次加息，进入了十年中周期的高点阶段，2015年到2019年就是中周期的下行期，所以这个时候，我们可以看到逻辑就发生变化。</p>\n<p>大家一定不能再以过去的思维来判断我们未来的投资，不能认为央行又放水了所以有机会，未必是这样。我们未来的逻辑，应该全面脱虚向实。但这个脱虚向实也是短暂的，只适用于2016年，2017年中期之后会进入中周期的最后下降阶段，就是我们刚才讲的2018年、2019年要谨慎小心，这就是现在看到的这样一个大方向，大方向就是未来是下降阶段。</p>\n<h2 id=\"2017年美元指数牛市结束\"><a href=\"#2017年美元指数牛市结束\" class=\"headerlink\" title=\"2017年美元指数牛市结束\"></a>2017年美元指数牛市结束</h2><p>黄金未来的最大机会是什么？除了是货币的矛，具有保值功能之外，还有一个巨大的机会在于2017年美元指数牛市结束，人民币加速国际化，这个时候国际货币体系将发生动荡。</p>\n<p>所谓的国际货币体系动荡就是，以前都是以美元为主的，世界是观察美元的货币政策，大家现在发现，作为世界经济体的老二中国开始挑战这个问题，到底中国在国际未来的货币体系中起到多大作为我们也不知道，取决于很多因素。</p>\n<p>这个时候，就会出现国际货币体系动荡的问题，大家就会心里发毛，怎么办？买黄金，因为黄金毕竟是货币的矛。我觉得，未来黄金的大机会是来源于此，来源于国际货币体系的动荡。我觉得今年黄金的低点，今年的黄金低点有可能出现在二或者三季度，那个时候大家可以再买，现在应该是短期高点</p>\n<p>如果说我们今年的投资逻辑是这样的一套逻辑，怎么判断今年的机会呢？如果说你在今年能看到PPI、CPI上行，说明我们的经济正常运转，比如说你就做股票，买商品，正常运行，一旦看到PPI、CPI转头，甚至涨不动，这时候要小心，这可能是经济的第三库存周期高点，这个高点出现要抛掉所有的资产，只留现金和黄金等待低点的出现。</p>\n<p>今年做投资就看CPI和PPI，如果涨得动，说明经济还OK，如果说CPI和PPI有调头往下的趋势，一定要小心了。我们今年的投资的主逻辑，不管做什么资产，投资的主逻辑都是这样，这个是我要讲的第二个问题。</p>\n<p>第三个问题，美元作为世界货币，我们怎么判断这个问题。2011年12月，我写过一篇报告叫“美元破百冲击中国”。当时美元指数在72，我用康波理论推断，2011年开始美元向上运行，牛市，2017年中期美元指数到100%以上，在美元指数2017年冲破一百之后，可能会对中国的资产价格差距冲击。</p>\n<p>现在来看，至少前半部分是对的，美元指数已经曾经到过一百，原因很简单，我刚才给大家讲美元指数的牛市和熊市，本质上由美国的房地产周期决定的， 2010年美国启动房地产周期之后，美元指数进入牛市。</p>\n<h2 id=\"2019年是中国经济的最差年景\"><a href=\"#2019年是中国经济的最差年景\" class=\"headerlink\" title=\"2019年是中国经济的最差年景\"></a>2019年是中国经济的最差年景</h2><p>而2019年，东方国家启动房地产周期之后，繁荣从西半球到东半球，那时候美元就变成熊市，所以不是所有时间都适合换美元的。为什么呢？说起来有点玄，我刚才给大家改的四周期嵌套理论，我研究这个东西十几年，我后来发现这个东西的运行规律实际上就是天文学的规律。</p>\n<p>以后，主宰地球的规律是太阳规律，太阳黑子周期的循环就是55年到60年最长循环，20年一个海尔循环，20年当中包含来个10年的施瓦贝循环，然后包含来个厄尔尼诺循环，所以厄尔尼诺就是经济中的库存周期。</p>\n<p>我后来研究完这条东西之后，越来越觉得宿命论是可行的，用你的生辰算命是有依据的，以后我用经济周期理论可以推导出类似的结果。</p>\n<p>我后来发现，不管是算命还是经济周期理论遵循的都是天文学规律。宿命论一定是有道理的。当然也许我们无法解释为什么有道理，但是一定是其中有内在的联系。</p>\n<p>我觉得大家，特别平时在工作中，我就跟我们的朋友说，一定要知道你的领导属什么的，这很重要。以后你知道你们公司董事长总经理属什么的，你就大致能判断你们公司今年行还是不行。如果行就多干几年，不行就趁早跳槽很重要。这真的是非常重要的事情。</p>\n<p>刚才讲了2019年是中国经济的最差年景，我刚才说的另一套理论中也是可以解释的。所以美元现在还没有到达这波牛市的高点，这波高点应该在明年中期。</p>\n<p>明年上半年，美国也会出现滞胀，那时候美联储会连续加息，流动性会出问题，美国经济掉头往下，通胀掉头往下，就会出现经济的调整。这就是我们2017年的中期可以看到的。大家做投资只要掌握这些规律，不会犯大的错误的。</p>\n<p>第四个关于政策，中国的政策肯定受到了蒙代尔三角的约束，就是汇率跟货币政策跟资本自由流动只能取其二，不能都获得。所以，自从人民币贬值之后，中国货币政策的宽松受到影响。现在人民币趋于稳定，货币政策又有一些空地了。</p>\n<h2 id=\"锻炼身体，2019年再回来\"><a href=\"#锻炼身体，2019年再回来\" class=\"headerlink\" title=\"锻炼身体，2019年再回来\"></a>锻炼身体，2019年再回来</h2><p>但是总体来讲，今年货币政策不会很宽松，这是可以看到的。根源就是我们国家对于汇率的担忧，以及对于通胀水平的担忧。讲一个我对未来的人民币汇率的看法，现在大家对人民币汇率持悲观态度，我觉得今年下半年之后，人民币汇率会升值，这是我的判断。</p>\n<p>为什么呢？</p>\n<p>从道理上来讲，中国和美国是世界经济的共同领导者，这两个国家的利益事实上是一致的，美联储加息的时候考虑中国怎么样，这是很诚恳的表态。你观察去年以来的汇率会发现，人民币走势是美元走势的领先指标。人民币先跌美元就跌了，现在人民币起稳美元指数就起稳了。如果判断全球开启第三库存周期美国要加息，美元要涨了，人民币也会上去。今年下半年不一定看空人民币，大家还是要好好琢磨一下。可能对于做外汇的比较重要，这是比较大的趋势。</p>\n<p>2017年之后，可能大家觉得如果美元贬值，人民币一定贬值，我们怎么办呢？有两个办法，当你预感人民币要贬值的时候，可以做空韩元，韩国是中国经济的领先指标，可以做空韩元；还可以随后做空澳元，以后澳大利亚是资源国，它的货币跟着铁矿石波动的。这个就是可以对冲人民币下跌风险的办法，这就是我平时研究的东西，全球资产配置宏观对冲理论。</p>\n<p>很多人说孩子留学到澳大利亚要不要买房，我说现在不适合，原因在于第一：现在澳元偏高，将来可以换到更多；第二澳洲现在房子贵，四五年之后肯定比现在便宜。</p>\n<p>大家到资源国买东西，一定等到资源的最低点来买，大约在2018年或者2019年。可能在座的各位对我不太熟悉，但是二级市场对我的理论是很熟悉的。</p>\n<p>你们可能不知道，他们一般都是称我叫“尼古拉斯金涛”，原因就是在于康德拉季耶夫周期，康德拉季耶夫全称是“尼古拉斯康德拉季耶夫”，你们搜“尼古拉斯金涛”就知道，因为我对中国经济和世界经济周期的判断至少过去是比较准的，未来只能到时候去验证。</p>\n<p>2016年最大的投资机会是什么？就是商品价格，这个问题去年反复强调的。我觉得大家一定要明白一点，任何机会都是靠赌博的，没有确定性的机会，当你下注的时候就决定你能不能成功，一个优秀的投资人都是赌博赌出来的，这是毫无疑问的。</p>\n<p>我跟投资经理说，当你看到所有事情确定的时候，机会不属于你了，只有不确定的时候才能得到机会，所以任何的机会都是赌博。2015年已经告诉你2016年最值得赌的是商品价格反弹，赌不赌在你，现在看来确实反弹，我刚才讲的就会按照这个走，因为最主要的信号已经出现，就是2016年的情况。</p>\n<p>对于未来想提醒大家的一点，2018年到2019年是康波周期的万劫不复之年，60年当中的最差阶段，所以一定要控制2018、2019年的风险。在此之前做好充分的现金准备，现在可以发债，五年之后还有现金。</p>\n<p>对于个人来讲，今年明年卖掉投资性房地产和新三板股权，买进黄金，休假两年，锻炼身体，2019年回来，这就是未来给大家做的人生规划。</p>\n<h2 id=\"85后的人生最大机遇即将到来\"><a href=\"#85后的人生最大机遇即将到来\" class=\"headerlink\" title=\"85后的人生最大机遇即将到来\"></a>85后的人生最大机遇即将到来</h2><p>刚才主持人介绍说我曾任中信建投研究所所长，但是去年我辞职后只做首席经济学家，原因就是在于我觉得未来的四年，做事情的困难性比过去六年大。而且在箫条即将来临之前，一个社会必将出现分裂倾向，理论中可以看到的，所以政治上出现一些倾向也是正常的。</p>\n<p>这种情况下，你的人生只有两个选择：一个选择像我一样当个虚职，每天忽悠忽悠，心情好出来忽悠，心情不好在家里待着，这是一种选择；另外一种选择未来一定是英雄辈出的时代，你可以成为先德或者先烈，这是可以选择的另外一个人生道路，在未来也是可以选择的。</p>\n<p>我觉得未来四年确实是社会将发生很大的变化的时候，特别对于1985年之后的生人，确实你的人生的最大机遇即将到来。这是我对未来的看法。</p>\n<p>具体2016年，我原来怎么判断的，第三库存周期的开启中国最领先，在2016年一季度，美国第三库存周期开启的时候，之前是不会加息，我觉得美国最早加息在9月份才会加息，这是可以预见的一件事情。</p>\n<p>为什么美国也怕加息？因为美国最脆弱的也是资产价格，美国也是怕加息的。欧洲，欧洲经济周期的运动比中国和美国晚，现在欧洲经济周期高位稍回落的位置，欧洲的低点在今年四季度出现。</p>\n<p>美元指数的走势应该是一二季度弱，四季度转强。这就决定了2016年中国经济最佳触底的时间点就在上半年，美元的压力不强，同时大宗商品的反弹就在一季度。</p>\n<p>网上有一个我讲话的讲演稿，微信上很多转载，我当时12月份大家都看到了。看到没关系，上半年依然是这个趋势，大家依然可以做多大宗商品和经济上行，三月份美元指数触底反弹，到2017年中期都是一个上行期。今年上半年是中国经济、股市、资产价格的最好的喘息阶段，商品涨了，股市起稳了。这个用我们这套理论是可以把握的。</p>\n<p>今年是未来四年最好的，核心逻辑就是做通胀，炒涨价，是我们核心的逻辑。什么时候炒最好？下半年就出现滞胀，那时候买黄金了，再后面就是抛掉资产，持有现金，这就是今年的总体的逻辑。</p>\n<p>本文摘自，金枫股经：股票投资学习平台，共勉。</p>\n","categories":["Financing"]},{"title":"英语学习笔记之赖世雄老师千聊课程笔记","url":"/teacher_lai_shixiong_notes/","content":"<blockquote>\n<p>方法篇</p>\n</blockquote>\n<h1 id=\"第一节：“滚动学习”，走出传统学习思维误区\"><a href=\"#第一节：“滚动学习”，走出传统学习思维误区\" class=\"headerlink\" title=\"第一节：“滚动学习”，走出传统学习思维误区\"></a>第一节：“滚动学习”，走出传统学习思维误区</h1><h2 id=\"走出误区\"><a href=\"#走出误区\" class=\"headerlink\" title=\"走出误区\"></a>走出误区</h2><ul>\n<li>语言学习是靠天赋和智力决定的<br>英语学习和智力一点关系没有！只要你重复学习，一个词练上千万遍，没有学不会的。</li>\n<li>初学英语先从语法开始<br>你看小孩开始学说话的时候，有先从语法开始教授吗？都是先呀呀学语<span id=\"more\"></span></li>\n</ul>\n<h2 id=\"三个基本态度\"><a href=\"#三个基本态度\" class=\"headerlink\" title=\"三个基本态度\"></a>三个基本态度</h2><ul>\n<li>善用零星时间</li>\n<li>少就是多，慢就是快</li>\n<li>持之以恒，永不放弃</li>\n</ul>\n<h2 id=\"基本学习过程\"><a href=\"#基本学习过程\" class=\"headerlink\" title=\"基本学习过程\"></a>基本学习过程</h2><ul>\n<li>采用滚动式学习法并少量内容学习</li>\n<li>强烈建议大家去自创一个学英语的环境</li>\n</ul>\n<h1 id=\"第二节：颠覆认知-回归正确英语学习顺序\"><a href=\"#第二节：颠覆认知-回归正确英语学习顺序\" class=\"headerlink\" title=\"第二节：颠覆认知:回归正确英语学习顺序\"></a>第二节：颠覆认知:回归正确英语学习顺序</h1><h2 id=\"学生学习英语过程的误区：\"><a href=\"#学生学习英语过程的误区：\" class=\"headerlink\" title=\"学生学习英语过程的误区：\"></a>学生学习英语过程的误区：</h2><p>死记单词-&gt;死背课文-&gt;死记语法-&gt;应试考试-&gt;学单词题、阅读测试、完形填空、作文及翻译</p>\n<h2 id=\"今日不要脸，他日更有脸\"><a href=\"#今日不要脸，他日更有脸\" class=\"headerlink\" title=\"今日不要脸，他日更有脸\"></a>今日不要脸，他日更有脸</h2><p>“若想学好英语，首先就是不要脸！”<br>见到外国人就大胆说出脑子里想出来的字词，尽管词不达意，语法错误都没关系。能够从自己嘴里迸出英语出来就已令他们敬佩。</p>\n<h2 id=\"自学英语的四个过程\"><a href=\"#自学英语的四个过程\" class=\"headerlink\" title=\"自学英语的四个过程\"></a>自学英语的四个过程</h2><ul>\n<li>文字</li>\n<li>语法</li>\n<li>规范</li>\n<li>听</li>\n</ul>\n<h2 id=\"学习英语的态度：\"><a href=\"#学习英语的态度：\" class=\"headerlink\" title=\"学习英语的态度：\"></a>学习英语的态度：</h2><p>“过度学习”（overlearning）— 也就是重复练习  可提升我们的持久学习记忆能力，我们越熟悉某个技巧，就越能融会贯通其它的技能并臻于至善。</p>\n<h2 id=\"秘诀：\"><a href=\"#秘诀：\" class=\"headerlink\" title=\"秘诀：\"></a>秘诀：</h2><p>我们学习语言的秘诀就是：善用零星时间。<br>不论在学听、说、读、写，都要一遍又一遍地学习，时间久了就能熟能生巧。<br>所以，学习英语的四个过程是：说 → 读 → 写 → 听</p>\n<h1 id=\"第三节：巧用工具，互联网学习的6个方法\"><a href=\"#第三节：巧用工具，互联网学习的6个方法\" class=\"headerlink\" title=\"第三节：巧用工具，互联网学习的6个方法\"></a>第三节：巧用工具，互联网学习的6个方法</h1><h2 id=\"如何利用互联网学习英语听说读写的能力\"><a href=\"#如何利用互联网学习英语听说读写的能力\" class=\"headerlink\" title=\"如何利用互联网学习英语听说读写的能力?\"></a>如何利用互联网学习英语听说读写的能力?</h2><h3 id=\"发音\"><a href=\"#发音\" class=\"headerlink\" title=\"发音\"></a>发音</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3JhY2hlbHNlbmdsaXNoLmNvbS8=\">rachelsenglish<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>推荐原因:</p>\n<ul>\n<li>1.美籍老师，地道美式发音及夸张的嘴型，让学者很容易跟着学习。</li>\n<li>2.节目附有影像，采用 the audio-visual approach（影像同步教学法），方便学习者模仿学习</li>\n</ul>\n<blockquote>\n<p>学习方法小贴士：</p>\n</blockquote>\n<ul>\n<li>1.每天只学两个元音，学完后再学辅音。</li>\n<li>2.要求自己每天坚持模仿这些元音几千遍以上，使发音的嘴型与舌头的位置能学好“一次到位”。</li>\n</ul>\n<h3 id=\"基础会话\"><a href=\"#基础会话\" class=\"headerlink\" title=\"基础会话\"></a>基础会话</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWFzeXBhY2VsZWFybmluZy5jb20v\">Basic English Conversation<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50YWxrZW5nbGlzaC5jb20vc3BlYWtpbmcvbGlzdHJlZ3VsYXIuYXNweA==\">Daily English Conversation<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>选择小技巧：</p>\n<ul>\n<li>1.选择有英语字幕的节目。附带有情境录像的教学，反而令学习者分心。</li>\n<li>2.选择会话教材学习时，尽量挑有真人发音、语调自然且发音极准的教材，这样适合读者轻声跟读模仿。</li>\n</ul>\n<p>模仿的技巧（shadowing）的好处：</p>\n<ul>\n<li>1.不知不觉中提升英语对话的理解能力；</li>\n<li>2.不知不觉中提升自己说英语的速度；</li>\n<li>3.不知不觉中成功模仿该国人自然说话的语调；</li>\n<li>4.不知不觉中大幅改善自己的单词短语发音及连音。</li>\n</ul>\n<blockquote>\n<p>学习方法小贴士：<br>每则对话的内容并跟读几百次后，采用“角色扮演”，把会话的内容一人饰两角表演出来，不要死记内容。<br>每天做到两三百遍以上，其学习效果惊人！</p>\n</blockquote>\n<h3 id=\"学听慢速有声的美语读本\"><a href=\"#学听慢速有声的美语读本\" class=\"headerlink\" title=\"学听慢速有声的美语读本\"></a>学听慢速有声的美语读本</h3><ul>\n<li><p>国外公司精良制作的<code>有声美语读本文字及音文件</code></p>\n<blockquote>\n<p>学习方法小贴士：<br>一次购买一本，完全弄懂全文意思及语法盲点后，用shadowing 的方式跟读，最后用自己的英语诠释全书内容，一遍一遍地诠释，直至诠释得流畅无阻为止。</p>\n</blockquote>\n</li>\n<li><p>电台节目《美国之音》互联网电台专为全球各国想学好美语听力的读者所设的特别节目：of America Special English<br>选择原因：<br>完全免费且内容每天都会更新。<br>每日报导国际间发生的重大新闻，由专业的男女播音员播报，口齿咬字清晰，且语调上抑扬顿挫，最适合初学听力的人模仿跟读。</p>\n</li>\n</ul>\n<blockquote>\n<p>学习方法小贴士：</p>\n</blockquote>\n<ol>\n<li>一天只听一则新闻，再看文字以及查字典，轻声跟读（shadowing）两三百遍，再用诠释（paraphrasing）的方式重新诠释内容</li>\n<li>每晚在睡前用二十分钟通过手机或计算机 playback（回 放）的方式逐字听写。</li>\n</ol>\n<h3 id=\"选择免费的Cambridge-Dictionary\"><a href=\"#选择免费的Cambridge-Dictionary\" class=\"headerlink\" title=\"选择免费的Cambridge Dictionary\"></a>选择免费的Cambridge Dictionary</h3><p>辞典中所有的单词都是英英和英汉双解，并附实用例句及相关语法。对英语初学者而言，Cambridge Dictionary 所有单词都附有英国人或美国人的真人发音音频，较为实用。</p>\n<h3 id=\"英文词汇量若超过六千个词时上网阅读国外英文报纸\"><a href=\"#英文词汇量若超过六千个词时上网阅读国外英文报纸\" class=\"headerlink\" title=\"英文词汇量若超过六千个词时上网阅读国外英文报纸\"></a>英文词汇量若超过六千个词时上网阅读国外英文报纸</h3><p>可上网选择看： USA TODAY 《今日美国》</p>\n<p>选择原因：</p>\n<ul>\n<li>1.日报的文章用词简练，不卖弄文字。</li>\n<li>2.报纸同时也播报视频新闻，除了学习英语阅读能力外，也提供了正常语速学习英语听力的渠道，提升高级听力。</li>\n</ul>\n<h3 id=\"Radio-Garden\"><a href=\"#Radio-Garden\" class=\"headerlink\" title=\"Radio Garden\"></a>Radio Garden</h3><p>这个网站提供共有一千多个可听取的全球电台。有英语广播节目，除音乐台外，还有谈话的节目。</p>\n<blockquote>\n<p>学习方法小贴士：</p>\n</blockquote>\n<ul>\n<li>1.多听谈话性的节目，可以熟悉不同的英语口音腔调。</li>\n<li><ol start=\"2\">\n<li>国内 CCTV 中央电视台英语频道节目，受邀采访的对象来自全球各地各行，说英语的腔调各有不同，对提高听力及口译能力有很大的帮助！</li>\n</ol>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>口语篇</p>\n</blockquote>\n<h1 id=\"第四节-“过度学习法”-说出地道的美式口语\"><a href=\"#第四节-“过度学习法”-说出地道的美式口语\" class=\"headerlink\" title=\"第四节 “过度学习法” 说出地道的美式口语\"></a>第四节 “过度学习法” 说出地道的美式口语</h1><p>“要说一口漂亮的英语得先从正音开始，也就是一定要学会地道美式K.K.音标的发音”</p>\n<p>我只利用三个月的时间采用 overlearning（过度学习）的方式，凭着听一张 K.K.音标教学唱片学会了音标。也学会了即兴自由开口说英语。</p>\n<h2 id=\"我是如何学习“说”英语的？\"><a href=\"#我是如何学习“说”英语的？\" class=\"headerlink\" title=\"我是如何学习“说”英语的？\"></a>我是如何学习“说”英语的？</h2><p>1.要从口语学起，要活记单词，而不是死记单词。<br>2.学习口语的首要条件是寻找正确的声音源</p>\n<h2 id=\"三个基本态度-1\"><a href=\"#三个基本态度-1\" class=\"headerlink\" title=\"三个基本态度\"></a>三个基本态度</h2><ul>\n<li>1.善用零星时间</li>\n<li>3.持之以恒，永不放弃</li>\n<li>2.少就是多，慢就是快</li>\n</ul>\n<blockquote>\n<p>学习方法小贴士：</p>\n</blockquote>\n<ul>\n<li>1.每天只学两个元音，学完后再学辅音。</li>\n<li>2.要求自己每天坚持模仿这些元音几千遍以上，使发音的嘴型与舌头的位置能学好“一次到位”。</li>\n</ul>\n<h2 id=\"把自己想成是新生儿，每天只学两个音标\"><a href=\"#把自己想成是新生儿，每天只学两个音标\" class=\"headerlink\" title=\"把自己想成是新生儿，每天只学两个音标\"></a>把自己想成是新生儿，每天只学两个音标</h2><p>过度学习的功效Overlearning（过度学习） 让我注意到重复模仿的重要性。<br>学了三个月的音标后，我看到字典中的音标，就能立刻发出和美 国人一模一样的单词读音了。</p>\n<h2 id=\"学元音需要注意的细节\"><a href=\"#学元音需要注意的细节\" class=\"headerlink\" title=\"学元音需要注意的细节\"></a>学元音需要注意的细节</h2><h3 id=\"a\"><a href=\"#a\" class=\"headerlink\" title=\"a\"></a>a</h3><ul>\n<li>[ i ] 念法：应念成类似“益”或“易”的音，属长元音。</li>\n<li>[ I ] 念法：应念成军人行进时打数“一、二、三、四”的“一”声。</li>\n</ul>\n<h3 id=\"b\"><a href=\"#b\" class=\"headerlink\" title=\"b\"></a>b</h3><ul>\n<li>[ E ] 念法：类似罗马拼音的 e 音，就像羊“咩咩” 叫的元音。</li>\n<li>[ A ] 念法：发 [ A ] 音时要比 [ E ] 夸张，即嘴巴要尽量张得宽。</li>\n</ul>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c\"></a>c</h3><ul>\n<li>[ u ] 长元音。念法：念类似普通话“雾”或“物”的发音，但不尽相同，念 [ u ] 时，舌根应较紧，嘴唇要更翘一些。</li>\n<li>[ U ] 短元音。念法：发“ʊ”的音时，先将嘴念成短促的“雾”或“物”声，再念成“耳”声，听起来像 “雾耳”或“物耳”的音。</li>\n</ul>\n<p>举例：boo k[bʊk]        good[gʊd]<br>这两个单词如果念成“布可 ”、“固的”，是错的。正确念法：“布尔可 ”（“ 布”不发声）或“固耳的”（“的”要发声，但几乎听不 见）。</p>\n<h3 id=\"d\"><a href=\"#d\" class=\"headerlink\" title=\"d\"></a>d</h3><ul>\n<li>[ ZU ]或 [ Zʊ ] 双元音。念“傲”的音，其实是错误的。正确念法：先将嘴全张，先念成类似“阿”的音，再念类似“傲”的音，最后才念类似短“雾”的音，一气呵成，即“阿—傲—雾”。</li>\n</ul>\n<p>举例：Mountain   [‘mZʊntN ]     downtown [dZʊn’tZʊn]这两个单词如果 念成“  忙藤 ”或“  当烫 ”就 错了， 因为你念“ 忙”或“  当烫 ” 时，嘴巴并没完全张开。正确念法：念成 类似 “妈阿嗯藤”或“大昂踏昂  ”的音。</p>\n<h3 id=\"e\"><a href=\"#e\" class=\"headerlink\" title=\"e\"></a>e</h3><ul>\n<li><p>[ V ]与[ J ] 念法：发音相同，念成类似普通话的“饿”发音。只不过 [ V ] 是强音，[ J ] 是弱音。<br>举例：</p>\n</li>\n<li><p>1.[V]出现在  单音 节或重音  节中， 如：cut [kVt] mu  g [mVg]</p>\n</li>\n<li><p>2.[V]也出现在  重音 节中， 如：above   [J’bVv]moth er  [‘mVTK ]</p>\n</li>\n<li><p>3.[J]则出现在  有两个音节以上的单词中的弱音节中，如：above   [J’bVv]  a bout [J’bZʊt]</p>\n</li>\n</ul>\n<h3 id=\"f\"><a href=\"#f\" class=\"headerlink\" title=\"f\"></a>f</h3><p>[ R ] 与[ K ] 念法：发音相同，均念成类似普通话“饿尔”的发音。不过念“尔”时要卷舌。[ R ] 出现在单音节或重音节中，[ K ] 则出现在弱音节中。</p>\n<p>举例：girl  sist er matt er mu rder[gRl] [‘sIstK][‘mAtK][‘mRdK]</p>\n<h3 id=\"g\"><a href=\"#g\" class=\"headerlink\" title=\"g\"></a>g</h3><ul>\n<li>radio 瑞丢（X ）video 威 丢（X）ruì diūwēi diūRadio [ ‘redI“o ]   （类似“瑞 底 欧”）下列两个单词千万不要念成两个音节：wēi dǐ ōu ruì dǐ ōuVideo [ ‘vIdI”o ]   （类似“威 底 欧”）</li>\n</ul>\n<h2 id=\"学辅音需要注意的细节\"><a href=\"#学辅音需要注意的细节\" class=\"headerlink\" title=\"学辅音需要注意的细节\"></a>学辅音需要注意的细节</h2><h3 id=\"a-1\"><a href=\"#a-1\" class=\"headerlink\" title=\"a\"></a>a</h3><p>辅音s起首形成的字之后有字母 p、t、k 时，一定要将 p、t、k 念成 [ b ]、[ d ]、[ g ]。</p>\n<p>如下：</p>\n<table>\n<thead>\n<tr>\n<th>字典列出的音标</th>\n<th>实际要念成</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>speak [ spik ]</td>\n<td>[ sbik ]</td>\n</tr>\n<tr>\n<td>stop [ stap ]</td>\n<td>[ sdap ]</td>\n</tr>\n<tr>\n<td>skirt [ skRt ]</td>\n<td>[ sgRt ]</td>\n</tr>\n</tbody></table>\n<p>注意:<br>如果是两音节的单词，第二音节以 s 起首时,<br>之后的 p、t、k 一样念成 [ b ]、[ d ]、[ g ]</p>\n<p>如下：</p>\n<table>\n<thead>\n<tr>\n<th>字典列出的音标</th>\n<th>实际要念成</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sister [ ‘sIstK ]</td>\n<td>[ ‘sIsdK ]</td>\n</tr>\n<tr>\n<td>whisper [ ‘wIspK ]</td>\n<td>[ ‘wIsbK ]</td>\n</tr>\n<tr>\n<td>whisky [ ‘wIskI ]</td>\n<td>[ ‘wIsgI ]</td>\n</tr>\n</tbody></table>\n<h3 id=\"b-1\"><a href=\"#b-1\" class=\"headerlink\" title=\"b\"></a>b</h3><p>字典列出两个音节以上的音标，尾音有 [ tI ]、[ dI ]、[ sI ]、[ kI ]、[ mI ]、[ nI ]、[ gI]、[ djI ]、[ bI ] 等时，一律将 [ I ] 念成长元音 [ i ]。</p>\n<p>如下：</p>\n<table>\n<thead>\n<tr>\n<th>字典列出的音标</th>\n<th>实际要念成</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Bobby [ ‘babI ]</td>\n<td>[ ‘babi ]</td>\n</tr>\n<tr>\n<td>tidy [ ‘tZIdI ]</td>\n<td>[ ‘tZIdi ]</td>\n</tr>\n<tr>\n<td>Tammy [ ‘tAmI ]</td>\n<td>[ ‘tAmi ]</td>\n</tr>\n<tr>\n<td>sissy [ ‘sIsI ]</td>\n<td>[ ‘sIsi ]</td>\n</tr>\n<tr>\n<td>whisky [ ‘wIskI ]</td>\n<td>[ ‘wIsgi ]</td>\n</tr>\n</tbody></table>\n<p>注意：如今许多英英字典都将上列尾音的[ I ]改为[ i ]，可参考网络上“牛津”、“剑桥”这两本权威字典的真人美式发音。</p>\n<h3 id=\"c-1\"><a href=\"#c-1\" class=\"headerlink\" title=\"c\"></a>c</h3><p>在 K.K. 音标中，[ y ] 及 [ L ] 均属辅音，故这两个音标在一起时，不可连读。<br>一律将 [ I ] 念成长元音 [ i ]。</p>\n<p>如下：</p>\n<p>million [ ‘mIlyJn ] 应念成类似普通话的“没有眼”（méi yǒu yǎn），而非“咪淋”（mī lí）。nbillion [ ‘bIlyJn ] 应念成类似普通话的“比有眼”（bǐ yǒu yǎn ），而非“比淋”（bǐ lí ）。línvalue [ ‘vAlyu ] 应念成类似普通话的“维埃欧有”（wéi āi ōu yǎn），而非“维埃欧溜”（wéi āi ōu liū）。</p>\n<p>注意:<br>念“维”时，上排牙齿要咬住下唇，振动出声并发出爆破音。</p>\n<h3 id=\"d-1\"><a href=\"#d-1\" class=\"headerlink\" title=\"d\"></a>d</h3><p>凡是单词以辅音 [ t ]、[ d ]、[ b ]、[ p ]、[ k ]、[ g ]结尾时，美国人以正常速度念这些单词时，这些辅音通常在作势要念出来时立即切除，改以短暂停顿代替。</p>\n<p>如下：</p>\n<table>\n<thead>\n<tr>\n<th>字典列出的音标</th>\n<th>实际要念成</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>want [ want ]</td>\n<td>[ wan* ]</td>\n</tr>\n<tr>\n<td>wanted [ ‘wantId ]</td>\n<td>[ ‘wantI* ]</td>\n</tr>\n<tr>\n<td>sat [ sAt ]</td>\n<td>[ sA* ]</td>\n</tr>\n<tr>\n<td>sad [ sAd ]</td>\n<td>[ sA* ]</td>\n</tr>\n<tr>\n<td>sag [ sAg ]</td>\n<td>[ sA* ]</td>\n</tr>\n<tr>\n<td>bib [ bIb ]</td>\n<td>[ bI* ]</td>\n</tr>\n<tr>\n<td>bit [ bIt ]</td>\n<td>[ bI* ]</td>\n</tr>\n<tr>\n<td>bite [ bZIt ]</td>\n<td>[ bZI* ]</td>\n</tr>\n<tr>\n<td>keep [ kip ]</td>\n<td>[ ki* ]</td>\n</tr>\n<tr>\n<td>kick [ kIk ]</td>\n<td>[ kI* ]</td>\n</tr>\n</tbody></table>\n<h3 id=\"e-1\"><a href=\"#e-1\" class=\"headerlink\" title=\"e\"></a>e</h3><p>很多有 [ yu ] 的音标，在英式英语会照念，但在美语则省略 [ y ]。<br>如下：</p>\n<table>\n<thead>\n<tr>\n<th>英式英语</th>\n<th>美语</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>student [ ‘styudJnt ]</td>\n<td>[ ‘studJnt ]</td>\n</tr>\n<tr>\n<td>news [ nyuz ]</td>\n<td>[ nuz ]</td>\n</tr>\n<tr>\n<td>due [ dyu ]</td>\n<td>[ du ]</td>\n</tr>\n</tbody></table>\n<h3 id=\"f-1\"><a href=\"#f-1\" class=\"headerlink\" title=\"f\"></a>f</h3><p>美语中，两音节的单词结尾音标 [ -dJnt ]、[ -dJn ]、[ -tJn ] 改成 [ -dNt ]、[ -dN ]、[ -tN ]，表示这些音标组合都发鼻音，类似张嘴念“嗯”的音（不可闭嘴）</p>\n<p>如下:</p>\n<p>mountain [ ‘mZUntN ]  实际念成“妈昂嗯”(mā áng èn cotton)。<br>cotton[ ‘katN ]      实际念成“卡嗯”(kǎ èn)<br>student [ studN* ]   实际念成“死都嗯”（“死”无声音）(sǐ dōu èn)</p>\n<h3 id=\"g-1\"><a href=\"#g-1\" class=\"headerlink\" title=\"g\"></a>g</h3><p>有些英英字典出现斜体的 [ J ]，表示在英语中，这个元音不需念出来。</p>\n<p>如下：</p>\n<table>\n<thead>\n<tr>\n<th>字典中列出的音标</th>\n<th>实际念成</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>comfortable [ ‘kVmfJtJbL ]</td>\n<td>[ ‘kVmftJbL]</td>\n</tr>\n<tr>\n<td>sophomore [ ‘safJ”mOr ]</td>\n<td>[ ‘saf”mOr ]</td>\n</tr>\n<tr>\n<td>（注：* [ bL ] 是 [ bJl ] 的简写）</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"h\"><a href=\"#h\" class=\"headerlink\" title=\"h\"></a>h</h3><p>以 -dly或 -tly结尾的单词，d 或 t 应作势要发成 [ d ] 或 [ t ] 的辅音，但实际立即停顿，不发出音来。</p>\n<p>如下：</p>\n<table>\n<thead>\n<tr>\n<th>字典中列出的音标</th>\n<th>实际念成</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>immediately [ I’midIJtlI ]</td>\n<td>[ I’midIJ*li ]</td>\n</tr>\n<tr>\n<td>friendly [ frEndlI ]</td>\n<td>[ frEn*li ]</td>\n</tr>\n</tbody></table>\n<p>希望大家了解我以 overlearning的态度自学音标的一些心得，也  希望藉此增强读者从头学好音标的信心与决心 。以上，就是我举例的一些元音及辅音发音要诀。</p>\n<h1 id=\"第五节-3个月英语对话无压力-“自我对话法”\"><a href=\"#第五节-3个月英语对话无压力-“自我对话法”\" class=\"headerlink\" title=\"第五节 3个月英语对话无压力 “自我对话法”\"></a>第五节 3个月英语对话无压力 “自我对话法”</h1><p>三个月学完音标后，我进入到我学习的第二个过程：学习会话。从不会开口到可以用简单英语与外国人沟通，也是在短短三个月完成的。</p>\n<h2 id=\"去英语培训班学习可靠吗？\"><a href=\"#去英语培训班学习可靠吗？\" class=\"headerlink\" title=\"去英语培训班学习可靠吗？\"></a>去英语培训班学习可靠吗？</h2><p>不建议培训班的原因：</p>\n<ul>\n<li>1.补习费价格不菲，学习英语的成本高。</li>\n<li>2.你不知道外籍老师到底来自哪个美国区域。美式英语因地区的不同，口音也不一样。</li>\n<li>3.一个班至少十人以上，真正轮到你讲英语，或跟老师互动的时间绝对是少之又少。</li>\n</ul>\n<p>建议自我学习：<br>自我学习英语会话可在任何无人的场所进行，且不花一文钱，一举数得，何乐而不为？希望大家记住：重复，重复，再重复。学英语就是一个重复的过程，也就是overlearning（过度学习）态度！</p>\n<h2 id=\"自学英语会话的两个方式\"><a href=\"#自学英语会话的两个方式\" class=\"headerlink\" title=\"自学英语会话的两个方式\"></a>自学英语会话的两个方式</h2><ol>\n<li>learned to talk to myself （我自己跟自己讲英语）</li>\n<li>did role - playing games（我做角色扮演）</li>\n</ol>\n<h2 id=\"学习方法：\"><a href=\"#学习方法：\" class=\"headerlink\" title=\"学习方法：\"></a>学习方法：</h2><ul>\n<li>1.一天学一篇会话，滚动式学习，一天说上千遍上万遍。</li>\n<li>2.把一篇会话看懂听懂后，一直不断慢速地去念。</li>\n<li>3.完全掌握会话内容后，开始一遍一遍地凭印象把会话内容以一人分饰两角的方式表演出来。</li>\n</ul>\n<h2 id=\"研读会话步骤\"><a href=\"#研读会话步骤\" class=\"headerlink\" title=\"研读会话步骤\"></a>研读会话步骤</h2><ul>\n<li>1.先查字典，确定每一个字发音都要标准；</li>\n<li>2.慢速念会话里的英文句子，边念边想着中文意思；</li>\n<li>3.念了几百遍后，把文章丢掉继续念会话，你会忘记部分原文或者做些修改，再结合之前练习过的会话，变成以下一则你自创的会话</li>\n<li>4.你延伸了一些内容，之后再延伸一些内容。就这样慢慢讲并不断延伸会话，变成你的东西。过去在各则会话中学到的知识，未来会慢慢地拓展，变成了更较长的对话。</li>\n<li>5.这就变成你可以自言自语讲好多会话，渐渐地这些英语单词、短语、词组，甚至句子就变成你的东西，每一次你讲英语时自然就会运用出来，在不知不觉的状态中运用自如。</li>\n</ul>\n<h2 id=\"我如何练习每天，自学的这些英语\"><a href=\"#我如何练习每天，自学的这些英语\" class=\"headerlink\" title=\"我如何练习每天，自学的这些英语\"></a>我如何练习每天，自学的这些英语</h2><ul>\n<li>1.发现我说英语越来越顺畅后，特意去找有人可以跟我讲英语的地方，找到机会练习我每天自学的这些英语。</li>\n<li>2.找一个有很多讲英语高手的场合加入，可以听到他们是怎么讲英语的，也可以有机会定期与其他人用英语交谈。</li>\n</ul>\n<p>学习英语的三个基本态度：</p>\n<ul>\n<li>1.善用零星时间</li>\n<li>2.少就是多，慢就是快</li>\n<li>3.持之以恒，永不放弃</li>\n</ul>\n<hr>\n<blockquote>\n<p>阅读篇</p>\n</blockquote>\n<h1 id=\"第六节-“阅-读”英语能力进阶提升\"><a href=\"#第六节-“阅-读”英语能力进阶提升\" class=\"headerlink\" title=\"第六节 “阅+读”英语能力进阶提升\"></a>第六节 “阅+读”英语能力进阶提升</h1><h2 id=\"我如何学习“读”英文？\"><a href=\"#我如何学习“读”英文？\" class=\"headerlink\" title=\"我如何学习“读”英文？\"></a>我如何学习“读”英文？</h2><ul>\n<li><p>1.大量阅读文章，扩展词汇量<br>想从简易的会话书中增加词汇量，使英语提升到中文水平的地步，这是不可能的事。<br>增加词汇量方法：<br>长期停留在学会话的阶段，所学的都是一些简短会话里的生活用语，词汇量的增加必然会受到限制。<br>因此我决定要大量阅读英语文章，以扩展我的英语谈话内容，更要提升我对谈话主题的深度<br>读什么英语文章好？</p>\n<ul>\n<li>《 Reader’s Digest 》<blockquote>\n<p>中文版《读者文摘 》—内容是由长篇文章浓缩的（condensed [ kJn’dEnst ]）a condensed article 就是“浓缩的文章”。<br>选择原因：</p>\n</blockquote>\n<ul>\n<li><ol>\n<li>一篇优秀浓缩的文章言简意赅，有很高的文字素养。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>Reader’s Digest 里面文章主题丰富多样，内容涵盖现代社会一切生活英语方面的知识。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>《 China Post 》<blockquote>\n<p>《英文中国邮报 》—journalistic English（新闻英语）是给大众看的，相当于是英美国人的初中学习程度。<br>选择原因：</p>\n</blockquote>\n<ul>\n<li><ol>\n<li>用词简洁明了，写作风格严谨，句子合乎语法。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>新闻报  导的内容  包罗万象，比Reader   ‘s Digest 更广，从英文报纸可以学到有关政 治、 经济、体育 、娱乐 、文学、艺术 、科技等关键词汇。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<p>英语文章学习方法：</p>\n<ol>\n<li>看到英语文章就要开口念出声音来，而不是只默读， 也不是马上查字典。</li>\n<li>一小段一小段地攻克文章而不是一次一整篇念完 ，“少就是多”原则。</li>\n</ol>\n<p>大量阅读的方法习惯是：<br>大量地“阅”与“读”—这里 讲的阅读是“阅”与“读”。也就是 说，当 你的眼睛“看”到英语文章时，你的嘴巴 就必 须要同时把  英文 句子“念”出来 。</p>\n</li>\n<li><p>2.如何“阅”与“读”<br>我们平常在看英语文章时，就把每 个单词念出声来，这样才能让我们 练习讲英语，而这也是在 替自己创造讲 英语的机会。学英语  最重 要的环节就是要能“讲”<br>学英语最重要的环节就是要能“讲”。<br>我们平常在看英语文章时，就 把每个单词念出声来，这样才能让我们 练习讲英语，而这也是在替自己创造讲英语的机会。<br>我只要有 零星时间 就抓住 The China Post 边看新闻文章（news stories）边念出声来。这 么一来，我一  天到晚讲 的都是英语，我相信这会 比在培训班 里讲英语的机会多得多。</p>\n</li>\n<li><p>3.如何进行“阅”与“读”英文报纸？<br>选一篇自己感兴趣的新闻，会有更大的帮助</p>\n<ol>\n<li>趣闻（Offbeat）</li>\n<li>世界（World）</li>\n<li>国际（International）</li>\n<li>国内（National）</li>\n<li>社会（Society）</li>\n<li>犯罪（Crime）</li>\n<li>科学（Science）</li>\n<li>科技（Technology）</li>\n<li>自然（Nature）</li>\n<li>动物（Animals）</li>\n<li>环境（Environment）</li>\n<li>农业（Agriculture）</li>\n<li>文化（Culture）</li>\n<li>教育（Education）</li>\n<li>休闲（Leisure）</li>\n<li>娱乐（Entertainment）</li>\n<li>电影（Movies）</li>\n<li>旅游（Travel）</li>\n<li>太空（Space）</li>\n<li>商业（Business）</li>\n<li>生活（Life）</li>\n<li>运动（Sports）</li>\n<li>健康（Health）</li>\n<li>医药（Medicine</li>\n</ol>\n<p>利用新闻英语学习英语的好处 ：<br>当你懂得越多的新闻英语之后 ，写出来的英语文章就会越简明流畅 ，越懂得用简练的词汇去表达文章丰富的含义 。</p>\n</li>\n</ul>\n<h1 id=\"第七节-“8步阅读法”阅读词汇同步增长\"><a href=\"#第七节-“8步阅读法”阅读词汇同步增长\" class=\"headerlink\" title=\"第七节 “8步阅读法”阅读词汇同步增长\"></a>第七节 “8步阅读法”阅读词汇同步增长</h1><h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>通体浏，知道大概意思。</p>\n<h2 id=\"第二步-1\"><a href=\"#第二步-1\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>第一天看懂第一段,第二天看懂第二段少就是多，一天看一段</p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>第一遍，慢速念，避免pause（停顿）。<br>记住第一遍：整体通读，不要停，利用上下文，整体理解。</p>\n<h2 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h2><p>第二遍：逐句查，音标、字义、字词的用法及例句都要查，抄笔记。</p>\n<h2 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h2><p>将第一段新闻译成中文。</p>\n<h2 id=\"第六步\"><a href=\"#第六步\" class=\"headerlink\" title=\"第六步\"></a>第六步</h2><p>利用零星时间，慢速念英文，同步翻译成中文，反复训练，久而久之，理解力变强，速度变快。</p>\n<h2 id=\"第七步\"><a href=\"#第七步\" class=\"headerlink\" title=\"第七步\"></a>第七步</h2><p>睡觉前，我再翻开笔记本将单词及用法从头到尾念一遍，念完后就用这些单词及用法自己造句，尽量多说。</p>\n<h2 id=\"第八步\"><a href=\"#第八步\" class=\"headerlink\" title=\"第八步\"></a>第八步</h2><p>第二天，同样的方法看第二个段落；第三天，同样的方法看第三个段落；………以此类推 ，直到读完整篇报道  。久而久之，少就变多了，养成 monologue（独白）的习惯。第一年，看一份报纸 ，但少就是多，学得很扎实；第二年，速度加快  ，一年用这样的方式可以看完好几份报纸了。</p>\n<h1 id=\"第八节-“阅读实操课”-掌握阅读技巧\"><a href=\"#第八节-“阅读实操课”-掌握阅读技巧\" class=\"headerlink\" title=\"第八节 “阅读实操课” 掌握阅读技巧\"></a>第八节 “阅读实操课” 掌握阅读技巧</h1><h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>通体读完</p>\n<h2 id=\"第二步-2\"><a href=\"#第二步-2\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>第一天学习第一段，第二天学习第二段……依此类推</p>\n<h2 id=\"第三步-1\"><a href=\"#第三步-1\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>慢速读完，整体理解这一篇的大意。<br>切记：<br>慢慢念 ， 且绝不马上查不熟的单词 ，先抓住这段的中文大意 </p>\n<h2 id=\"第四步-1\"><a href=\"#第四步-1\" class=\"headerlink\" title=\"第四步\"></a>第四步</h2><p>逐句查，音标、字义、字词的用法及例句都要查，抄笔记。</p>\n<h2 id=\"第五步-1\"><a href=\"#第五步-1\" class=\"headerlink\" title=\"第五步\"></a>第五步</h2><p>进行翻译</p>\n<h2 id=\"第六步-1\"><a href=\"#第六步-1\" class=\"headerlink\" title=\"第六步\"></a>第六步</h2><p>简单的英语诠释。<br>不断重新诠释 ，直到可以灵活发挥</p>\n<h2 id=\"第七步-1\"><a href=\"#第七步-1\" class=\"headerlink\" title=\"第七步\"></a>第七步</h2><p>睡觉前, 翻开笔记本，将单词和用法从头到尾念一遍，再自己造句。如使用单词 attack 及 make an attack on 造句。</p>\n<h2 id=\"第八步-1\"><a href=\"#第八步-1\" class=\"headerlink\" title=\"第八步\"></a>第八步</h2><p>这就是我养成大量地“阅”和“读”的方法，让学习变得事半功倍：</p>\n<ul>\n<li>(1 )单词量增加  。</li>\n<li>(2 )因为要勤查字典，所以学到了字词的collocation（字词搭配 ） ，而这种字词搭配 ，其实这就是 我之后要谈到的语法 。</li>\n<li>(3 )能看懂英英字典，到二年级下学期时我就改成使用英英字典了。</li>\n<li>(4 ) 奠定我的独白能力 。</li>\n</ul>\n<p>能够获致这样的成果，是因为中间历经了前面说的两个阶段：<br>第 一 ：学发音学会话。<br>第 二 ：大量地“阅”与“读”。</p>\n<p>经历的这两个阶段，为第三阶段“写作”奠定了坚实的基础。<strong>从阅读报纸中得到许多好处。</strong></p>\n<hr>\n<blockquote>\n<p>写作篇之语法</p>\n</blockquote>\n<h1 id=\"第九节-“5大类动词”全面覆盖英文读写\"><a href=\"#第九节-“5大类动词”全面覆盖英文读写\" class=\"headerlink\" title=\"第九节 “5大类动词”全面覆盖英文读写\"></a>第九节 “5大类动词”全面覆盖英文读写</h1><h2 id=\"我如何学习“读”英文？-1\"><a href=\"#我如何学习“读”英文？-1\" class=\"headerlink\" title=\"我如何学习“读”英文？\"></a>我如何学习“读”英文？</h2><ul>\n<li>1.可做主语的词类、短语、词组或从句<ul>\n<li>（1）名词<br>That young boy is my brother.（那个年轻的小伙子是我弟弟。）</li>\n<li>（2）代词<br>He enjoys singing.（他喜欢唱歌。）</li>\n<li>（3）动名词<br>即动词变成的名词（动词原形 + ing），表示自己曾经做过或已知的经验。中文可用动词做主语。如下</li>\n<li>（4）不定式短语<br>即“to + 动词原形”（如 to sing、to leave、to buy something），用以表示自己尚未做过或不一定在何时才会做的一件事。中文可用动词做主语</li>\n<li>（5）名词从句<br>即句子变成的名词。中文可用句子做主语，英语则不行<br>名词从句一共有三种：<ul>\n<li>（a）由陈述句变化而成：<br>陈述句：John is honest.（约翰很诚实。）<br>名词从句：that John is honest</li>\n<li>（b）由一般问句（即可用 Yes &#x2F; No 回答的问句）<br>一般问句：Can Mary do it?（玛丽能做这件事吗？）<br>名词从句：whether Mary can do it<br>一般问句：Is the answer correct?（那个答案是正确的吗？）<br>名词从句：whether the answer is correct注意.</li>\n<li>（c）由特殊疑问句（即以疑问词如 what、which、where、how、who、when、why 等起首的问句）变化而成：<br>特殊疑问句：Where does that girl live?（那个女孩子住在哪儿？）<br>名词从句： where that girl lives<br>特殊疑问句：Why is she crying?（她为什么在哭？）<br>名词从句： why she is crying</li>\n</ul>\n</li>\n<li>（6）名词词组<br>这种名词词组都是由疑问词（如 what、which、where、how、who、when 等疑问词）接不定式短语形成</li>\n</ul>\n</li>\n<li>2.动词的种类及功能<blockquote>\n<p>动词是句子的心脏，如果句子中没有动词，就无法形成一个句子。只要有动词，即使没有主语，也可形成祈使句</p>\n</blockquote>\n<p>例句：<br>Come here! （到这儿来！）<br>Be quiet! （安静！）<br>Go to bed now. （现在就去睡觉。）<br>动词有五大类：<br>● 完全及物动词<br>● 完全不及物动词<br>● 不完全及物动词<br>● 不完全不及物动词<br>● 授予动词</p>\n</li>\n</ul>\n<h4 id=\"判断五大动词的方法：\"><a href=\"#判断五大动词的方法：\" class=\"headerlink\" title=\"判断五大动词的方法：\"></a>判断五大动词的方法：</h4><ul>\n<li><p>完全及物动词</p>\n<ol>\n<li>我先把一个动词如 punish（处罚）放入两个中文句子的空格中：<br>  我　　  punish　　 他。<br>  他被我   punish　　。</li>\n<li>再将这两句翻译成中文如下<br>  我   处罚    他。<br>  他被我   处罚   了。</li>\n<li>如此一来，两句中文意思都很通顺，而且意思很完整，则 punish 是意思很完整的及物动词，它就是完全及物动词。</li>\n</ol>\n<p>完全及物动词在句中出现的基本形态有下列几种：<br>(a) 主语 + 完全及物动词 + 宾语（主动语态）<br>(b) 主语 + be 动词（is、was、were、has been、have been）+ 完全及物动词的过去分词形（被动语态）<br>(c) 主语 + be 动词（is、was、were、has been、have been）+ 完全及物动词的现在分词形 + 宾语（进行时）</p>\n<p>完全及物动词也有进行时的被动语态，惟其使用频率较无上述三种用法常见，即为主语 + be 动词 + being + 完全及物动词的过去分词形。</p>\n<p>完全及物动词也有进行时的被动语态，惟其使用频率较无上述三种用法常见，即为主语 + be 动词 + being + 完全及物动词的过去分词形，例：</p>\n</li>\n<li><p>完全不及物动词<br>完全不及物动词，这种动词在句中出现的基本形态只有两种：<br>(a) 主语 + 完全不及物动词（主动语态）<br>(b) 主语 + be 动词（is、was、were、has been、have been）+ 完全不及物动词的现在分词形（主动语态进行时）</p>\n</li>\n<li><p>不完全及物动词<br>动词 go、finish、sell out 就可采过去分词形置 be 动词后做形容词<br>从上面的第一个英语句中，我们得知 named（将……取名为）是及物动词，之后接 the little boy 做宾语，再接名词 John 补充句意的不足。此时我们就明白 named 是意思不完整的及物动词，即不完全及物动词，John 则称为补语，修饰宾语 the little boy，故亦称为宾语补语。</p>\n</li>\n</ul>\n<h3 id=\"主语的词类、词组或从句，以及动词的五大类：\"><a href=\"#主语的词类、词组或从句，以及动词的五大类：\" class=\"headerlink\" title=\"主语的词类、词组或从句，以及动词的五大类：\"></a>主语的词类、词组或从句，以及动词的五大类：</h3><ul>\n<li>完全及物动词 （complete transitive verb，简称 vt.）</li>\n<li>完全不及物动词（incomplete transitive verb，简称 vt.）</li>\n<li>不完全及物动词（complete intransitive verb，简称 vi.）</li>\n<li>不完全不及物动词（incomplete intransitive verb，简称vi.）</li>\n<li>授予动词（dative verb，属“及物动词”，简称vt.）</li>\n</ul>\n<h3 id=\"英语的五大基本句型\"><a href=\"#英语的五大基本句型\" class=\"headerlink\" title=\"英语的五大基本句型\"></a>英语的五大基本句型</h3><ol>\n<li>主语 + 完全及物动词 + 宾语<br>  I    ‘made’（完全及物动词）  ‘a chair ‘（宾语） yesterday.<br>  （我昨天制作了一张椅子。）</li>\n<li>主语 + 不完全及物动词 + 宾语 + 补语<br>  We  all    call（不完全及物动词）      him（宾语）   a liar（补语） .<br>  （我们都称他为骗子。）</li>\n<li>主语 + 不完全及物动词<br>  John    works（完全不及物动词）      very hard （副词（修饰works）.<br>  （约翰工作很努力。）</li>\n<li>主语 + 不完全及物动词 + 补语<br>  Mr. Li    is（完全不及物动词）      an English teacher （补语）.<br>  （李先生是英语老师。 ）</li>\n<li>主语 + 授予动词 + 间接宾语 + 直接宾语<br>  I bought（vt.） （my little son ）（间接宾语） （a toy）（直接宾语）  （as his birthday present ）（介词 as 引导的词组（做形容词用，修饰 a toy））.<br>  &#x3D; I bought（vt.）   a toy（做bought的宾语）  for   my son（介绍for的宾语） as his birthday present.</li>\n</ol>\n","categories":["Learn"]},{"title":"李笑来年度总结演讲：你必须比坏人更强，才有资格做一个好人！","url":"/must_better_than_bad_to_be_good/","content":"<p>大家好，终于是2018年了，先问候大家一声新年快乐，2018是一个特别吉利的数字，所以，我想各位读者也都会有一个非常幸运的一年。</p>\n<p>过去的2017年对我个人来说，是非常非常奇特的一年，发生了太多太大的事情，今天有很多感悟，借着这个机会，跟大家分享。</p>\n<span id=\"more\"></span>\n\n<p>去年，2017年1月1号的时候，我很诚心的和原新东方同事一起发起了一个活动——天天用英语。实际上，大多数学生，并未坚持365天，少数学员风雨无阻。时间真的就这么过去了，有的人变了，有的人没有天天进步，有的人天天原地踏步，其实这就是一个真实的世界。</p>\n<p>到了去年2017年4月的时候，出了一件事情，我答应逻辑思维的李国光同学，在深圳为他们做一场讲座，结果，因为身体免疫力差得了角膜炎，这种病，没有什么办法，用药了就能恢复，但是，恢复是需要时间的，到了做讲座的那一天，我的眼睛已经睁不开，成了盲人瞎子。</p>\n<p>我在同事的陪伴下，前往了深圳。我去深圳之前，逻辑思维的工作人员其实是非常恐慌的，因为他们不知道是不是应该出于关心我的角度，让我干脆住在医院，而不是去讲座了。可是如果我不去，他们又将面临很麻烦的事情，这么热门的一场讲座将面临退票的事儿。</p>\n<p>更麻烦的是，其实有相当多的听众，提前一两天就到了，他们并不知道我的病情，他们以为讲座会如期开放。</p>\n<p>李国光同学给我打电话，在电话里他犹犹豫豫地问我说：李老师呀，你是不是应该住院啊？我说是啊，我现在没事呀，别担心，我会去的。</p>\n<p>道理很简单，如果说嗓子坏了，说不出话来，那可真的就没有办法了，不过现在只是眼睛看不见，说话还能说，所以我会去。他还是有点不放心，我就给他讲个故事。话说我还在新东方某个假期，天天都要上十几个小时的课，后来嗓子就哑了，嗓子哑了怎么办？吃抗生素，第二天能接着讲，晚上更哑了，接着吃抗生素，接着去讲。</p>\n<p>到了某个班最后一节课的时候，早上起来，全身起了红疙瘩，奇痒无比，那个时候是凌晨六点来钟，我跑出去打了辆车，去了北医三院挂了急诊。医生看了一眼就说，你是新东方的吧？</p>\n<p>医生让我打吊瓶，那我就让护士把针扎好，一手高举着吊瓶，跑出去叫了辆出租车，回了教室，所以最后一节课我是自己左手举着吊瓶讲完的。</p>\n<p>听我讲完这个故事，李国光在电话那边说，李老师那我就放心了。后来我就这样到了现场，在蒙着眼睛的情况下讲，完成后坐火车回到北京继续住院。</p>\n<p>什么叫靠谱啊？用东北话讲，在关键的时刻绝不掉链子，在关键的时候绝不给朋友添乱，这叫情谊。但是关键的是，不管基于什么原因，你已经把票都卖出去了，我不到现场，即便是我能够全额退款，也是我不对，所以这件事情，是一个正常人的最基本的品质。</p>\n<p>讲座之后，我回北京继续住院，而那个时候，云币的合伙人邱亮和老猫来找我，当时云币的收入水平很高。这个云币很惊人的，从始至终，都是在足额纳税，连虚拟币都折算成当时的人民币纳税，非常的有气节。</p>\n<p>我问，数据是多少？跟他谈过之后的结论是，这个收入已经够上市资格了。我们感慨了一会儿，我也叹了口气说，做投资这么多年，终于有一个像样的企业了，接下来的事情，大家都看到了。5、6、7月，我们又一起做了icoinfo，到了7月份的时候，云币的交易量已经达到了全球前五名，还隔三差五触碰第一名。</p>\n<p>7月12日是我的生日，我们上线了第一个项目，这个项目是我给自己的生日礼物presone。然后，就是9月份了，到了9月，这后面的事情怎么样？大家都知道，icoifo关了，云币的业务停了。</p>\n<p>接下来的几个月，又发生了许多许多的事情，其实，在这个过程当中，我们看到了很多很多的现象，这些现象，都是在许多年前，我认为我绝对不会碰到的。特别是在近两年我已经达到了一个我个人认为我有所成就的地步，居然还会遇到的情况，所以我们主要要跟大家分享的其实是这些事情发生的过程当中，我自己的个人感受以及一些基本思考和感悟。</p>\n<h2 id=\"1-比坏人强，才有资格做好人\"><a href=\"#1-比坏人强，才有资格做好人\" class=\"headerlink\" title=\"1. 比坏人强，才有资格做好人\"></a>1. 比坏人强，才有资格做好人</h2><p>这个感悟是这样的，特别特别简单，什么呢？就是你必须比坏人更强，才有资格做一个好人。</p>\n<p>我再重复一遍，这是我今年最大的一个感悟，就是你最好比坏人更强，所以你才有资格当一个好人。生活当中绝对不缺乏所谓的善良，但是，你必须有足够的实力去支撑你的善良，你才能够让你们的善良发挥作用。你被坏人欺负了，那是因为你不够强才会被欺负。了解这点非常非常的重要。 </p>\n<p>有很多时候，坚持原则是非常非常不容易的，很多时候，会有很多真正不太好的人，想占你的便宜，或者是欺负你等等。举个例子，今年6月份以来，有一些人，在未经我同意的情况下，直接就把我的名字刷上了他们的项目，说币圈大佬李笑来站台，这对我个人的声誉产生了巨大的影响和困扰。</p>\n<p>到了9月份，许多不知所以然的韭菜都在攻击我，真的有很多我原本从来都没有得罪过的人，落井下石到令人无法想象的地步，叫什么万能的大熊的人，这个人我一辈子没有跟他打过交道，专门写黑我的文章。</p>\n<p>我就看不惯他，看他长相就看不惯，很认真的去看了看他的照片，我如果长成那样的话，绝对不好意思去嘲笑别人的长相。</p>\n<p>我真的遇到了好多好多这种情况，那么按照我个人的一些原则冷静去分析，在我的世界里，我确实可以把这些人划分为坏人，但是，如果我不比他们强，他们真的就能做到一人一口唾沫把我淹死，一人打我一拳把我杀死，一人说一句话就能把我气死，那我死都死了，我的善良有什么用呢？是吧。</p>\n<p>在4月份的深圳分享当中，我也跟我的读者们分享过，我的基本原则叫将军赶路，不打小鬼，所以，我也没有什么时间和精力花费在他们身上，我也没有反驳过。但是有一点我自己是非常非常清楚的，我比他强，我比他牛，我比他有实力。</p>\n<p>说钱，我有他几辈子都赚不到的钱，说才华，他这辈子不要再去想了，所以，我并不担心这样一个坏人比我强，我也并不担心我没有资格去做一个好人。我证明了我比他强，我证明了他是个坏人，所以我不用浪费一分一毫的时间在他的身上。</p>\n<p>这样的事情太多了，我就不逐一列举例子了。但是我愿意跟我的听众，我的读者，去分享这样一个事实，对于我们每个人来说，真正成长才是最重要的事情，因为只有成长，才能让我们变得更强。只有成长，才能让我们变得比别人更强，只有成长，才能有一天让我变得居然比坏人更强，所以我们善良下去。</p>\n<h2 id=\"2-命运不是故意捉弄你\"><a href=\"#2-命运不是故意捉弄你\" class=\"headerlink\" title=\"2. 命运不是故意捉弄你\"></a>2. 命运不是故意捉弄你</h2><p>下一个，要跟大家分享的感悟，是去年发生的事情，感悟是什么呢？就是永远要记住，命运不是故意作弄你，永远要记住命运不是故意捉弄谁。前两天，在我们的一个投资人群里，有人慨叹说，笑来老师有的时候运气真的非常非常不好，你也知道他指的是什么？</p>\n<p>在9月份的时候，我们的项目全部都退款了，从今天的视角回看，如果不退的话，那现在可能是另外一个样子。但是，我当场的回复是非常清楚的，我当时发了几个哈哈哈，这是内心真正的哈哈哈。</p>\n<p>我说，我是一个运气特别好的人，也许那么一两次被别人看到了我的运气并不是很好，但是从总体上来看，我经历过很多很多，别人无法正常，也不会因为那些事情就认为我傻。生活就是这样的，命运就是如此，也许上帝打了个喷嚏喷你满脸，但是请你记住，那并不是上帝看你不顺眼，还要在茫茫人群当中把你找出来，把你一把抓过来，张开嘴冲你使劲喷，他不是这样的。</p>\n<p>在当时，那样一个巨大的逆境当中，那样一个巨大的变故当中，我和我的团队其实是相当淡定的，这个不是针对你产生的变化，那我们就平静的接受这样的一个事实就好了。在这个过程当中，我们把事情做好就可以了。</p>\n<p>这样的心态，使得我们后面，在很多重要选择关头，做出了非常重要、非常高质量的决策。这是第二个要给大家分享的，就是请你相信我，当你遇到不顺利的时候，当你感觉被命运捉弄的时候，请你一定要记得我的话，反复告诉自己。对，也许你感觉命运捉弄人，但是请你相信命运永远不会故意捉弄任何人。</p>\n<h2 id=\"3-该干嘛干嘛\"><a href=\"#3-该干嘛干嘛\" class=\"headerlink\" title=\"3.该干嘛干嘛\"></a>3.该干嘛干嘛</h2><p>第三个，我想跟大家分享的，是我长期以来坚持的一个原则，叫该干嘛就干嘛，我再重复一遍，这是我长期恪守一个原则，叫该干嘛就干嘛。</p>\n<p>许多年来，我之所以能在很多的逆境当中慢慢走出来，其中最重要的原因就是因为，不论发生什么样的变故，不论发生了什么事情，我都会，该干嘛就干嘛，这么一个简单的句子，六个字吧，该干嘛就干嘛。</p>\n<p>什么叫该干嘛就干嘛呢？首先不分现实的好坏，不分情绪的好坏，我该做什么就去做什么，我不会因为外界发生什么事情，或者是自己心中发生了什么事情而停下自己手中应该做的事情。</p>\n<p>在新东方讲课的时候，我爸爸正在住院，我的手机号是要设定特定铃声的，我常年是静音的，是我妈妈的电话，我就知道了，我爸爸又病危了，我必须马上从北京赶回延吉，这就是我当时的状况。</p>\n<p>如果换做是你的话，我猜你会像最初的我一样，每天心神不宁，每天心情非常不好。我相信很多人的生活当中会遇到这种情况。我每天心神不宁，特别郁闷，那么我就不能好好的工作，如果不能好好的工作，就赚不到足够多的钱，其实不就是把我父亲害了吗？孝顺是需要实力的，不是有孝心就可以了。</p>\n<p>我就尽量去转移自己的情绪，尽量去控制自己的行为，所以那个时候，我在每节课上的表现，在学生眼里都是一个嘻嘻哈哈的，一个可以随时热情洋溢、慷慨激昂的李笑来，讲课非常的有热情，也非常的有激情。</p>\n<p>在讲课的过程当中，电话铃响了，一看就知道是我妈，在课堂上接电话实在是不应该，但是也实在是没办法。我会把电话接起来跟我妈妈说，我知道了，我会回去订机票，然后就把电话挂掉，又接着陪学生讲段子。他们哪会知道，我脑子里正在发生什么事情，这就是该干嘛就干嘛的例子。</p>\n<p>到了今年9月份，我们面临很多的问题，有些要强制关闭，有些要清退，在这个过程当中，说句实话，我们团队的成员也会心情非常不好，但是短短三个月之后，所有人都会庆幸这件事情，在那种极端的情况下，我们团队做到了该干嘛就干嘛，没有被外界所影响。今天我们依然可以执拗的走下去，其实就是因为在关键时刻我们并没有妥协，关键时刻我们并没有放弃，该干嘛还在干嘛。</p>\n<h2 id=\"4-按道理做事\"><a href=\"#4-按道理做事\" class=\"headerlink\" title=\"4. 按道理做事\"></a>4. 按道理做事</h2><p>第四个重要的感悟是什么呢？是在极端的情况下，最重要的原则很简单，就是按道理做事，按道理做事是最重要的。9月10号前后，很多人都跑到境外去了，我其实那时人已经在日本了，但是，我自己回来了，为什么回来了呢？道理很简单，我不认为自己做错事情，我一直是一个执拗地按道理做事情的人，哪怕是在一个没有规矩的世界里，我也认真的按道理去做。所以，我觉得我没有做错事，然后我就回来了，需要配合有关部门的工作。</p>\n<p>协调会上有关部门领导跟我说，笑来，现在如果要求你们清退的话，请问你有什么困难？我当时都没有犹豫，我告诉他没有困难。他见过这个行业这个圈子里所有人，然后他就问为什么？我说很简单啊，我们投过的所有团队，我们都跟项目方有协定，在一定程度是不允许动币的，所以，我们所有的项目，基本上都没有动过，特别不愿意退的我就全都买下来，我们就直接垫钱给对方。</p>\n<p>云币可以说在这方面是非常雷厉风行的，全部清退了，我们全部清退的进度有多快？24小时，我们完成了百分之99.5的清退。后面我们也得到了很多有关部门的帮助，其后在交往当中复盘这件事情，很多人对我当时的状况给予了高度的评价。</p>\n<p>不过，我倒是觉得很正常。为什么？我当时的回复是这样一句话，其实我们也没做什么特别的事情，我们只是在一个没有规矩的世界里尽量按道理做事了，哪怕这个世界没有规矩，我们有我们自己的道理，所以我们尽量按道理做事了。</p>\n<p>仅此而已，时过境迁，再回头去看的话，我们仍然非常庆幸，正因为我们这一群人是按道理做事的，所以才使得我们这一群人做的事情可以长久。未来我们也希望，我们身边的人、合作的人也按道理做事。</p>\n<p>今年，我还是投资比较大的。我上一次大规模投资钱，是在2011年前后了，到了2013年，我尝试着去做天使投资，一开始是完全不成功的，有很多很多很多的失败案例，遇到了很多很多不靠谱的人。</p>\n<p>到了2016年，我渐入佳境，到了2017年，我们做对了很多很多事情。在这个过程当中，我们投资了很多好项目，包括今天所谓的江湖传言的硬币资本，非常有声望的投资机构。从历史上来看，今天能听到的很多优秀项目我们都有参与，比如说zcash，网络共享存储sicoin，曾经被认为是空气币的量子，EOS等等。</p>\n<h2 id=\"5-增速慢资产，换增速快资产\"><a href=\"#5-增速慢资产，换增速快资产\" class=\"headerlink\" title=\"5. 增速慢资产，换增速快资产\"></a>5. 增速慢资产，换增速快资产</h2><p>这个过程当中，我们有了一些对所谓投资的感悟，今天正好在这里跟在座各位有一个最简单但却又是最实质、最细致的分享。其实，投资最为重要的是什么？投资最为重要的是搞对方向，使用你增值速度慢的资产换取增值速度快的资产。换一句话讲，用我常用的概念就是把成长率低的资产换成成长率高的资产。</p>\n<p>这就解释了我的一些行为。大家可能不知道，我长期以来是一个现金困难户，我的账户上不会有很多的现金，都被我用来购买虚拟币了。道理很简单，在我眼里，现金成长率非常低，应该被替换为成长率高的，或在将来相当长的一段时间里增长非常高的资产。</p>\n<p>普通人熟知的套现无非就是把虚拟币换成法币。我所谓的套现就是把人民币等法币换成虚拟币等成长率高的资产。我的讲演收入，场外赚到一些钱，基本上把它置换成另外一种资产，即我个人认为成长率更高的资产去做投资。</p>\n<p>2015年年底的时候，我创建了一个收费社群比特币生存指南，后来我交给老猫同学的时候，这个群里面大概有两百多人，老猫接手管理不到两年，这个群里已经出现了很多的亿万富豪、千万富翁，他们为什么做到了呢？道理很简单，他们花了两年时间把法币换成了虚拟币等成长率高的资产，就这么简单。</p>\n<h2 id=\"6-长期持续输出是极具价值的\"><a href=\"#6-长期持续输出是极具价值的\" class=\"headerlink\" title=\"6. 长期持续输出是极具价值的\"></a>6. 长期持续输出是极具价值的</h2><p>2017年，我的生活当中还有一个惊喜，这个惊喜是什么呢？我的新书《财富自由之路》居然在豆瓣上，获得9.4分。当年我出版的《把时间当做朋友》，在豆瓣上才评分8.4、8.5，当时就已经被认为是神书了。</p>\n<p>但是，这一次却做到了9.4分，所以这个感悟也要送给大家，普通人也应该锻炼自己的写作能力和演讲能力。</p>\n<p>我相信如果有一天你像我一样走了很远很远的路，你会发现，一切的变现，都来自于你的认知，你的认知能力、你的思考能力、思考深度，这些才是最容易赚钱的能力，而体力活通常情况下赚钱速度不会足够强。</p>\n<p>通往财富自由之路，是我在得到专栏上持续输出的结果，一年54周，从来都没有断过，即便有两周我被蒙着眼睛，根本看不了，根本不可能写的情况下，我也没有停止更新。为什么呀？因为我们这种人是靠谱的人，关键时刻绝不掉链子，绝对不会因为我眼睛看不见了，我就不发东西了。</p>\n<p>在这个持续输出的过程当中，又进一步刺激了我的思考，有了很多深入的结论。其实它是后面我做出很多重要决策的根本原因。因此，长期持续输出这件事情是极具价值的，这种能力是极具价值的，这种习惯是无价的锻炼。</p>\n<p>好了，关于2017年发生了很多事情，我逐一回顾给大家看是没有什么意义的。2017年的所有经历，真的全都是在印证一件事情，我过往是真实的，我所有的原则都是有效的。</p>\n<p>我真的希望读者们认真思考这些原则和这些感悟对自己的意义，如果你觉得有道理，千万不要随便听听，认真去思考，认真去践行，笃信这些原则，让真正有意义的原则在你身上起作用。相信我，一旦起作用，会是非常惊人的。</p>\n<p>时间差不多了，我再说另外一件事情，presone项目我们会很快发布，大概在3月份发布，全部送代币，按照当时白名单，没有ico，没有私募。2017年快要过去，我和老猫有一个共识，过往的这么多年里，大家对我们的关心支持，我们绝对不会忘记的，就像李宗盛说的，这个世界没有白走的路，每一步都算数。未来十天做个统计，无论你是在新生大学一块听听，或者加入过社群的，我们都要把它纳进免费发放代币的群体范围。</p>\n<p>最后，感谢一下2017年有很多朋友，向我表达他们的关心，到了这个时刻，我也比较自豪的告诉那些关心我的人，我没有做错任何事情，我没有做任何不应该的事情，所以到今天，我还在做事，我还可以有我的理想。谢谢大家。</p>\n<p>■来源：李笑来 区块资本论</p>\n","categories":["Life"]},{"title":"mysql5.6占用内存很大的解决方法","url":"/mysql5.6_memory/","content":"<p>vps的内存为512M,安装好nginx,php等启动起来,mysql死活启动不起来看了日志只看到对应pid被结束了,后跟踪看发现是内存不足被killed;</p>\n<p>调整<code>my.cnf</code>参数,重新配置（系统默认配置太高直接占用400M内存,小玩家玩不起呢）即可<code>performance_schema_max_table_instances=200</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">table_definition_cache=200</span><br><span class=\"line\">table_open_cache=128</span><br></pre></td></tr></table></figure>\n\n<p>下面附一个相关的<code>my.cnf</code>配置文件的说明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">socket = /tmp/mysql.sock</span><br><span class=\"line\"> </span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">socket = /tmp/mysql.sock</span><br><span class=\"line\"> </span><br><span class=\"line\">basedir = /usr/local/mysql</span><br><span class=\"line\">datadir = /data/mysql</span><br><span class=\"line\">pid-file = /data/mysql/mysql.pid</span><br><span class=\"line\">user = mysql</span><br><span class=\"line\">bind-address = 0.0.0.0</span><br><span class=\"line\">server-id = 1 #表示是本机的序号为1,一般来讲就是master的意思</span><br><span class=\"line\"> </span><br><span class=\"line\">skip-name-resolve</span><br><span class=\"line\"># 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，</span><br><span class=\"line\"># 则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求</span><br><span class=\"line\"> </span><br><span class=\"line\">#skip-networking</span><br><span class=\"line\"> </span><br><span class=\"line\">back_log = 600</span><br><span class=\"line\"># MySQL能有的连接数量。当主要MySQL线程在一个很短时间内得到非常多的连接请求，这就起作用，</span><br><span class=\"line\"># 然后主线程花些时间(尽管很短)检查连接并且启动一个新线程。back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。</span><br><span class=\"line\"># 如果期望在一个短时间内有很多连接，你需要增加它。也就是说，如果MySQL的连接数据达到max_connections时，新来的请求将会被存在堆栈中，</span><br><span class=\"line\"># 以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。</span><br><span class=\"line\"># 另外，这值（back_log）限于您的操作系统对到来的TCP/IP连接的侦听队列的大小。</span><br><span class=\"line\"># 你的操作系统在这个队列大小上有它自己的限制（可以检查你的OS文档找出这个变量的最大值），试图设定back_log高于你的操作系统的限制将是无效的。</span><br><span class=\"line\"> </span><br><span class=\"line\">max_connections = 1000</span><br><span class=\"line\"># MySQL的最大连接数，如果服务器的并发连接请求量比较大，建议调高此值，以增加并行连接数量，当然这建立在机器能支撑的情况下，因为如果连接数越多，介于MySQL会为每个连接提供连接缓冲区，就会开销越多的内存，所以要适当调整该值，不能盲目提高设值。可以过&#x27;conn%&#x27;通配符查看当前状态的连接数量，以定夺该值的大小。</span><br><span class=\"line\"> </span><br><span class=\"line\">max_connect_errors = 6000</span><br><span class=\"line\"># 对于同一主机，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST。</span><br><span class=\"line\"> </span><br><span class=\"line\">open_files_limit = 65535</span><br><span class=\"line\"># MySQL打开的文件描述符限制，默认最小1024;当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个，</span><br><span class=\"line\"># 当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。</span><br><span class=\"line\"> </span><br><span class=\"line\">table_open_cache = 128</span><br><span class=\"line\"># MySQL每打开一个表，都会读入一些数据到table_open_cache缓存中，当MySQL在这个缓存中找不到相应信息时，才会去磁盘上读取。默认值64</span><br><span class=\"line\"># 假定系统有200个并发连接，则需将此参数设置为200*N(N为每个连接所需的文件描述符数目)；</span><br><span class=\"line\"># 当把table_open_cache设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上</span><br><span class=\"line\"> </span><br><span class=\"line\">max_allowed_packet = 4M</span><br><span class=\"line\"># 接受的数据包大小；增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或MySQLd必须返回大的结果行时MySQLd才会分配更多内存。</span><br><span class=\"line\"># 该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。</span><br><span class=\"line\"> </span><br><span class=\"line\">binlog_cache_size = 1M</span><br><span class=\"line\"># 一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32K</span><br><span class=\"line\"> </span><br><span class=\"line\">max_heap_table_size = 8M</span><br><span class=\"line\"># 定义了用户可以创建的内存表(memory table)的大小。这个值用来计算内存表的最大行数值。这个变量支持动态改变</span><br><span class=\"line\"> </span><br><span class=\"line\">tmp_table_size = 16M</span><br><span class=\"line\"># MySQL的heap（堆积）表缓冲大小。所有联合在一个DML指令内完成，并且大多数联合甚至可以不用临时表即可以完成。</span><br><span class=\"line\"># 大多数临时表是基于内存的(HEAP)表。具有大的记录长度的临时表 (所有列的长度的和)或包含BLOB列的表存储在硬盘上。</span><br><span class=\"line\"># 如果某个内部heap（堆积）表大小超过tmp_table_size，MySQL可以根据需要自动将内存中的heap表改为基于硬盘的MyISAM表。还可以通过设置tmp_table_size选项来增加临时表的大小。也就是说，如果调高该值，MySQL同时将增加heap表的大小，可达到提高联接查询速度的效果</span><br><span class=\"line\"> </span><br><span class=\"line\">read_buffer_size = 2M</span><br><span class=\"line\"># MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。</span><br><span class=\"line\"># 如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能</span><br><span class=\"line\"> </span><br><span class=\"line\">read_rnd_buffer_size = 8M</span><br><span class=\"line\"># MySQL的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，</span><br><span class=\"line\"># MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySQL会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大</span><br><span class=\"line\"> </span><br><span class=\"line\">sort_buffer_size = 8M</span><br><span class=\"line\"># MySQL执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。</span><br><span class=\"line\"># 如果不能，可以尝试增加sort_buffer_size变量的大小</span><br><span class=\"line\"> </span><br><span class=\"line\">join_buffer_size = 8M</span><br><span class=\"line\"># 联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享</span><br><span class=\"line\"> </span><br><span class=\"line\">thread_cache_size = 8</span><br><span class=\"line\"># 这个值（默认8）表示可以重新利用保存在缓存中线程的数量，当断开连接时如果缓存中还有空间，那么客户端的线程将被放到缓存中，</span><br><span class=\"line\"># 如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，</span><br><span class=\"line\"># 增加这个值可以改善系统性能.通过比较Connections和Threads_created状态的变量，可以看到这个变量的作用。(–&gt;表示要调整的值)</span><br><span class=\"line\"># 根据物理内存设置规则如下：</span><br><span class=\"line\"># 1G  —&gt; 8</span><br><span class=\"line\"># 2G  —&gt; 16</span><br><span class=\"line\"># 3G  —&gt; 32</span><br><span class=\"line\"># 大于3G  —&gt; 64</span><br><span class=\"line\"> </span><br><span class=\"line\">query_cache_size = 8M</span><br><span class=\"line\"># MySQL的查询缓冲大小（从4.0.1开始，MySQL提供了查询缓冲机制）使用查询缓冲，MySQL将SELECT语句和查询结果存放在缓冲区中，</span><br><span class=\"line\"># 今后对于同样的SELECT语句（区分大小写），将直接从缓冲区中读取结果。根据MySQL用户手册，使用查询缓冲最多可以达到238%的效率。</span><br><span class=\"line\"># 通过检查状态值&#x27;Qcache_%&#x27;，可以知道query_cache_size设置是否合理：如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，</span><br><span class=\"line\"># 如果Qcache_hits的值也非常大，则表明查询缓冲使用非常频繁，此时需要增加缓冲大小；如果Qcache_hits的值不大，则表明你的查询重复率很低，</span><br><span class=\"line\"># 这种情况下使用查询缓冲反而会影响效率，那么可以考虑不用查询缓冲。此外，在SELECT语句中加入SQL_NO_CACHE可以明确表示不使用查询缓冲</span><br><span class=\"line\"> </span><br><span class=\"line\">query_cache_limit = 2M</span><br><span class=\"line\"># 指定单个查询能够使用的缓冲区大小，默认1M</span><br><span class=\"line\"> </span><br><span class=\"line\">key_buffer_size = 4M</span><br><span class=\"line\"># 指定用于索引的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，</span><br><span class=\"line\"># 系统将开始换页并且真的变慢了。对于内存在4GB左右的服务器该参数可设置为384M或512M。通过检查状态值Key_read_requests和Key_reads，</span><br><span class=\"line\"># 可以知道key_buffer_size设置是否合理。比例key_reads/key_read_requests应该尽可能的低，</span><br><span class=\"line\"># 至少是1:100，1:1000更好(上述状态值可以使用SHOW STATUS LIKE &#x27;key_read%&#x27;获得)。注意：该参数值设置的过大反而会是服务器整体效率降低</span><br><span class=\"line\"> </span><br><span class=\"line\">ft_min_word_len = 4</span><br><span class=\"line\"># 分词词汇最小长度，默认4</span><br><span class=\"line\"> </span><br><span class=\"line\">transaction_isolation = REPEATABLE-READ</span><br><span class=\"line\"># MySQL支持4种事务隔离级别，他们分别是：</span><br><span class=\"line\"># READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.</span><br><span class=\"line\"># 如没有指定，MySQL默认采用的是REPEATABLE-READ，ORACLE默认的是READ-COMMITTED</span><br><span class=\"line\"> </span><br><span class=\"line\">log_bin = mysql-bin</span><br><span class=\"line\">binlog_format = mixed</span><br><span class=\"line\">expire_logs_days = 30 # 超过30天的binlog删除</span><br><span class=\"line\"> </span><br><span class=\"line\">log_error = /data/mysql/mysql-error.log # 错误日志路径</span><br><span class=\"line\">slow_query_log = 1</span><br><span class=\"line\">long_query_time = 1 # 慢查询时间 超过1秒则为慢查询</span><br><span class=\"line\">slow_query_log_file = /data/mysql/mysql-slow.log</span><br><span class=\"line\"> </span><br><span class=\"line\">performance_schema = 0</span><br><span class=\"line\">explicit_defaults_for_timestamp</span><br><span class=\"line\"> </span><br><span class=\"line\"># lower_case_table_names = 1 # 不区分大小写</span><br><span class=\"line\"> </span><br><span class=\"line\">skip-external-locking # MySQL选项以避免外部锁定。该选项默认开启</span><br><span class=\"line\"> </span><br><span class=\"line\">default-storage-engine = InnoDB # 默认存储引擎</span><br><span class=\"line\"> </span><br><span class=\"line\">innodb_file_per_table = 1</span><br><span class=\"line\"># InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间</span><br><span class=\"line\"># 独立表空间优点：</span><br><span class=\"line\"># 1．每个表都有自已独立的表空间。</span><br><span class=\"line\"># 2．每个表的数据和索引都会存在自已的表空间中。</span><br><span class=\"line\"># 3．可以实现单表在不同的数据库中移动。</span><br><span class=\"line\"># 4．空间可以回收（除drop table操作处，表空不能自已回收）</span><br><span class=\"line\"># 缺点：</span><br><span class=\"line\"># 单表增加过大，如超过100G</span><br><span class=\"line\"># 结论：</span><br><span class=\"line\"># 共享表空间在Insert操作上少有优势。其它都没独立表空间表现好。当启用独立表空间时，请合理调整：innodb_open_files</span><br><span class=\"line\"> </span><br><span class=\"line\">innodb_open_files = 500</span><br><span class=\"line\"># 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300</span><br><span class=\"line\"> </span><br><span class=\"line\">innodb_buffer_pool_size = 64M</span><br><span class=\"line\"># InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.</span><br><span class=\"line\"># 这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.</span><br><span class=\"line\"># 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%</span><br><span class=\"line\"># 不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.</span><br><span class=\"line\"># 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,</span><br><span class=\"line\"># 所以不要设置的太高.</span><br><span class=\"line\"> </span><br><span class=\"line\">innodb_write_io_threads = 4</span><br><span class=\"line\">innodb_read_io_threads = 4</span><br><span class=\"line\"># innodb使用后台线程处理数据页上的读写 I/O(输入输出)请求,根据你的 CPU 核数来更改,默认是4</span><br><span class=\"line\"># 注:这两个参数不支持动态改变,需要把该参数加入到my.cnf里，修改完后重启MySQL服务,允许值的范围从 1-64</span><br><span class=\"line\"> </span><br><span class=\"line\">innodb_thread_concurrency = 0</span><br><span class=\"line\"># 默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量</span><br><span class=\"line\"> </span><br><span class=\"line\">innodb_purge_threads = 1</span><br><span class=\"line\"># InnoDB中的清除操作是一类定期回收无用数据的操作。在之前的几个版本中，清除操作是主线程的一部分，这意味着运行时它可能会堵塞其它的数据库操作。</span><br><span class=\"line\"># 从MySQL5.5.X版本开始，该操作运行于独立的线程中,并支持更多的并发数。用户可通过设置innodb_purge_threads配置参数来选择清除操作是否使用单</span><br><span class=\"line\"># 独线程,默认情况下参数设置为0(不使用单独线程),设置为 1 时表示使用单独的清除线程。建议为1</span><br><span class=\"line\"> </span><br><span class=\"line\">innodb_flush_log_at_trx_commit = 2</span><br><span class=\"line\"># 0：如果innodb_flush_log_at_trx_commit的值为0,log buffer每秒就会被刷写日志文件到磁盘，提交事务的时候不做任何操作（执行是由mysql的master thread线程来执行的。</span><br><span class=\"line\"># 主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中。不论事务是否已经提交）默认的日志文件是ib_logfile0,ib_logfile1</span><br><span class=\"line\"># 1：当设为默认值1的时候，每次提交事务的时候，都会将log buffer刷写到日志。</span><br><span class=\"line\"># 2：如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，这要取决于进程的调度。</span><br><span class=\"line\"># 每次事务提交的时候将数据写入事务日志，而这里的写入仅是调用了文件系统的写入操作，而文件系统是有 缓存的，所以这个写入并不能保证数据已经写入到物理磁盘</span><br><span class=\"line\"># 默认值1是为了保证完整的ACID。当然，你可以将这个配置项设为1以外的值来换取更高的性能，但是在系统崩溃的时候，你将会丢失1秒的数据。</span><br><span class=\"line\"># 设为0的话，mysqld进程崩溃的时候，就会丢失最后1秒的事务。设为2,只有在操作系统崩溃或者断电的时候才会丢失最后1秒的数据。InnoDB在做恢复的时候会忽略这个值。</span><br><span class=\"line\"># 总结</span><br><span class=\"line\"># 设为1当然是最安全的，但性能页是最差的（相对其他两个参数而言，但不是不能接受）。如果对数据一致性和完整性要求不高，完全可以设为2，如果只最求性能，例如高并发写的日志服务器，设为0来获得更高性能</span><br><span class=\"line\"> </span><br><span class=\"line\">innodb_log_buffer_size = 2M</span><br><span class=\"line\"># 此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间</span><br><span class=\"line\"> </span><br><span class=\"line\">innodb_log_file_size = 32M</span><br><span class=\"line\"># 此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间</span><br><span class=\"line\"> </span><br><span class=\"line\">innodb_log_files_in_group = 3</span><br><span class=\"line\"># 为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3</span><br><span class=\"line\"> </span><br><span class=\"line\">innodb_max_dirty_pages_pct = 90</span><br><span class=\"line\"># innodb主线程刷新缓存池中的数据，使脏数据比例小于90%</span><br><span class=\"line\"> </span><br><span class=\"line\">innodb_lock_wait_timeout = 120</span><br><span class=\"line\"># InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒</span><br><span class=\"line\"> </span><br><span class=\"line\">bulk_insert_buffer_size = 8M</span><br><span class=\"line\"># 批量插入缓存大小， 这个参数是针对MyISAM存储引擎来说的。适用于在一次性插入100-1000+条记录时， 提高效率。默认值是8M。可以针对数据量的大小，翻倍增加。</span><br><span class=\"line\"> </span><br><span class=\"line\">myisam_sort_buffer_size = 8M</span><br><span class=\"line\"># MyISAM设置恢复表之时使用的缓冲区的尺寸，当在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序 MyISAM索引分配的缓冲区</span><br><span class=\"line\"> </span><br><span class=\"line\">myisam_max_sort_file_size = 10G</span><br><span class=\"line\"># 如果临时文件会变得超过索引，不要使用快速排序索引方法来创建一个索引。注释：这个参数以字节的形式给出</span><br><span class=\"line\"> </span><br><span class=\"line\">myisam_repair_threads = 1</span><br><span class=\"line\"># 如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引(每个索引在自己的线程内) </span><br><span class=\"line\"> </span><br><span class=\"line\">interactive_timeout = 28800</span><br><span class=\"line\"># 服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。默认值：28800秒（8小时）</span><br><span class=\"line\"> </span><br><span class=\"line\">wait_timeout = 28800</span><br><span class=\"line\"># 服务器关闭非交互连接之前等待活动的秒数。在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，</span><br><span class=\"line\"># 取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。参数默认值：28800秒（8小时）</span><br><span class=\"line\"># MySQL服务器所支持的最大连接数是有上限的，因为每个连接的建立都会消耗内存，因此我们希望客户端在连接到MySQL Server处理完相应的操作后，</span><br><span class=\"line\"># 应该断开连接并释放占用的内存。如果你的MySQL Server有大量的闲置连接，他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，</span><br><span class=\"line\"># 最终肯定会达到MySQL Server的连接上限数，这会报&#x27;too many connections&#x27;的错误。对于wait_timeout的值设定，应该根据系统的运行情况来判断。</span><br><span class=\"line\"># 在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，</span><br><span class=\"line\"># 可以进行适当的调整小些。要同时设置interactive_timeout和wait_timeout才会生效。</span><br><span class=\"line\"> </span><br><span class=\"line\">[mysqldump]</span><br><span class=\"line\">quick</span><br><span class=\"line\">max_allowed_packet = 16M #服务器发送和接受的最大包长度</span><br><span class=\"line\"> </span><br><span class=\"line\">[myisamchk]</span><br><span class=\"line\">key_buffer_size = 8M</span><br><span class=\"line\">sort_buffer_size = 8M</span><br><span class=\"line\">read_buffer = 4M</span><br><span class=\"line\">write_buffer = 4M</span><br></pre></td></tr></table></figure>","categories":["Web","Db"],"tags":["mysql","db"]},{"title":"互联网协议入门","url":"/internet_protocol/","content":"<p>我们每天使用互联网，你是否想过，它是如何实现的？</p>\n<p>全世界几十亿台电脑，连接在一起，两两通信。上海的某一块网卡送出信号，洛杉矶的另一块网卡居然就收到了，两者实际上根本不知道对方的物理位置，你不觉得这是很神奇的事情吗？</p>\n<p>互联网的核心是一系列协议，总称为”互联网协议”（Internet Protocol Suite）。它们对电脑如何连接和组网，做出了详尽的规定。理解了这些协议，就理解了互联网的原理。</p>\n<p>下面就是我的学习笔记。因为这些协议实在太复杂、太庞大，我想整理一个简洁的框架，帮助自己从总体上把握它们。为了保证简单易懂，我做了大量的简化，有些地方并不全面和精确，但是应该能够说清楚互联网的原理。</p>\n<hr>\n<p><strong>互联网协议入门</strong></p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"五层模型\"><a href=\"#五层模型\" class=\"headerlink\" title=\"五层模型\"></a>五层模型</h3><p>互联网的实现，分成好几层。每一层都有自己的功能，就像建筑物一样，每一层都靠下一层支持。</p>\n<p>用户接触到的，只是最上面的一层，根本没有感觉到下面的层。要理解互联网，必须从最下层开始，自下而上理解每一层的功能。</p>\n<p>如何分层有不同的模型，有的模型分七层，有的分四层。我觉得，把互联网分成五层，比较容易解释。</p>\n<p>如上图所示，最底下的一层叫做”实体层”（Physical Layer），最上面的一层叫做”应用层”（Application Layer），中间的三层（自下而上）分别是”链接层”（Link Layer）、”网络层”（Network Layer）和”传输层”（Transport Layer）。越下面的层，越靠近硬件；越上面的层，越靠近用户。</p>\n<p>它们叫什么名字，其实并不重要。只需要知道，互联网分成若干层就可以了。</p>\n<h3 id=\"层与协议\"><a href=\"#层与协议\" class=\"headerlink\" title=\"层与协议\"></a>层与协议</h3><p>每一层都是为了完成一种功能。为了实现这些功能，就需要大家都遵守共同的规则。</p>\n<p>大家都遵守的规则，就叫做”协议”（protocol）。</p>\n<p>互联网的每一层，都定义了很多协议。这些协议的总称，就叫做”互联网协议”（Internet Protocol Suite）。它们是互联网的核心，下面介绍每一层的功能，主要就是介绍每一层的主要协议。</p>\n<h2 id=\"实体层\"><a href=\"#实体层\" class=\"headerlink\" title=\"实体层\"></a>实体层</h2><p>我们从最底下的一层开始。</p>\n<p>电脑要组网，第一件事要干什么？当然是先把电脑连起来，可以用光缆、电缆、双绞线、无线电波等方式。</p>\n<p>这就叫做”实体层”，它就是把电脑连接起来的物理手段。它主要规定了网络的一些电气特性，作用是负责传送0和1的电信号。</p>\n<h2 id=\"链接层\"><a href=\"#链接层\" class=\"headerlink\" title=\"链接层\"></a>链接层</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>单纯的0和1没有任何意义，必须规定解读方式：多少个电信号算一组？每个信号位有何意义？</p>\n<p>这就是”链接层”的功能，它在”实体层”的上方，确定了0和1的分组方式。</p>\n<h3 id=\"以太网协议\"><a href=\"#以太网协议\" class=\"headerlink\" title=\"以太网协议\"></a>以太网协议</h3><p>早期的时候，每家公司都有自己的电信号分组方式。逐渐地，一种叫做“以太网”（Ethernet）的协议，占据了主导地位。</p>\n<p>以太网规定，一组电信号构成一个数据包，叫做”帧”（Frame）。每一帧分成两个部分：标头（Head）和数据（Data）。</p>\n<p>“标头”包含数据包的一些说明项，比如发送者、接受者、数据类型等等；”数据”则是数据包的具体内容。</p>\n<p>“标头”的长度，固定为18字节。”数据”的长度，最短为46字节，最长为1500字节。因此，整个”帧”最短为64字节，最长为1518字节。如果数据很长，就必须分割成多个帧进行发送。</p>\n<h3 id=\"MAC地址\"><a href=\"#MAC地址\" class=\"headerlink\" title=\"MAC地址\"></a>MAC地址</h3><p>上面提到，以太网数据包的”标头”，包含了发送者和接受者的信息。那么，发送者和接受者是如何标识呢？</p>\n<p>以太网规定，连入网络的所有设备，都必须具有”网卡”接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做MAC地址。</p>\n<p>每块网卡出厂的时候，都有一个全世界独一无二的MAC地址，长度是48个二进制位，通常用12个十六进制数表示。</p>\n<p>前6个十六进制数是厂商编号，后6个是该厂商的网卡流水号。有了MAC地址，就可以定位网卡和数据包的路径了。</p>\n<h3 id=\"广播\"><a href=\"#广播\" class=\"headerlink\" title=\"广播\"></a>广播</h3><p>定义地址只是第一步，后面还有更多的步骤。</p>\n<p>首先，一块网卡怎么会知道另一块网卡的MAC地址？</p>\n<p>回答是有一种ARP协议，可以解决这个问题。这个留到后面介绍，这里只需要知道，以太网数据包必须知道接收方的MAC地址，然后才能发送。</p>\n<p>其次，就算有了MAC地址，系统怎样才能把数据包准确送到接收方？</p>\n<p>回答是以太网采用了一种很”原始”的方式，它不是把数据包准确送到接收方，而是向本网络内所有计算机发送，让每台计算机自己判断，是否为接收方。</p>\n<p>上图中，1号计算机向2号计算机发送一个数据包，同一个子网络的3号、4号、5号计算机都会收到这个包。它们读取这个包的”标头”，找到接收方的MAC地址，然后与自身的MAC地址相比较，如果两者相同，就接受这个包，做进一步处理，否则就丢弃这个包。这种发送方式就叫做”广播”（broadcasting）。</p>\n<p>有了数据包的定义、网卡的MAC地址、广播的发送方式，”链接层”就可以在多台计算机之间传送数据了。</p>\n<h2 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h2><h3 id=\"网络层的由来\"><a href=\"#网络层的由来\" class=\"headerlink\" title=\"网络层的由来\"></a>网络层的由来</h3><p>以太网协议，依靠MAC地址发送数据。理论上，单单依靠MAC地址，上海的网卡就可以找到洛杉矶的网卡了，技术上是可以实现的。</p>\n<p>但是，这样做有一个重大的缺点。以太网采用广播方式发送数据包，所有成员人手一”包”，不仅效率低，而且局限在发送者所在的子网络。也就是说，如果两台计算机不在同一个子网络，广播是传不过去的。这种设计是合理的，否则互联网上每一台计算机都会收到所有包，那会引起灾难。</p>\n<p>互联网是无数子网络共同组成的一个巨型网络，很像想象上海和洛杉矶的电脑会在同一个子网络，这几乎是不可能的。</p>\n<p>因此，必须找到一种方法，能够区分哪些MAC地址属于同一个子网络，哪些不是。如果是同一个子网络，就采用广播方式发送，否则就采用”路由”方式发送。（”路由”的意思，就是指如何向不同的子网络分发数据包，这是一个很大的主题，本文不涉及。）遗憾的是，MAC地址本身无法做到这一点。它只与厂商有关，与所处网络无关。</p>\n<p>这就导致了”网络层”的诞生。它的作用是引进一套新的地址，使得我们能够区分不同的计算机是否属于同一个子网络。这套地址就叫做”网络地址”，简称”网址”。</p>\n<p>于是，”网络层”出现以后，每台计算机有了两种地址，一种是MAC地址，另一种是网络地址。两种地址之间没有任何联系，MAC地址是绑定在网卡上的，网络地址则是管理员分配的，它们只是随机组合在一起。</p>\n<p>网络地址帮助我们确定计算机所在的子网络，MAC地址则将数据包送到该子网络中的目标网卡。因此，从逻辑上可以推断，必定是先处理网络地址，然后再处理MAC地址。</p>\n<h3 id=\"IP协议\"><a href=\"#IP协议\" class=\"headerlink\" title=\"IP协议\"></a>IP协议</h3><p>规定网络地址的协议，叫做IP协议。它所定义的地址，就被称为IP地址。</p>\n<p>目前，广泛采用的是IP协议第四版，简称IPv4。这个版本规定，网络地址由32个二进制位组成。</p>\n<p>习惯上，我们用分成四段的十进制数表示IP地址，从0.0.0.0一直到255.255.255.255。</p>\n<p>互联网上的每一台计算机，都会分配到一个IP地址。这个地址分成两个部分，前一部分代表网络，后一部分代表主机。比如，IP地址172.16.254.1，这是一个32位的地址，假定它的网络部分是前24位（172.16.254），那么主机部分就是后8位（最后的那个1）。处于同一个子网络的电脑，它们IP地址的网络部分必定是相同的，也就是说172.16.254.2应该与172.16.254.1处在同一个子网络。</p>\n<p>但是，问题在于单单从IP地址，我们无法判断网络部分。还是以172.16.254.1为例，它的网络部分，到底是前24位，还是前16位，甚至前28位，从IP地址上是看不出来的。</p>\n<p>那么，怎样才能从IP地址，判断两台计算机是否属于同一个子网络呢？这就要用到另一个参数”子网掩码”（subnet mask）。</p>\n<p>所谓”子网掩码”，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.254.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</p>\n<p>知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</p>\n<p>比如，已知IP地址172.16.254.1和172.16.254.233的子网掩码都是255.255.255.0，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，结果都是172.16.254.0，因此它们在同一个子网络。</p>\n<p>总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</p>\n<h3 id=\"IP数据包\"><a href=\"#IP数据包\" class=\"headerlink\" title=\"IP数据包\"></a>IP数据包</h3><p>根据IP协议发送的数据，就叫做IP数据包。不难想象，其中必定包括IP地址信息。</p>\n<p>但是前面说过，以太网数据包只包含MAC地址，并没有IP地址的栏位。那么是否需要修改数据定义，再添加一个栏位呢？</p>\n<p>回答是不需要，我们可以把IP数据包直接放进以太网数据包的”数据”部分，因此完全不用修改以太网的规格。这就是互联网分层结构的好处：上层的变动完全不涉及下层的结构。</p>\n<p>具体来说，IP数据包也分为”标头”和”数据”两个部分。</p>\n<p>“标头”部分主要包括版本、长度、IP地址等信息，”数据”部分则是IP数据包的具体内容。它放进以太网数据包后，以太网数据包就变成了下面这样。</p>\n<p>IP数据包的”标头”部分的长度为20到60字节，整个数据包的总长度最大为65,535字节。因此，理论上，一个IP数据包的”数据”部分，最长为65,515字节。前面说过，以太网数据包的”数据”部分，最长只有1500字节。因此，如果IP数据包超过了1500字节，它就需要分割成几个以太网数据包，分开发送了。</p>\n<h3 id=\"ARP协议\"><a href=\"#ARP协议\" class=\"headerlink\" title=\"ARP协议\"></a>ARP协议</h3><p>关于”网络层”，还有最后一点需要说明。</p>\n<p>因为IP数据包是放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的MAC地址，另一个是对方的IP地址。通常情况下，对方的IP地址是已知的（后文会解释），但是我们不知道它的MAC地址。</p>\n<p>所以，我们需要一种机制，能够从IP地址得到MAC地址。</p>\n<p>这里又可以分成两种情况。第一种情况，如果两台主机不在同一个子网络，那么事实上没有办法得到对方的MAC地址，只能把数据包传送到两个子网络连接处的”网关”（gateway），让网关去处理。</p>\n<p>第二种情况，如果两台主机在同一个子网络，那么我们可以用ARP协议，得到对方的MAC地址。ARP协议也是发出一个数据包（包含在以太网数据包中），其中包含它所要查询主机的IP地址，在对方的MAC地址这一栏，填的是FF:FF:FF:FF:FF:FF，表示这是一个”广播”地址。它所在子网络的每一台主机，都会收到这个数据包，从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。</p>\n<p>总之，有了ARP协议之后，我们就可以得到同一个子网络内的主机MAC地址，可以把数据包发送到任意一台主机之上了。</p>\n<h2 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h2><h3 id=\"传输层的由来\"><a href=\"#传输层的由来\" class=\"headerlink\" title=\"传输层的由来\"></a>传输层的由来</h3><p>有了MAC地址和IP地址，我们已经可以在互联网上任意两台主机上建立通信。</p>\n<p>接下来的问题是，同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？</p>\n<p>也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做”端口”（port），它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。</p>\n<p>“端口”是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。</p>\n<p>“传输层”的功能，就是建立”端口到端口”的通信。相比之下，”网络层”的功能是建立”主机到主机”的通信。只要确定主机和端口，我们就能实现程序之间的交流。因此，Unix系统就把主机+端口，叫做”套接字”（socket）。有了它，就可以进行网络应用程序开发了。</p>\n<h3 id=\"UDP协议\"><a href=\"#UDP协议\" class=\"headerlink\" title=\"UDP协议\"></a>UDP协议</h3><p>现在，我们必须在数据包中加入端口信息，这就需要新的协议。最简单的实现叫做UDP协议，它的格式几乎就是在数据前面，加上端口号。</p>\n<p>UDP数据包，也是由”标头”和”数据”两部分组成。</p>\n<p>“标头”部分主要定义了发出端口和接收端口，”数据”部分就是具体的内容。然后，把整个UDP数据包放入IP数据包的”数据”部分，而前面说过，IP数据包又是放在以太网数据包之中的，所以整个以太网数据包现在变成了下面这样：</p>\n<p>UDP数据包非常简单，”标头”部分一共只有8个字节，总长度不超过65,535字节，正好放进一个IP数据包。</p>\n<h3 id=\"TCP协议\"><a href=\"#TCP协议\" class=\"headerlink\" title=\"TCP协议\"></a>TCP协议</h3><p>UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。</p>\n<p>为了解决这个问题，提高网络可靠性，TCP协议就诞生了。这个协议非常复杂，但可以近似认为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失，就收不到确认，发出方就知道有必要重发这个数据包了。</p>\n<p>因此，TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。</p>\n<p>TCP数据包和UDP数据包一样，都是内嵌在IP数据包的”数据”部分。TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p>\n<h2 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h2><p>应用程序收到”传输层”的数据，接下来就要进行解读。由于互联网是开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。</p>\n<p>“应用层”的作用，就是规定应用程序的数据格式。</p>\n<p>举例来说，TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了”应用层”。</p>\n<p>这是最高的一层，直接面对用户。它的数据就放在TCP数据包的”数据”部分。因此，现在的以太网的数据包就变成下面这样。</p>\n<p>至此，整个互联网的五层结构，自下而上全部讲完了。这是从系统的角度，解释互联网是如何构成的。下一篇，我反过来，从用户的角度，自上而下看看这个结构是如何发挥作用，完成一次网络数据交换的。</p>\n<h2 id=\"七、一个小结\"><a href=\"#七、一个小结\" class=\"headerlink\" title=\"七、一个小结\"></a>七、一个小结</h2><p>先对前面的内容，做一个小结。</p>\n<p>我们已经知道，网络通信就是交换数据包。电脑A向电脑B发送一个数据包，后者收到了，回复一个数据包，从而实现两台电脑之间的通信。数据包的结构，基本上是下面这样：</p>\n<p>发送这个包，需要知道两个地址：</p>\n<ul>\n<li>对方的MAC地址</li>\n<li>对方的IP地址</li>\n</ul>\n<p>有了这两个地址，数据包才能准确送到接收者手中。但是，前面说过，MAC地址有局限性，如果两台电脑不在同一个子网络，就无法知道对方的MAC地址，必须通过网关（gateway）转发。</p>\n<p>上图中，1号电脑要向4号电脑发送一个数据包。它先判断4号电脑是否在同一个子网络，结果发现不是（后文介绍判断方法），于是就把这个数据包发到网关A。网关A通过路由协议，发现4号电脑位于子网络B，又把数据包发给网关B，网关B再转发到4号电脑。</p>\n<p>1号电脑把数据包发到网关A，必须知道网关A的MAC地址。所以，数据包的目标地址，实际上分成两种情况：</p>\n<table>\n<thead>\n<tr>\n<th>场景</th>\n<th>数据包地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>同一个子网络</td>\n<td>对方的MAC地址，对方的IP地址</td>\n</tr>\n<tr>\n<td>非同一个子网络</td>\n<td>网关的MAC地址，对方的IP地址</td>\n</tr>\n</tbody></table>\n<p>发送数据包之前，电脑必须判断对方是否在同一个子网络，然后选择相应的MAC地址。接下来，我们就来看，实际使用中，这个过程是怎么完成的。</p>\n<h2 id=\"八、用户的上网设置\"><a href=\"#八、用户的上网设置\" class=\"headerlink\" title=\"八、用户的上网设置\"></a>八、用户的上网设置</h2><h3 id=\"静态IP地址\"><a href=\"#静态IP地址\" class=\"headerlink\" title=\"静态IP地址\"></a>静态IP地址</h3><p>你买了一台新电脑，插上网线，开机，这时电脑能够上网吗？</p>\n<p>通常你必须做一些设置。有时，管理员（或者ISP）会告诉你下面四个参数，你把它们填入操作系统，计算机就能连上网了：</p>\n<ul>\n<li>本机的IP地址</li>\n<li>子网掩码</li>\n<li>网关的IP地址</li>\n<li>DNS的IP地址</li>\n</ul>\n<p>下图是Windows系统的设置窗口。</p>\n<p>这四个参数缺一不可，后文会解释为什么需要知道它们才能上网。由于它们是给定的，计算机每次开机，都会分到同样的IP地址，所以这种情况被称作”静态IP地址上网”。</p>\n<p>但是，这样的设置很专业，普通用户望而生畏，而且如果一台电脑的IP地址保持不变，其他电脑就不能使用这个地址，不够灵活。出于这两个原因，大多数用户使用”动态IP地址上网”。</p>\n<h3 id=\"动态IP地址\"><a href=\"#动态IP地址\" class=\"headerlink\" title=\"动态IP地址\"></a>动态IP地址</h3><p>所谓”动态IP地址”，指计算机开机后，会自动分配到一个IP地址，不用人为设定。它使用的协议叫做DHCP协议。</p>\n<p>这个协议规定，每一个子网络中，有一台计算机负责管理本网络的所有IP地址，它叫做”DHCP服务器”。新的计算机加入网络，必须向”DHCP服务器”发送一个”DHCP请求”数据包，申请IP地址和相关的网络参数。</p>\n<p>前面说过，如果两台计算机在同一个子网络，必须知道对方的MAC地址和IP地址，才能发送数据包。但是，新加入的计算机不知道这两个地址，怎么发送数据包呢？</p>\n<p>DHCP协议做了一些巧妙的规定。</p>\n<h3 id=\"DHCP协议\"><a href=\"#DHCP协议\" class=\"headerlink\" title=\"DHCP协议\"></a>DHCP协议</h3><p>首先，它是一种应用层协议，建立在UDP协议之上，所以整个数据包是这样的：</p>\n<p>（1）最前面的”以太网标头”，设置发出方（本机）的MAC地址和接收方（DHCP服务器）的MAC地址。前者就是本机网卡的MAC地址，后者这时不知道，就填入一个广播地址：FF-FF-FF-FF-FF-FF。</p>\n<p>（2）后面的”IP标头”，设置发出方的IP地址和接收方的IP地址。这时，对于这两者，本机都不知道。于是，发出方的IP地址就设为0.0.0.0，接收方的IP地址设为255.255.255.255。</p>\n<p>（3）最后的”UDP标头”，设置发出方的端口和接收方的端口。这一部分是DHCP协议规定好的，发出方是68端口，接收方是67端口。</p>\n<p>这个数据包构造完成后，就可以发出了。以太网是广播发送，同一个子网络的每台计算机都收到了这个包。因为接收方的MAC地址是FF-FF-FF-FF-FF-FF，看不出是发给谁的，所以每台收到这个包的计算机，还必须分析这个包的IP地址，才能确定是不是发给自己的。当看到发出方IP地址是0.0.0.0，接收方是255.255.255.255，于是DHCP服务器知道”这个包是发给我的”，而其他计算机就可以丢弃这个包。</p>\n<p>接下来，DHCP服务器读出这个包的数据内容，分配好IP地址，发送回去一个”DHCP响应”数据包。这个响应包的结构也是类似的，以太网标头的MAC地址是双方的网卡地址，IP标头的IP地址是DHCP服务器的IP地址（发出方）和255.255.255.255（接收方），UDP标头的端口是67（发出方）和68（接收方），分配给请求端的IP地址和本网络的具体参数则包含在Data部分。</p>\n<p>新加入的计算机收到这个响应包，于是就知道了自己的IP地址、子网掩码、网关地址、DNS服务器等等参数。</p>\n<h3 id=\"上网设置：小结\"><a href=\"#上网设置：小结\" class=\"headerlink\" title=\"上网设置：小结\"></a>上网设置：小结</h3><p>这个部分，需要记住的就是一点：不管是”静态IP地址”还是”动态IP地址”，电脑上网的首要步骤，是确定四个参数。这四个值很重要，值得重复一遍：</p>\n<ul>\n<li>本机的IP地址</li>\n<li>子网掩码</li>\n<li>网关的IP地址</li>\n<li>DNS的IP地址</li>\n</ul>\n<p>有了这几个数值，电脑就可以上网”冲浪”了。接下来，我们来看一个实例，当用户访问网页的时候，互联网协议是怎么运作的。</p>\n<h2 id=\"九、一个实例：访问网页\"><a href=\"#九、一个实例：访问网页\" class=\"headerlink\" title=\"九、一个实例：访问网页\"></a>九、一个实例：访问网页</h2><h3 id=\"本机参数\"><a href=\"#本机参数\" class=\"headerlink\" title=\"本机参数\"></a>本机参数</h3><p>我们假定，经过上一节的步骤，用户设置好了自己的网络参数：</p>\n<ul>\n<li>本机的IP地址：192.168.1.100</li>\n<li>子网掩码：255.255.255.0</li>\n<li>网关的IP地址：192.168.1.1</li>\n<li>DNS的IP地址：8.8.8.8</li>\n</ul>\n<p>然后他打开浏览器，想要访问Google，在地址栏输入了网址：<code>www.google.com</code>。</p>\n<p>这意味着，浏览器要向Google发送一个网页请求的数据包。</p>\n<h3 id=\"DNS协议\"><a href=\"#DNS协议\" class=\"headerlink\" title=\"DNS协议\"></a>DNS协议</h3><p>我们知道，发送数据包，必须要知道对方的IP地址。但是，现在，我们只知道网址<code>www.google.com</code>，不知道它的IP地址。</p>\n<p>DNS协议可以帮助我们，将这个网址转换成IP地址。已知DNS服务器为8.8.8.8，于是我们向这个地址发送一个DNS数据包（53端口）。</p>\n<p>然后，DNS服务器做出响应，告诉我们Google的IP地址是172.194.72.105。于是，我们知道了对方的IP地址。</p>\n<h3 id=\"子网掩码\"><a href=\"#子网掩码\" class=\"headerlink\" title=\"子网掩码\"></a>子网掩码</h3><p>接下来，我们要判断，这个IP地址是不是在同一个子网络，这就要用到子网掩码。</p>\n<p>已知子网掩码是255.255.255.0，本机用它对自己的IP地址192.168.1.100，做一个二进制的AND运算（两个数位都为1，结果为1，否则为0），计算结果为192.168.1.0；然后对Google的IP地址172.194.72.105也做一个AND运算，计算结果为172.194.72.0。这两个结果不相等，所以结论是，Google与本机不在同一个子网络。</p>\n<p>因此，我们要向Google发送数据包，必须通过网关192.168.1.1转发，也就是说，接收方的MAC地址将是网关的MAC地址。</p>\n<h3 id=\"应用层协议\"><a href=\"#应用层协议\" class=\"headerlink\" title=\"应用层协议\"></a>应用层协议</h3><p>浏览网页用的是HTTP协议，它的整个数据包构造是这样的：</p>\n<p>HTTP部分的内容，类似于下面这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: www.google.com</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 6.1) ……</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class=\"line\">Accept-Encoding: gzip,deflate,sdch</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8</span><br><span class=\"line\">Accept-Charset: GBK,utf-8;q=0.7,*;q=0.3</span><br><span class=\"line\">Cookie: … …</span><br></pre></td></tr></table></figure>\n\n<p>我们假定这个部分的长度为4960字节，它会被嵌在TCP数据包之中。</p>\n<h3 id=\"TCP协议-1\"><a href=\"#TCP协议-1\" class=\"headerlink\" title=\"TCP协议\"></a>TCP协议</h3><p>TCP数据包需要设置端口，接收方（Google）的HTTP端口默认是80，发送方（本机）的端口是一个随机生成的1024-65535之间的整数，假定为51775。</p>\n<p>TCP数据包的标头长度为20字节，加上嵌入HTTP的数据包，总长度变为4980字节。</p>\n<h3 id=\"IP协议-1\"><a href=\"#IP协议-1\" class=\"headerlink\" title=\"IP协议\"></a>IP协议</h3><p>然后，TCP数据包再嵌入IP数据包。IP数据包需要设置双方的IP地址，这是已知的，发送方是192.168.1.100（本机），接收方是172.194.72.105（Google）。</p>\n<p>IP数据包的标头长度为20字节，加上嵌入的TCP数据包，总长度变为5000字节。</p>\n<h3 id=\"以太网协议-1\"><a href=\"#以太网协议-1\" class=\"headerlink\" title=\"以太网协议\"></a>以太网协议</h3><p>最后，IP数据包嵌入以太网数据包。以太网数据包需要设置双方的MAC地址，发送方为本机的网卡MAC地址，接收方为网关192.168.1.1的MAC地址（通过ARP协议得到）。</p>\n<p>以太网数据包的数据部分，最大长度为1500字节，而现在的IP数据包长度为5000字节。因此，IP数据包必须分割成四个包。因为每个包都有自己的IP标头（20字节），所以四个包的IP数据包的长度分别为1500、1500、1500、560。</p>\n<h3 id=\"服务器端响应\"><a href=\"#服务器端响应\" class=\"headerlink\" title=\"服务器端响应\"></a>服务器端响应</h3><p>经过多个网关的转发，Google的服务器172.194.72.105，收到了这四个以太网数据包。</p>\n<p>根据IP标头的序号，Google将四个包拼起来，取出完整的TCP数据包，然后读出里面的”HTTP请求”，接着做出”HTTP响应”，再用TCP协议发回来。</p>\n<p>本机收到HTTP响应以后，就可以将网页显示出来，完成一次网络通信。</p>\n<p>这个例子就到此为止，虽然经过了简化，但它大致上反映了互联网协议的整个通信过程。</p>\n","categories":["Web","Theory"]},{"title":"php.ini配置文件详解","url":"/php_phpini/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[PHP]</span><br><span class=\"line\"></span><br><span class=\"line\">engine = On ——→ 是否启用PHP解析引擎</span><br><span class=\"line\"></span><br><span class=\"line\">short_open_tag = Off ——→ 是否使用简介标志</span><br><span class=\"line\"></span><br><span class=\"line\">asp_tags = Off ——→ 不允许asp类标志</span><br><span class=\"line\"></span><br><span class=\"line\">precision = 14 ——→ 浮点型数据显示的有效期</span><br><span class=\"line\"></span><br><span class=\"line\">y2k_compliance = On</span><br><span class=\"line\"></span><br><span class=\"line\">####是否强制打开2000年适应(可能在非Y2K适应的浏览器中导致问题)。</span><br><span class=\"line\"></span><br><span class=\"line\">output_buffering = 4096 ——→ 输出缓冲区大小(字节)。建议值为4096~8192。</span><br><span class=\"line\"></span><br><span class=\"line\">zlib.output_compression = Off ——→ 是否开启zlib输出压缩</span><br><span class=\"line\"></span><br><span class=\"line\">implicit_flush = Off ——→ 是否要求PHP输出层在每个输出块之后自动刷新数据</span><br><span class=\"line\"></span><br><span class=\"line\">这等效于在每个 print()、echo()、HTML块 之后自动调用flush()函数。打开这个选项对程序执行的性能有严重的影响，通常只推荐在调试时使用。在CLI SAPI的执行模式下，该指令默认为 On 。</span><br><span class=\"line\"></span><br><span class=\"line\">unserialize_callback_func =</span><br><span class=\"line\"></span><br><span class=\"line\">serialize_precision = 17</span><br><span class=\"line\"></span><br><span class=\"line\">####将浮点型和双精度型数据序列化存储时的精度(有效位数)。默认值能够确保浮点型数据被解序列化程序解码时不会丢失数据。</span><br><span class=\"line\"></span><br><span class=\"line\">allow_call_time_pass_reference = Off</span><br><span class=\"line\"></span><br><span class=\"line\">####是否强迫在函数调用时按引用传递参数(每次使用此特性都会收到一条警告)。</span><br><span class=\"line\"></span><br><span class=\"line\">; php反对这种做法，并在将来的版本里不再支持，因为它影响到了代码的整洁。</span><br><span class=\"line\"></span><br><span class=\"line\">; 鼓励的方法是在函数声明里明确指定哪些参数按引用传递。</span><br><span class=\"line\"></span><br><span class=\"line\">; 我们鼓励你关闭这一选项，以保证你的脚本在将来版本的语言里仍能正常工作。</span><br><span class=\"line\"></span><br><span class=\"line\">safe_mode = Off ——→ 安全模式</span><br><span class=\"line\"></span><br><span class=\"line\">safe_mode_gid = Off</span><br><span class=\"line\"></span><br><span class=\"line\">safe_mode_include_dir =</span><br><span class=\"line\"></span><br><span class=\"line\">#在安全模式下，该组目录和其子目录下的文件被包含时，将跳过UID/GID检查。换句话说，如果此处的值为空，任何UID/GID不符合的文件都不允许被包含。这里设置的目录必须已经存在于include_path指令中或者用完整路径来包含。多个目录之间用冒号(Win下为分号)隔开。指定的限制实际上是一个前缀，而非一个目录名。</span><br><span class=\"line\"></span><br><span class=\"line\">safe_mode_exec_dir = ——→ 安全模式下的可执行文件存放目录</span><br><span class=\"line\"></span><br><span class=\"line\">safe_mode_allowed_env_vars = PHP_</span><br><span class=\"line\"></span><br><span class=\"line\">####在安全模式下，用户仅可以更改的环境变量的前缀列表(逗号分隔)。允许用户设置某些环境变量，可能会导致潜在的安全漏洞。注意: 如果这一参数值为空，PHP将允许用户更改任意环境变量。</span><br><span class=\"line\"></span><br><span class=\"line\">safe_mode_protected_env_vars = LD_LIBRARY_PATH</span><br><span class=\"line\"></span><br><span class=\"line\">####在安全模式下，用户不能更改的环境变量列表(逗号分隔)。这些变量即使在safe_mode_allowed_env_vars指令设置为允许的情况下也会得到保护。</span><br><span class=\"line\"></span><br><span class=\"line\">disable_functions = ——→ 该指令接受一个用逗号分隔的函数名列表，以禁用特定的函数。</span><br><span class=\"line\"></span><br><span class=\"line\">disable_classes = ——→ 该指令接受一个用逗号分隔的类名列表，以禁用特定的类</span><br><span class=\"line\"></span><br><span class=\"line\">zend.enable_gc = On ——→</span><br><span class=\"line\"></span><br><span class=\"line\">expose_php = On ——→ 在网页头部显示php信息</span><br><span class=\"line\"></span><br><span class=\"line\">max_execution_time = 30 ——→ 每个脚本最大执行秒数</span><br><span class=\"line\"></span><br><span class=\"line\">max_input_time = 60 ——→ 每个脚本用来分析请求数据的最大限制时间</span><br><span class=\"line\"></span><br><span class=\"line\">memory_limit = 128M ——→ 每个脚本执行的内存限制</span><br><span class=\"line\"></span><br><span class=\"line\">error_reporting = E_ALL &amp; ~E_DEPRECATED</span><br><span class=\"line\"></span><br><span class=\"line\">display_errors = Off ——→ #显示失误（该关闭，换成日志显示）</span><br><span class=\"line\"></span><br><span class=\"line\">display_startup_errors = Off ——→ #显示启动失误</span><br><span class=\"line\"></span><br><span class=\"line\">log_errors = On ——→ 生成错误错误日志显示</span><br><span class=\"line\"></span><br><span class=\"line\">log_errors_max_len = 1024 ——→ 设定error_log最大长度</span><br><span class=\"line\"></span><br><span class=\"line\">ignore_repeated_errors = Off ——→ 打开后，不记录重复的信息</span><br><span class=\"line\"></span><br><span class=\"line\">ignore_repeated_source = Off ——→ 打开后当记录重复的信息时忽略来源</span><br><span class=\"line\"></span><br><span class=\"line\">report_memleaks = On ——→ 报告内存泄露，仅在debug编译模式下有效</span><br><span class=\"line\"></span><br><span class=\"line\">track_errors = Off ——→ ####在$php_errormsg中保存最后一次错误/警告消息 (逻辑值).永远不要再生产环境中使用此特性：html_errors 会显示php错误所在的html标签</span><br><span class=\"line\"></span><br><span class=\"line\">html_errors = Off ——→ 是否开启静态网页错误提示</span><br><span class=\"line\"></span><br><span class=\"line\">variables_order = “GPCS” ——→ ####此指令描述了PHP注册GET, POST, Cookie, 环境 和 内置变量的顺序 (各自使用G, P, C, E 和 S , 一般使用 EGPCS 或 GPC). 注册使用从左往右的顺序, 新的值会覆盖旧的值.</span><br><span class=\"line\"></span><br><span class=\"line\">request_order = “GP”</span><br><span class=\"line\"></span><br><span class=\"line\">####此指令描述的顺序PHP注册GET，POST和COOKIE变量_REQUEST数组。注册是由左到右，新的值将覆盖旧值。如果这个指令没有设置，variables_order中使用$ _REQUEST内容。请注意，默认分配的php.ini文件中不包含’C’饼干，出于安全方面的考虑。</span><br><span class=\"line\"></span><br><span class=\"line\">register_globals = Off ——→ ##是否打开register全局变量</span><br><span class=\"line\"></span><br><span class=\"line\">register_long_arrays = Off</span><br><span class=\"line\"></span><br><span class=\"line\">####是否注册老形式的输入数组, HTTP_GET_VARS 和相关数组；如果你不使用他们,建议为了提高性能关闭他们.</span><br><span class=\"line\"></span><br><span class=\"line\">register_argc_argv = Off</span><br><span class=\"line\"></span><br><span class=\"line\">####此指令让PHP确认是否申明 argv&amp;argc 变量 (这些变量会包含GET信息). ;如果你不使用这些变量,为了提升性能应该关闭此选项.</span><br><span class=\"line\"></span><br><span class=\"line\">auto_globals_jit = On</span><br><span class=\"line\"></span><br><span class=\"line\">####当打开此项, SERVER 和 ENV 变量将在第一次被使用时而不是脚本一开始时创建(运行时);如果这些变量在脚本中没有被使用过, 打开此项会增加一点性能.;为了使此指令有效,PHP指令 register_globals, register_long_arrays,;以及 register_argc_argv 必须被关闭.</span><br><span class=\"line\"></span><br><span class=\"line\">post_max_size = 8M ——→ #PHP可以接受的最大的POST数据大小</span><br><span class=\"line\"></span><br><span class=\"line\">magic_quotes_gpc = Off ——→ #针对GET/POST/Cookie数据打开Magic quotes.</span><br><span class=\"line\"></span><br><span class=\"line\">magic_quotes_runtime = Off</span><br><span class=\"line\"></span><br><span class=\"line\">####针对实时产生的数据打开Magic quotes,例如从SQL获取的数据, 从exec()返回的数据等等.</span><br><span class=\"line\"></span><br><span class=\"line\">magic_quotes_sybase = Off ##使用 Sybase 风格的 magic quotes (使用”来引导’替代\\’).</span><br><span class=\"line\"></span><br><span class=\"line\">auto_prepend_file = ——→ #在任何PHP文档之前或之后自动增加文件</span><br><span class=\"line\"></span><br><span class=\"line\">auto_append_file =</span><br><span class=\"line\"></span><br><span class=\"line\">####两个有趣的变量是auto_prepend_file以及auto_append_file。这些变量指定PHP自动添加到任何PHP文档文件头或文件尾的其他文件。这对于为PHP产生的页面添加页眉或页脚非常有用，可以节省为每个PHP文档添加代码的时间。但需要注意这里的指定文件将会添加到所有的PHP文档中，所以这些变量必须适合单应用程序（single-application）的服务器。所包含的文件要么是PHP脚本，要么是普通的HTML文档。嵌入式PHP代码必须用标准&lt;?php…?&gt;标记括起来。</span><br><span class=\"line\"></span><br><span class=\"line\">default_mimetype = “text/html” ——→ #PHP内建默认为text/html</span><br><span class=\"line\"></span><br><span class=\"line\">doc_root = ——→ #PHP的”根目录”。仅在非空时有效。</span><br><span class=\"line\"></span><br><span class=\"line\">; 如果safe_mode=On，则此目录之外的文件一概被拒绝。 ; 如果编译PHP时没有指定FORCE_REDIRECT，并且在非IIS服务器上以CGI方式运行， ; 则必须设置此指令(参见手册中的安全部分)。 ; 替代方案是使用的cgi.force_redirect指令</span><br><span class=\"line\"></span><br><span class=\"line\">user_dir =</span><br><span class=\"line\"></span><br><span class=\"line\">####告诉php在使用 /~username 打开脚本时到哪个目录下去找，仅在非空时有效。 也就是在用户目录之下使用PHP文件的基本目录名，例如：”public_html”</span><br><span class=\"line\"></span><br><span class=\"line\">enable_dl = Off</span><br><span class=\"line\"></span><br><span class=\"line\">####是否允许使用dl()函数。dl()函数仅在将PHP作为apache模块安装时才有效。 禁用dl()函数主要是出于安全考虑，因为它可以绕过open_ｂａｓｅdir指令的限制。 在安全模式下始终禁用dl()函数，而不管此处如何设置。</span><br><span class=\"line\"></span><br><span class=\"line\">file_uploads = On 是否开启上传功能</span><br><span class=\"line\"></span><br><span class=\"line\">upload_max_filesize = 2M #最大可上传文件，2M</span><br><span class=\"line\"></span><br><span class=\"line\">max_file_uploads = 20 最大同时可以上传20个文件</span><br><span class=\"line\"></span><br><span class=\"line\">allow_url_fopen = On #是否允许打开远程文件</span><br><span class=\"line\"></span><br><span class=\"line\">allow_url_include = Off #是否允许include/require远程文件</span><br><span class=\"line\"></span><br><span class=\"line\">default_socket_timeout = 60 默认的socket超时时间</span><br><span class=\"line\"></span><br><span class=\"line\">[Date] 日期</span><br><span class=\"line\"></span><br><span class=\"line\">[filter]</span><br><span class=\"line\"></span><br><span class=\"line\">[iconv]</span><br><span class=\"line\"></span><br><span class=\"line\">[intl]</span><br><span class=\"line\"></span><br><span class=\"line\">[sqlite]</span><br><span class=\"line\"></span><br><span class=\"line\">[sqlite3]</span><br><span class=\"line\"></span><br><span class=\"line\">[Pcre]</span><br><span class=\"line\"></span><br><span class=\"line\">[Pdo]</span><br><span class=\"line\"></span><br><span class=\"line\">[Pdo_mysql]</span><br><span class=\"line\"></span><br><span class=\"line\">pdo_mysql.cache_size = 2000 ——→ Ped_mysql的缓存大小</span><br><span class=\"line\"></span><br><span class=\"line\">pdo_mysql.default_socket= ——→ 默认的socket时间</span><br><span class=\"line\"></span><br><span class=\"line\">[Phar]</span><br><span class=\"line\"></span><br><span class=\"line\">[Syslog]</span><br><span class=\"line\"></span><br><span class=\"line\">define_syslog_variables = Off ——→ 是否定义各种的系统日志变量</span><br><span class=\"line\"></span><br><span class=\"line\">[mail function] ——→ 邮件功能</span><br><span class=\"line\"></span><br><span class=\"line\">SMTP = localhost ——→ 本地作为邮件服务器</span><br><span class=\"line\"></span><br><span class=\"line\">smtp_port = 25 邮件端口号默认是25</span><br><span class=\"line\"></span><br><span class=\"line\">mail.add_x_header = On ——→ 是否开启最大的header</span><br><span class=\"line\"></span><br><span class=\"line\">[SQL]</span><br><span class=\"line\"></span><br><span class=\"line\">sql.safe_mode = Off</span><br><span class=\"line\"></span><br><span class=\"line\">####是否使用SQL安全模式。如果打开，指定默认值的数据库连接函数将会使用这些默认值代替支持的参数。对于每个不同数据库的连接函数，其默认值请参考相应的手册页面。</span><br><span class=\"line\"></span><br><span class=\"line\">[ODBC]</span><br><span class=\"line\"></span><br><span class=\"line\">odbc.allow_persistent = On ——→ 允许或阻止持久连接.</span><br><span class=\"line\"></span><br><span class=\"line\">odbc.check_persistent = On ——→ 在重用前检查连接是否可用</span><br><span class=\"line\"></span><br><span class=\"line\">odbc.max_persistent = -1 ——→ 持久连接的最大数目，-1意味着没有限制.</span><br><span class=\"line\"></span><br><span class=\"line\">odbc.max_links = -1 ——→ 最大连接数(持久 + 非持久).-1意味着没有限制.</span><br><span class=\"line\"></span><br><span class=\"line\">odbc.defaultlrl = 4096 ——→ 长字段处理.返回变量的字节数.0 意味着略过.</span><br><span class=\"line\"></span><br><span class=\"line\">odbc.defaultbinmode = 1</span><br><span class=\"line\"></span><br><span class=\"line\">####二进制数据处理.0意味着略过,1按照实际返回,2转换到字符.;查看odbc_binmode和odbc_longreadlen 的文档来获取针对uodbc.defaultlrl和uodbc.defaultbinmode的解释</span><br><span class=\"line\"></span><br><span class=\"line\">[Interbase] ——→ Interbase数据库</span><br><span class=\"line\"></span><br><span class=\"line\">ibase.allow_persistent = 1 ——→ 允许或组织持久连接。</span><br><span class=\"line\"></span><br><span class=\"line\">ibase.max_persistent = -1 ——→ 持久连接的最大数目，-1意味着没有限制.</span><br><span class=\"line\"></span><br><span class=\"line\">ibase.max_links = -1 ——→ 最大连接数(持久 + 非持久).-1意味着没有限制.</span><br><span class=\"line\"></span><br><span class=\"line\">ibase.timestampformat = “%Y-%m-%d %H:%M:%S” ——→ 数据库时间记录模式</span><br><span class=\"line\"></span><br><span class=\"line\">ibase.dateformat = “%Y-%m-%d”</span><br><span class=\"line\"></span><br><span class=\"line\">ibase.timeformat = “%H:%M:%S”</span><br><span class=\"line\"></span><br><span class=\"line\">[MySQL]</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.allow_local_infile = On ——→ 是否允许本地文件连接数据库</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.allow_persistent = On ——→ 允许或禁止 持久连接</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.cache_size = 2000 ——→ mysql缓存大小</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.max_persistent = -1 ——→ 持久连接的最大数目. -1 意味着没有限制.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.max_links = -1 ——→ 连接的最大数目（持久和非持久）。-1 代表无限制</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.default_port =</span><br><span class=\"line\"></span><br><span class=\"line\">####mysql_connect() 使用的默认端口，如不设置，mysql_connect()</span><br><span class=\"line\"></span><br><span class=\"line\">;将使用变量 $MYSQL_TCP_PORT，或在/etc/services 下的mysql-tcp 条目(unix)，</span><br><span class=\"line\"></span><br><span class=\"line\">;或在编译是定义的 MYSQL_PORT(按这样的顺序)</span><br><span class=\"line\"></span><br><span class=\"line\">;Win32环境，将仅检查MYSQL_PORT。</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.default_socket =</span><br><span class=\"line\"></span><br><span class=\"line\">####用于本地 MySql 连接的默认的套接字名。为空，使用 MYSQL 内建值</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.default_host = ——→ mysql_connect() 默认使用的主机（安全模式下无效）</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.default_user = ——→ mysql_connect() 默认使用的用户名（安全模式下无效）</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.default_password = ——→ mysql_connect() 默认使用的密码（安全模式下无效</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.connect_timeout = 60 ——→ 连接超时时间，默认是60s</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.trace_mode = Off</span><br><span class=\"line\"></span><br><span class=\"line\">[MySQLi]</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli.max_persistent = -1 ——→ 持久连接的最大数目. -1 意味着没有限制.</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli.allow_persistent = On ——→ 允许或拒绝之久连接</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli.max_links = -1 ——→ 最大连接数. -1 意味着没有限制.</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli.cache_size = 2000 ——→ 连接缓存大小</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli.default_port = 3306 ——→ 连接端口号</span><br><span class=\"line\"></span><br><span class=\"line\">####mysqli_connect()默认的端口号.如果没有设置, mysql_connect() 会使用 $MYSQL_TCP_PORT;或者 位于/etc/services的 mysql-tcp 入口或者编译时定义的MYSQL_PORT 值(按照此顺序查找).;Win32 只会查找MYSQL_PORT值.</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli.default_socket =</span><br><span class=\"line\"></span><br><span class=\"line\">####对于本地MySQL连接的默认socket名称. 如果为空, 则使用MySQL内建默认值.</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli.default_host =</span><br><span class=\"line\"></span><br><span class=\"line\">####mysqli_connect()的默认host值(在安全模式中不会生效)</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli.default_user =</span><br><span class=\"line\"></span><br><span class=\"line\">####mysqli_connect()的默认user值(在安全模式中不会生效).</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli.default_pw =</span><br><span class=\"line\"></span><br><span class=\"line\">####mysqli_connect() 的默认password值(在安全模式中不会生效).</span><br><span class=\"line\"></span><br><span class=\"line\">; 注意在此文件中保存密码一般来说是 *糟糕* 的主义.</span><br><span class=\"line\"></span><br><span class=\"line\">; *任何* 使用PHP的用户可以执行 ‘echo get_cfg_var(“mysqli.default_password”)</span><br><span class=\"line\"></span><br><span class=\"line\">; 并且获取到此密码! 而且理所当然, 任何有对此文件读权限的用户都可以获取到此密码.</span><br><span class=\"line\"></span><br><span class=\"line\">mysqli.reconnect = Off ——→ 允许或阻止持久连接</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqlnd]</span><br><span class=\"line\"></span><br><span class=\"line\">mysqlnd.collect_statistics = On</span><br><span class=\"line\"></span><br><span class=\"line\">mysqlnd.collect_memory_statistics = Off</span><br><span class=\"line\"></span><br><span class=\"line\">[OCI8]</span><br><span class=\"line\"></span><br><span class=\"line\">[PostgreSQL]</span><br><span class=\"line\"></span><br><span class=\"line\">pgsql.allow_persistent = On ——→ 允许或阻止持久连接.</span><br><span class=\"line\"></span><br><span class=\"line\">pgsql.auto_reset_persistent = Off</span><br><span class=\"line\"></span><br><span class=\"line\">####总是在 pg_pconnect() 时检测断开的持久连接.;自动重置特性会引起一点开销.</span><br><span class=\"line\"></span><br><span class=\"line\">pgsql.max_persistent = -1 ——→ 持久连接的最大数目. -1 意味着没有限制.</span><br><span class=\"line\"></span><br><span class=\"line\">pgsql.max_links = -1 ——→ 最大连接数 (持久 + 非持久). -1 意味着没有限制</span><br><span class=\"line\"></span><br><span class=\"line\">pgsql.ignore_notice = 0 ——→ 是否忽略 PostgreSQL 后端通告消息.;通告消息记录会需要一点开销.</span><br><span class=\"line\"></span><br><span class=\"line\">pgsql.log_notice = 0</span><br><span class=\"line\"></span><br><span class=\"line\">####是否记录 PostgreSQL 后端通告消息.;除非 pgsql.ignore_notice=0, 否则模块无法记录通告消息。</span><br><span class=\"line\"></span><br><span class=\"line\">[Sybase-CT]</span><br><span class=\"line\"></span><br><span class=\"line\">sybct.allow_persistent = On ——→ 允许或阻止持久连接.</span><br><span class=\"line\"></span><br><span class=\"line\">sybct.max_persistent = -1 ——→ 持久连接的最大数目. -1 意味着没有限制.</span><br><span class=\"line\"></span><br><span class=\"line\">sybct.max_links = -1 ——→ 最大连接数 (持久 + 非持久). -1 意味着没有限制.</span><br><span class=\"line\"></span><br><span class=\"line\">sybct.min_server_severity = 10 ——→ 显示出的错误最小严重程度.</span><br><span class=\"line\"></span><br><span class=\"line\">sybct.min_client_severity = 10 ——→ 显示出的消息最小严重程度</span><br><span class=\"line\"></span><br><span class=\"line\">[bcmath]</span><br><span class=\"line\"></span><br><span class=\"line\">bcmath.scale = 0 ——→ #用于所有bcmath函数的10十进制数数字的个数</span><br><span class=\"line\"></span><br><span class=\"line\">[browscap]</span><br><span class=\"line\"></span><br><span class=\"line\">[Session]</span><br><span class=\"line\"></span><br><span class=\"line\">session.save_handler = files ——→ 用于保存/取回数据的控制方式</span><br><span class=\"line\"></span><br><span class=\"line\">session.use_cookies = 1 ——→ 是否使用cookies</span><br><span class=\"line\"></span><br><span class=\"line\">session.use_only_cookies = 1</span><br><span class=\"line\"></span><br><span class=\"line\">####这个选项允许管理员去保护那些在URL中传送session id的用户免于被攻击;默认是0.</span><br><span class=\"line\"></span><br><span class=\"line\">session.name = PHPSESSID ——→ session 的名字（同时作为cookie的名称</span><br><span class=\"line\"></span><br><span class=\"line\">session.auto_start = 0 ——→ 在请求开始时初始化 session</span><br><span class=\"line\"></span><br><span class=\"line\">session.cookie_lifetime = 0 ——→ cookie的存活秒数，如果为0，则是直到浏览器重新启动</span><br><span class=\"line\"></span><br><span class=\"line\">session.cookie_path = / ——→ cookie的有效路径</span><br><span class=\"line\"></span><br><span class=\"line\">session.cookie_domain = ——→ cookie的有效域名</span><br><span class=\"line\"></span><br><span class=\"line\">session.cookie_httponly =</span><br><span class=\"line\"></span><br><span class=\"line\">####是否将httpOnly标志增加到cookie上,</span><br><span class=\"line\"></span><br><span class=\"line\">增加后则cookie无法被浏览器的脚本语言(例如JavaScript)存取.</span><br><span class=\"line\"></span><br><span class=\"line\">session.serialize_handler = php 用于序列化数据的处理器. php是标准的PHP序列化器.</span><br><span class=\"line\"></span><br><span class=\"line\">session.gc_probability = 1</span><br><span class=\"line\"></span><br><span class=\"line\">####; 定义’垃圾回收’进程在每次session初始化时开始的比例.</span><br><span class=\"line\"></span><br><span class=\"line\">; 比例由 gc_probability/gc_divisor来得出,</span><br><span class=\"line\"></span><br><span class=\"line\">; 例如. 1/100 意味着在每次请求时有1%的机会启动’垃圾回收’进程.</span><br><span class=\"line\"></span><br><span class=\"line\">session.gc_divisor = 1000</span><br><span class=\"line\"></span><br><span class=\"line\">session.gc_maxlifetime = 1440</span><br><span class=\"line\"></span><br><span class=\"line\">####在这里数字所指的秒数后，保存的数据将被视为’碎片(garbage)’并由gc进程清理掉。</span><br><span class=\"line\"></span><br><span class=\"line\">session.bug_compat_42 = Off</span><br><span class=\"line\"></span><br><span class=\"line\">####PHP 4.2 和更早版本有一个未公开的 特性/bug , 此特性允许你在全局初始化一个session变量,即便 register_globals已经被关闭.;如果此特性被使用,PHP 4.3 和更早版本会警告你.;你可以关闭此特性并且隔离此警告. 这时候,如果打开bug_compat_42,那此警告只是被显示出来.</span><br><span class=\"line\"></span><br><span class=\"line\">session.bug_compat_warn = Off</span><br><span class=\"line\"></span><br><span class=\"line\">session.referer_check =</span><br><span class=\"line\"></span><br><span class=\"line\">####检查HTTP Referer来防止带有id的外部URL.;HTTP_REFERER 必须包含从session来的这个字段才会被认为是合法的.</span><br><span class=\"line\"></span><br><span class=\"line\">session.entropy_length = 0 ——→ 从此文件读取多少字节</span><br><span class=\"line\"></span><br><span class=\"line\">session.cache_limiter = nocache</span><br><span class=\"line\"></span><br><span class=\"line\">####设置为&#123;nocache,private,public,&#125;来决定HTTP缓冲的类型;留空则防止发送anti-caching头.</span><br><span class=\"line\"></span><br><span class=\"line\">session.cache_expire = 180 ——→ 文档在n分钟之后过期.</span><br><span class=\"line\"></span><br><span class=\"line\">session.use_trans_sid = 0</span><br><span class=\"line\"></span><br><span class=\"line\">####trans sid 支持默认关闭.</span><br><span class=\"line\"></span><br><span class=\"line\">;使用 trans sid 可能让你的用户承担安全风险.;使用此项必须小心.; – 用户也许通过email/irc/其他途径发送包含有效的session ID的URL给其他人.; – 包含有效session ID的URL可能被存放在容易被公共存取的电脑上.; – 用户可能通过在浏览器历史记录或者收藏夹里面的包含相同的session ID的URL来访问你的站点.</span><br><span class=\"line\"></span><br><span class=\"line\">session.hash_function = 0 ——→ 选择hash方法;0:MD5(128 bits);1:SHA-1(160 bits)</span><br><span class=\"line\"></span><br><span class=\"line\">session.hash_bits_per_character = 5</span><br><span class=\"line\"></span><br><span class=\"line\">; 当转换二进制hash数据到可读形式时,每个字符保存时有几位.</span><br><span class=\"line\"></span><br><span class=\"line\">; 4 bits: 0-9, a-f; 5 bits: 0-9, a-v; 6 bits: 0-9, a-z, A-Z, “-“, “,”</span><br><span class=\"line\"></span><br><span class=\"line\">url_rewriter.tags = “a=href,area=href,frame=src,input=src,form=fakeentry”</span><br><span class=\"line\"></span><br><span class=\"line\">URL rewriter会在已经定义的一组HTML标签内查找URL.; form/fieldset 是特殊字符; 如果你在这里包含他们, rewriter会增加一个包含信息的隐藏字段否则就是在URL中附加信息.; 如果你你想遵守XHTML, 删除form的入口.; 注意 所有合法的入口都需要一个”=”符号, 甚至是没有任何值的.</span><br><span class=\"line\"></span><br><span class=\"line\">[MSSQL]</span><br><span class=\"line\"></span><br><span class=\"line\">mssql.allow_persistent = On ——→ 允许或阻止持久连接</span><br><span class=\"line\"></span><br><span class=\"line\">mssql.max_persistent = -1 ——→ 持久连接的最大数目. -1 意味着没有限制.</span><br><span class=\"line\"></span><br><span class=\"line\">mssql.max_links = -1 ——→ 最大连接数 (持久 + 非持久). -1 意味着没有限制.</span><br><span class=\"line\"></span><br><span class=\"line\">mssql.min_error_severity = 10 ——→ 显示出的错误最小严重程度.</span><br><span class=\"line\"></span><br><span class=\"line\">mssql.min_message_severity = 10 ——→ 显示出的消息最小严重程度</span><br><span class=\"line\"></span><br><span class=\"line\">mssql.compatability_mode = Off ——→ PHP 3.0 老版本的兼容模式.</span><br><span class=\"line\"></span><br><span class=\"line\">mssql.secure_connection = Off ——→ 当连接到服务器时使用NT验证</span><br><span class=\"line\"></span><br><span class=\"line\">[Assertion]</span><br><span class=\"line\"></span><br><span class=\"line\">[COM]</span><br><span class=\"line\"></span><br><span class=\"line\">[mbstring]</span><br><span class=\"line\"></span><br><span class=\"line\">[gd]</span><br><span class=\"line\"></span><br><span class=\"line\">[exif]</span><br><span class=\"line\"></span><br><span class=\"line\">[Tidy]</span><br><span class=\"line\"></span><br><span class=\"line\">当调用tidy时,默认指向tidy配置文件的路径 tidy是否自动清除和修复输出?; 警告: 不要在你产生非html内容时使用此项,例如产生动态图片时</span><br><span class=\"line\"></span><br><span class=\"line\">tidy.clean_output = Off 清除功能是否开启，本文中为关闭状态</span><br><span class=\"line\"></span><br><span class=\"line\">[soap]</span><br><span class=\"line\"></span><br><span class=\"line\">soap.wsdl_cache_enabled=1 ——→ 打开或关闭WSDL缓冲特性.</span><br><span class=\"line\"></span><br><span class=\"line\">soap.wsdl_cache_dir=”/tmp” ——→ 设置SOAP扩展存放缓冲文件的目录</span><br><span class=\"line\"></span><br><span class=\"line\">soap.wsdl_cache_ttl=86400——→(存活时间)设置当缓冲文件被用来替换原有缓冲文件的秒数</span><br><span class=\"line\"></span><br><span class=\"line\">soap.wsdl_cache_limit = 5 ——→ 最小缓存</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["Web","Back","php"]},{"title":"Python使用pandas玩转股票数据","url":"/python_pandas_stock_data/","content":"<p>pandas 是数据分析的瑞士军刀。我们今天使用 pandas 来玩一下股票数据，看看能从数据里得到哪些有意思的信息。</p>\n<h2 id=\"pandas-教程\"><a href=\"#pandas-教程\" class=\"headerlink\" title=\"pandas 教程\"></a>pandas 教程</h2><p>如果你熟悉 Python 的话，官网上的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHA6Ly9wYW5kYXMucHlkYXRhLm9yZy9wYW5kYXMtZG9jcy9zdGFibGUvMTBtaW4uaHRtbA==\">10 Minutes to pandas<i class=\"fa fa-external-link-alt\"></i></span> 可以让你在短时间内了解 pandas 能干什么事以及是怎么干的。针对每个主题，都可以横向查到大量的资料和例子。</p>\n<p>如果你 Python 不熟，但又想用 pandas 玩转数据分析的话，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHA6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8yNTcxNzE5Ny8=\">Python for Data Analysis<i class=\"fa fa-external-link-alt\"></i></span> 是本不错的书。书里作者使用美国新生儿的名字得出了一些很有意思的结论。还分析了 movielen 的电影评分数据。熟悉 SQL 的同学应该对这些分析会深有感触，相信这些人用 SQL 写出过这些分析过程类似的代码。这本书的缺点是有点啰嗦，如果你熟悉 Python 又想快速学习的话，看第二章就够了。但这本书很适合不熟悉 Python 的人，书的最后一章还附了 Python 的教程，即如果只玩 pandas 的话，掌握这些 Python 知识就够了，真够贴心。而且本书的作者就是 pandas 的作者。</p>\n<p>另外补充一点，最好使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHA6Ly9pcHl0aG9uLm9yZw==\">ipython<i class=\"fa fa-external-link-alt\"></i></span> 环境来玩转数据分析。特别是 ipython notebook ，熟悉快捷键后，用起来会很顺手。本文玩转的股票数据就是使用 ipython notebook。</p>\n<h2 id=\"股票数据下载\"><a href=\"#股票数据下载\" class=\"headerlink\" title=\"股票数据下载\"></a>股票数据下载</h2><p>搜索 ghancn 可以免费下载 2009 年之前的 5 分钟数据和 1 分钟数据。坦白讲，数据质量不高，里面有不少错误。但不影响我们玩这些数据。数据是以年为单位分不同的文件夹保存的。</p>\n<p>我们先看一下某个股票的数据长什么样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import pandas as pd</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">names = [&#x27;date&#x27;,</span><br><span class=\"line\">         &#x27;time&#x27;,</span><br><span class=\"line\">         &#x27;opening_price&#x27;,</span><br><span class=\"line\">         &#x27;ceiling_price&#x27;,</span><br><span class=\"line\">         &#x27;floor_price&#x27;,</span><br><span class=\"line\">         &#x27;closing_price&#x27;,</span><br><span class=\"line\">         &#x27;volume&#x27;,</span><br><span class=\"line\">         &#x27;amount&#x27;]</span><br><span class=\"line\"># 读取数据时，我们以日期为索引，并解析成日期格式</span><br><span class=\"line\">raw = pd.read_csv(&#x27;raw/2008/SH600690.csv&#x27;, names=names, header=None, index_col=&#x27;date&#x27;, parse_dates=True)</span><br><span class=\"line\">raw.head()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">             time  opening_price  ceiling_price  floor_price  closing_price   volume    amount</span><br><span class=\"line\">date</span><br><span class=\"line\">2008-01-02  09:35          22.50          22.63        22.50          22.51   2042.50   4604723</span><br><span class=\"line\">2008-01-02  09:40          22.51          22.51        22.29          22.37   1545.17   3460503</span><br><span class=\"line\">2008-01-02  09:45          22.39          22.62        22.38          22.62   1744.76   3921443</span><br><span class=\"line\">2008-01-02  09:50          22.60          23.00        22.60          22.95   5339.00   12225939</span><br><span class=\"line\">2008-01-02  09:55          22.98          23.20        22.89          23.20   12577.73  28947824</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>转化为日交易数据</strong></p>\n<p>我们使用 2007 年和 2008 年的数据来作为示例。因为我们更关心是一些长期的趋势，分钟级别的交易数据太细了，我们转换为日数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 股票涨跌幅检查，不能超过 10% ，过滤掉一些不合法的数据</span><br><span class=\"line\">def _valid_price(g):</span><br><span class=\"line\">    return (((g.max() - g.min()) / g.min()) &lt; 0.223).all()</span><br><span class=\"line\"></span><br><span class=\"line\"># 按照日期分组</span><br><span class=\"line\">days = raw.groupby(level=0).agg(</span><br><span class=\"line\">    &#123;&#x27;opening_price&#x27;: lambda g: _valid_price(g) and g[0] or 0,</span><br><span class=\"line\">     &#x27;ceiling_price&#x27;: lambda g: _valid_price(g) and np.max(g) or 0,</span><br><span class=\"line\">     &#x27;floor_price&#x27;: lambda g: _valid_price(g) and np.min(g) or 0,</span><br><span class=\"line\">     &#x27;closing_price&#x27;: lambda g: _valid_price(g) and g[-1] or 0,</span><br><span class=\"line\">     &#x27;volume&#x27;: &#x27;sum&#x27;,</span><br><span class=\"line\">     &#x27;amount&#x27;: &#x27;sum&#x27;&#125;)</span><br><span class=\"line\">days.head()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">            floor_price opening_price   ceiling_price   volume      amount      closing_price</span><br><span class=\"line\">date</span><br><span class=\"line\">2008-01-02  22.29       22.50           24.50           200809.34   476179680   24.03</span><br><span class=\"line\">2008-01-03  23.81       24.03           25.20           166037.98   406906304   24.54</span><br><span class=\"line\">2008-01-04  23.68       24.53           24.76           149078.64   358418560   24.17</span><br><span class=\"line\">2008-01-07  23.75       24.03           24.75           93950.43    227289136   24.38</span><br><span class=\"line\">2008-01-08  23.49       24.38           24.38           149056.24   355752416   23.53</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里只是为了玩这些数据，如果你真的需要股票日数据，雅虎财经网站上有质量非常高的日交易数据可供下载。</p>\n<p>按照上述方法，可以把一个股票几年的数据合并起来，生成一个包含所有年份的历史日交易数据。具体可以参阅 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHBzOi8vZ2l0aHViLmNvbS9rYW1pZG94L3N0b2NrLWRhdGEvYmxvYi9tYXN0ZXIvc3RvY2sucHk=\">stock.py<i class=\"fa fa-external-link-alt\"></i></span> 里的 <code>minutes_to_days_batch</code> 函数。</p>\n<h2 id=\"股票波动率\"><a href=\"#股票波动率\" class=\"headerlink\" title=\"股票波动率\"></a>股票波动率</h2><p>什么股票是好股票？要回答这个问题，先要把最简单的问题说清楚。炒股就是<strong>低买高卖，实现获利</strong>。那么好股票的标准就是在你的持股周期内，波动最大的股票。这很好理解吧，波动最大，我们才有可能在相对低点买入，在相对高点卖出，获利最大。</p>\n<p>在一定的时间周期内，衡量股票波动的指标定义为 最高价&#x2F;最低价。以我们表格中的数据，就是 ceiling_price&#x2F;floor_price。这个比率最大的股票就是好股票。关于时间周期，这个和炒股策略有关。有些人喜欢做短线，可能就持股几天，或一两周。有些人习惯做长线，可能持股几个月甚至几年。也有些人本来打算做短线，做着做着变成长线，再做着做着，变成了股东。</p>\n<p>为了简单起见，我们拿波动周期为 30 个自然日来计算，即如果某个股票停牌，那么他的价格就一直没有变化，则波动为 0。<br>这里，我们直接使用 600690 这个股票来作为示例。我们直接读取已经合并过日交易的数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">qdhr = pd.read_csv(&#x27;test-data/SH600690.csv&#x27;, index_col=&#x27;date&#x27;, parse_dates=True)</span><br><span class=\"line\">qdhr.head()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">                floor_price     opening_price   ceiling_price   volume      amount      closing_price</span><br><span class=\"line\">date</span><br><span class=\"line\">2007-01-04      9.28            9.30            10.14           259264.75   254734000   9.80</span><br><span class=\"line\">2007-01-05      9.53            9.70            10.15           171169.97   170154432   9.90</span><br><span class=\"line\">2007-01-08      9.93            9.93            10.78           159340.58   164954896   10.60</span><br><span class=\"line\">2007-01-09      10.08           10.68           11.15           227163.31   246309216   10.55</span><br><span class=\"line\">2007-01-10      10.26           10.49           11.13           232858.18   246221520   11.10</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们发现数据中间有空洞，即周末和停牌时间里是没有数据的。我们把这些数据填充完整，我们看看 pandas 如何处理 missing data 。</p>\n<h3 id=\"填充数据\"><a href=\"#填充数据\" class=\"headerlink\" title=\"填充数据\"></a>填充数据</h3><p>我们先生成一段连续的日期数据作为索引：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 填充数据：生成日期索引</span><br><span class=\"line\">l = len(qdhr)</span><br><span class=\"line\">start = qdhr.iloc[0:1].index.tolist()[0]</span><br><span class=\"line\">end = qdhr.iloc[l - 1: l].index.tolist()[0]</span><br><span class=\"line\">idx = pd.date_range(start=start, end=end)</span><br><span class=\"line\">idx</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DatetimeIndex([&#x27;2007-01-04&#x27;, &#x27;2007-01-05&#x27;, &#x27;2007-01-06&#x27;, &#x27;2007-01-07&#x27;,</span><br><span class=\"line\">               &#x27;2007-01-08&#x27;, &#x27;2007-01-09&#x27;, &#x27;2007-01-10&#x27;, &#x27;2007-01-11&#x27;,</span><br><span class=\"line\">               &#x27;2007-01-12&#x27;, &#x27;2007-01-13&#x27;,</span><br><span class=\"line\">               ...</span><br><span class=\"line\">               &#x27;2008-12-22&#x27;, &#x27;2008-12-23&#x27;, &#x27;2008-12-24&#x27;, &#x27;2008-12-25&#x27;,</span><br><span class=\"line\">               &#x27;2008-12-26&#x27;, &#x27;2008-12-27&#x27;, &#x27;2008-12-28&#x27;, &#x27;2008-12-29&#x27;,</span><br><span class=\"line\">               &#x27;2008-12-30&#x27;, &#x27;2008-12-31&#x27;],</span><br><span class=\"line\">               dtype=&#x27;datetime64[ns]&#x27;, length=728, freq=&#x27;D&#x27;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>接着使用 <code>reindex</code> 函数缺失的数据被全。填充股票数据时有个要求，我们把缺失的价格数据用前一个交易日的数据来填充，但交易量需要填充为 0。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">data = qdhr.reindex(idx)</span><br><span class=\"line\">zvalues = data.loc[~(data.volume &gt; 0)].loc[:, [&#x27;volume&#x27;, &#x27;amount&#x27;]]</span><br><span class=\"line\">data.update(zvalues.fillna(0))</span><br><span class=\"line\">data.fillna(method=&#x27;ffill&#x27;, inplace=True)</span><br><span class=\"line\">data.head()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">            floor_price opening_price   ceiling_price   volume      amount      closing_price</span><br><span class=\"line\">2007-01-04  9.28        9.30            10.14           259264.75   254734000   9.8</span><br><span class=\"line\">2007-01-05  9.53        9.70            10.15           171169.97   170154432   9.9</span><br><span class=\"line\">2007-01-06  9.53        9.70            10.15           0.00        0           9.9</span><br><span class=\"line\">2007-01-07  9.53        9.70            10.15           0.00        0           9.9</span><br><span class=\"line\">2007-01-08  9.93        9.93            10.78           159340.58   164954896   10.6</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到，06， 07 两天的数据被正确地填充了。</p>\n<h3 id=\"分组计算\"><a href=\"#分组计算\" class=\"headerlink\" title=\"分组计算\"></a>分组计算</h3><p>我们需要计算 30 个自然日里的股票平均波动周期。这样，我们必须以 30 天为单位，对所有的历史数据进行分组。然后逐个分组计算其波动率。</p>\n<p><strong>生成分组索引</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 定义产生分组索引的函数，比如我们要计算的周期是 20 天，则按照日期，20 个交易日一组</span><br><span class=\"line\">def gen_item_group_index(total, group_len):</span><br><span class=\"line\">    &quot;&quot;&quot; generate an item group index array</span><br><span class=\"line\"></span><br><span class=\"line\">    suppose total = 10, unitlen = 2, then we will return array [0 0 1 1 2 2 3 3 4 4]</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    group_count = total / group_len</span><br><span class=\"line\">    group_index = np.arange(total)</span><br><span class=\"line\">    for i in range(group_count):</span><br><span class=\"line\">        group_index[i * group_len: (i + 1) * group_len] = i</span><br><span class=\"line\">    group_index[(i + 1) * group_len : total] = i + 1</span><br><span class=\"line\">    return group_index.tolist()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [7]: gen_item_group_index(10, 3)</span><br><span class=\"line\">Out [7]: [0, 0, 0, 1, 1, 1, 2, 2, 2, 3]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>根据分组索引来分组</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">period = 30</span><br><span class=\"line\"></span><br><span class=\"line\">group_index = gen_item_group_index(len(data), period)</span><br><span class=\"line\"># 把分组索引数据添加到股票数据里</span><br><span class=\"line\">data[&#x27;group_index&#x27;] = group_index</span><br><span class=\"line\">print len(data)</span><br><span class=\"line\">data.head().append(data.tail())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们看一下添加了分组索引后的数据最前面 5 个和最后 5 个数据，注意 <code>group_index</code> 的值。我们接下来就是根据这个值进行分组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">            floor_price opening_price   ceiling_price   volume      amount      closing_price   group_index</span><br><span class=\"line\">2007-01-04  9.28        9.30            10.14           259264.75   254734000   9.80            0</span><br><span class=\"line\">2007-01-05  9.53        9.70            10.15           171169.97   170154432   9.90            0</span><br><span class=\"line\">2007-01-06  9.53        9.70            10.15           0.00        0           9.90            0</span><br><span class=\"line\">2007-01-07  9.53        9.70            10.15           0.00        0           9.90            0</span><br><span class=\"line\">2007-01-08  9.93        9.93            10.78           159340.58   164954896   10.60           0</span><br><span class=\"line\">2008-12-27  8.97        9.15            9.23            0.00        0           9.08            24</span><br><span class=\"line\">2008-12-28  8.97        9.15            9.23            0.00        0           9.08            24</span><br><span class=\"line\">2008-12-29  8.73        9.04            9.15            38576.07    34625144    9.11            24</span><br><span class=\"line\">2008-12-30  8.95        9.14            9.14            62983.38    56876600    8.96            24</span><br><span class=\"line\">2008-12-31  8.95        9.00            9.11            32829.30    29620508    8.99            24</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>分组计算最高价和最低价</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 针对下跌的波动，我们把最高价设置为负数。什么是下跌的波动？就是先出现最高价，再出现最低价</span><br><span class=\"line\">def _ceiling_price(g):</span><br><span class=\"line\">    return g.idxmin() &lt; g.idxmax() and np.max(g) or (-np.max(g))</span><br><span class=\"line\"></span><br><span class=\"line\"># 根据索引分组计算</span><br><span class=\"line\">group = data.groupby(&#x27;group_index&#x27;).agg(&#123;</span><br><span class=\"line\">                                        &#x27;volume&#x27;: &#x27;sum&#x27;,</span><br><span class=\"line\">                                        &#x27;floor_price&#x27;: &#x27;min&#x27;,</span><br><span class=\"line\">                                        &#x27;ceiling_price&#x27;: _ceiling_price&#125;)</span><br><span class=\"line\">group.head()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">                volume      ceiling_price   floor_price</span><br><span class=\"line\">group_index</span><br><span class=\"line\">0               1271711.00  22.33           16.21</span><br><span class=\"line\">1               1831018.01  24.75           18.98</span><br><span class=\"line\">2               2038944.01  -27.20          20.08</span><br><span class=\"line\">3               477219.16   23.49           21.40</span><br><span class=\"line\">4               203932.07   -22.48          20.10</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>给每个分组添加起始日期</strong></p>\n<p>有时我们看到某个周期内下跌了很多，或上涨了很多，我们想知道是什么时候发生的，所以需要给每个分组添加起始日期。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 添加每个分组的起始日期</span><br><span class=\"line\">date_col = pd.DataFrame(&#123;&quot;group_index&quot;: group_index, &quot;date&quot;: idx&#125;)</span><br><span class=\"line\">group[&#x27;date&#x27;] = date_col.groupby(&#x27;group_index&#x27;).agg(&#x27;first&#x27;)</span><br><span class=\"line\">group.head()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>idx 是我们在上面代码里生成的连续的日期索引数据。添加日期数据后的样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">                volume      ceiling_price   floor_price     date</span><br><span class=\"line\">group_index</span><br><span class=\"line\">0               4634226.68  -12.38          9.02            2007-01-04</span><br><span class=\"line\">1               3499001.47  11.64           8.80            2007-02-03</span><br><span class=\"line\">2               6061972.34  12.79           9.41            2007-03-05</span><br><span class=\"line\">3               6086797.19  15.50           12.00           2007-04-04</span><br><span class=\"line\">4               5687407.73  17.15           13.49           2007-05-04</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>添加波动率</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 添加我们的波动指标 股票波动系数 = 最高价/最低价</span><br><span class=\"line\">group[&#x27;ripples_radio&#x27;] = group.ceiling_price / group.floor_price</span><br><span class=\"line\">group.head()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">                volume          ceiling_price   floor_price     date            ripples_radio</span><br><span class=\"line\">group_index</span><br><span class=\"line\">0               4634226.68      -12.38          9.02            2007-01-04      -1.372506</span><br><span class=\"line\">1               3499001.47      11.64           8.80            2007-02-03      1.322727</span><br><span class=\"line\">2               6061972.34      12.79           9.41            2007-03-05      1.359192</span><br><span class=\"line\">3               6086797.19      15.50           12.00           2007-04-04      1.291667</span><br><span class=\"line\">4               5687407.73      17.15           13.49           2007-05-04      1.271312</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>排序</strong></p>\n<p>按照波动率排序，可以看到某段时间内波动最大的一些时间段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 降序排列。我们把分组的起始日期，交易量总和都列出来，也可以观察一下交易量和股票波动比的关系</span><br><span class=\"line\">ripples = group.sort_values(&#x27;ripples_radio&#x27;, ascending=False)</span><br><span class=\"line\">ripples.head()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">            volume          ceiling_price   floor_price     date            ripples_radio</span><br><span class=\"line\">group_index</span><br><span class=\"line\">101         4352881.31      14.85           9.18            2008-04-21      1.617647</span><br><span class=\"line\">90          5703121.25      18.89           11.85           2007-05-27      1.594093</span><br><span class=\"line\">92          4545365.71      23.96           16.42           2007-07-26      1.459196</span><br><span class=\"line\">85          4126972.83      12.38           8.58            2006-12-28      1.442890</span><br><span class=\"line\">84          2952951.46      9.20            6.40            2006-11-28      1.437500</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>从数据可以看出来，波动最大的在 30 个自然日内上涨了 61.76%。发生在 2008-04-21 开始的 30 天内。</p>\n<p>当然，我们也可以计算前 10 大上涨波动的平均值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ripples.head(10).ripples_radio.mean()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.3657990069195818</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>也可以计算前 10 大下跌波动的平均值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ripples.tail(10).ripples_radio.mean()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">-1.4124407127785106</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>看来下跌的平均值比上涨的还大呀。</p>\n<p>我们针对每个股票都使用上述方法计算其平均波动，这样我们就可以从一系列股票里找出那些波动最大的股票了。当然，上涨波动越大，下跌波动也越大，正所谓风险和机遇并存嘛。具体可参阅 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHBzOi8vZ2l0aHViLmNvbS9rYW1pZG94L3N0b2NrLWRhdGEvYmxvYi9tYXN0ZXIvc3RvY2sucHk=\">stock.py<i class=\"fa fa-external-link-alt\"></i></span> 里的 <code>stock_ripples_batch</code> 函数。</p>\n<h2 id=\"其他玩法\"><a href=\"#其他玩法\" class=\"headerlink\" title=\"其他玩法\"></a>其他玩法</h2><h3 id=\"计算涨跌幅\"><a href=\"#计算涨跌幅\" class=\"headerlink\" title=\"计算涨跌幅\"></a>计算涨跌幅</h3><p>我们注意到原始数据里没有涨跌幅的数据。涨跌幅定义为今日收盘价减去昨日收盘价。我们换个股票，取出原始数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">data = pd.read_csv(&#x27;test-data/SZ000565.csv&#x27;, index_col=&#x27;date&#x27;, parse_dates=True)</span><br><span class=\"line\">data.head()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">            floor_price     opening_price   ceiling_price   volume      amount          closing_price</span><br><span class=\"line\">date</span><br><span class=\"line\">2007-01-04  4.16            4.22            4.27            17877.88    7477370.52      4.19</span><br><span class=\"line\">2007-01-05  4.15            4.16            4.27            10857.66    4588246.02      4.24</span><br><span class=\"line\">2007-01-08  4.27            4.27            4.45            30770.01    13467986.00     4.44</span><br><span class=\"line\">2007-01-09  4.42            4.48            4.54            26276.89    11726492.00     4.45</span><br><span class=\"line\">2007-01-10  4.36            4.45            4.90            80840.76    37866240.01     4.90</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>利用 <code>diff</code> 函数快速计算涨跌幅。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">rise = data.closing_price.diff()</span><br><span class=\"line\">data[&#x27;rise&#x27;] = rise</span><br><span class=\"line\">data.head()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">    floor_price opening_price   ceiling_price   volume  amount  closing_price   rise</span><br><span class=\"line\">date</span><br><span class=\"line\">2007-01-04  4.16    4.22    4.27    17877.88    7477370.52  4.19    NaN</span><br><span class=\"line\">2007-01-05  4.15    4.16    4.27    10857.66    4588246.02  4.24    0.05</span><br><span class=\"line\">2007-01-08  4.27    4.27    4.45    30770.01    13467986.00 4.44    0.20</span><br><span class=\"line\">2007-01-09  4.42    4.48    4.54    26276.89    11726492.00 4.45    0.01</span><br><span class=\"line\">2007-01-10  4.36    4.45    4.90    80840.76    37866240.01 4.90    0.45</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意到第一条记录的涨跌幅为 <code>NaN</code>，因为第一条记录的昨日是没有数据的。感兴趣的同学可以再计算一下涨跌百分比，其定义为当日的涨跌幅除以昨日的收盘价。</p>\n<h3 id=\"计算指定时间点之前的一段时间内波动最大的股票\"><a href=\"#计算指定时间点之前的一段时间内波动最大的股票\" class=\"headerlink\" title=\"计算指定时间点之前的一段时间内波动最大的股票\"></a>计算指定时间点之前的一段时间内波动最大的股票</h3><p>有时我们关心某个时间点之前的一段时间变化最剧烈的股票。比如最近一周涨幅最大的，最近一周跌幅最大的，或者最近一个月交易量变化最大的等等。</p>\n<p>我们看一下 000565 这个股票在 2008-12-31 之前 30 个自然日里的波动率。</p>\n<p><strong>选定数据</strong></p>\n<p>这里涉及到用日期对数据进行分片的技术，我们需要选择指定日期及之前一段时间内的数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">end_date = &#x27;2008-12-31&#x27;</span><br><span class=\"line\">period = 30</span><br><span class=\"line\"></span><br><span class=\"line\">end_date = pd.Timestamp(end_date)</span><br><span class=\"line\">start_date = end_date - pd.Timedelta(days=period)</span><br><span class=\"line\"></span><br><span class=\"line\">data = pd.read_csv(&#x27;test-data/SZ000565.csv&#x27;, index_col=&#x27;date&#x27;, parse_dates=True)</span><br><span class=\"line\">data = data.loc[start_date:end_date]</span><br><span class=\"line\">data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">            floor_price     opening_price   ceiling_price   volume          amount          closing_price</span><br><span class=\"line\">date</span><br><span class=\"line\">2008-12-01  7.40            7.58            7.90            41747.12        3.214610e+07    7.88</span><br><span class=\"line\">2008-12-02  7.55            7.56            8.38            74552.15        6.029661e+07    8.32</span><br><span class=\"line\">2008-12-03  8.40            8.40            8.93            85361.64        7.420082e+07    8.82</span><br><span class=\"line\">2008-12-04  8.42            8.88            9.08            110410.46       9.740610e+07    8.50</span><br><span class=\"line\">2008-12-05  8.33            8.40            9.35            126479.91       1.133572e+08    9.35</span><br><span class=\"line\">2008-12-08  9.35            9.40            9.99            149491.39       1.436038e+08    9.69</span><br><span class=\"line\">2008-12-09  9.10            9.73            9.73            89871.90        8.405230e+07    9.15</span><br><span class=\"line\">2008-12-10  9.09            9.11            9.55            70036.94        6.571389e+07    9.46</span><br><span class=\"line\">2008-12-11  9.06            9.40            9.47            57735.24        5.328468e+07    9.06</span><br><span class=\"line\">2008-12-12  8.15            8.80            9.00            59210.49        5.038026e+07    8.29</span><br><span class=\"line\">2008-12-15  8.30            8.33            8.72            41758.27        3.534860e+07    8.50</span><br><span class=\"line\">2008-12-16  8.02            8.48            8.60            38808.62        3.220561e+07    8.60</span><br><span class=\"line\">2008-12-17  8.58            8.67            8.89            46993.48        4.114008e+07    8.65</span><br><span class=\"line\">2008-12-18  8.50            8.62            8.81            34061.97        2.965074e+07    8.78</span><br><span class=\"line\">2008-12-19  8.79            8.79            9.39            70327.47        6.435001e+07    9.18</span><br><span class=\"line\">2008-12-22  8.95            9.19            9.39            50195.75        4.592311e+07    9.11</span><br><span class=\"line\">2008-12-23  8.20            9.17            9.17            75732.72        6.507140e+07    8.20</span><br><span class=\"line\">2008-12-24  7.59            8.03            8.18            61498.16        4.823624e+07    7.82</span><br><span class=\"line\">2008-12-25  7.40            7.90            7.93            34791.00        2.672370e+07    7.52</span><br><span class=\"line\">2008-12-29  6.96            7.50            7.55            31694.04        2.274100e+07    7.26</span><br><span class=\"line\">2008-12-30  7.11            7.29            7.48            25533.01        1.865500e+07    7.15</span><br><span class=\"line\">2008-12-31  6.94            7.16            7.25            22324.32        1.577828e+07    6.95</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>选出数据后，计算波动率就简单了。我们按照老办法，上涨的波动率为正数，下跌的波动率为负数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 计算波动值</span><br><span class=\"line\">_ripple_radio = lambda data: data.ceiling_price.max() / data.floor_price.min()</span><br><span class=\"line\">ripple_radio = data.floor_price.idxmin() &lt; data.ceiling_price.idxmax() and _ripple_radio(data) or -_ripple_radio(data)</span><br><span class=\"line\">ripple_radio</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">-1.4394812680115274</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>最后，遍历所有的股票，计算其指定日期之前的一段时间的波动值，选出波动最大的股票，即是我们关注的股票。比如，经历股票大跌，我们判断会反弹，我们想抢反弹，抢哪个股票呢？答案是抢大跌中下跌最多的，因为下跌最多的股票往往反弹也最多。这部分代码可参阅 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHBzOi8vZ2l0aHViLmNvbS9rYW1pZG94L3N0b2NrLWRhdGEvYmxvYi9tYXN0ZXIvc3RvY2sucHk=\">stock.py<i class=\"fa fa-external-link-alt\"></i></span> 里的 <code>recent_ripples</code> 函数。</p>\n<h2 id=\"为什么要用-pandas-玩转股票数据\"><a href=\"#为什么要用-pandas-玩转股票数据\" class=\"headerlink\" title=\"为什么要用 pandas 玩转股票数据\"></a>为什么要用 pandas 玩转股票数据</h2><p>答案应该已经比较明显了，虽然很多数据股票软件里都有。但一些高级的数据筛选方式其实这些股票软件都不支持的。最后，需要补充一句，大家都是成年人，文章里的任何策略是个人的思路，不构成投资建议啊，后果自负啊。</p>\n<p>最最后，感兴趣的可以看一下 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHBzOi8vZ2l0aHViLmNvbS9rYW1pZG94L3N0b2NrLWRhdGEvYmxvYi9tYXN0ZXIvc3RvY2suaXB5bmI=\">stock.ipynb<i class=\"fa fa-external-link-alt\"></i></span>，这个是本文在 ipython notebook 环境下的所有代码。</p>\n","categories":["Web","Back","python"],"tags":["python","pandas"]},{"title":"0x04--智能合约之truffle","url":"/eth_0x04_truffle/","content":"<h1 id=\"1-安装truffle\"><a href=\"#1-安装truffle\" class=\"headerlink\" title=\"1.安装truffle\"></a>1.安装truffle</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g truffle</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h1 id=\"2-选用ETH\"><a href=\"#2-选用ETH\" class=\"headerlink\" title=\"2.选用ETH\"></a>2.选用ETH</h1><h2 id=\"（1）自带的\"><a href=\"#（1）自带的\" class=\"headerlink\" title=\"（1）自带的\"></a>（1）自带的</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">truffle develop</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"（2）常用\"><a href=\"#（2）常用\" class=\"headerlink\" title=\"（2）常用\"></a>（2）常用</h2><ul>\n<li>Geth (go-ethereum): <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2dvLWV0aGVyZXVt\">https://github.com/ethereum/go-ethereum<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>WebThree (cpp-ethereum): <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2NwcC1ldGhlcmV1bQ==\">https://github.com/ethereum/cpp-ethereum<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Parity: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Bhcml0eXRlY2gvcGFyaXR5\">https://github.com/paritytech/parity<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>More: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZXRoZXJldW0ub3JnL2NsaQ==\">https://www.ethereum.org/cli<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h1 id=\"3-创建项目\"><a href=\"#3-创建项目\" class=\"headerlink\" title=\"3.创建项目\"></a>3.创建项目</h1><h2 id=\"（1）可以使用现成的库\"><a href=\"#（1）可以使用现成的库\" class=\"headerlink\" title=\"（1）可以使用现成的库\"></a>（1）可以使用现成的库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir MetaCoin</span><br><span class=\"line\">cd MetaCoin</span><br><span class=\"line\">truffle unbox metacoin</span><br></pre></td></tr></table></figure>\n\n<p>可以用 &#96; truffle unbox <box-name> &#96;&#96; 去下载任何想使用的库。<br>可以在这找到你想用的库 <span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2JveGVz\">Truffle Boxes<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<h2 id=\"（2）diy一个库\"><a href=\"#（2）diy一个库\" class=\"headerlink\" title=\"（2）diy一个库\"></a>（2）diy一个库</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir myproject</span><br><span class=\"line\">cd myproject</span><br><span class=\"line\">truffle init</span><br></pre></td></tr></table></figure>\n\n<p>目录结构：</p>\n<ul>\n<li><code>contracts/</code>: Directory for <span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cw==\">Solidity contracts<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><code>migrations/</code>: Directory for <span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL21pZ3JhdGlvbnMjbWlncmF0aW9uLWZpbGVz\">scriptable deployment files<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><code>test/</code>: Directory for test files for <span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3Rlc3Rpbmc=\">testing your application and contracts<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><code>truffle.js</code>: Truffle configuration file</li>\n</ul>\n<h1 id=\"4-编译合同\"><a href=\"#4-编译合同\" class=\"headerlink\" title=\"4.编译合同\"></a>4.编译合同</h1><h2 id=\"（1）结构\"><a href=\"#（1）结构\" class=\"headerlink\" title=\"（1）结构\"></a>（1）结构</h2><p>所有的合同都位于您项目的<code>contracts/</code>目录中。由于合同是用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2xpZGl0eS5yZWFkdGhlZG9jcy5pby9lbi9kZXZlbG9wLw==\">Solidity<i class=\"fa fa-external-link-alt\"></i></span>编写的，所有包含合同的文件的文件扩展名为<code>.sol</code>。Associated Solidity <span class=\"exturl\" data-url=\"aHR0cDovL3NvbGlkaXR5LnJlYWR0aGVkb2NzLm9yZy9lbi9sYXRlc3QvY29udHJhY3RzLmh0bWwjbGlicmFyaWVz\">库<i class=\"fa fa-external-link-alt\"></i></span>也将有一个<code>.sol</code>扩展。</p>\n<p>通过初始化Truffle <span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3Byb2plY3Q=\">项目<i class=\"fa fa-external-link-alt\"></i></span>（通过创建<code>truffle init</code>），您可以获得<code>Migrations.sol</code>帮助部署过程的单个文件。如果您使用的是<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2JveGVz\">box<i class=\"fa fa-external-link-alt\"></i></span>，您将在这里获得多个文件。</p>\n<h2 id=\"（2）命令\"><a href=\"#（2）命令\" class=\"headerlink\" title=\"（2）命令\"></a>（2）命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">truffle compile</span><br></pre></td></tr></table></figure>\n<p>第一次运行时，所有合同都将被编译。后续运行时，只会编译自上次编译以来已更改的合同。如果您想覆盖此行为，请使用该<code>--all</code>选项运行上述命令。</p>\n<h2 id=\"（3）依赖\"><a href=\"#（3）依赖\" class=\"headerlink\" title=\"（3）依赖\"></a>（3）依赖</h2><h3 id=\"通过文件名导入依赖关系\"><a href=\"#通过文件名导入依赖关系\" class=\"headerlink\" title=\"通过文件名导入依赖关系\"></a>通过文件名导入依赖关系</h3><p>要从单独的文件导入合约，请将以下代码添加到您的Solidity源文件中::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &quot;./AnotherContract.sol&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>这将使所有合同<code>AnotherContract.sol</code>可用。这里<code>AnotherContract.sol</code>是相对于当前正在编写的合同的路径。</p>\n<p>请注意，Solidity也允许其他导入语法。请参阅Solidity <span class=\"exturl\" data-url=\"aHR0cDovL3NvbGlkaXR5LnJlYWR0aGVkb2NzLm9yZy9lbi9sYXRlc3QvbGF5b3V0LW9mLXNvdXJjZS1maWxlcy5odG1sI2ltcG9ydGluZy1vdGhlci1zb3VyY2UtZmlsZXM=\">导入文档<i class=\"fa fa-external-link-alt\"></i></span>以获取更多信息。</p>\n<h3 id=\"从外部包导入合同\"><a href=\"#从外部包导入合同\" class=\"headerlink\" title=\" 从外部包导入合同\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbXBpbGUjaW1wb3J0aW5nLWNvbnRyYWN0cy1mcm9tLWFuLWV4dGVybmFsLXBhY2thZ2U=\"> <i class=\"fa fa-external-link-alt\"></i></span>从外部包导入合同</h3><p>Truffle支持通过<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLWV0aHBt\">EthPM<i class=\"fa fa-external-link-alt\"></i></span>和<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLW5wbQ==\">NPM<i class=\"fa fa-external-link-alt\"></i></span>安装的依赖项。要从依赖项导入合约，请使用以下语法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &quot;somepackage/SomeContract.sol&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>这里<code>somepackage</code>表示通过EthPM或NPM安装的软件包，并<code>SomeContract.sol</code>表示该软件包提供的Solidity 源文件。</p>\n<p>请注意，在搜索从NPM安装的软件包之前，Truffle会首先从EthPM中搜索已安装的软件包，因此在极少数的命名冲突情况下，将使用通过EthPM安装的软件包。</p>\n<p>有关如何使用Truffle包装管理功能的更多信息，请参阅Truffle <span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLWV0aHBt\">EthPM<i class=\"fa fa-external-link-alt\"></i></span>和<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLW5wbQ==\">NPM<i class=\"fa fa-external-link-alt\"></i></span>文档。</p>\n<h1 id=\"5-迁移\"><a href=\"#5-迁移\" class=\"headerlink\" title=\"5.迁移\"></a>5.迁移</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">truffle migrate</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-测试\"><a href=\"#6-测试\" class=\"headerlink\" title=\"6.测试\"></a>6.测试</h1><p>全部</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">truffle test</span><br></pre></td></tr></table></figure>\n<p>单个</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">truffle test ./path/to/test/file.js</span><br></pre></td></tr></table></figure>\n<p>在SOLIDITY中编写测试,部署的地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DeployedAddresses.&lt;contract name&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>这将返回一个地址，然后您可以使用该地址访问该合同。请参阅上面的示例测试了解使用情况</p>\n<p>为了使用已部署的合同，您必须将合同代码导入到测试套件中。<code>import &quot;../contracts/MetaCoin.sol&quot;;</code>在示例中注意。此导入与<code>./test</code>目录中存在的测试合同相关，并且它位于测试目录之外以便查找MetaCoin合约。然后它使用该合约将该地址转换为该<code>MetaCoin</code>类型。</p>\n<h2 id=\"测试合同名称\"><a href=\"#测试合同名称\" class=\"headerlink\" title=\" 测试合同名称\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3NvbGlkaXR5LXRlc3RzI3Rlc3QtY29udHJhY3QtbmFtZXM=\"> <i class=\"fa fa-external-link-alt\"></i></span>测试合同名称</h2><p>所有测试合同必须<code>Test</code>以大写字母开头<code>T</code>。这与测试助手和项目合同（即被测合同）区别开来，让测试运行人员知道哪些合同代表测试套件。</p>\n<h2 id=\"测试函数名称\"><a href=\"#测试函数名称\" class=\"headerlink\" title=\" 测试函数名称\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3NvbGlkaXR5LXRlc3RzI3Rlc3QtZnVuY3Rpb24tbmFtZXM=\"> <i class=\"fa fa-external-link-alt\"></i></span>测试函数名称</h2><p>与测试合同名称一样，所有测试函数都必须以<code>test</code>小写字母开头。每个测试函数都按单个事务执行，按测试文件中的外观顺序（如Javascript测试）执行。由<code>truffle/Assert.sol</code>测试运行程序评估以确定测试结果的触发事件提供的断言函数。断言函数返回一个表示断言结果的布尔值，您可以使用它来尽早从测试中返回以防止执行错误（例如，<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2dhbmFjaGU=\">Ganache<i class=\"fa fa-external-link-alt\"></i></span>或Truffle Develop将会公开的错误）。</p>\n<h2 id=\"挂钩之前-x2F-之后\"><a href=\"#挂钩之前-x2F-之后\" class=\"headerlink\" title=\" 挂钩之前&#x2F;之后\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3NvbGlkaXR5LXRlc3RzI2JlZm9yZS1hZnRlci1ob29rcw==\"> <i class=\"fa fa-external-link-alt\"></i></span>挂钩之前&#x2F;之后</h2><p>您提供了许多测试挂钩，如下例所示。这些钩子是<code>beforeAll</code>，和<code>beforeEach</code>，<code>afterAll</code>和<code>afterEach</code>你的Javascript测试中由Mocha提供的相同钩子。您可以使用这些钩子在每次测试之前和之后，或每个套件运行之前和之后执行设置和拆卸操作。像测试函数一样，每个钩子都作为单个事务执行。请注意，一些复杂的测试需要执行大量的设置，这可能会溢出单个事务的天然气限制; 您可以通过创建具有不同后缀的多个挂钩来解决此限制，如下例所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &quot;truffle/Assert.sol&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">contract TestHooks &#123;</span><br><span class=\"line\">  uint someValue;</span><br><span class=\"line\"></span><br><span class=\"line\">  function beforeEach() &#123;</span><br><span class=\"line\">    someValue = 5;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function beforeEachAgain() &#123;</span><br><span class=\"line\">    someValue += 1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function testSomeValueIsSix() &#123;</span><br><span class=\"line\">    uint expected = 6;</span><br><span class=\"line\"></span><br><span class=\"line\">    Assert.equal(someValue, expected, &quot;someValue should have been 6&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>该测试合同还显示您的测试功能和挂接功能都共享相同的合同状态。您可以在测试前设置合同数据，在测试过程中使用该数据，然后重新设置，以备下一个数据。请注意，就像您的Javascript测试一样，您的下一个测试函数将从之前运行的测试函数的状态继续。</p>\n<h2 id=\"高级功能\"><a href=\"#高级功能\" class=\"headerlink\" title=\" 高级功能\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3NvbGlkaXR5LXRlc3RzI2FkdmFuY2VkLWZlYXR1cmVz\"> <i class=\"fa fa-external-link-alt\"></i></span>高级功能</h2><p>Solidity测试具有一些高级功能，可以让您测试Solidity中的特定用例。</p>\n<h2 id=\"测试例外\"><a href=\"#测试例外\" class=\"headerlink\" title=\" 测试例外\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3NvbGlkaXR5LXRlc3RzI3Rlc3RpbmctZm9yLWV4Y2VwdGlvbnM=\"> <i class=\"fa fa-external-link-alt\"></i></span>测试例外</h2><p>您可以轻松测试您的合同是否应该引发异常（例如，针对<code>require()</code>&#x2F; <code>assert()</code>&#x2F; <code>revert()</code>陈述; <code>throw</code>以前版本的Solidity）。</p>\n<p>这个主题首先由作者Simon de la Rouviere在<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL3R1dG9yaWFscy90ZXN0aW5nLWZvci10aHJvd3MtaW4tc29saWRpdHktdGVzdHM=\">他的教程“truffle<i class=\"fa fa-external-link-alt\"></i></span><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL3R1dG9yaWFscy90ZXN0aW5nLWZvci10aHJvd3MtaW4tc29saWRpdHktdGVzdHM=\">测试中的投掷测试”中<i class=\"fa fa-external-link-alt\"></i></span>撰写。NB的教程中大量使用通过过时的关键字例外<code>throw</code>，取而代之的是<code>revert()</code>，<code>require()</code>和<code>assert()</code>在密实v0.4.13开始。</p>\n<h2 id=\"测试以太网交易\"><a href=\"#测试以太网交易\" class=\"headerlink\" title=\" 测试以太网交易\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3NvbGlkaXR5LXRlc3RzI3Rlc3RpbmctZXRoZXItdHJhbnNhY3Rpb25z\"> <i class=\"fa fa-external-link-alt\"></i></span>测试以太网交易</h2><p>您还可以测试您的合同如何对接收Ether做出反应，并在Solidity中编写该交互的脚本。要做到这一点，你的Solidity测试应该有一个返回一个<code>uint</code>叫做的公共函数<code>initialBalance</code>。这可以直接写成函数或公共变量，如下所示。当您的测试合同被部署到网络中时，trullfe公司将从测试账户中将这一数量的Ether发送到您的测试合同。然后，您的测试合同可以使用该以太网来编写您的合同测试中的以太网交互。请注意，这<code>initialBalance</code>是可选的，不是必需的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &quot;truffle/Assert.sol&quot;;</span><br><span class=\"line\">import &quot;truffle/DeployedAddresses.sol&quot;;</span><br><span class=\"line\">import &quot;../contracts/MyContract.sol&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">contract TestContract &#123;</span><br><span class=\"line\">  // Truffle will send the TestContract one Ether after deploying the contract.</span><br><span class=\"line\">  uint public initialBalance = 1 ether;</span><br><span class=\"line\"></span><br><span class=\"line\">  function testInitialBalanceUsingDeployedContract() &#123;</span><br><span class=\"line\">    MyContract myContract = MyContract(DeployedAddresses.MyContract());</span><br><span class=\"line\"></span><br><span class=\"line\">    // perform an action which sends value to myContract, then assert.</span><br><span class=\"line\">    myContract.send(...);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function () &#123;</span><br><span class=\"line\">    // This will NOT be executed when Ether is sent. \\o/</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>请注意，Truffle以<strong>不</strong>执行回退函数的方式将Ether发送到您的测试合同，因此您仍然可以在您的Solidity测试中使用回退函数进行高级测试用例。</p>\n<h1 id=\"7-控制台\"><a href=\"#7-控制台\" class=\"headerlink\" title=\"7.控制台\"></a>7.控制台</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">truffle console</span><br><span class=\"line\">MyContract.at(&quot;0xabcd...&quot;).getValue.call();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-合约交互\"><a href=\"#8-合约交互\" class=\"headerlink\" title=\"8.合约交互\"></a>8.合约交互</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>如果您为了与您的合同进行交互而自己向以太坊网络写入原始请求，您很快就会意识到编写这些请求非常笨重和麻烦。同样，你可能会发现管理状态的每个请求都很<em>复杂</em>。幸运的是，trullfe为您处理这一复杂问题，轻松与您的合同进行互动。</p>\n<h2 id=\"读取和写入数据\"><a href=\"#读取和写入数据\" class=\"headerlink\" title=\" 读取和写入数据\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cyNyZWFkaW5nLWFuZC13cml0aW5nLWRhdGE=\"> <i class=\"fa fa-external-link-alt\"></i></span>读取和写入数据</h2><p>以太坊网络区分了将数据写入网络和从中读取数据的区别，这种区别在您编写应用程序的方式中起着重要作用。一般来说，写入数据称为<strong>事务，</strong>而读取数据称为<strong>调用</strong>。事务和调用的处理方式非常不同，并具有以下特征。</p>\n<h2 id=\"交易\"><a href=\"#交易\" class=\"headerlink\" title=\" 交易\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cyN0cmFuc2FjdGlvbnM=\"> <i class=\"fa fa-external-link-alt\"></i></span>交易</h2><p>事务从根本上改变了网络的状态。交易可以像发送以太网到其他账户一样简单，或像执行合同功能或向网络添加新合同一样复杂。事务的定义特征是它写入（或更改）数据。交易使Ether运行成为“ gas”，交易需要时间来处理。当您通过交易执行合约的功能时，您不能立即处理该交易，因此无法接收该函数的返回值。一般来说，意图通过事务执行的函数不会返回值; 他们将会返回一个事务ID。所以总之，交易：</p>\n<ul>\n<li>Cost gas (Ether)</li>\n<li>改变网络的状态</li>\n<li>不会立即处理</li>\n<li>不会公开一个返回值（只有一个事务ID）。</li>\n</ul>\n<h2 id=\"呼叫\"><a href=\"#呼叫\" class=\"headerlink\" title=\" 呼叫\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cyNjYWxscw==\"> <i class=\"fa fa-external-link-alt\"></i></span>呼叫</h2><p>另一方面，呼叫则非常不同。通话可用于在网络上执行代码，但不会永久更改数据。通话可以自由运行，其特征是他们读取数据。当您通过呼叫执行合约功能时，您将立即收到返回值。总之，电话：</p>\n<ul>\n<li>是免费的（不花费gas）</li>\n<li>不要改变网络的状态</li>\n<li>立即处理</li>\n<li>将公开一个返回值（hooray！）</li>\n</ul>\n<p>在事务和调用之间进行选择与决定是要读取数据还是写入数据一样简单。</p>\n<h2 id=\"引入抽象\"><a href=\"#引入抽象\" class=\"headerlink\" title=\" 引入抽象\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cyNpbnRyb2R1Y2luZy1hYnN0cmFjdGlvbnM=\"> <i class=\"fa fa-external-link-alt\"></i></span>引入抽象</h2><p>合同抽象是与来自Javascript的以太坊合约进行交互的面包和黄油。简而言之，合同抽象是一种包装代码，可以让您轻松地与合同进行交互，从而让您忘记在引擎盖下执行的许多引擎和齿轮。trullfe通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RydWZmbGVzdWl0ZS90cnVmZmxlLWNvbnRyYWN0\">truffle-contract<i class=\"fa fa-external-link-alt\"></i></span><br>模块使用其自己的合同抽象，正是这种合同抽象如下所述。</p>\n<p>然而，为了了解合同抽象的有用性，我们首先需要一个合同来谈论。我们将通过Truffle Boxes使用可用的MetaCoin合同<code>truffle unbox metacoin</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.2;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;./ConvertLib.sol&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// This is just a simple example of a coin-like contract.</span><br><span class=\"line\">// It is not standards compatible and cannot be expected to talk to other</span><br><span class=\"line\">// coin/token contracts. If you want to create a standards-compliant</span><br><span class=\"line\">// token, see: https://github.com/ConsenSys/Tokens. Cheers!</span><br><span class=\"line\"></span><br><span class=\"line\">contract MetaCoin &#123;</span><br><span class=\"line\">    mapping (address =&gt; uint) balances;</span><br><span class=\"line\"></span><br><span class=\"line\">    event Transfer(address indexed _from, address indexed _to, uint256 _value);</span><br><span class=\"line\"></span><br><span class=\"line\">    function MetaCoin() &#123;</span><br><span class=\"line\">        balances[tx.origin] = 10000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function sendCoin(address receiver, uint amount) returns(bool sufficient) &#123;</span><br><span class=\"line\">        if (balances[msg.sender] &lt; amount) return false;</span><br><span class=\"line\">        balances[msg.sender] -= amount;</span><br><span class=\"line\">        balances[receiver] += amount;</span><br><span class=\"line\">        Transfer(msg.sender, receiver, amount);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function getBalanceInEth(address addr) returns(uint)&#123;</span><br><span class=\"line\">        return ConvertLib.convert(getBalance(addr),2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function getBalance(address addr) returns(uint) &#123;</span><br><span class=\"line\">        return balances[addr];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>本合同有三种方法除了构造函数（<code>sendCoin</code>，<code>getBalanceInEth</code>，和<code>getBalance</code>）。所有三种方法都可以作为交易或通话来执行。</p>\n<p>现在让我们来看一看<code>MetaCoin</code>Truffle提供给我们的Javascript对象，就像在<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnNvbGU=\">Truffle控制台中<i class=\"fa fa-external-link-alt\"></i></span>提供的那样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Print the deployed version of MetaCoin.</span><br><span class=\"line\">// Note that getting the deployed version requires a promise, hence the .then.</span><br><span class=\"line\">MetaCoin.deployed().then(function(instance) &#123;</span><br><span class=\"line\">  console.log(instance);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// outputs:</span><br><span class=\"line\">//</span><br><span class=\"line\">// Contract</span><br><span class=\"line\">// - address: &quot;0xa9f441a487754e6b27ba044a5a8eb2eec77f6b92&quot;</span><br><span class=\"line\">// - allEvents: ()</span><br><span class=\"line\">// - getBalance: ()</span><br><span class=\"line\">// - getBalanceInEth: ()</span><br><span class=\"line\">// - sendCoin: ()</span><br><span class=\"line\">// ...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>请注意，抽象包含我们合约中存在的完全相同的函数。它还包含指向MetaCoin合约的已部署版本的地址。</p>\n<h2 id=\"执行合约功能\"><a href=\"#执行合约功能\" class=\"headerlink\" title=\" 执行合约功能\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cyNleGVjdXRpbmctY29udHJhY3QtZnVuY3Rpb25z\"> <i class=\"fa fa-external-link-alt\"></i></span>执行合约功能</h2><p>使用抽象，您可以轻松地在以太坊网络上执行合约功能。</p>\n<h2 id=\"进行交易\"><a href=\"#进行交易\" class=\"headerlink\" title=\" 进行交易\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cyNtYWtpbmctYS10cmFuc2FjdGlvbg==\"> <i class=\"fa fa-external-link-alt\"></i></span>进行交易</h2><p>MetaCoin合约上有三项我们可以执行的功能。如果你分析它们中的每一个，你会发现这<code>sendCoin</code>是唯一一个旨在改变网络的功能。目标<code>sendCoin</code>是从一个帐户“发送”一些元币到下一个，并且这些更改应该持续。</p>\n<p>在打电话时<code>sendCoin</code>，我们会将其作为交易执行。在下面的例子中，我们将从一个账户向另一个账户发送10个Meta硬币，以保持网络变化的方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var account_one = &quot;0x1234...&quot;; // an address</span><br><span class=\"line\">var account_two = &quot;0xabcd...&quot;; // another address</span><br><span class=\"line\"></span><br><span class=\"line\">var meta;</span><br><span class=\"line\">MetaCoin.deployed().then(function(instance) &#123;</span><br><span class=\"line\">  meta = instance;</span><br><span class=\"line\">  return meta.sendCoin(account_two, 10, &#123;from: account_one&#125;);</span><br><span class=\"line\">&#125;).then(function(result) &#123;</span><br><span class=\"line\">  // If this callback is called, the transaction was successfully processed.</span><br><span class=\"line\">  alert(&quot;Transaction successful!&quot;)</span><br><span class=\"line\">&#125;).catch(function(e) &#123;</span><br><span class=\"line\">  // There was an error! Handle it.</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码有一些有趣的地方：</p>\n<ul>\n<li>我们<code>sendCoin</code>直接调用了抽象的功能。这将导致默认交易（即写入数据）而不是通话。</li>\n<li>当事务成功时，直到事务处理完成后才会触发回调函数。这使生活变得轻松，意味着您不必亲自检查交易状态。</li>\n<li>我们通过一个对象作为第三个参数<code>sendCoin</code>。请注意，<code>sendCoin</code>我们的Solidity合同中的功能没有第三个参数。你在上面看到的是一个特殊的对象，它可以作为函数的最后一个参数传递，让你编辑有关事务的特定细节。在这里，我们设置<code>from</code>确保此交易来自的地址<code>account_one</code>。</li>\n</ul>\n<h2 id=\"拨打电话\"><a href=\"#拨打电话\" class=\"headerlink\" title=\" 拨打电话\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cyNtYWtpbmctYS1jYWxs\"> <i class=\"fa fa-external-link-alt\"></i></span>拨打电话</h2><p>继续使用MetaCoin，请注意，该<code>getBalance</code>函数是从网络读取数据的理想选择。它不需要做任何改变，因为它只是返回传递给它的地址的MetaCoin余额。让我们试试看：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var account_one = &quot;0x1234...&quot;; // an address</span><br><span class=\"line\"></span><br><span class=\"line\">var meta;</span><br><span class=\"line\">MetaCoin.deployed().then(function(instance) &#123;</span><br><span class=\"line\">  meta = instance;</span><br><span class=\"line\">  return meta.getBalance.call(account_one, &#123;from: account_one&#125;);</span><br><span class=\"line\">&#125;).then(function(balance) &#123;</span><br><span class=\"line\">  // If this callback is called, the call was successfully executed.</span><br><span class=\"line\">  // Note that this returns immediately without any waiting.</span><br><span class=\"line\">  // Let&#x27;s print the return value.</span><br><span class=\"line\">  console.log(balance.toNumber());</span><br><span class=\"line\">&#125;).catch(function(e) &#123;</span><br><span class=\"line\">  // There was an error! Handle it.</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里有趣的是：</p>\n<ul>\n<li>我们必须<code>.call()</code>明确地执行该功能，以让以太坊网络知道我们不打算坚持任何更改。</li>\n<li>我们在成功时收到了返回值而不是事务ID。请注意，因为以太坊网络可以处理非常大的数字，所以我们得到一个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01pa2VNY2wvYmlnbnVtYmVyLmpzLw==\">BigNumber<i class=\"fa fa-external-link-alt\"></i></span>对象，然后我们将其转换为数字。</li>\n</ul>\n<p><strong>警告：</strong>我们将返回值转换为数字，因为在这个例子中数字很小。但是，如果您尝试转换大于Javascript支持的最大整数的BigNumber，则可能会遇到错误或意外行为。</p>\n<h2 id=\"捕捉事件\"><a href=\"#捕捉事件\" class=\"headerlink\" title=\" 捕捉事件\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cyNjYXRjaGluZy1ldmVudHM=\"> <i class=\"fa fa-external-link-alt\"></i></span>捕捉事件</h2><p>您的合同可以触发您可以捕获的事件，以更深入地了解您的合同在做什么。处理事件的最简单方法是处理触发事件的事务的结果对象，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var account_one = &quot;0x1234...&quot;; // an address</span><br><span class=\"line\">var account_two = &quot;0xabcd...&quot;; // another address</span><br><span class=\"line\"></span><br><span class=\"line\">var meta;</span><br><span class=\"line\">MetaCoin.deployed().then(function(instance) &#123;</span><br><span class=\"line\">  meta = instance;  </span><br><span class=\"line\">  return meta.sendCoin(account_two, 10, &#123;from: account_one&#125;);</span><br><span class=\"line\">&#125;).then(function(result) &#123;</span><br><span class=\"line\">  // result is an object with the following values:</span><br><span class=\"line\">  //</span><br><span class=\"line\">  // result.tx      =&gt; transaction hash, string</span><br><span class=\"line\">  // result.logs    =&gt; array of decoded events that were triggered within this transaction</span><br><span class=\"line\">  // result.receipt =&gt; transaction receipt object, which includes gas used</span><br><span class=\"line\"></span><br><span class=\"line\">  // We can loop through result.logs to see if we triggered the Transfer event.</span><br><span class=\"line\">  for (var i = 0; i &lt; result.logs.length; i++) &#123;</span><br><span class=\"line\">    var log = result.logs[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    if (log.event == &quot;Transfer&quot;) &#123;</span><br><span class=\"line\">      // We found the event!</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).catch(function(err) &#123;</span><br><span class=\"line\">  // There was an error! Handle it.</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"处理交易结果\"><a href=\"#处理交易结果\" class=\"headerlink\" title=\" 处理交易结果\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cyNwcm9jZXNzaW5nLXRyYW5zYWN0aW9uLXJlc3VsdHM=\"> <i class=\"fa fa-external-link-alt\"></i></span>处理交易结果</h2><p>当您进行交易时，您会收到一个<code>result</code>对象，可以为您提供有关交易的丰富信息。具体来说，你会得到以下结果：</p>\n<ul>\n<li><code>result.tx</code> <em>（字符串）</em> - 事务散列</li>\n<li><code>result.logs</code> <em>（数组）</em> - 解码事件（日志）</li>\n<li><code>result.receipt</code> <em>（对象）</em> - 交易收据</li>\n</ul>\n<p>欲了解更多信息，请参阅<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RydWZmbGVzdWl0ZS90cnVmZmxlLWNvbnRyYWN0\">README<i class=\"fa fa-external-link-alt\"></i></span>中<code>truffle-contract</code>的项目。</p>\n<h2 id=\"向网络添加新的合同\"><a href=\"#向网络添加新的合同\" class=\"headerlink\" title=\" 向网络添加新的合同\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cyNhZGQtYS1uZXctY29udHJhY3QtdG8tdGhlLW5ldHdvcms=\"> <i class=\"fa fa-external-link-alt\"></i></span>向网络添加新的合同</h2><p>在上述所有情况下，我们一直在使用已经部署的合同抽象。我们可以使用以下<code>.new()</code>功能将我们自己的版本部署到网络中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MetaCoin.new().then(function(instance) &#123;</span><br><span class=\"line\">  // Print the new address</span><br><span class=\"line\">  console.log(instance.address);</span><br><span class=\"line\">&#125;).catch(function(err) &#123;</span><br><span class=\"line\">  // There was an error! Handle it.</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在特定地址使用合同\"><a href=\"#在特定地址使用合同\" class=\"headerlink\" title=\" 在特定地址使用合同\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cyN1c2UtYS1jb250cmFjdC1hdC1hLXNwZWNpZmljLWFkZHJlc3M=\"> <i class=\"fa fa-external-link-alt\"></i></span>在特定地址使用合同</h2><p>如果您已经拥有合同地址，则可以创建一个新抽象来表示该地址的合同。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var instance = MetaCoin.at(&quot;0x1234...&quot;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发送ETHER到合同\"><a href=\"#发送ETHER到合同\" class=\"headerlink\" title=\" 发送ETHER到合同\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cyNzZW5kaW5nLWV0aGVyLXRvLWEtY29udHJhY3Q=\"> <i class=\"fa fa-external-link-alt\"></i></span>发送ETHER到合同</h2><p>您可能只想直接将Ether发送给合同，或者触发合同的<span class=\"exturl\" data-url=\"aHR0cDovL3NvbGlkaXR5LnJlYWR0aGVkb2NzLmlvL2VuL2RldmVsb3AvY29udHJhY3RzLmh0bWwjZmFsbGJhY2stZnVuY3Rpb24=\">后备功能<i class=\"fa fa-external-link-alt\"></i></span>。您可以使用以下两个选项之一来完成此操作。</p>\n<p>选项1：通过直接发送交易给合约<code>instance.sendTransaction()</code>。这与所有可用的契约实例函数一样是promisified，并且具有相同的API，<code>web3.eth.sendTransaction</code>但没有回调。<code>to</code>如果没有指定，该值将自动填入。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">instance.sendTransaction(&#123;...&#125;).then(function(result) &#123;</span><br><span class=\"line\">  // Same transaction result object as above.</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>选项2：直接发送Ether也有简写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">instance.send(web3.toWei(1, &quot;ether&quot;)).then(function(result) &#123;</span><br><span class=\"line\">  // Same result object as above.</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进一步阅读\"><a href=\"#进一步阅读\" class=\"headerlink\" title=\" 进一步阅读\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cyNmdXJ0aGVyLXJlYWRpbmc=\"> <i class=\"fa fa-external-link-alt\"></i></span>进一步阅读</h2><p>trullfe提供的合同抽象包含丰富的实用工具，可轻松与您的合同进行交互。查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RydWZmbGVzdWl0ZS90cnVmZmxlLWNvbnRyYWN0\">trullfe contract<i class=\"fa fa-external-link-alt\"></i></span>文档以了解提示，技巧和见解。</p>\n<h1 id=\"9-通过ETHPM进行包裹管理\"><a href=\"#9-通过ETHPM进行包裹管理\" class=\"headerlink\" title=\"9.通过ETHPM进行包裹管理\"></a>9.通过ETHPM进行包裹管理</h1><p>安装一个包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">truffle install &lt;package name&gt;</span><br></pre></td></tr></table></figure>\n<p>安装特定版本的软件包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">truffle install &lt;package name&gt;@&lt;version&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装依赖关系\"><a href=\"#安装依赖关系\" class=\"headerlink\" title=\"安装依赖关系\"></a>安装依赖关系</h2><p>您的项目可以定义一个<code>ethpm.json</code>文件，其中可以将您的项目固定到特定的依赖项和版本。要安装<code>ethpm.json</code>文件中列出的所有依赖项，请运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ truffle install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>有关该<code>ethpm.json</code>文件的更多详细信息，请参阅下面的<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLWV0aHBtI3BhY2thZ2UtY29uZmlndXJhdGlvbg==\">包配置<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<h2 id=\"消费已安装的合同\"><a href=\"#消费已安装的合同\" class=\"headerlink\" title=\"消费已安装的合同\"></a>消费已安装的合同</h2><p>安装的软件包将被放置在<code>installed_contracts</code>您的项目文件夹中的目录中。如果没有<code>installed_contracts</code>目录存在，它会为你创建。你应该像对待<code>node_modules</code>NPM 文件夹那样对待这个文件夹 - 也就是说，除非你知道你在做什么，否则你不应该编辑内部的内容。:)</p>\n<p>安装的软件包可以在您的测试，迁移和固化合同文件中使用，通过<code>import</code>“ <code>require</code>包装”或按名称进行合同。例如，以下Solidity合约将从包中导入<code>owned.sol</code>文件<code>owned</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.2;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;owned/owned.sol&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">contract MyContract is owned &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>同样，以下迁移文件将使用包中的<code>ENS.sol</code>合约<code>ens</code>：</p>\n<p>文件： <code>./migrations/2_deploy_contracts.js</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var ENS = artifacts.require(&quot;ens/ENS&quot;);</span><br><span class=\"line\">var MyContract = artifacts.require(&quot;MyContract&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function(deployer) &#123;</span><br><span class=\"line\">  // Only deploy ENS if there&#x27;s not already an address already.</span><br><span class=\"line\">  // i.e., don&#x27;t deploy if we&#x27;re using the canonical ENS address,</span><br><span class=\"line\">  // but do deploy it if we&#x27;re on a test network and ENS doesn&#x27;t exist.</span><br><span class=\"line\">  deployer.deploy(ENS, &#123;overwrite: false&#125;).then(function() &#123;</span><br><span class=\"line\">    return deployer.deploy(MyContract, ENS.address);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>请注意，在上面的迁移过程中，我们会根据<code>ens</code>ENS是否已设置地址来有条件地使用该包并部署ENS合同。这是<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL21pZ3JhdGlvbnMjZGVwbG95ZXItZGVwbG95LWNvbnRyYWN0LWFyZ3Mtb3B0aW9ucy0=\">部署人员<i class=\"fa fa-external-link-alt\"></i></span>提供给你的一个奇妙的技巧，它使写入迁移依赖于网络工件的存在变得更加容易。在这种情况下，如果我们在Ropsten网络上运行我们的迁移，此迁移<strong>不会</strong>部署该<code>ENS</code>合同，因为（在撰写本文时）Ropsten是规范<code>ENS</code>合同存在的地方 - 我们不想部署我们自己的合同。但是，如果我们正在针对不同的网络或测试网络运行我们的迁移，那么我们想要部署该<code>ENS</code>合同，以便我们有一个依赖合约来处理。</p>\n<h2 id=\"发布你自己的软件包\"><a href=\"#发布你自己的软件包\" class=\"headerlink\" title=\" 发布你自己的软件包\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLWV0aHBtI3B1Ymxpc2hpbmcteW91ci1vd24tcGFja2FnZQ==\"> <i class=\"fa fa-external-link-alt\"></i></span>发布你自己的软件包</h2><p>发布自己的软件包与安装一样简单，但与NPM一样，需要更多配置。</p>\n<h3 id=\"ROPSTEN，ROPSTEN，ROPSTEN\"><a href=\"#ROPSTEN，ROPSTEN，ROPSTEN\" class=\"headerlink\" title=\" ROPSTEN，ROPSTEN，ROPSTEN\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLWV0aHBtI3JvcHN0ZW4tcm9wc3Rlbi1yb3BzdGVu\"> <i class=\"fa fa-external-link-alt\"></i></span>ROPSTEN，ROPSTEN，ROPSTEN</h3><p>Ethereum软件包注册表目前存在于Ropsten测试网络中。要发布到注册中心，我们需要建立我们自己的Ropsten配置，因为我们将进行需要签名的交易。</p>\n<p>在本例中，我们将使用Infura与<code>truffle-hdwallet-provider</code>NPM模块一起发布软件包以及一个代表Ropsten网络上Ethereum地址的12字高清钱包助记符。首先，<code>truffle-hdwallet-provider</code>在您的项目目录中安装通过NPM：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install truffle-hdwallet-provider --save</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后编辑您的配置，<code>ropsten</code>使用12字助记符添加网络：</p>\n<p>文件： <code>truffle.js</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var HDWalletProvider = require(&quot;truffle-hdwallet-provider&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 12-word mnemonic</span><br><span class=\"line\">var mnemonic = &quot;opinion destroy betray ...&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  networks: &#123;</span><br><span class=\"line\">    development: &#123;</span><br><span class=\"line\">      host: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">      port: 8545,</span><br><span class=\"line\">      network_id: &quot;*&quot; // Match any network id</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ropsten: &#123;</span><br><span class=\"line\">      provider: new HDWalletProvider(mnemonic, &quot;https://ropsten.infura.io/&quot;),</span><br><span class=\"line\">      network_id: 3 // official id of the ropsten network</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"程序包配置\"><a href=\"#程序包配置\" class=\"headerlink\" title=\" 程序包配置\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLWV0aHBtI3BhY2thZ2UtY29uZmlndXJhdGlvbg==\"> <i class=\"fa fa-external-link-alt\"></i></span>程序包配置</h3><p>与NPM类似，EthPM的配置选项位于单独的JSON文件中<code>ethpm.json</code>。此文件与您的Truffle配置并列，并为Truffle发布包装所需的所有信息。您可以在<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvYWR2YW5jZWQvY29uZmlndXJhdGlvbg==\">配置<i class=\"fa fa-external-link-alt\"></i></span>部分看到可用选项的完整列表。</p>\n<p>文件： <code>ethpm.json</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;package_name&quot;: &quot;adder&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;0.0.3&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;Simple contract to add two numbers&quot;,</span><br><span class=\"line\">  &quot;authors&quot;: [</span><br><span class=\"line\">    &quot;Tim Coulter &lt;tim.coulter@consensys.net&gt;&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;keywords&quot;: [</span><br><span class=\"line\">    &quot;ethereum&quot;,</span><br><span class=\"line\">    &quot;addition&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;owned&quot;: &quot;^0.0.1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;MIT&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\" 命令\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLWV0aHBtI2NvbW1hbmQ=\"> <i class=\"fa fa-external-link-alt\"></i></span>命令</h3><p>在确定您的配置后，发布很简单：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ truffle publish</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>您会看到类似于下面的输出，并确认您的包已成功发布。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ truffle publish</span><br><span class=\"line\">Gathering contracts...</span><br><span class=\"line\">Finding publishable artifacts...</span><br><span class=\"line\">Uploading sources and publishing to registry...</span><br><span class=\"line\">+ adder@0.0.3</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发布之前\"><a href=\"#发布之前\" class=\"headerlink\" title=\" 发布之前\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLWV0aHBtI2JlZm9yZS1wdWJsaXNoaW5n\"> <i class=\"fa fa-external-link-alt\"></i></span>发布之前</h3><p>当使用<code>develop</code>配置为匹配任何Ethereum客户端的默认网络（如<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2dhbmFjaGU=\">Ganache<i class=\"fa fa-external-link-alt\"></i></span>或Truffle Develop）时，您肯定会在网络中存在不希望发布的工件。在发布您的软件包之前，请考虑运行以下命令以删除任何无关的网络工件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ truffle networks --clean</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-通过NPM进行包装管理\"><a href=\"#10-通过NPM进行包装管理\" class=\"headerlink\" title=\"10.通过NPM进行包装管理\"></a>10.通过NPM进行包装管理</h1><p>Truffle标配<code>npm</code>集成，并且知道<code>node_modules</code>项目中的目录（如果存在）。这意味着您可以通过使用和分发契约，dapps和启用以太坊的库<code>npm</code>，使您的代码可用于其他人以及其他可用的代码。</p>\n<h2 id=\"包装布局\"><a href=\"#包装布局\" class=\"headerlink\" title=\" 包装布局\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLW5wbSNwYWNrYWdlLWxheW91dA==\"> <i class=\"fa fa-external-link-alt\"></i></span>包装布局</h2><p>使用Truffle创建的项目默认具有特定的布局，可以将它们用作包。这种布局不是必需的，但如果用作公共约定 - 或“事实上的标准” - 则通过NPM分发契约和dapps将变得更容易。</p>\n<p>truffle套餐中最重要的目录如下：</p>\n<ul>\n<li><code>/contracts</code></li>\n<li><code>/build</code>（其中包括<code>/build/contracts</code>由truffle创建的）</li>\n</ul>\n<p>第一个目录是您的合同目录，其中包含您的原始Solidity合同。第二个目录是构建目录，更具体地说<code>/build/contracts</code>，它以<code>.json</code>文件形式存放构建工件。在你的软件包中包括原始合同将允许其他人在他们自己的固体代码中导入这些合同。同样，<code>.json</code>在你的软件包中包含你的构建工件将允许其他人与你的JavaScript合约进行无缝交互，这可以在dapps，脚本和迁移中使用。</p>\n<h2 id=\"使用一个包\"><a href=\"#使用一个包\" class=\"headerlink\" title=\" 使用一个包\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLW5wbSN1c2luZy1hLXBhY2thZ2U=\"> <i class=\"fa fa-external-link-alt\"></i></span>使用一个包</h2><p>在自己的项目中使用软件包时，需要注意的是，有两个地方可能对使用其他合同代码感兴趣：在您的合同中以及您的Javascript代码（迁移和测试）中。以下提供了每个案例的示例，并讨论了充分利用其他合约并构建工件的技巧。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\" 安装\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLW5wbSNpbnN0YWxsaW5n\"> <i class=\"fa fa-external-link-alt\"></i></span>安装</h3><p>在本例中，我们将使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NvbnNlblN5cy9leGFtcGxlLXRydWZmbGUtbGlicmFyeQ==\">示例truffle库<i class=\"fa fa-external-link-alt\"></i></span>，该<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NvbnNlblN5cy9leGFtcGxlLXRydWZmbGUtbGlicmFyeQ==\">库<i class=\"fa fa-external-link-alt\"></i></span>提供了一个简单的名称注册表，该注册表已部署到Morden测试网络。为了将其用作依赖项，我们必须首先通过<code>npm</code>以下方式将其安装在我们的项目中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cd my_project</span><br><span class=\"line\">$ npm install example-truffle-library</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>请注意，上面的最后一个命令会下载该软件包并将其放在<code>my_project/node_modules</code>目录中，这对于下面的示例很重要。请参阅<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS8=\">npm文档<i class=\"fa fa-external-link-alt\"></i></span>以获取使用<code>npm</code>安装软件包的帮助。</p>\n<h3 id=\"在你的合同中\"><a href=\"#在你的合同中\" class=\"headerlink\" title=\" 在你的合同中\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLW5wbSN3aXRoaW4teW91ci1jb250cmFjdHM=\"> <i class=\"fa fa-external-link-alt\"></i></span>在你的合同中</h3><p>要在合同中使用包裹的合同，这可以与Solidity的<span class=\"exturl\" data-url=\"aHR0cDovL3NvbGlkaXR5LnJlYWR0aGVkb2NzLmlvL2VuL2RldmVsb3AvbGF5b3V0LW9mLXNvdXJjZS1maWxlcy5odG1sI2ltcG9ydGluZy1vdGhlci1zb3VyY2UtZmlsZXM=\">进口<i class=\"fa fa-external-link-alt\"></i></span>声明一样简单。当您的导入路径不是<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbXBpbGUjZGVwZW5kZW5jaWVz\">明确的相对或绝对时<i class=\"fa fa-external-link-alt\"></i></span>，这意味着您要从特定命名包中查找文件。考虑使用上面提到的示例truffle库的这个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &quot;example-truffle-library/contracts/SimpleNameRegistry.sol&quot;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>由于路径并未开始<code>./</code>，Truffle知道要在项目的<code>node_modules</code>目录中查找该<code>example-truffle-library</code>文件夹。从那里，它解决了为您提供您所要求的合同的途径。</p>\n<h3 id=\"在JAVASCRIPT代码中\"><a href=\"#在JAVASCRIPT代码中\" class=\"headerlink\" title=\" 在JAVASCRIPT代码中\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLW5wbSN3aXRoaW4tamF2YXNjcmlwdC1jb2Rl\"> <i class=\"fa fa-external-link-alt\"></i></span>在JAVASCRIPT代码中</h3><p>要在JavaScript代码中与包的合约进行交互，您只需要<code>require</code>该包的<code>.json</code>文件，然后使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RydWZmbGVzdWl0ZS90cnVmZmxlLWNvbnRyYWN0\">truffle-contract<i class=\"fa fa-external-link-alt\"></i></span>模块将这些文件转换为可用的抽象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var contract = require(&quot;truffle-contract&quot;);</span><br><span class=\"line\">var data = require(&quot;example-truffle-library/build/contracts/SimpleNameRegistry.json&quot;);</span><br><span class=\"line\">var SimpleNameRegistry = contract(data);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>要使用这些抽象概念，请参阅<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnRyYWN0cw==\">与您的合同交互<i class=\"fa fa-external-link-alt\"></i></span>一节以获取更多详细信息。</p>\n<h3 id=\"包的部署地址\"><a href=\"#包的部署地址\" class=\"headerlink\" title=\" 包的部署地址\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLW5wbSNwYWNrYWdlLTM5LXMtZGVwbG95ZWQtYWRkcmVzc2Vz\"> <i class=\"fa fa-external-link-alt\"></i></span>包的部署地址</h3><p>有时候你希望你的合同与这个包的先前部署的合同进行交互。由于部署的地址存在于包的<code>.json</code>文件中，因此您必须执行额外的步骤才能将这些地址存入您的合同。为此，请使您的合同接受依存关系合同的地址，然后使用迁移。以下是项目中存在的示例合同以及示例迁移：</p>\n<p>合同： <code>MyContract.sol</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.13;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;example-truffle-library/contracts/SimpleNameRegistry.sol&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">contract MyContract &#123;</span><br><span class=\"line\">  SimpleNameRegistry registry;</span><br><span class=\"line\">  address public owner;</span><br><span class=\"line\"></span><br><span class=\"line\">  function MyContract &#123;</span><br><span class=\"line\">    owner = msg.sender;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Simple example that uses the deployed registry from the package.</span><br><span class=\"line\">  function getModule(bytes32 name) returns (address) &#123;</span><br><span class=\"line\">    return registry.names(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Set the registry if you&#x27;re the owner.</span><br><span class=\"line\">  function setRegistry(address addr) &#123;</span><br><span class=\"line\">    require(msg.sender == owner);</span><br><span class=\"line\"></span><br><span class=\"line\">    registry = SimpleNameRegistry(addr);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>移民： <code>3_hook_up_example_library.js</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Note that artifacts.require takes care of creating an abstraction for us.</span><br><span class=\"line\">var SimpleNameRegistry = artifacts.require(&quot;example-truffle-library/SimpleNameRegistry&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function(deployer) &#123;</span><br><span class=\"line\">  // Deploy our contract, then set the address of the registry.</span><br><span class=\"line\">  deployer.deploy(MyContract).then(function() &#123;</span><br><span class=\"line\">    return MyContract.deployed();</span><br><span class=\"line\">  &#125;).then(function(deployed) &#123;</span><br><span class=\"line\">    return deployed.setRegistry(SimpleNameRegistry.address);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发布之前-1\"><a href=\"#发布之前-1\" class=\"headerlink\" title=\" 发布之前\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3BhY2thZ2VzLW5wbSNiZWZvcmUtcHVibGlzaGluZw==\"> <i class=\"fa fa-external-link-alt\"></i></span>发布之前</h3><p>当使用<code>develop</code>配置为匹配任何Ethereum客户端的默认网络（如<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2dhbmFjaGU=\">Ganache<i class=\"fa fa-external-link-alt\"></i></span>或Truffle Develop）时，您肯定会在网络中存在不希望发布的工件。在发布您的软件包之前，请考虑运行以下命令以删除任何无关的网络工件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ truffle networks --clean</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"11-调试您的合同\"><a href=\"#11-调试您的合同\" class=\"headerlink\" title=\"11.调试您的合同\"></a>11.调试您的合同</h1><p>truffle包含一个集成的调试器，以便您可以调试对您的合同进行的交易。这个调试器看起来和现有的可用于传统开发环境的命令行调试器相似。</p>\n<h2 id=\"概观\"><a href=\"#概观\" class=\"headerlink\" title=\" 概观\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2RlYnVnZ2luZyNvdmVydmlldw==\"> <i class=\"fa fa-external-link-alt\"></i></span>概观</h2><p>在区块链上调试事务与调试传统应用程序（例如，用C ++或Javascript编写的应用程序）不同。在区块链上调试事务时，您不是实时运行代码; 相反，您正在逐步执行该事务的历史执行，并将该执行映射到其相关代码。这为我们调试提供了许多自由度，因为我们可以在任何时候调试任何事务，只要我们拥有事务交互的合同的代码和工件即可。将这些代码和工件看作类似于传统调试器所需的调试符号。</p>\n<p>为了调试交易，您需要以下内容：</p>\n<ul>\n<li>truffle4.0或以上。</li>\n<li>交易在您想要的区块链上的散列。</li>\n<li>事务遇到的源代码和工件。</li>\n</ul>\n<p>请注意，如果您希望的交易导致异常情况或气体用完，那也没问题。事务仍然存在于链上，所以你仍然可以调试它！</p>\n<h2 id=\"命令-1\"><a href=\"#命令-1\" class=\"headerlink\" title=\" 命令\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2RlYnVnZ2luZyNjb21tYW5k\"> <i class=\"fa fa-external-link-alt\"></i></span>命令</h2><p>要使用调试器，请收集您想要调试的事务，然后运行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ truffle debug &lt;transaction hash&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以一个开始的事务<code>0x8e5dadfb921dd...</code>为例，该命令如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ truffle debug 0x8e5dadfb921ddddfa8f53af1f9bd8beeac6838d52d7e0c2fe5085b42a4f3ca76</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这将启动下面描述的调试接口。</p>\n<h2 id=\"调试接口\"><a href=\"#调试接口\" class=\"headerlink\" title=\" 调试接口\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2RlYnVnZ2luZyNkZWJ1Z2dpbmctaW50ZXJmYWNl\"> <i class=\"fa fa-external-link-alt\"></i></span>调试接口</h2><p>启动调试器将打开一个熟悉调试其他类型应用程序的界面。开始时，您会看到以下内容：</p>\n<ul>\n<li>在此交易过程中进行交易或创建的地址列表。</li>\n<li>使用调试器的可用命令列表。</li>\n<li>以及交易的初始入口点，包括合同源文件和代码预览。</li>\n</ul>\n<p>该<code>enter</code>键被设置为执行输入的最后一个命令。当调试器启动时，该<code>enter</code>键被设置为步进到在执行期间遇到的下一个逻辑源代码元素（即，由以太坊虚拟机评估的下一个表达式或语句）。此时，您可以按键<code>enter</code>逐步完成事务，或者输入其中一个可用命令来更详细地分析事务。命令列表详述如下。</p>\n<h3 id=\"（O）跨越\"><a href=\"#（O）跨越\" class=\"headerlink\" title=\" （O）跨越\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2RlYnVnZ2luZyMtby1zdGVwLW92ZXI=\"> <i class=\"fa fa-external-link-alt\"></i></span>（O）跨越</h3><p>此命令遍历当前行，相对于当前在Solidity源文件中评估的语句或表达式的位置。如果您不想在当前行中进入函数调用或合约创建，或者想要快速跳转到源文件中的特定点，请使用此命令。</p>\n<h3 id=\"（I）进入\"><a href=\"#（I）进入\" class=\"headerlink\" title=\" （I）进入\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2RlYnVnZ2luZyMtaS1zdGVwLWludG8=\"> <i class=\"fa fa-external-link-alt\"></i></span>（I）进入</h3><p>该命令进入当前正在评估的函数调用或合同创建。使用此命令跳转到该函数并快速开始调试那里存在的代码。</p>\n<h3 id=\"（你）走出去\"><a href=\"#（你）走出去\" class=\"headerlink\" title=\" （你）走出去\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2RlYnVnZ2luZyMtdS1zdGVwLW91dA==\"> <i class=\"fa fa-external-link-alt\"></i></span>（你）走出去</h3><p>该命令退出当前正在运行的功能。如果这是事务的入口点，则使用此命令可以快速返回调用函数，或者结束事务的执行。</p>\n<h3 id=\"（N）下一步\"><a href=\"#（N）下一步\" class=\"headerlink\" title=\" （N）下一步\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2RlYnVnZ2luZyMtbi1zdGVwLW5leHQ=\"> <i class=\"fa fa-external-link-alt\"></i></span>（N）下一步</h3><p>该命令转到源代码中的下一个逻辑语句或表达式。例如，在虚拟机可以评估完整表达式之前，需要先评估子表达式。如果您想分析虚拟机评估的每个逻辑项，请使用此命令。</p>\n<h3 id=\"（-）步指令\"><a href=\"#（-）步指令\" class=\"headerlink\" title=\" （;）步指令\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2RlYnVnZ2luZyMtc3RlcC1pbnN0cnVjdGlvbg==\"> <i class=\"fa fa-external-link-alt\"></i></span>（;）步指令</h3><p>该命令允许您逐步查看虚拟机评估的每条单独指令。如果您有兴趣了解由Solidity源代码创建的低级别字节码，这非常有用。当你使用这个命令时，调试器在评估指令时也会打印出栈数据。</p>\n<h3 id=\"（P）打印指示\"><a href=\"#（P）打印指示\" class=\"headerlink\" title=\" （P）打印指示\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2RlYnVnZ2luZyMtcC1wcmludC1pbnN0cnVjdGlvbg==\"> <i class=\"fa fa-external-link-alt\"></i></span>（P）打印指示</h3><p>该命令打印当前的指令和堆栈数据，但不会进入下一条指令。如果希望在使用上述逻辑命令导航事务后查看当前指令和堆栈数据，请使用此选项。</p>\n<h3 id=\"（H）打印此帮助\"><a href=\"#（H）打印此帮助\" class=\"headerlink\" title=\" （H）打印此帮助\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2RlYnVnZ2luZyMtaC1wcmludC10aGlzLWhlbHA=\"> <i class=\"fa fa-external-link-alt\"></i></span>（H）打印此帮助</h3><p>打印可用命令的列表。</p>\n<h3 id=\"（Q）退出\"><a href=\"#（Q）退出\" class=\"headerlink\" title=\" （Q）退出\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2RlYnVnZ2luZyMtcS1xdWl0\"> <i class=\"fa fa-external-link-alt\"></i></span>（Q）退出</h3><p>退出调试器。</p>\n<h1 id=\"12-使用truffle开发和控制台\"><a href=\"#12-使用truffle开发和控制台\" class=\"headerlink\" title=\"12.使用truffle开发和控制台\"></a>12.使用truffle开发和控制台</h1><p>有时，为了测试和调试目的，或者手动执行交易，交互式地处理您的合同是很好的。truffle为您提供了两种通过交互式控制台执行此操作的简单方法，您的合同可供使用并随时可用。</p>\n<ul>\n<li><strong>truffle控制台</strong>：连接到任何以太坊客户端的基本交互式控制台</li>\n<li><strong>truffle开发</strong>：交互式控制台，也产生一个发展区块链</li>\n</ul>\n<h2 id=\"为什么两个不同的控制台？\"><a href=\"#为什么两个不同的控制台？\" class=\"headerlink\" title=\" 为什么两个不同的控制台？\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnNvbGUjd2h5LXR3by1kaWZmZXJlbnQtY29uc29sZXMt\"> <i class=\"fa fa-external-link-alt\"></i></span>为什么两个不同的控制台？</h2><p>拥有两个不同的控制台可让您根据自己的需求选择最佳工具。</p>\n<p>使用<strong>truffle平台的</strong>理由：</p>\n<ul>\n<li>你有一个你已经使用的客户，如<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2FuYWNoZS91c2luZw==\">Ganache<i class=\"fa fa-external-link-alt\"></i></span>或geth</li>\n<li>你想迁移到测试网络（或以太坊网络）</li>\n<li>您想要使用特定的助记符或帐户列表</li>\n</ul>\n<p>使用<strong>truffle的</strong>原因<strong>发展</strong>：</p>\n<ul>\n<li>您正在测试您的项目，无意立即部署</li>\n<li>您无需使用特定帐户（并且使用默认开发帐户即可）</li>\n<li>您不想安装和管理单独的区块链客户端</li>\n</ul>\n<h2 id=\"命令-2\"><a href=\"#命令-2\" class=\"headerlink\" title=\" 命令\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnNvbGUjY29tbWFuZHM=\"> <i class=\"fa fa-external-link-alt\"></i></span>命令</h2><p>所有的命令都要求你在你的项目文件夹中。你不需要在根。</p>\n<h3 id=\"安慰\"><a href=\"#安慰\" class=\"headerlink\" title=\" 安慰\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnNvbGUjY29uc29sZQ==\"> <i class=\"fa fa-external-link-alt\"></i></span>安慰</h3><p>要启动控制台：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">truffle console</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这将查找<code>development</code>在配置中调用的网络定义，并连接到它（如果可用）。您可以使用该<code>--network &lt;name&gt;</code>选项覆盖此选项。在“ <span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvYWR2YW5jZWQvbmV0d29ya3M=\">网络”<i class=\"fa fa-external-link-alt\"></i></span>部分以及<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvYWR2YW5jZWQvY29tbWFuZHM=\">命令参考中<i class=\"fa fa-external-link-alt\"></i></span>查看更多详细信息。</p>\n<p>当您加载控制台时，您会立即看到以下提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">truffle(development)&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这告诉你你正在使用<code>development</code>网络在Truffle控制台中运行。</p>\n<h3 id=\"truffle开发\"><a href=\"#truffle开发\" class=\"headerlink\" title=\" truffle开发\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnNvbGUjdHJ1ZmZsZS1kZXZlbG9w\"> <i class=\"fa fa-external-link-alt\"></i></span>truffle开发</h3><p>开展truffle开发：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">truffle develop</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>9545</code>无论您的<code>truffle.js</code>配置文件需要什么，这将在端口上本地产生一个开发区块链。</p>\n<p>当你加载truffle开发，你会看到以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Truffle Develop started at http://localhost:9545/</span><br><span class=\"line\"></span><br><span class=\"line\">Accounts:</span><br><span class=\"line\">(0) 0x627306090abab3a6e1400e9345bc60c78a8bef57</span><br><span class=\"line\">(1) 0xf17f52151ebef6c7334fad080c5704d77216b732</span><br><span class=\"line\">(2) 0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef</span><br><span class=\"line\">(3) 0x821aea9a577a9b44299b9c15c88cf3087f3b5544</span><br><span class=\"line\">(4) 0x0d1d4e623d10f9fba5db95830f7d3839406c6af2</span><br><span class=\"line\">(5) 0x2932b7a2355d6fecc4b5c0b6bd44cc31df247a2e</span><br><span class=\"line\">(6) 0x2191ef87e392377ec08e7c08eb105ef5448eced5</span><br><span class=\"line\">(7) 0x0f4f2ac550a1b4e2280d04c21cea7ebd822934b5</span><br><span class=\"line\">(8) 0x6330a553fc93768f612722bb8c2ec78ac90b3bbc</span><br><span class=\"line\">(9) 0x5aeda56215b167893e80b4fe645ba6d5bab767de</span><br><span class=\"line\"></span><br><span class=\"line\">Private Keys:</span><br><span class=\"line\">(0) c87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3</span><br><span class=\"line\">(1) ae6ae8e5ccbfb04590405997ee2d52d2b330726137b875053c36d94e974d162f</span><br><span class=\"line\">(2) 0dbbe8e4ae425a6d2687f1a7e3ba17bc98c673636790f1b8ad91193c05875ef1</span><br><span class=\"line\">(3) c88b703fb08cbea894b6aeff5a544fb92e78a18e19814cd85da83b71f772aa6c</span><br><span class=\"line\">(4) 388c684f0ba1ef5017716adb5d21a053ea8e90277d0868337519f97bede61418</span><br><span class=\"line\">(5) 659cbb0e2411a44db63778987b1e22153c086a95eb6b18bdf89de078917abc63</span><br><span class=\"line\">(6) 82d052c865f5763aad42add438569276c00d3d88a2d062d36b2bae914d58b8c8</span><br><span class=\"line\">(7) aa3680d5d48a8283413f7a108367c7299ca73f553735860a87b08f39395618b7</span><br><span class=\"line\">(8) 0f62d96d6675f32685bbdb8ac13cda7c23436f63efbb9d07700d8669ff12b7c4</span><br><span class=\"line\">(9) 8d5366123cb560bb606379f90a0bfd4769eecc0557f1b362dcae9012b548b1e5</span><br><span class=\"line\"></span><br><span class=\"line\">Mnemonic: candy maple cake sugar pudding cream honey rich smooth crumble sweet treat</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这会向您显示此特定区块链的地址，私钥和助记符。</p>\n<p><strong>注意</strong>：助记符和地址不能更改。如果您想使用不同的助记符或一组地址，我们推荐使用<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2FuYWNoZS91c2luZw==\">Ganache<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<p><strong>警告</strong>：切记不要使用任何这些地址或主网上的助记符。这仅用于开发。</p>\n<h2 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\" 特征\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnNvbGUjZmVhdHVyZXM=\"> <i class=\"fa fa-external-link-alt\"></i></span>特征</h2><p>Truffle Develop和控制台都提供了Truffle命令行工具中的大部分功能。例如，您可以<code>migrate --reset</code>在控制台中输入内容，并将其解释为与<code>truffle migrate --reset</code>在命令行上运行时相同。</p>\n<p>此外，truffle开发和控制台还具有以下特点：</p>\n<ul>\n<li><p>你所有的编译合同都可以使用。</p>\n</li>\n<li><p>在每个命令（例如<code>migrate --reset</code>）您的合同被重新配置后，您可以立即开始使用新分配的地址和二进制文件。</p>\n</li>\n<li><p>该<code>web3</code>库已经可用，并已设置为连接到您的以太坊客户端。</p>\n</li>\n<li><p>所有返回承诺的命令都会自动解析，并打印结果，不需要使用<code>.then()</code>简单的命令。例如，以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MyContract.at(&quot;0xabcd...&quot;).getValue.call();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>会返回类似于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"命令可用\"><a href=\"#命令可用\" class=\"headerlink\" title=\" 命令可用\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2NvbnNvbGUjY29tbWFuZHMtYXZhaWxhYmxl\"> <i class=\"fa fa-external-link-alt\"></i></span>命令可用</h3><ul>\n<li><code>build</code></li>\n<li><code>compile</code></li>\n<li><code>create</code></li>\n<li><code>debug</code></li>\n<li><code>exec</code></li>\n<li><code>install</code></li>\n<li><code>migrate</code></li>\n<li><code>networks</code></li>\n<li><code>opcode</code></li>\n<li><code>publish</code></li>\n<li><code>test</code></li>\n<li><code>version</code></li>\n</ul>\n<p>如果truffle命令不可用，那是因为它与现有项目无关（例如<code>init</code>）或者没有意义（例如<code>develop</code>或<code>console</code>）。</p>\n<p>查看完整的<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvYWR2YW5jZWQvY29tbWFuZHM=\">命令参考<i class=\"fa fa-external-link-alt\"></i></span>了解更多信息。</p>\n<h1 id=\"13-编写外部脚本\"><a href=\"#13-编写外部脚本\" class=\"headerlink\" title=\"13.编写外部脚本\"></a>13.编写外部脚本</h1><p>通常您可能想要运行与您的合同交互的外部脚本。truffle提供了一种简单的方法来实现这一点，根据您所需的网络引导您的合同，并根据您的<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvYWR2YW5jZWQvY29uZmlndXJhdGlvbg==\">项目配置<i class=\"fa fa-external-link-alt\"></i></span>自动连接到您的以太坊客户端。</p>\n<h2 id=\"命令-3\"><a href=\"#命令-3\" class=\"headerlink\" title=\" 命令\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3NjcmlwdHMjY29tbWFuZA==\"> <i class=\"fa fa-external-link-alt\"></i></span>命令</h2><p>要运行外部脚本，请执行以下操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ truffle exec &lt;path/to/file.js&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件结构\"><a href=\"#文件结构\" class=\"headerlink\" title=\" 文件结构\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL3NjcmlwdHMjZmlsZS1zdHJ1Y3R1cmU=\"> <i class=\"fa fa-external-link-alt\"></i></span>文件结构</h2><p>为了使外部脚本正确运行，Truffle期望它们导出一个函数，该函数将一个参数作为回调函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports = function(callback) &#123;</span><br><span class=\"line\">  // perform actions</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>只要在脚本结束时调用回调，就可以在该脚本中执行任何您想要的操作。回调接受一个错误作为它的第一个也是唯一的参数。如果提供了错误，执行将暂停并且该进程将返回非零退出代码。</p>\n<h1 id=\"13-使用构建管道\"><a href=\"#13-使用构建管道\" class=\"headerlink\" title=\"13.使用构建管道\"></a>13.使用构建管道</h1><p>Truffle 1.0和2.0标准的默认构建系统主要面向Web应用程序（这里，术语“构建”意味着将代码工件转换为HTML，Javascript和CSS）。该构建系统已被引入<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RydWZmbGVzdWl0ZS90cnVmZmxlLWRlZmF1bHQtYnVpbGRlci90cmVlL21hc3Rlcg==\">自己的模块<i class=\"fa fa-external-link-alt\"></i></span>，使Truffle可用于各种应用并可扩展。</p>\n<p>truffle可以配置为与任何构建系统紧密集成。要配置自定义<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvYWR2YW5jZWQvYnVpbGRfcHJvY2Vzc2Vz\">生成<i class=\"fa fa-external-link-alt\"></i></span>系统，请参阅<span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvYWR2YW5jZWQvYnVpbGRfcHJvY2Vzc2Vz\">高级生成进程<i class=\"fa fa-external-link-alt\"></i></span>部分以获取更多详细信息。</p>\n<h2 id=\"命令-4\"><a href=\"#命令-4\" class=\"headerlink\" title=\" 命令\"></a><span class=\"exturl\" data-url=\"aHR0cDovL3RydWZmbGVmcmFtZXdvcmsuY29tL2RvY3MvZ2V0dGluZ19zdGFydGVkL2J1aWxkI2NvbW1hbmQ=\"> <i class=\"fa fa-external-link-alt\"></i></span>命令</h2><p>要在构建系统时配置应用程序，请运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ truffle build</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>请注意，如果您尝试在<code>build</code>未首先配置自定义构建过程的情况下运行该命令，则会收到错误。</p>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"0x10--智能合约开发之十分钟学会开发智能合约全流程","url":"/eth_0x10_ten_minute_learn_contract/","content":"<ul>\n<li><a href=\"\">学习目标</a></li>\n<li><a href=\"\">使用solidity语言撰写智能合约</a></li>\n<li><a href=\"\">开发前的准备</a><ul>\n<li><a href=\"\">Ubuntu环境下Atom编辑器安装及使用</a></li>\n</ul>\n</li>\n<li><a href=\"\">安装所需工具</a><ul>\n<li><a href=\"\">安装nvm</a></li>\n<li><a href=\"\">安装node</a></li>\n<li><a href=\"\">安装npm</a></li>\n</ul>\n</li>\n<li><a href=\"\">启动testrpc</a></li>\n<li><a href=\"\">建立项目</a><ul>\n<li><a href=\"\">目录结构</a></li>\n</ul>\n</li>\n<li><a href=\"\">新建HelloWorld合约</a><ul>\n<li><a href=\"\">代码说明</a></li>\n</ul>\n</li>\n<li><a href=\"\">编译</a></li>\n<li><a href=\"\">部署</a></li>\n<li><a href=\"\">与合约互动</a></li>\n<li><a href=\"\">加入新方法</a><span id=\"more\"></span></li>\n</ul>\n<h2 id=\"1-学习目标\"><a href=\"#1-学习目标\" class=\"headerlink\" title=\"1.学习目标\"></a>1.学习目标</h2><ol>\n<li>了解智能合约</li>\n<li>简单环境搭建</li>\n<li>能够利用solidity编写Hello World合约</li>\n<li>合约部署</li>\n<li>和合约互动</li>\n</ol>\n<h2 id=\"2-使用solidity语言撰写智能合约\"><a href=\"#2-使用solidity语言撰写智能合约\" class=\"headerlink\" title=\"2.使用solidity语言撰写智能合约\"></a>2.使用solidity语言撰写智能合约</h2><p>Ethereum上的智能合约需要使用solidity语言来撰写。solidity是一种类似Javsscript的语言，而且围绕着solidity的各种开发工具链，都是使用属于Javascript生态系的npm来提供的。但solidity在语法上比较像Java或C#，因为和Javascript不同，solidity与Java或C#同属于强类型语言，、在定义函数时同样需要指定回传的类型、同样也需要先编译才能执行。这些特性都是Javascript所不具备的。</p>\n<h2 id=\"3-开发前的准备\"><a href=\"#3-开发前的准备\" class=\"headerlink\" title=\"3.开发前的准备\"></a>3.开发前的准备</h2><p>我们将使用当前最活跃的智能合约开发框架truffle为基础来开发。ENS（Ethereum Name Service）也是采用truffle框架。其他选择还有embark等。</p>\n<p>开发过程中，我们将使用testrpc工具在电脑上模拟智能合约所需的以太坊内存块链测试环境。</p>\n<p>testrpc中也包含了Javascript版本的Ethereum虚拟机（Ethereum Virtual Machine），因此可以完整地执行智能合约。</p>\n<p>代码编辑器使用Atom，搭配solidity插件来开发。Atom是Github为开发者设计的基于Chromium的编辑器，支持NodeJS写的插件，内置Git，使用MIT协议开源发布。solidity插件除了支持语法高亮之外，也会透过Solium检查并提示基本的语法错误，相当方便。其他编辑器应该也有类似的插件可选择。</p>\n<h3 id=\"Ubuntu环境下Atom编辑器安装及使用\"><a href=\"#Ubuntu环境下Atom编辑器安装及使用\" class=\"headerlink\" title=\"Ubuntu环境下Atom编辑器安装及使用\"></a>Ubuntu环境下Atom编辑器安装及使用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:webupd8team/atom</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install atom</span><br></pre></td></tr></table></figure>\n\n<p>安装插件linter-solidity、autocomplete-solidity、linter-solium以方便solidity代码编写。</p>\n<h2 id=\"4-安装所需工具\"><a href=\"#4-安装所需工具\" class=\"headerlink\" title=\"4.安装所需工具\"></a>4.安装所需工具</h2><p>首先安装Node.js</p>\n<h3 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mkdir .nvm</span><br><span class=\"line\">cd .nvm</span><br><span class=\"line\">git clone https://github.com/creationix/nvm</span><br></pre></td></tr></table></figure>\n\n<p>等待下载完毕后<code>source ~/.nvm/nvm/nvm.sh</code>添加到<code>~/.profile</code>之类的文件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim ~/.profile</span><br></pre></td></tr></table></figure>\n\n<p>并在文件末尾添加<code>source ~/.nvm/nvm/nvm.sh</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">source ~/.profile</span><br><span class=\"line\">nvm --version</span><br></pre></td></tr></table></figure>\n\n<p>检查安装是否正确</p>\n<h3 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm install node</span><br><span class=\"line\">node --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装npm\"><a href=\"#安装npm\" class=\"headerlink\" title=\"安装npm\"></a>安装npm</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone --recursive git://github.com/isaacs/npm.git</span><br><span class=\"line\">cd npm/bin</span><br><span class=\"line\">node npm-cli.js install npm -g</span><br><span class=\"line\">npm --version</span><br></pre></td></tr></table></figure>\n\n<p>安装ethereumjs-testrpc和truffle</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g ethereumjs-testrpc truffle</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">zihao@zihaodeMBP:~$ npm install -g ethereumjs-testrpc truffle</span><br><span class=\"line\"></span><br><span class=\"line\">/home/zihao/.nvm/nvm/versions/node/v9.3.0/bin/testrpc -&gt; /home/zihao/.nvm/nvm/versions/node/v9.3.0/lib/node_modules/ethereumjs-testrpc/build/cli.node.js</span><br><span class=\"line\">/home/zihao/.nvm/nvm/versions/node/v9.3.0/bin/truffle -&gt; /home/zihao/.nvm/nvm/versions/node/v9.3.0/lib/node_modules/truffle/build/cli.bundled.js</span><br><span class=\"line\">+ ethereumjs-testrpc@6.0.3</span><br><span class=\"line\">+ truffle@4.0.4</span><br><span class=\"line\">added 343 packages in 115.81s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-启动testrpc\"><a href=\"#5-启动testrpc\" class=\"headerlink\" title=\"5.启动testrpc\"></a>5.启动testrpc</h2><p>安装好后随时可以使用<code>testrpc</code>命令来启动以太坊测试环境。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">zihao@zihaodeMBP:~$ testrpc</span><br><span class=\"line\">EthereumJS TestRPC v6.0.3 (ganache-core: 2.0.2)</span><br><span class=\"line\"></span><br><span class=\"line\">Available Accounts</span><br><span class=\"line\">==================</span><br><span class=\"line\">(0) 0x7e1897cec8e1a098384d17e85a9cd348ccb92b4a</span><br><span class=\"line\">(1) 0x6c96c6cb16442ab83aea0eb1bc3a183e28a922fe</span><br><span class=\"line\">(2) 0x163f0e06082c5cd14ff56658b186a30b0f6e7d9f</span><br><span class=\"line\">(3) 0x0e9558b2cb935ab26484c3d6783fbf2fe70041c8</span><br><span class=\"line\">(4) 0xa2233f08bbb7e3a826cc4c2cede22caf3a6922e6</span><br><span class=\"line\">(5) 0x3b1317510218f98946e0fb72b1a0685ac00bcbc4</span><br><span class=\"line\">(6) 0xca33f56a03e5ae86e25655f4dd7de88be12ec184</span><br><span class=\"line\">(7) 0xfb56aed85dd00908f1e0729ed80d06f456898588</span><br><span class=\"line\">(8) 0x6cfe240b49a28986057016ef2ecd9d6711f6b632</span><br><span class=\"line\">(9) 0x0e866473d6776edc39935dd5d00425b6ab2a423a</span><br><span class=\"line\"></span><br><span class=\"line\">Private Keys</span><br><span class=\"line\">==================</span><br><span class=\"line\">(0) 3ae87bfaeabf103ce723b78525ab1278b2c7652b93b99a0131321adaa7000537</span><br><span class=\"line\">(1) 2f23eaef51f941b7af171a56acbd7524554ad529236b6abb6920935218f5df58</span><br><span class=\"line\">(2) 9b5b5d42786e74364e80b45ecf1a2b7201db7eafe12684f71006fbe3368e6dfe</span><br><span class=\"line\">(3) 33181b42772371fad50f29b8377f7a3de72000397f9b021677e329bede7bfcc7</span><br><span class=\"line\">(4) 3f5f366d89ab9263b92f35368840d24d562af043db8a5ad773dc8cc8f122662d</span><br><span class=\"line\">(5) 29933e3e79129da23da3cc0f5cecb03c583c3ad6c4c1ad8a39d68386fe92d91b</span><br><span class=\"line\">(6) 7e9bd47a6120bb9a240a96ce80866b98646f07cb98197bdffec389805575144b</span><br><span class=\"line\">(7) 0c7144621371a04e4ee733d06482b0a23ed775af17172e75e26f2b8915814e35</span><br><span class=\"line\">(8) 60ab702bdad5a348645f65fb0678cafec891c534964982d97b96f4a57abd78ef</span><br><span class=\"line\">(9) 8ff45f1ccb23bec8a317a6e218b3b50290646317b5c809c797e1522bcef9d031</span><br><span class=\"line\"></span><br><span class=\"line\">HD Wallet</span><br><span class=\"line\">==================</span><br><span class=\"line\">Mnemonic:      vapor high liberty evoke pledge bronze critic stomach neck figure recipe mind</span><br><span class=\"line\">Base HD Path:  m/44&#x27;/60&#x27;/0&#x27;/0/&#123;account_index&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Listening on localhost:8545</span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>testrpc</code>启动后自动建立了10个账号(Accounts)，与每个账号对应的私钥(Private Key)。每个账号中都有100个测试用的以太币(Ether)。要注意<code>testrpc</code>仅运行在内存中，因此每次重开时都会回到全新的状态。</p>\n<p>一切就绪，我们可以开始建立第一个智能合约项目了。</p>\n<h2 id=\"6-建立项目\"><a href=\"#6-建立项目\" class=\"headerlink\" title=\"6.建立项目\"></a>6.建立项目</h2><p>开启另一个终端，输入以下命令以建立项目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">zihao@zihaodeMBP:~$ mkdir SmartContractDemo</span><br><span class=\"line\">zihao@zihaodeMBP:~$ cd SmartContractDemo/</span><br><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo$ mkdir HelloWorld</span><br><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo$ cd HelloWorld/</span><br><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ truffle init</span><br><span class=\"line\">Downloading...</span><br><span class=\"line\">Unpacking...</span><br><span class=\"line\">Setting up...</span><br><span class=\"line\">Unbox successful. Sweet!</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\"></span><br><span class=\"line\">  Compile:        truffle compile</span><br><span class=\"line\">  Migrate:        truffle migrate</span><br><span class=\"line\">  Test contracts: truffle test</span><br><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ ls</span><br><span class=\"line\">contracts  migrations  test  truffle-config.js  truffle.js</span><br><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><p><code>/contracts</code>:存放智能合约原始代码的地方，可以看到里面有个<code>Migrations.sol</code>文件，我们的<code>HelloWorld.sol</code>文件就存放在这里。</p>\n<p><code>/migrations</code>:这是<code>Truffle</code>用来部署智能合约的功能，待会儿我们会修改<code>2_deploy_contracts.js</code>来部署<code>HelloWorld.sol</code>。</p>\n<p><code>/test</code>:测试智能合约的代码放在这里，支持<code>js</code>与<code>sol</code>测试。</p>\n<p><code>truffle.js</code>:<code>Truffle</code>的设置文档。</p>\n<h2 id=\"7-新建HelloWorld合约\"><a href=\"#7-新建HelloWorld合约\" class=\"headerlink\" title=\"7.新建HelloWorld合约\"></a>7.新建HelloWorld合约</h2><p>在<code>contracts</code>文件夹下新建<code>HelloWorld.sol</code>文件，当然也可以直接在<code>HelloWorld</code>路径下面直接执行<code>truffle create contract HelloWorld</code>命令来创建<code>HelloWorld.sol</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ ls</span><br><span class=\"line\">contracts  migrations  test  truffle-config.js  truffle.js</span><br><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ truffle create contract HelloWorld</span><br><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ cd contracts/</span><br><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld/contracts$ ls</span><br><span class=\"line\">HelloWorld.sol  Migrations.sol</span><br><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld/contracts$ </span><br></pre></td></tr></table></figure>\n\n<p><code>HelloWorld.sol</code>的文件内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.4;</span><br><span class=\"line\"></span><br><span class=\"line\">contract HelloWorld &#123;</span><br><span class=\"line\">    function sayHello() returns (string) &#123;</span><br><span class=\"line\">        return (&quot;Hello World&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码说明\"><a href=\"#代码说明\" class=\"headerlink\" title=\"代码说明\"></a>代码说明</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.4;</span><br></pre></td></tr></table></figure>\n\n<p>第一行表明目前使用的<code>solidity</code>版本，不同版本的<code>solidity</code>可能会编译出不同的<code>bytecode</code>。<code>^</code>代表兼容<code>solidity 0.4.4~0.4.9</code>的版本。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">contract HelloWorld &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>contract</code>关键字类似于其他语言中较常见的<code>class</code>。因为<code>solidity</code>是专为智能合约(Contract)设计的语言，声明<code>contract</code>后即内置了开发智能合约所需的功能。也可以把这句理解为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function sayHello() returns (string) &#123;</span><br><span class=\"line\">    return (&quot;Hello World&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数的结构与其他程序类似，但如果有传入的参数或回传值，需要指定参数或回传值的类型(type)。</p>\n<h2 id=\"8-编译\"><a href=\"#8-编译\" class=\"headerlink\" title=\"8.编译\"></a>8.编译</h2><p>现在执行<code>truffle compile</code>命令，我们可以将<code>HelloWorld.sol</code>原始码编译成<code>Ethereum bytecode</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ ls</span><br><span class=\"line\">contracts  migrations  test  truffle-config.js  truffle.js</span><br><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ truffle compile</span><br><span class=\"line\">Compiling ./contracts/HelloWorld.sol...</span><br><span class=\"line\">Compiling ./contracts/Migrations.sol...</span><br><span class=\"line\"></span><br><span class=\"line\">Compilation warnings encountered:</span><br><span class=\"line\"></span><br><span class=\"line\">/home/zihao/SmartContractDemo/HelloWorld/contracts/HelloWorld.sol:4:3: Warning: No visibility specified. Defaulting to &quot;public&quot;.</span><br><span class=\"line\">  function sayHello() returns (string) &#123;</span><br><span class=\"line\">  ^</span><br><span class=\"line\">Spanning multiple lines.</span><br><span class=\"line\">,/home/zihao/SmartContractDemo/HelloWorld/contracts/HelloWorld.sol:4:3: Warning: Function state mutability can be restricted to pure</span><br><span class=\"line\">  function sayHello() returns (string) &#123;</span><br><span class=\"line\">  ^</span><br><span class=\"line\">Spanning multiple lines.</span><br><span class=\"line\"></span><br><span class=\"line\">Writing artifacts to ./build/contracts</span><br><span class=\"line\"></span><br><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ ls</span><br><span class=\"line\">build  contracts  migrations  test  truffle-config.js  truffle.js</span><br></pre></td></tr></table></figure>\n\n<p>编译成功后，会在<code>HelloWorld</code>文件夹下面的<code>build/contracts</code>文件夹下面看见<code>HelloWorld.json</code>文件。</p>\n<h2 id=\"9-部署\"><a href=\"#9-部署\" class=\"headerlink\" title=\"9.部署\"></a>9.部署</h2><p><code>truffle</code>框架中提供了方便部署合约的脚本。打开<code>migrations/2_deploy_contracts.js</code>文件（脚本使用<code>Javascript</code>编写），将内容修改如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var HelloWorld = artifacts.require(&quot;HelloWorld&quot;);</span><br><span class=\"line\">module.exports = function(deployer) &#123;</span><br><span class=\"line\">    deployer.deploy(HelloWorld);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>artifacts.require</code>语句来取得准备部署的合约。使用<code>deployer.deploy</code>语句将合约部署到区块链上。这边<code>HelloWorld</code>是<code>contract</code>的名称而不是文件夹。因此可以用此语法读入任一<code>.sol</code>文件中的任一合约。</p>\n<p>现在执行<code>truffle migrate</code>命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ truffle migrate</span><br><span class=\"line\">Compiling ./contracts/HelloWorld.sol...</span><br><span class=\"line\"></span><br><span class=\"line\">Compilation warnings encountered:</span><br><span class=\"line\"></span><br><span class=\"line\">/home/zihao/SmartContractDemo/HelloWorld/contracts/HelloWorld.sol:4:3: Warning: Function state mutability can be restricted to pure</span><br><span class=\"line\">  function sayHello() public constant returns (string) &#123;</span><br><span class=\"line\">  ^</span><br><span class=\"line\">Spanning multiple lines.</span><br><span class=\"line\"></span><br><span class=\"line\">Writing artifacts to ./build/contracts</span><br><span class=\"line\"></span><br><span class=\"line\">Error: No network specified. Cannot determine current network.</span><br><span class=\"line\">    at Object.detect (/home/zihao/.nvm/nvm/versions/node/v9.3.0/lib/node_modules/truffle/build/cli.bundled.js:41338:23)</span><br><span class=\"line\">    at /home/zihao/.nvm/nvm/versions/node/v9.3.0/lib/node_modules/truffle/build/cli.bundled.js:202239:19</span><br><span class=\"line\">    at /home/zihao/.nvm/nvm/versions/node/v9.3.0/lib/node_modules/truffle/build/cli.bundled.js:41263:11</span><br><span class=\"line\">    at /home/zihao/.nvm/nvm/versions/node/v9.3.0/lib/node_modules/truffle/build/cli.bundled.js:41295:9</span><br><span class=\"line\">    at &lt;anonymous&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以发现，此时在使用<code>truffle migrate</code>进行智能合约test环境发布时出现异常，原因是<code>truffle.js</code>里面未配置链接合约发布时的环境地址，找到对应的<code>truffle.js</code>文件，修改代码为类似如下配置即可解决问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    networks: &#123;</span><br><span class=\"line\">        development: &#123;</span><br><span class=\"line\">            host: &quot;localhost&quot;,</span><br><span class=\"line\">            port:8545,</span><br><span class=\"line\">            network_id:&quot;*&quot;  // 匹配任何network id</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>重新执行<code>truffle migrate</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ truffle migrate</span><br><span class=\"line\">Using network &#x27;development&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">Running migration: 1_initial_migration.js</span><br><span class=\"line\">  Deploying Migrations...</span><br><span class=\"line\">  ... 0xd43c42b526addb75876bb26a3086cabf79eaf9b0dbb1cd18ce3d6cc78f8e5335</span><br><span class=\"line\">  Migrations: 0x69c7674e74ee9aee187ea05b97faf08d6a7c0b94</span><br><span class=\"line\">Saving successful migration to network...</span><br><span class=\"line\">  ... 0x4aa706f72045aec809b3ab5d286489c157e6f5e73e1538a441cfb199c512f849</span><br><span class=\"line\">Saving artifacts...</span><br><span class=\"line\">Running migration: 2_deploy_contracts.js</span><br><span class=\"line\">  Deploying HelloWorld...</span><br><span class=\"line\">  ... 0x35afc83dd8e594167f1ddb9f52250b02aa72508a9b77ad15f5bd58b19a1e7275</span><br><span class=\"line\">  HelloWorld: 0x93ca4fd7d2820b2156fd88e40783ac9a41e26cfe</span><br><span class=\"line\">Saving successful migration to network...</span><br><span class=\"line\">  ... 0x12174aa188a4c47f84e071356149dfc9a51942bd81ce53d84bb22225d18d2fae</span><br><span class=\"line\">Saving artifacts...</span><br><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ </span><br></pre></td></tr></table></figure>\n\n<p>如此以后，合约已经部署到<code>testrpc</code>中。切换到<code>testrpc</code>窗口，可以看到<code>testrpc</code>有反应了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Listening on localhost:8545</span><br><span class=\"line\">net_version</span><br><span class=\"line\">eth_accounts</span><br><span class=\"line\">eth_accounts</span><br><span class=\"line\">net_version</span><br><span class=\"line\">net_version</span><br><span class=\"line\">eth_sendTransaction</span><br><span class=\"line\"></span><br><span class=\"line\">  Transaction: 0xd43c42b526addb75876bb26a3086cabf79eaf9b0dbb1cd18ce3d6cc78f8e5335</span><br><span class=\"line\">  Contract created: 0x69c7674e74ee9aee187ea05b97faf08d6a7c0b94</span><br><span class=\"line\">  Gas usage: 269607</span><br><span class=\"line\">  Block Number: 1</span><br><span class=\"line\">  Block Time: Wed Jan 10 2018 20:19:00 GMT+0800 (CST)</span><br><span class=\"line\"></span><br><span class=\"line\">eth_newBlockFilter</span><br><span class=\"line\">eth_getFilterChanges</span><br><span class=\"line\">eth_getTransactionReceipt</span><br><span class=\"line\">eth_getCode</span><br><span class=\"line\">eth_uninstallFilter</span><br><span class=\"line\">eth_sendTransaction</span><br><span class=\"line\"></span><br><span class=\"line\">  Transaction: 0x4aa706f72045aec809b3ab5d286489c157e6f5e73e1538a441cfb199c512f849</span><br><span class=\"line\">  Gas usage: 41981</span><br><span class=\"line\">  Block Number: 2</span><br><span class=\"line\">  Block Time: Wed Jan 10 2018 20:19:01 GMT+0800 (CST)</span><br><span class=\"line\"></span><br><span class=\"line\">eth_getTransactionReceipt</span><br><span class=\"line\">eth_accounts</span><br><span class=\"line\">net_version</span><br><span class=\"line\">net_version</span><br><span class=\"line\">eth_sendTransaction</span><br><span class=\"line\"></span><br><span class=\"line\">  Transaction: 0x35afc83dd8e594167f1ddb9f52250b02aa72508a9b77ad15f5bd58b19a1e7275</span><br><span class=\"line\">  Contract created: 0x93ca4fd7d2820b2156fd88e40783ac9a41e26cfe</span><br><span class=\"line\">  Gas usage: 142468</span><br><span class=\"line\">  Block Number: 3</span><br><span class=\"line\">  Block Time: Wed Jan 10 2018 20:19:01 GMT+0800 (CST)</span><br><span class=\"line\"></span><br><span class=\"line\">eth_newBlockFilter</span><br><span class=\"line\">eth_getFilterChanges</span><br><span class=\"line\">eth_getTransactionReceipt</span><br><span class=\"line\">eth_getCode</span><br><span class=\"line\">eth_uninstallFilter</span><br><span class=\"line\">eth_sendTransaction</span><br><span class=\"line\"></span><br><span class=\"line\">  Transaction: 0x12174aa188a4c47f84e071356149dfc9a51942bd81ce53d84bb22225d18d2fae</span><br><span class=\"line\">  Gas usage: 26981</span><br><span class=\"line\">  Block Number: 4</span><br><span class=\"line\">  Block Time: Wed Jan 10 2018 20:19:01 GMT+0800 (CST)</span><br><span class=\"line\"></span><br><span class=\"line\">eth_getTransactionReceipt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-与合约互动\"><a href=\"#10-与合约互动\" class=\"headerlink\" title=\"10.与合约互动\"></a>10.与合约互动</h2><p><code>truffle</code>提供命令行工具，执行<code>truffle console</code>命令后，可用<code>Javascript</code>来和刚刚部署的合约互动。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ ls</span><br><span class=\"line\">build  contracts  migrations  test  truffle-config.js  truffle.js</span><br><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ truffle console</span><br><span class=\"line\">truffle(development)&gt; let contract</span><br><span class=\"line\">undefined</span><br><span class=\"line\">truffle(development)&gt; HelloWorld.deployed().then(instance =&gt; contract = instance)</span><br><span class=\"line\">TruffleContract &#123;</span><br><span class=\"line\">  constructor: </span><br><span class=\"line\">   &#123; [Function: TruffleContract]</span><br><span class=\"line\">     _static_methods: </span><br><span class=\"line\">      &#123; setProvider: [Function: setProvider],</span><br><span class=\"line\">        new: [Function: new],</span><br><span class=\"line\">        at: [Function: at],</span><br><span class=\"line\">        deployed: [Function: deployed],</span><br><span class=\"line\">        defaults: [Function: defaults],</span><br><span class=\"line\">        hasNetwork: [Function: hasNetwork],</span><br><span class=\"line\">        isDeployed: [Function: isDeployed],</span><br><span class=\"line\">        detectNetwork: [Function: detectNetwork],</span><br><span class=\"line\">        setNetwork: [Function: setNetwork],</span><br><span class=\"line\">        resetAddress: [Function: resetAddress],</span><br><span class=\"line\">        link: [Function: link],</span><br><span class=\"line\">        clone: [Function: clone],</span><br><span class=\"line\">        addProp: [Function: addProp],</span><br><span class=\"line\">        toJSON: [Function: toJSON] &#125;,</span><br><span class=\"line\">     _properties: </span><br><span class=\"line\">      &#123; contract_name: [Object],</span><br><span class=\"line\">        contractName: [Object],</span><br><span class=\"line\">        abi: [Object],</span><br><span class=\"line\">        network: [Function: network],</span><br><span class=\"line\">        networks: [Function: networks],</span><br><span class=\"line\">        address: [Object],</span><br><span class=\"line\">        links: [Function: links],</span><br><span class=\"line\">        events: [Function: events],</span><br><span class=\"line\">        binary: [Function: binary],</span><br><span class=\"line\">        deployedBinary: [Function: deployedBinary],</span><br><span class=\"line\">        unlinked_binary: [Object],</span><br><span class=\"line\">        bytecode: [Object],</span><br><span class=\"line\">        deployedBytecode: [Object],</span><br><span class=\"line\">        sourceMap: [Object],</span><br><span class=\"line\">        deployedSourceMap: [Object],</span><br><span class=\"line\">        source: [Object],</span><br><span class=\"line\">        sourcePath: [Object],</span><br><span class=\"line\">        ast: [Object],</span><br><span class=\"line\">        compiler: [Object],</span><br><span class=\"line\">        schema_version: [Function: schema_version],</span><br><span class=\"line\">        schemaVersion: [Function: schemaVersion],</span><br><span class=\"line\">        updated_at: [Function: updated_at],</span><br><span class=\"line\">        updatedAt: [Function: updatedAt] &#125;,</span><br><span class=\"line\">     _property_values: &#123;&#125;,</span><br><span class=\"line\">     _json: </span><br><span class=\"line\">      &#123; contractName: &#x27;HelloWorld&#x27;,</span><br><span class=\"line\">        abi: [Array],</span><br><span class=\"line\">        bytecode: &#x27;0x6060604052341561000f57600080fd5b6101578061001e6000396000f300606060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063ef5fb05b14610046575b600080fd5b341561005157600080fd5b6100596100d4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009957808201518184015260208101905061007e565b50505050905090810190601f1680156100c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100dc610117565b6040805190810160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250905090565b6020604051908101604052806000815250905600a165627a7a72305820b98aa7cabcef6181bb855c27290b86a3ed577c3493b6cf1cebfeb4be9a990c2e0029&#x27;,</span><br><span class=\"line\">        deployedBytecode: &#x27;0x606060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063ef5fb05b14610046575b600080fd5b341561005157600080fd5b6100596100d4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009957808201518184015260208101905061007e565b50505050905090810190601f1680156100c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100dc610117565b6040805190810160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250905090565b6020604051908101604052806000815250905600a165627a7a72305820b98aa7cabcef6181bb855c27290b86a3ed577c3493b6cf1cebfeb4be9a990c2e0029&#x27;,</span><br><span class=\"line\">        sourceMap: &#x27;25:112:0:-;;;;;;;;;;;;;;;;;&#x27;,</span><br><span class=\"line\">        deployedSourceMap: &#x27;25:112:0:-;;;;;;;;;;;;;;;;;;;;;;;;49:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;80:1;75:3;71;64:6;52:2;49:1;45:3;40:15;;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:86:0;94:6;;:::i;:::-;108:22;;;;;;;;;;;;;;;;;;;;49:86;:::o;25:112::-;;;;;;;;;;;;;;;:::o&#x27;,</span><br><span class=\"line\">        source: &#x27;pragma solidity ^0.4.4;\\n\\ncontract HelloWorld &#123;\\n  function sayHello() public constant returns (string) &#123;\\n    return (&quot;Hello World&quot;);\\n  &#125;\\n&#125;\\n&#x27;,</span><br><span class=\"line\">        sourcePath: &#x27;/home/zihao/SmartContractDemo/HelloWorld/contracts/HelloWorld.sol&#x27;,</span><br><span class=\"line\">        ast: [Object],</span><br><span class=\"line\">        compiler: [Object],</span><br><span class=\"line\">        networks: [Object],</span><br><span class=\"line\">        schemaVersion: &#x27;1.0.1&#x27;,</span><br><span class=\"line\">        updatedAt: &#x27;2018-01-10T12:19:01.841Z&#x27; &#125;,</span><br><span class=\"line\">     setProvider: [Function: bound setProvider],</span><br><span class=\"line\">     new: [Function: bound new],</span><br><span class=\"line\">     at: [Function: bound at],</span><br><span class=\"line\">     deployed: [Function: bound deployed],</span><br><span class=\"line\">     defaults: [Function: bound defaults],</span><br><span class=\"line\">     hasNetwork: [Function: bound hasNetwork],</span><br><span class=\"line\">     isDeployed: [Function: bound isDeployed],</span><br><span class=\"line\">     detectNetwork: [Function: bound detectNetwork],</span><br><span class=\"line\">     setNetwork: [Function: bound setNetwork],</span><br><span class=\"line\">     resetAddress: [Function: bound resetAddress],</span><br><span class=\"line\">     link: [Function: bound link],</span><br><span class=\"line\">     clone: [Function: bound clone],</span><br><span class=\"line\">     addProp: [Function: bound addProp],</span><br><span class=\"line\">     toJSON: [Function: bound toJSON],</span><br><span class=\"line\">     web3: </span><br><span class=\"line\">      Web3 &#123;</span><br><span class=\"line\">        _requestManager: [RequestManager],</span><br><span class=\"line\">        currentProvider: [Provider],</span><br><span class=\"line\">        eth: [Eth],</span><br><span class=\"line\">        db: [DB],</span><br><span class=\"line\">        shh: [Shh],</span><br><span class=\"line\">        net: [Net],</span><br><span class=\"line\">        personal: [Personal],</span><br><span class=\"line\">        bzz: [Swarm],</span><br><span class=\"line\">        settings: [Settings],</span><br><span class=\"line\">        version: [Object],</span><br><span class=\"line\">        providers: [Object],</span><br><span class=\"line\">        _extend: [Function] &#125;,</span><br><span class=\"line\">     class_defaults: </span><br><span class=\"line\">      &#123; from: &#x27;0x7e1897cec8e1a098384d17e85a9cd348ccb92b4a&#x27;,</span><br><span class=\"line\">        gas: 6721975,</span><br><span class=\"line\">        gasPrice: 100000000000 &#125;,</span><br><span class=\"line\">     currentProvider: </span><br><span class=\"line\">      HttpProvider &#123;</span><br><span class=\"line\">        host: &#x27;http://localhost:8545&#x27;,</span><br><span class=\"line\">        timeout: 0,</span><br><span class=\"line\">        user: undefined,</span><br><span class=\"line\">        password: undefined,</span><br><span class=\"line\">        send: [Function],</span><br><span class=\"line\">        sendAsync: [Function],</span><br><span class=\"line\">        _alreadyWrapped: true &#125;,</span><br><span class=\"line\">     network_id: &#x27;1515578597496&#x27; &#125;,</span><br><span class=\"line\">  abi: </span><br><span class=\"line\">   [ &#123; constant: true,</span><br><span class=\"line\">       inputs: [],</span><br><span class=\"line\">       name: &#x27;sayHello&#x27;,</span><br><span class=\"line\">       outputs: [Array],</span><br><span class=\"line\">       payable: false,</span><br><span class=\"line\">       stateMutability: &#x27;view&#x27;,</span><br><span class=\"line\">       type: &#x27;function&#x27; &#125; ],</span><br><span class=\"line\">  contract: </span><br><span class=\"line\">   Contract &#123;</span><br><span class=\"line\">     _eth: </span><br><span class=\"line\">      Eth &#123;</span><br><span class=\"line\">        _requestManager: [RequestManager],</span><br><span class=\"line\">        getBalance: [Function],</span><br><span class=\"line\">        getStorageAt: [Function],</span><br><span class=\"line\">        getCode: [Function],</span><br><span class=\"line\">        getBlock: [Function],</span><br><span class=\"line\">        getUncle: [Function],</span><br><span class=\"line\">        getCompilers: [Function],</span><br><span class=\"line\">        getBlockTransactionCount: [Function],</span><br><span class=\"line\">        getBlockUncleCount: [Function],</span><br><span class=\"line\">        getTransaction: [Function],</span><br><span class=\"line\">        getTransactionFromBlock: [Function],</span><br><span class=\"line\">        getTransactionReceipt: [Function],</span><br><span class=\"line\">        getTransactionCount: [Function],</span><br><span class=\"line\">        call: [Function],</span><br><span class=\"line\">        estimateGas: [Function],</span><br><span class=\"line\">        sendRawTransaction: [Function],</span><br><span class=\"line\">        signTransaction: [Function],</span><br><span class=\"line\">        sendTransaction: [Function],</span><br><span class=\"line\">        sign: [Function],</span><br><span class=\"line\">        compile: [Object],</span><br><span class=\"line\">        submitWork: [Function],</span><br><span class=\"line\">        getWork: [Function],</span><br><span class=\"line\">        coinbase: [Getter],</span><br><span class=\"line\">        getCoinbase: [Function],</span><br><span class=\"line\">        mining: [Getter],</span><br><span class=\"line\">        getMining: [Function],</span><br><span class=\"line\">        hashrate: [Getter],</span><br><span class=\"line\">        getHashrate: [Function],</span><br><span class=\"line\">        syncing: [Getter],</span><br><span class=\"line\">        getSyncing: [Function],</span><br><span class=\"line\">        gasPrice: [Getter],</span><br><span class=\"line\">        getGasPrice: [Function],</span><br><span class=\"line\">        accounts: [Getter],</span><br><span class=\"line\">        getAccounts: [Function],</span><br><span class=\"line\">        blockNumber: [Getter],</span><br><span class=\"line\">        getBlockNumber: [Function],</span><br><span class=\"line\">        protocolVersion: [Getter],</span><br><span class=\"line\">        getProtocolVersion: [Function],</span><br><span class=\"line\">        iban: [Function],</span><br><span class=\"line\">        sendIBANTransaction: [Function: bound transfer] &#125;,</span><br><span class=\"line\">     transactionHash: null,</span><br><span class=\"line\">     address: &#x27;0x93ca4fd7d2820b2156fd88e40783ac9a41e26cfe&#x27;,</span><br><span class=\"line\">     abi: [ [Object] ],</span><br><span class=\"line\">     sayHello: </span><br><span class=\"line\">      &#123; [Function: bound ]</span><br><span class=\"line\">        request: [Function: bound ],</span><br><span class=\"line\">        call: [Function: bound ],</span><br><span class=\"line\">        sendTransaction: [Function: bound ],</span><br><span class=\"line\">        estimateGas: [Function: bound ],</span><br><span class=\"line\">        getData: [Function: bound ],</span><br><span class=\"line\">        &#x27;&#x27;: [Circular] &#125;,</span><br><span class=\"line\">     allEvents: [Function: bound ] &#125;,</span><br><span class=\"line\">  sayHello: </span><br><span class=\"line\">   &#123; [Function]</span><br><span class=\"line\">     call: [Function],</span><br><span class=\"line\">     sendTransaction: [Function],</span><br><span class=\"line\">     request: [Function: bound ],</span><br><span class=\"line\">     estimateGas: [Function] &#125;,</span><br><span class=\"line\">  sendTransaction: [Function],</span><br><span class=\"line\">  send: [Function],</span><br><span class=\"line\">  allEvents: [Function: bound ],</span><br><span class=\"line\">  address: &#x27;0x93ca4fd7d2820b2156fd88e40783ac9a41e26cfe&#x27;,</span><br><span class=\"line\">  transactionHash: null &#125;</span><br><span class=\"line\">truffle(development)&gt; contract.sayHello.call()</span><br><span class=\"line\">&#x27;Hello World&#x27;</span><br><span class=\"line\">truffle(development)&gt; </span><br></pre></td></tr></table></figure>\n\n<p><code>truffle console</code>中预载了<code>truffle-contract</code>函数库，以方便操作部署到区块链上的合约。使用了<code>HelloWorld.deployed().then</code>语句来取得<code>HelloWorld</code>合约的<code>Instance</code>(实例)，并存到<code>contract</code>变量中，以方便后续的调用。</p>\n<p>上面用的是<code>Javascript ES6+</code>的语法，这句也可以写成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">HelloWorld.deployed().then(instance =&gt; &#123;</span><br><span class=\"line\">    contract = instance</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>还可以用ES5的写法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">HelloWorld.deployed().then(function(instance) &#123;</span><br><span class=\"line\">    hello = instance;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">truffle(development)&gt; contract.sayHello.call()</span><br><span class=\"line\">&#x27;Hello World&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>最后通过<code>contract.sayHello.call()</code>成功打印出<code>&quot;Hello World&quot;</code>，这里直接调用<code>contract.sayHello()</code>也会得到一样的结果。<code>truffle-contract</code>提供使用<code>call()</code>来读取只读(read only)的数据，这样就不需提供<code>gas</code>。因此如果遇到的操作需要向区块链写入数据，我们就不能用<code>call</code>语句了。</p>\n<p>这样，我们的第一个智能合约就已经写好并部署好了，也验证了合约确实可以运行。</p>\n<h2 id=\"11-加入新方法\"><a href=\"#11-加入新方法\" class=\"headerlink\" title=\"11.加入新方法\"></a>11.加入新方法</h2><p>我们在<code>HelloWorld.sol</code>中再加入一个<code>echo</code>方法，<code>echo</code>方法接受一个参数，并回传传送的参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function echo(string name) constant returns (string) &#123;</span><br><span class=\"line\">    return name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新的<code>echo</code>方法中传入了一个<code>name</code>参数。我们也为<code>echo</code>方法加入一个<code>constant</code>声明，表示调用这个方法并不会改变区块链的状态。如此一来，透过<code>truffle-contract</code>来调用此方法时，会自动选用<code>call</code>来呼叫，也不需要额外提供<code>gas</code>。</p>\n<p>由于更新了合约内容，我们需要先重新编译一次，将编译结果部署到<code>testrpc</code>上，再通过<code>truffle console</code>执行查看结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ truffle migrate --reset</span><br><span class=\"line\">Compiling ./contracts/HelloWorld.sol...</span><br><span class=\"line\"></span><br><span class=\"line\">Compilation warnings encountered:</span><br><span class=\"line\"></span><br><span class=\"line\">/home/zihao/SmartContractDemo/HelloWorld/contracts/HelloWorld.sol:4:3: Warning: Function state mutability can be restricted to pure</span><br><span class=\"line\">  function sayHello() public constant returns (string) &#123;</span><br><span class=\"line\">  ^</span><br><span class=\"line\">Spanning multiple lines.</span><br><span class=\"line\">,/home/zihao/SmartContractDemo/HelloWorld/contracts/HelloWorld.sol:8:3: Warning: Function state mutability can be restricted to pure</span><br><span class=\"line\">  function echo(string name) public constant returns (string) &#123;</span><br><span class=\"line\">  ^</span><br><span class=\"line\">Spanning multiple lines.</span><br><span class=\"line\"></span><br><span class=\"line\">Writing artifacts to ./build/contracts</span><br><span class=\"line\"></span><br><span class=\"line\">Using network &#x27;development&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">Running migration: 1_initial_migration.js</span><br><span class=\"line\">  Replacing Migrations...</span><br><span class=\"line\">  ... 0xfc5af4b443dcae96f96206e26d2bc93b9699e7d14980dd0247baea112bd04c44</span><br><span class=\"line\">  Migrations: 0xee671e4bb1e86df24120041587b0a4841924f7bd</span><br><span class=\"line\">Saving successful migration to network...</span><br><span class=\"line\">  ... 0x1d7e34e903cc04a5e5cd6e5cca1031034841bd001dd693b488500fe75c4df9e2</span><br><span class=\"line\">Saving artifacts...</span><br><span class=\"line\">Running migration: 2_deploy_contracts.js</span><br><span class=\"line\">  Replacing HelloWorld...</span><br><span class=\"line\">  ... 0xdb8c8ef861498972ad769f947e9c03872b3f17f7292deff3fa25d5f5318ce94f</span><br><span class=\"line\">  HelloWorld: 0xace9ff211c9131362e05774335c6b3a353739119</span><br><span class=\"line\">Saving successful migration to network...</span><br><span class=\"line\">  ... 0x3a653f82abd0b92f389ea78ba654f51ff2256961f72b280874676cebac24f895</span><br><span class=\"line\">Saving artifacts...</span><br><span class=\"line\">zihao@zihaodeMBP:~/SmartContractDemo/HelloWorld$ truffle console</span><br><span class=\"line\">truffle(development)&gt; let contract</span><br><span class=\"line\">undefined</span><br><span class=\"line\">truffle(development)&gt; HelloWorld.deployed().then(instance =&gt; contract = instance)</span><br><span class=\"line\">TruffleContract &#123;</span><br><span class=\"line\">  constructor: </span><br><span class=\"line\">   &#123; [Function: TruffleContract]</span><br><span class=\"line\">     _static_methods: </span><br><span class=\"line\">      &#123; setProvider: [Function: setProvider],</span><br><span class=\"line\">        new: [Function: new],</span><br><span class=\"line\">        at: [Function: at],</span><br><span class=\"line\">        deployed: [Function: deployed],</span><br><span class=\"line\">        defaults: [Function: defaults],</span><br><span class=\"line\">        hasNetwork: [Function: hasNetwork],</span><br><span class=\"line\">        isDeployed: [Function: isDeployed],</span><br><span class=\"line\">        detectNetwork: [Function: detectNetwork],</span><br><span class=\"line\">        setNetwork: [Function: setNetwork],</span><br><span class=\"line\">        resetAddress: [Function: resetAddress],</span><br><span class=\"line\">        link: [Function: link],</span><br><span class=\"line\">        clone: [Function: clone],</span><br><span class=\"line\">        addProp: [Function: addProp],</span><br><span class=\"line\">        toJSON: [Function: toJSON] &#125;,</span><br><span class=\"line\">     _properties: </span><br><span class=\"line\">      &#123; contract_name: [Object],</span><br><span class=\"line\">        contractName: [Object],</span><br><span class=\"line\">        abi: [Object],</span><br><span class=\"line\">        network: [Function: network],</span><br><span class=\"line\">        networks: [Function: networks],</span><br><span class=\"line\">        address: [Object],</span><br><span class=\"line\">        links: [Function: links],</span><br><span class=\"line\">        events: [Function: events],</span><br><span class=\"line\">        binary: [Function: binary],</span><br><span class=\"line\">        deployedBinary: [Function: deployedBinary],</span><br><span class=\"line\">        unlinked_binary: [Object],</span><br><span class=\"line\">        bytecode: [Object],</span><br><span class=\"line\">        deployedBytecode: [Object],</span><br><span class=\"line\">        sourceMap: [Object],</span><br><span class=\"line\">        deployedSourceMap: [Object],</span><br><span class=\"line\">        source: [Object],</span><br><span class=\"line\">        sourcePath: [Object],</span><br><span class=\"line\">        ast: [Object],</span><br><span class=\"line\">        compiler: [Object],</span><br><span class=\"line\">        schema_version: [Function: schema_version],</span><br><span class=\"line\">        schemaVersion: [Function: schemaVersion],</span><br><span class=\"line\">        updated_at: [Function: updated_at],</span><br><span class=\"line\">        updatedAt: [Function: updatedAt] &#125;,</span><br><span class=\"line\">     _property_values: &#123;&#125;,</span><br><span class=\"line\">     _json: </span><br><span class=\"line\">      &#123; contractName: &#x27;HelloWorld&#x27;,</span><br><span class=\"line\">        abi: [Array],</span><br><span class=\"line\">        bytecode: &#x27;0x6060604052341561000f57600080fd5b6102488061001e6000396000f30060606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063ef5fb05b14610051578063f15da729146100df575b600080fd5b341561005c57600080fd5b6100646101b5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100a4578082015181840152602081019050610089565b50505050905090810190601f1680156100d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156100ea57600080fd5b61013a600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506101f8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017a57808201518184015260208101905061015f565b50505050905090810190601f1680156101a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101bd610208565b6040805190810160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250905090565b610200610208565b819050919050565b6020604051908101604052806000815250905600a165627a7a72305820ce2a412dd03391bea1a4d86dcaa57502a5d812ad4005a99570a2bb3b3ffd25ec0029&#x27;,</span><br><span class=\"line\">        deployedBytecode: &#x27;0x60606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063ef5fb05b14610051578063f15da729146100df575b600080fd5b341561005c57600080fd5b6100646101b5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100a4578082015181840152602081019050610089565b50505050905090810190601f1680156100d15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156100ea57600080fd5b61013a600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506101f8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017a57808201518184015260208101905061015f565b50505050905090810190601f1680156101a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101bd610208565b6040805190810160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250905090565b610200610208565b819050919050565b6020604051908101604052806000815250905600a165627a7a72305820ce2a412dd03391bea1a4d86dcaa57502a5d812ad4005a99570a2bb3b3ffd25ec0029&#x27;,</span><br><span class=\"line\">        sourceMap: &#x27;25:198:0:-;;;;;;;;;;;;;;;;;&#x27;,</span><br><span class=\"line\">        deployedSourceMap: &#x27;25:198:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;80:1;75:3;71;64:6;52:2;49:1;45:3;40:15;;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;139:82:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;80:1;75:3;71;64:6;52:2;49:1;45:3;40:15;;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:86:0;94:6;;:::i;:::-;108:22;;;;;;;;;;;;;;;;;;;;49:86;:::o;139:82::-;191:6;;:::i;:::-;212:4;205:11;;139:82;;;:::o;25:198::-;;;;;;;;;;;;;;;:::o&#x27;,</span><br><span class=\"line\">        source: &#x27;pragma solidity ^0.4.4;\\n\\ncontract HelloWorld &#123;\\n  function sayHello() public constant returns (string) &#123;\\n    return (&quot;Hello World&quot;);\\n  &#125;\\n\\n  function echo(string name) public constant returns (string) &#123;\\n    return name;\\n  &#125;\\n&#125;\\n&#x27;,</span><br><span class=\"line\">        sourcePath: &#x27;/home/zihao/SmartContractDemo/HelloWorld/contracts/HelloWorld.sol&#x27;,</span><br><span class=\"line\">        ast: [Object],</span><br><span class=\"line\">        compiler: [Object],</span><br><span class=\"line\">        networks: [Object],</span><br><span class=\"line\">        schemaVersion: &#x27;1.0.1&#x27;,</span><br><span class=\"line\">        updatedAt: &#x27;2018-01-10T13:34:12.869Z&#x27; &#125;,</span><br><span class=\"line\">     setProvider: [Function: bound setProvider],</span><br><span class=\"line\">     new: [Function: bound new],</span><br><span class=\"line\">     at: [Function: bound at],</span><br><span class=\"line\">     deployed: [Function: bound deployed],</span><br><span class=\"line\">     defaults: [Function: bound defaults],</span><br><span class=\"line\">     hasNetwork: [Function: bound hasNetwork],</span><br><span class=\"line\">     isDeployed: [Function: bound isDeployed],</span><br><span class=\"line\">     detectNetwork: [Function: bound detectNetwork],</span><br><span class=\"line\">     setNetwork: [Function: bound setNetwork],</span><br><span class=\"line\">     resetAddress: [Function: bound resetAddress],</span><br><span class=\"line\">     link: [Function: bound link],</span><br><span class=\"line\">     clone: [Function: bound clone],</span><br><span class=\"line\">     addProp: [Function: bound addProp],</span><br><span class=\"line\">     toJSON: [Function: bound toJSON],</span><br><span class=\"line\">     web3: </span><br><span class=\"line\">      Web3 &#123;</span><br><span class=\"line\">        _requestManager: [RequestManager],</span><br><span class=\"line\">        currentProvider: [Provider],</span><br><span class=\"line\">        eth: [Eth],</span><br><span class=\"line\">        db: [DB],</span><br><span class=\"line\">        shh: [Shh],</span><br><span class=\"line\">        net: [Net],</span><br><span class=\"line\">        personal: [Personal],</span><br><span class=\"line\">        bzz: [Swarm],</span><br><span class=\"line\">        settings: [Settings],</span><br><span class=\"line\">        version: [Object],</span><br><span class=\"line\">        providers: [Object],</span><br><span class=\"line\">        _extend: [Function] &#125;,</span><br><span class=\"line\">     class_defaults: </span><br><span class=\"line\">      &#123; from: &#x27;0x7e1897cec8e1a098384d17e85a9cd348ccb92b4a&#x27;,</span><br><span class=\"line\">        gas: 6721975,</span><br><span class=\"line\">        gasPrice: 100000000000 &#125;,</span><br><span class=\"line\">     currentProvider: </span><br><span class=\"line\">      HttpProvider &#123;</span><br><span class=\"line\">        host: &#x27;http://localhost:8545&#x27;,</span><br><span class=\"line\">        timeout: 0,</span><br><span class=\"line\">        user: undefined,</span><br><span class=\"line\">        password: undefined,</span><br><span class=\"line\">        send: [Function],</span><br><span class=\"line\">        sendAsync: [Function],</span><br><span class=\"line\">        _alreadyWrapped: true &#125;,</span><br><span class=\"line\">     network_id: &#x27;1515578597496&#x27; &#125;,</span><br><span class=\"line\">  abi: </span><br><span class=\"line\">   [ &#123; constant: true,</span><br><span class=\"line\">       inputs: [],</span><br><span class=\"line\">       name: &#x27;sayHello&#x27;,</span><br><span class=\"line\">       outputs: [Array],</span><br><span class=\"line\">       payable: false,</span><br><span class=\"line\">       stateMutability: &#x27;view&#x27;,</span><br><span class=\"line\">       type: &#x27;function&#x27; &#125;,</span><br><span class=\"line\">     &#123; constant: true,</span><br><span class=\"line\">       inputs: [Array],</span><br><span class=\"line\">       name: &#x27;echo&#x27;,</span><br><span class=\"line\">       outputs: [Array],</span><br><span class=\"line\">       payable: false,</span><br><span class=\"line\">       stateMutability: &#x27;view&#x27;,</span><br><span class=\"line\">       type: &#x27;function&#x27; &#125; ],</span><br><span class=\"line\">  contract: </span><br><span class=\"line\">   Contract &#123;</span><br><span class=\"line\">     _eth: </span><br><span class=\"line\">      Eth &#123;</span><br><span class=\"line\">        _requestManager: [RequestManager],</span><br><span class=\"line\">        getBalance: [Function],</span><br><span class=\"line\">        getStorageAt: [Function],</span><br><span class=\"line\">        getCode: [Function],</span><br><span class=\"line\">        getBlock: [Function],</span><br><span class=\"line\">        getUncle: [Function],</span><br><span class=\"line\">        getCompilers: [Function],</span><br><span class=\"line\">        getBlockTransactionCount: [Function],</span><br><span class=\"line\">        getBlockUncleCount: [Function],</span><br><span class=\"line\">        getTransaction: [Function],</span><br><span class=\"line\">        getTransactionFromBlock: [Function],</span><br><span class=\"line\">        getTransactionReceipt: [Function],</span><br><span class=\"line\">        getTransactionCount: [Function],</span><br><span class=\"line\">        call: [Function],</span><br><span class=\"line\">        estimateGas: [Function],</span><br><span class=\"line\">        sendRawTransaction: [Function],</span><br><span class=\"line\">        signTransaction: [Function],</span><br><span class=\"line\">        sendTransaction: [Function],</span><br><span class=\"line\">        sign: [Function],</span><br><span class=\"line\">        compile: [Object],</span><br><span class=\"line\">        submitWork: [Function],</span><br><span class=\"line\">        getWork: [Function],</span><br><span class=\"line\">        coinbase: [Getter],</span><br><span class=\"line\">        getCoinbase: [Function],</span><br><span class=\"line\">        mining: [Getter],</span><br><span class=\"line\">        getMining: [Function],</span><br><span class=\"line\">        hashrate: [Getter],</span><br><span class=\"line\">        getHashrate: [Function],</span><br><span class=\"line\">        syncing: [Getter],</span><br><span class=\"line\">        getSyncing: [Function],</span><br><span class=\"line\">        gasPrice: [Getter],</span><br><span class=\"line\">        getGasPrice: [Function],</span><br><span class=\"line\">        accounts: [Getter],</span><br><span class=\"line\">        getAccounts: [Function],</span><br><span class=\"line\">        blockNumber: [Getter],</span><br><span class=\"line\">        getBlockNumber: [Function],</span><br><span class=\"line\">        protocolVersion: [Getter],</span><br><span class=\"line\">        getProtocolVersion: [Function],</span><br><span class=\"line\">        iban: [Function],</span><br><span class=\"line\">        sendIBANTransaction: [Function: bound transfer] &#125;,</span><br><span class=\"line\">     transactionHash: null,</span><br><span class=\"line\">     address: &#x27;0xace9ff211c9131362e05774335c6b3a353739119&#x27;,</span><br><span class=\"line\">     abi: [ [Object], [Object] ],</span><br><span class=\"line\">     sayHello: </span><br><span class=\"line\">      &#123; [Function: bound ]</span><br><span class=\"line\">        request: [Function: bound ],</span><br><span class=\"line\">        call: [Function: bound ],</span><br><span class=\"line\">        sendTransaction: [Function: bound ],</span><br><span class=\"line\">        estimateGas: [Function: bound ],</span><br><span class=\"line\">        getData: [Function: bound ],</span><br><span class=\"line\">        &#x27;&#x27;: [Circular] &#125;,</span><br><span class=\"line\">     echo: </span><br><span class=\"line\">      &#123; [Function: bound ]</span><br><span class=\"line\">        request: [Function: bound ],</span><br><span class=\"line\">        call: [Function: bound ],</span><br><span class=\"line\">        sendTransaction: [Function: bound ],</span><br><span class=\"line\">        estimateGas: [Function: bound ],</span><br><span class=\"line\">        getData: [Function: bound ],</span><br><span class=\"line\">        string: [Circular] &#125;,</span><br><span class=\"line\">     allEvents: [Function: bound ] &#125;,</span><br><span class=\"line\">  sayHello: </span><br><span class=\"line\">   &#123; [Function]</span><br><span class=\"line\">     call: [Function],</span><br><span class=\"line\">     sendTransaction: [Function],</span><br><span class=\"line\">     request: [Function: bound ],</span><br><span class=\"line\">     estimateGas: [Function] &#125;,</span><br><span class=\"line\">  echo: </span><br><span class=\"line\">   &#123; [Function]</span><br><span class=\"line\">     call: [Function],</span><br><span class=\"line\">     sendTransaction: [Function],</span><br><span class=\"line\">     request: [Function: bound ],</span><br><span class=\"line\">     estimateGas: [Function] &#125;,</span><br><span class=\"line\">  sendTransaction: [Function],</span><br><span class=\"line\">  send: [Function],</span><br><span class=\"line\">  allEvents: [Function: bound ],</span><br><span class=\"line\">  address: &#x27;0xace9ff211c9131362e05774335c6b3a353739119&#x27;,</span><br><span class=\"line\">  transactionHash: null &#125;</span><br><span class=\"line\">truffle(development)&gt; contract.echo(&quot;2018-1-10 blockchain&quot;)</span><br><span class=\"line\">&#x27;2018-1-10 blockchain&#x27;</span><br><span class=\"line\">truffle(development)&gt; </span><br></pre></td></tr></table></figure>\n\n<p><code>echo</code>方法确实将我们输入的内容回传了。同时因为声明了<code>constant</code>，我们不需要直接调用<code>call()</code>方法，<code>truffle</code>会自动选用<code>call</code>来调用。</p>\n<p>另外需要注意，如果我们还是使用<code>truffle migrate</code>命令，会得到如下信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ truffle migrate</span><br><span class=\"line\">Using network &#x27;development&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">Network up to date.</span><br></pre></td></tr></table></figure>\n\n<p><code>Truffle</code>会告诉你现在网络上的合约都已经是最新的，但事实上刚刚程序中新增的方法并没有更新到内存块链上。要更新内存块链上已部署的程序，需要改写<code>migrations</code>中的脚本，但现在还不到介绍<code>migration</code>的时候。还好我们开发用的内存块链是怎么修改都没关系的<code>testrpc</code>，可以使用<code>truffle migrate --reset</code>命令直接在<code>testrpc</code>上部署一次。</p>\n","categories":["BlockChain"],"tags":["区块链","eth"]},{"title":"朗文定义词汇","url":"/longman_defines_vocabulary/","content":"<p>朗文词典采用2000个常见词汇解释所有词条。学习英语所需的最少且必要词汇量。</p>\n<span id=\"more\"></span>\n\n<table>\n<thead>\n<tr>\n<th>单词</th>\n<th>中文</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>一</td>\n</tr>\n<tr>\n<td>ability</td>\n<td>能力</td>\n</tr>\n<tr>\n<td>about</td>\n<td>关于</td>\n</tr>\n<tr>\n<td>above</td>\n<td>在上面</td>\n</tr>\n<tr>\n<td>abroad</td>\n<td>国外</td>\n</tr>\n<tr>\n<td>absence</td>\n<td>缺席</td>\n</tr>\n<tr>\n<td>absent</td>\n<td>缺席的</td>\n</tr>\n<tr>\n<td>accept</td>\n<td>接受</td>\n</tr>\n<tr>\n<td>acceptable</td>\n<td>可接受的</td>\n</tr>\n<tr>\n<td>accident</td>\n<td>意外</td>\n</tr>\n<tr>\n<td>accordance</td>\n<td>一致</td>\n</tr>\n<tr>\n<td>according</td>\n<td>根据</td>\n</tr>\n<tr>\n<td>according to</td>\n<td>根据</td>\n</tr>\n<tr>\n<td>account</td>\n<td>解释</td>\n</tr>\n<tr>\n<td>ache</td>\n<td>疼痛</td>\n</tr>\n<tr>\n<td>acid</td>\n<td>酸的</td>\n</tr>\n<tr>\n<td>across</td>\n<td>穿过</td>\n</tr>\n<tr>\n<td>act</td>\n<td>行为</td>\n</tr>\n<tr>\n<td>action</td>\n<td>行动</td>\n</tr>\n<tr>\n<td>active</td>\n<td>积极的</td>\n</tr>\n<tr>\n<td>activity</td>\n<td>活动</td>\n</tr>\n<tr>\n<td>actor</td>\n<td>演员</td>\n</tr>\n<tr>\n<td>actress</td>\n<td>女演员</td>\n</tr>\n<tr>\n<td>actual</td>\n<td>实际的</td>\n</tr>\n<tr>\n<td>add</td>\n<td>添加</td>\n</tr>\n<tr>\n<td>addition</td>\n<td>附加</td>\n</tr>\n<tr>\n<td>address</td>\n<td>地址</td>\n</tr>\n<tr>\n<td>adjective</td>\n<td>形容词</td>\n</tr>\n<tr>\n<td>admiration</td>\n<td>钦佩</td>\n</tr>\n<tr>\n<td>admire</td>\n<td>钦佩</td>\n</tr>\n<tr>\n<td>admit</td>\n<td>承认</td>\n</tr>\n<tr>\n<td>admittance</td>\n<td>导纳</td>\n</tr>\n<tr>\n<td>adult</td>\n<td>成人</td>\n</tr>\n<tr>\n<td>advance</td>\n<td>提前</td>\n</tr>\n<tr>\n<td>advantage</td>\n<td>优势</td>\n</tr>\n<tr>\n<td>adventure</td>\n<td>冒险</td>\n</tr>\n<tr>\n<td>adverb</td>\n<td>副词</td>\n</tr>\n<tr>\n<td>advertise</td>\n<td>广告</td>\n</tr>\n<tr>\n<td>advertisement</td>\n<td>广告</td>\n</tr>\n<tr>\n<td>advice</td>\n<td>建议</td>\n</tr>\n<tr>\n<td>advise</td>\n<td>建议</td>\n</tr>\n<tr>\n<td>affair</td>\n<td>事件</td>\n</tr>\n<tr>\n<td>afford</td>\n<td>负担得起</td>\n</tr>\n<tr>\n<td>afraid</td>\n<td>害怕的</td>\n</tr>\n<tr>\n<td>after</td>\n<td>之后</td>\n</tr>\n<tr>\n<td>afternoon</td>\n<td>下午</td>\n</tr>\n<tr>\n<td>afterwards</td>\n<td>之后</td>\n</tr>\n<tr>\n<td>again</td>\n<td>再一次</td>\n</tr>\n<tr>\n<td>against</td>\n<td>反对</td>\n</tr>\n<tr>\n<td>age</td>\n<td>年龄</td>\n</tr>\n<tr>\n<td>ago</td>\n<td>以前</td>\n</tr>\n<tr>\n<td>agree</td>\n<td>同意</td>\n</tr>\n<tr>\n<td>agreement</td>\n<td>协议</td>\n</tr>\n<tr>\n<td>ahead</td>\n<td>向前地</td>\n</tr>\n<tr>\n<td>aim</td>\n<td>目标</td>\n</tr>\n<tr>\n<td>air</td>\n<td>空气</td>\n</tr>\n<tr>\n<td>aircraft</td>\n<td>飞机</td>\n</tr>\n<tr>\n<td>airforce</td>\n<td>空军</td>\n</tr>\n<tr>\n<td>airport</td>\n<td>机场</td>\n</tr>\n<tr>\n<td>alcohol</td>\n<td>酒精</td>\n</tr>\n<tr>\n<td>alike</td>\n<td>同样地</td>\n</tr>\n<tr>\n<td>alive</td>\n<td>活着的</td>\n</tr>\n<tr>\n<td>all</td>\n<td>全部的</td>\n</tr>\n<tr>\n<td>allow</td>\n<td>允许</td>\n</tr>\n<tr>\n<td>almost</td>\n<td>几乎</td>\n</tr>\n<tr>\n<td>alone</td>\n<td>单独地</td>\n</tr>\n<tr>\n<td>along</td>\n<td>沿着</td>\n</tr>\n<tr>\n<td>aloud</td>\n<td>大声地</td>\n</tr>\n<tr>\n<td>alphabet</td>\n<td>字母表</td>\n</tr>\n<tr>\n<td>already</td>\n<td>已经</td>\n</tr>\n<tr>\n<td>also</td>\n<td>也</td>\n</tr>\n<tr>\n<td>although</td>\n<td>虽然</td>\n</tr>\n<tr>\n<td>altogether</td>\n<td>总共</td>\n</tr>\n<tr>\n<td>always</td>\n<td>总是</td>\n</tr>\n<tr>\n<td>among</td>\n<td>在…之间</td>\n</tr>\n<tr>\n<td>amount</td>\n<td>数量</td>\n</tr>\n<tr>\n<td>amuse</td>\n<td>娱乐</td>\n</tr>\n<tr>\n<td>amusement</td>\n<td>娱乐</td>\n</tr>\n<tr>\n<td>amusing</td>\n<td>有趣的</td>\n</tr>\n<tr>\n<td>an</td>\n<td>安</td>\n</tr>\n<tr>\n<td>ancient</td>\n<td>古代的</td>\n</tr>\n<tr>\n<td>and</td>\n<td>和</td>\n</tr>\n<tr>\n<td>anger</td>\n<td>愤怒</td>\n</tr>\n<tr>\n<td>angle</td>\n<td>角</td>\n</tr>\n<tr>\n<td>angry</td>\n<td>愤怒的</td>\n</tr>\n<tr>\n<td>animal</td>\n<td>动物</td>\n</tr>\n<tr>\n<td>ankle</td>\n<td>踝关节</td>\n</tr>\n<tr>\n<td>annoy</td>\n<td>惹恼</td>\n</tr>\n<tr>\n<td>annoyance</td>\n<td>烦恼</td>\n</tr>\n<tr>\n<td>another</td>\n<td>另一个</td>\n</tr>\n<tr>\n<td>answer</td>\n<td>回答</td>\n</tr>\n<tr>\n<td>ant</td>\n<td>蚂蚁</td>\n</tr>\n<tr>\n<td>anxiety</td>\n<td>焦虑</td>\n</tr>\n<tr>\n<td>anxious</td>\n<td>焦虑的</td>\n</tr>\n<tr>\n<td>any</td>\n<td>任何</td>\n</tr>\n<tr>\n<td>anyhow</td>\n<td>无论如何</td>\n</tr>\n<tr>\n<td>anyone</td>\n<td>任何人</td>\n</tr>\n<tr>\n<td>anything</td>\n<td>任何东西</td>\n</tr>\n<tr>\n<td>anywhere</td>\n<td>在任何地方</td>\n</tr>\n<tr>\n<td>apart</td>\n<td>分开地</td>\n</tr>\n<tr>\n<td>apparatus</td>\n<td>装置</td>\n</tr>\n<tr>\n<td>appear</td>\n<td>出现</td>\n</tr>\n<tr>\n<td>appearance</td>\n<td>外观</td>\n</tr>\n<tr>\n<td>apple</td>\n<td>苹果</td>\n</tr>\n<tr>\n<td>appoint</td>\n<td>任命</td>\n</tr>\n<tr>\n<td>approval</td>\n<td>批准</td>\n</tr>\n<tr>\n<td>approve</td>\n<td>批准</td>\n</tr>\n<tr>\n<td>arch</td>\n<td>拱门</td>\n</tr>\n<tr>\n<td>area</td>\n<td>地区</td>\n</tr>\n<tr>\n<td>argue</td>\n<td>争论</td>\n</tr>\n<tr>\n<td>argument</td>\n<td>论点</td>\n</tr>\n<tr>\n<td>arm</td>\n<td>臂</td>\n</tr>\n<tr>\n<td>armor</td>\n<td>装甲</td>\n</tr>\n<tr>\n<td>arms</td>\n<td>手臂</td>\n</tr>\n<tr>\n<td>army</td>\n<td>军队</td>\n</tr>\n<tr>\n<td>around</td>\n<td>围绕</td>\n</tr>\n<tr>\n<td>arrange</td>\n<td>安排</td>\n</tr>\n<tr>\n<td>arrangement</td>\n<td>安排</td>\n</tr>\n<tr>\n<td>arrival</td>\n<td>到达</td>\n</tr>\n<tr>\n<td>arrive</td>\n<td>到达</td>\n</tr>\n<tr>\n<td>art</td>\n<td>艺术</td>\n</tr>\n<tr>\n<td>article</td>\n<td>文章</td>\n</tr>\n<tr>\n<td>artificial</td>\n<td>人造的</td>\n</tr>\n<tr>\n<td>as</td>\n<td>作为</td>\n</tr>\n<tr>\n<td>ash</td>\n<td>灰</td>\n</tr>\n<tr>\n<td>ashamed</td>\n<td>惭愧的</td>\n</tr>\n<tr>\n<td>aside</td>\n<td>在一边</td>\n</tr>\n<tr>\n<td>ask</td>\n<td>问</td>\n</tr>\n<tr>\n<td>asleep</td>\n<td>睡着的</td>\n</tr>\n<tr>\n<td>association</td>\n<td>协会</td>\n</tr>\n<tr>\n<td>at</td>\n<td>在</td>\n</tr>\n<tr>\n<td>atom</td>\n<td>原子</td>\n</tr>\n<tr>\n<td>attack</td>\n<td>攻击</td>\n</tr>\n<tr>\n<td>attempt</td>\n<td>尝试</td>\n</tr>\n<tr>\n<td>attend</td>\n<td>出席</td>\n</tr>\n<tr>\n<td>attendance</td>\n<td>出席</td>\n</tr>\n<tr>\n<td>attention</td>\n<td>注意</td>\n</tr>\n<tr>\n<td>attract</td>\n<td>吸引</td>\n</tr>\n<tr>\n<td>attractive</td>\n<td>有吸引力的</td>\n</tr>\n<tr>\n<td>aunt</td>\n<td>阿姨</td>\n</tr>\n<tr>\n<td>autumn</td>\n<td>秋天</td>\n</tr>\n<tr>\n<td>average</td>\n<td>平均的</td>\n</tr>\n<tr>\n<td>avoid</td>\n<td>避免</td>\n</tr>\n<tr>\n<td>awake</td>\n<td>唤醒</td>\n</tr>\n<tr>\n<td>away</td>\n<td>离开</td>\n</tr>\n<tr>\n<td>awkward</td>\n<td>令人尴尬的</td>\n</tr>\n<tr>\n<td>baby</td>\n<td>宝贝</td>\n</tr>\n<tr>\n<td>back</td>\n<td>后面</td>\n</tr>\n<tr>\n<td>background</td>\n<td>背景</td>\n</tr>\n<tr>\n<td>backward</td>\n<td>向后的</td>\n</tr>\n<tr>\n<td>backwards</td>\n<td>向后的</td>\n</tr>\n<tr>\n<td>bacteria</td>\n<td>细菌</td>\n</tr>\n<tr>\n<td>bad</td>\n<td>坏的</td>\n</tr>\n<tr>\n<td>bag</td>\n<td>袋</td>\n</tr>\n<tr>\n<td>bake</td>\n<td>烤</td>\n</tr>\n<tr>\n<td>balance</td>\n<td>平衡</td>\n</tr>\n<tr>\n<td>ball</td>\n<td>球</td>\n</tr>\n<tr>\n<td>banana</td>\n<td>香蕉</td>\n</tr>\n<tr>\n<td>band</td>\n<td>乐队</td>\n</tr>\n<tr>\n<td>bank</td>\n<td>银行</td>\n</tr>\n<tr>\n<td>bar</td>\n<td>酒吧</td>\n</tr>\n<tr>\n<td>bare</td>\n<td>光秃秃的</td>\n</tr>\n<tr>\n<td>barrel</td>\n<td>桶</td>\n</tr>\n<tr>\n<td>base</td>\n<td>基础</td>\n</tr>\n<tr>\n<td>basket</td>\n<td>篮子</td>\n</tr>\n<tr>\n<td>bath</td>\n<td>洗澡</td>\n</tr>\n<tr>\n<td>bathe</td>\n<td>洗澡</td>\n</tr>\n<tr>\n<td>battle</td>\n<td>战争</td>\n</tr>\n<tr>\n<td>be</td>\n<td>是</td>\n</tr>\n<tr>\n<td>beak</td>\n<td>喙</td>\n</tr>\n<tr>\n<td>beam</td>\n<td>梁</td>\n</tr>\n<tr>\n<td>bean</td>\n<td>豆</td>\n</tr>\n<tr>\n<td>bear</td>\n<td>熊</td>\n</tr>\n<tr>\n<td>beard</td>\n<td>胡须</td>\n</tr>\n<tr>\n<td>beat</td>\n<td>击败</td>\n</tr>\n<tr>\n<td>beautiful</td>\n<td>美丽的</td>\n</tr>\n<tr>\n<td>beauty</td>\n<td>美女</td>\n</tr>\n<tr>\n<td>because</td>\n<td>因为</td>\n</tr>\n<tr>\n<td>become</td>\n<td>成为</td>\n</tr>\n<tr>\n<td>bed</td>\n<td>床</td>\n</tr>\n<tr>\n<td>bee</td>\n<td>蜜蜂</td>\n</tr>\n<tr>\n<td>beer</td>\n<td>啤酒</td>\n</tr>\n<tr>\n<td>before</td>\n<td>之前</td>\n</tr>\n<tr>\n<td>beg</td>\n<td>乞求</td>\n</tr>\n<tr>\n<td>begin</td>\n<td>开始</td>\n</tr>\n<tr>\n<td>beginning</td>\n<td>开始</td>\n</tr>\n<tr>\n<td>behave</td>\n<td>表现</td>\n</tr>\n<tr>\n<td>behavior</td>\n<td>行为</td>\n</tr>\n<tr>\n<td>behind</td>\n<td>后面</td>\n</tr>\n<tr>\n<td>belief</td>\n<td>信仰</td>\n</tr>\n<tr>\n<td>believe</td>\n<td>相信</td>\n</tr>\n<tr>\n<td>bell</td>\n<td>钟</td>\n</tr>\n<tr>\n<td>belong</td>\n<td>属于</td>\n</tr>\n<tr>\n<td>below</td>\n<td>在下面</td>\n</tr>\n<tr>\n<td>belt</td>\n<td>带</td>\n</tr>\n<tr>\n<td>bend</td>\n<td>弯曲</td>\n</tr>\n<tr>\n<td>beneath</td>\n<td>在下方</td>\n</tr>\n<tr>\n<td>berry</td>\n<td>浆果</td>\n</tr>\n<tr>\n<td>beside</td>\n<td>在旁边</td>\n</tr>\n<tr>\n<td>besides</td>\n<td>此外</td>\n</tr>\n<tr>\n<td>best</td>\n<td>最好的</td>\n</tr>\n<tr>\n<td>better</td>\n<td>更好的</td>\n</tr>\n<tr>\n<td>between</td>\n<td>之间</td>\n</tr>\n<tr>\n<td>beyond</td>\n<td>超过</td>\n</tr>\n<tr>\n<td>bicycle</td>\n<td>自行车</td>\n</tr>\n<tr>\n<td>big</td>\n<td>大的</td>\n</tr>\n<tr>\n<td>bill</td>\n<td>账单</td>\n</tr>\n<tr>\n<td>bind</td>\n<td>绑定</td>\n</tr>\n<tr>\n<td>bird</td>\n<td>鸟</td>\n</tr>\n<tr>\n<td>birth</td>\n<td>出生</td>\n</tr>\n<tr>\n<td>birthday</td>\n<td>生日</td>\n</tr>\n<tr>\n<td>bit</td>\n<td>一点</td>\n</tr>\n<tr>\n<td>bite</td>\n<td>咬</td>\n</tr>\n<tr>\n<td>bitter</td>\n<td>苦的</td>\n</tr>\n<tr>\n<td>black</td>\n<td>黑色</td>\n</tr>\n<tr>\n<td>blade</td>\n<td>刀片</td>\n</tr>\n<tr>\n<td>blame</td>\n<td>责备</td>\n</tr>\n<tr>\n<td>bleed</td>\n<td>流血</td>\n</tr>\n<tr>\n<td>bless</td>\n<td>祝福</td>\n</tr>\n<tr>\n<td>blind</td>\n<td>失明的</td>\n</tr>\n<tr>\n<td>block</td>\n<td>块</td>\n</tr>\n<tr>\n<td>blood</td>\n<td>血</td>\n</tr>\n<tr>\n<td>blow</td>\n<td>吹</td>\n</tr>\n<tr>\n<td>blue</td>\n<td>蓝色</td>\n</tr>\n<tr>\n<td>board</td>\n<td>板</td>\n</tr>\n<tr>\n<td>boat</td>\n<td>船</td>\n</tr>\n<tr>\n<td>body</td>\n<td>身体</td>\n</tr>\n<tr>\n<td>boil</td>\n<td>煮</td>\n</tr>\n<tr>\n<td>bomb</td>\n<td>炸弹</td>\n</tr>\n<tr>\n<td>bone</td>\n<td>骨</td>\n</tr>\n<tr>\n<td>book</td>\n<td>书</td>\n</tr>\n<tr>\n<td>boot</td>\n<td>靴子</td>\n</tr>\n<tr>\n<td>border</td>\n<td>边境</td>\n</tr>\n<tr>\n<td>born</td>\n<td>出生</td>\n</tr>\n<tr>\n<td>borrow</td>\n<td>借</td>\n</tr>\n<tr>\n<td>both</td>\n<td>二者都</td>\n</tr>\n<tr>\n<td>bottle</td>\n<td>瓶子</td>\n</tr>\n<tr>\n<td>bottom</td>\n<td>底部</td>\n</tr>\n<tr>\n<td>bowels</td>\n<td>大便</td>\n</tr>\n<tr>\n<td>bowl</td>\n<td>碗</td>\n</tr>\n<tr>\n<td>box</td>\n<td>箱</td>\n</tr>\n<tr>\n<td>boy</td>\n<td>男孩</td>\n</tr>\n<tr>\n<td>brain</td>\n<td>脑</td>\n</tr>\n<tr>\n<td>branch</td>\n<td>分支</td>\n</tr>\n<tr>\n<td>brass</td>\n<td>黄铜</td>\n</tr>\n<tr>\n<td>brave</td>\n<td>勇敢的</td>\n</tr>\n<tr>\n<td>bread</td>\n<td>面包</td>\n</tr>\n<tr>\n<td>breadth</td>\n<td>宽度</td>\n</tr>\n<tr>\n<td>break</td>\n<td>打破</td>\n</tr>\n<tr>\n<td>breakfast</td>\n<td>早餐</td>\n</tr>\n<tr>\n<td>breast</td>\n<td>乳房</td>\n</tr>\n<tr>\n<td>breath</td>\n<td>呼吸</td>\n</tr>\n<tr>\n<td>breathe</td>\n<td>呼吸</td>\n</tr>\n<tr>\n<td>breed</td>\n<td>繁殖</td>\n</tr>\n<tr>\n<td>brick</td>\n<td>砖</td>\n</tr>\n<tr>\n<td>bridge</td>\n<td>桥</td>\n</tr>\n<tr>\n<td>bright</td>\n<td>明亮的</td>\n</tr>\n<tr>\n<td>bring</td>\n<td>带来</td>\n</tr>\n<tr>\n<td>broad</td>\n<td>宽阔的</td>\n</tr>\n<tr>\n<td>broadcast</td>\n<td>广播</td>\n</tr>\n<tr>\n<td>brother</td>\n<td>兄弟</td>\n</tr>\n<tr>\n<td>brown</td>\n<td>棕色的</td>\n</tr>\n<tr>\n<td>brush</td>\n<td>刷</td>\n</tr>\n<tr>\n<td>bucket</td>\n<td>水桶</td>\n</tr>\n<tr>\n<td>build</td>\n<td>建造</td>\n</tr>\n<tr>\n<td>building</td>\n<td>建筑</td>\n</tr>\n<tr>\n<td>bullet</td>\n<td>子弹</td>\n</tr>\n<tr>\n<td>bunch</td>\n<td>束</td>\n</tr>\n<tr>\n<td>burial</td>\n<td>埋葬</td>\n</tr>\n<tr>\n<td>burn</td>\n<td>燃烧</td>\n</tr>\n<tr>\n<td>burst</td>\n<td>爆发</td>\n</tr>\n<tr>\n<td>bury</td>\n<td>埋葬</td>\n</tr>\n<tr>\n<td>bus</td>\n<td>公共汽车</td>\n</tr>\n<tr>\n<td>bush</td>\n<td>灌木</td>\n</tr>\n<tr>\n<td>business</td>\n<td>商业</td>\n</tr>\n<tr>\n<td>busy</td>\n<td>忙碌的</td>\n</tr>\n<tr>\n<td>but</td>\n<td>但是</td>\n</tr>\n<tr>\n<td>butter</td>\n<td>黄油</td>\n</tr>\n<tr>\n<td>button</td>\n<td>按钮</td>\n</tr>\n<tr>\n<td>buy</td>\n<td>购买</td>\n</tr>\n<tr>\n<td>by</td>\n<td>通过</td>\n</tr>\n<tr>\n<td>cage</td>\n<td>笼子</td>\n</tr>\n<tr>\n<td>cake</td>\n<td>蛋糕</td>\n</tr>\n<tr>\n<td>calculate</td>\n<td>计算</td>\n</tr>\n<tr>\n<td>calculator</td>\n<td>计算器</td>\n</tr>\n<tr>\n<td>call</td>\n<td>呼叫</td>\n</tr>\n<tr>\n<td>calm</td>\n<td>平静的</td>\n</tr>\n<tr>\n<td>camera</td>\n<td>照相机</td>\n</tr>\n<tr>\n<td>camp</td>\n<td>营地</td>\n</tr>\n<tr>\n<td>can</td>\n<td>可以</td>\n</tr>\n<tr>\n<td>candle</td>\n<td>蜡烛</td>\n</tr>\n<tr>\n<td>cap</td>\n<td>帽子</td>\n</tr>\n<tr>\n<td>capital</td>\n<td>资本</td>\n</tr>\n<tr>\n<td>captain</td>\n<td>船长</td>\n</tr>\n<tr>\n<td>car</td>\n<td>汽车</td>\n</tr>\n<tr>\n<td>card</td>\n<td>卡片</td>\n</tr>\n<tr>\n<td>cardboard</td>\n<td>硬纸板</td>\n</tr>\n<tr>\n<td>care</td>\n<td>照顾</td>\n</tr>\n<tr>\n<td>careful</td>\n<td>仔细的</td>\n</tr>\n<tr>\n<td>careless</td>\n<td>粗心的</td>\n</tr>\n<tr>\n<td>carriage</td>\n<td>马车</td>\n</tr>\n<tr>\n<td>carry</td>\n<td>携带</td>\n</tr>\n<tr>\n<td>cart</td>\n<td>运货马车</td>\n</tr>\n<tr>\n<td>case</td>\n<td>案例</td>\n</tr>\n<tr>\n<td>castle</td>\n<td>城堡</td>\n</tr>\n<tr>\n<td>cat</td>\n<td>猫</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>抓住</td>\n</tr>\n<tr>\n<td>cattle</td>\n<td>牛</td>\n</tr>\n<tr>\n<td>cause</td>\n<td>原因</td>\n</tr>\n<tr>\n<td>cell</td>\n<td>细胞</td>\n</tr>\n<tr>\n<td>cement</td>\n<td>水泥</td>\n</tr>\n<tr>\n<td>cent</td>\n<td>分</td>\n</tr>\n<tr>\n<td>center</td>\n<td>中心</td>\n</tr>\n<tr>\n<td>centimeter</td>\n<td>厘米</td>\n</tr>\n<tr>\n<td>central</td>\n<td>中心的</td>\n</tr>\n<tr>\n<td>century</td>\n<td>世纪</td>\n</tr>\n<tr>\n<td>ceremony</td>\n<td>仪式</td>\n</tr>\n<tr>\n<td>certain</td>\n<td>某些</td>\n</tr>\n<tr>\n<td>chain</td>\n<td>链</td>\n</tr>\n<tr>\n<td>chair</td>\n<td>椅子</td>\n</tr>\n<tr>\n<td>chairperson</td>\n<td>主席</td>\n</tr>\n<tr>\n<td>chalk</td>\n<td>粉笔</td>\n</tr>\n<tr>\n<td>chance</td>\n<td>机会</td>\n</tr>\n<tr>\n<td>change</td>\n<td>改变</td>\n</tr>\n<tr>\n<td>character</td>\n<td>性格</td>\n</tr>\n<tr>\n<td>charge</td>\n<td>指控</td>\n</tr>\n<tr>\n<td>charm</td>\n<td>魅力</td>\n</tr>\n<tr>\n<td>chase</td>\n<td>追逐</td>\n</tr>\n<tr>\n<td>cheap</td>\n<td>便宜的</td>\n</tr>\n<tr>\n<td>cheat</td>\n<td>欺骗</td>\n</tr>\n<tr>\n<td>check</td>\n<td>支票</td>\n</tr>\n<tr>\n<td>cheek</td>\n<td>脸颊</td>\n</tr>\n<tr>\n<td>cheer</td>\n<td>欢呼</td>\n</tr>\n<tr>\n<td>cheerful</td>\n<td>令人愉快的</td>\n</tr>\n<tr>\n<td>cheese</td>\n<td>奶酪</td>\n</tr>\n<tr>\n<td>chemical</td>\n<td>化学的</td>\n</tr>\n<tr>\n<td>chemistry</td>\n<td>化学</td>\n</tr>\n<tr>\n<td>chest</td>\n<td>胸部</td>\n</tr>\n<tr>\n<td>chicken</td>\n<td>鸡</td>\n</tr>\n<tr>\n<td>chief</td>\n<td>首领</td>\n</tr>\n<tr>\n<td>child</td>\n<td>小孩</td>\n</tr>\n<tr>\n<td>childhood</td>\n<td>童年</td>\n</tr>\n<tr>\n<td>children</td>\n<td>儿童</td>\n</tr>\n<tr>\n<td>chimney</td>\n<td>烟囱</td>\n</tr>\n<tr>\n<td>chin</td>\n<td>下巴</td>\n</tr>\n<tr>\n<td>chocolate</td>\n<td>巧克力</td>\n</tr>\n<tr>\n<td>choice</td>\n<td>选择</td>\n</tr>\n<tr>\n<td>choose</td>\n<td>选择</td>\n</tr>\n<tr>\n<td>church</td>\n<td>教堂</td>\n</tr>\n<tr>\n<td>cigarette</td>\n<td>香烟</td>\n</tr>\n<tr>\n<td>cinema</td>\n<td>电影院</td>\n</tr>\n<tr>\n<td>circle</td>\n<td>圆圈</td>\n</tr>\n<tr>\n<td>circular</td>\n<td>圆形的</td>\n</tr>\n<tr>\n<td>citizen</td>\n<td>公民</td>\n</tr>\n<tr>\n<td>city</td>\n<td>城市</td>\n</tr>\n<tr>\n<td>civilization</td>\n<td>文明</td>\n</tr>\n<tr>\n<td>claim</td>\n<td>声称</td>\n</tr>\n<tr>\n<td>class</td>\n<td>班</td>\n</tr>\n<tr>\n<td>clay</td>\n<td>黏土</td>\n</tr>\n<tr>\n<td>clean</td>\n<td>清洁的</td>\n</tr>\n<tr>\n<td>clear</td>\n<td>清楚的</td>\n</tr>\n<tr>\n<td>clerk</td>\n<td>店员</td>\n</tr>\n<tr>\n<td>clever</td>\n<td>聪明的</td>\n</tr>\n<tr>\n<td>cliff</td>\n<td>悬崖</td>\n</tr>\n<tr>\n<td>climb</td>\n<td>攀登</td>\n</tr>\n<tr>\n<td>clock</td>\n<td>时钟</td>\n</tr>\n<tr>\n<td>clockwork</td>\n<td>发条</td>\n</tr>\n<tr>\n<td>close</td>\n<td>关闭</td>\n</tr>\n<tr>\n<td>cloth</td>\n<td>布</td>\n</tr>\n<tr>\n<td>clothes</td>\n<td>衣服</td>\n</tr>\n<tr>\n<td>clothing</td>\n<td>服装</td>\n</tr>\n<tr>\n<td>cloud</td>\n<td>云</td>\n</tr>\n<tr>\n<td>club</td>\n<td>俱乐部</td>\n</tr>\n<tr>\n<td>coal</td>\n<td>煤</td>\n</tr>\n<tr>\n<td>coast</td>\n<td>海岸</td>\n</tr>\n<tr>\n<td>coat</td>\n<td>外套</td>\n</tr>\n<tr>\n<td>coffee</td>\n<td>咖啡</td>\n</tr>\n<tr>\n<td>coin</td>\n<td>硬币</td>\n</tr>\n<tr>\n<td>cold</td>\n<td>寒冷的</td>\n</tr>\n<tr>\n<td>collar</td>\n<td>衣领</td>\n</tr>\n<tr>\n<td>collect</td>\n<td>收集</td>\n</tr>\n<tr>\n<td>college</td>\n<td>学院</td>\n</tr>\n<tr>\n<td>color</td>\n<td>颜色</td>\n</tr>\n<tr>\n<td>comb</td>\n<td>梳子</td>\n</tr>\n<tr>\n<td>combination</td>\n<td>结合</td>\n</tr>\n<tr>\n<td>combine</td>\n<td>结合</td>\n</tr>\n<tr>\n<td>come</td>\n<td>来</td>\n</tr>\n<tr>\n<td>comfort</td>\n<td>安慰</td>\n</tr>\n<tr>\n<td>comfortable</td>\n<td>舒适的</td>\n</tr>\n<tr>\n<td>command</td>\n<td>命令</td>\n</tr>\n<tr>\n<td>committee</td>\n<td>委员会</td>\n</tr>\n<tr>\n<td>common</td>\n<td>常见的</td>\n</tr>\n<tr>\n<td>companion</td>\n<td>同伴</td>\n</tr>\n<tr>\n<td>company</td>\n<td>公司</td>\n</tr>\n<tr>\n<td>compare</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>comparison</td>\n<td>比较</td>\n</tr>\n<tr>\n<td>compete</td>\n<td>竞争</td>\n</tr>\n<tr>\n<td>competition</td>\n<td>竞争</td>\n</tr>\n<tr>\n<td>competitor</td>\n<td>竞争者</td>\n</tr>\n<tr>\n<td>complain</td>\n<td>抱怨</td>\n</tr>\n<tr>\n<td>complaint</td>\n<td>抱怨</td>\n</tr>\n<tr>\n<td>complete</td>\n<td>完成</td>\n</tr>\n<tr>\n<td>compound</td>\n<td>复合</td>\n</tr>\n<tr>\n<td>computer</td>\n<td>计算机</td>\n</tr>\n<tr>\n<td>concern</td>\n<td>涉及</td>\n</tr>\n<tr>\n<td>concerning</td>\n<td>关于</td>\n</tr>\n<tr>\n<td>concert</td>\n<td>音乐会</td>\n</tr>\n<tr>\n<td>condition</td>\n<td>条件</td>\n</tr>\n<tr>\n<td>confidence</td>\n<td>信心</td>\n</tr>\n<tr>\n<td>confident</td>\n<td>自信的</td>\n</tr>\n<tr>\n<td>confuse</td>\n<td>混淆</td>\n</tr>\n<tr>\n<td>connect</td>\n<td>连接</td>\n</tr>\n<tr>\n<td>conscience</td>\n<td>良心</td>\n</tr>\n<tr>\n<td>conscious</td>\n<td>有意识的</td>\n</tr>\n<tr>\n<td>consider</td>\n<td>考虑</td>\n</tr>\n<tr>\n<td>consist</td>\n<td>包括</td>\n</tr>\n<tr>\n<td>consonant</td>\n<td>辅音</td>\n</tr>\n<tr>\n<td>contain</td>\n<td>包含</td>\n</tr>\n<tr>\n<td>contents</td>\n<td>内容</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>持续</td>\n</tr>\n<tr>\n<td>continuous</td>\n<td>连续的</td>\n</tr>\n<tr>\n<td>contract</td>\n<td>合同</td>\n</tr>\n<tr>\n<td>control</td>\n<td>控制</td>\n</tr>\n<tr>\n<td>convenient</td>\n<td>方便的</td>\n</tr>\n<tr>\n<td>conversation</td>\n<td>会话</td>\n</tr>\n<tr>\n<td>cook</td>\n<td>烹调</td>\n</tr>\n<tr>\n<td>cool</td>\n<td>凉爽的</td>\n</tr>\n<tr>\n<td>copper</td>\n<td>铜</td>\n</tr>\n<tr>\n<td>copy</td>\n<td>复制</td>\n</tr>\n<tr>\n<td>cord</td>\n<td>绳</td>\n</tr>\n<tr>\n<td>corn</td>\n<td>玉米</td>\n</tr>\n<tr>\n<td>corner</td>\n<td>角</td>\n</tr>\n<tr>\n<td>correct</td>\n<td>对的</td>\n</tr>\n<tr>\n<td>cost</td>\n<td>成本</td>\n</tr>\n<tr>\n<td>cotton</td>\n<td>棉</td>\n</tr>\n<tr>\n<td>cough</td>\n<td>咳嗽</td>\n</tr>\n<tr>\n<td>could</td>\n<td>能够</td>\n</tr>\n<tr>\n<td>council</td>\n<td>委员会</td>\n</tr>\n<tr>\n<td>count</td>\n<td>计数</td>\n</tr>\n<tr>\n<td>country</td>\n<td>国家</td>\n</tr>\n<tr>\n<td>courage</td>\n<td>勇气</td>\n</tr>\n<tr>\n<td>course</td>\n<td>课程</td>\n</tr>\n<tr>\n<td>court</td>\n<td>法院</td>\n</tr>\n<tr>\n<td>cover</td>\n<td>盖</td>\n</tr>\n<tr>\n<td>cow</td>\n<td>奶牛</td>\n</tr>\n<tr>\n<td>coward</td>\n<td>胆小鬼</td>\n</tr>\n<tr>\n<td>cowardly</td>\n<td>怯懦的</td>\n</tr>\n<tr>\n<td>crack</td>\n<td>裂纹</td>\n</tr>\n<tr>\n<td>crash</td>\n<td>崩溃</td>\n</tr>\n<tr>\n<td>cream</td>\n<td>奶油</td>\n</tr>\n<tr>\n<td>creature</td>\n<td>生物</td>\n</tr>\n<tr>\n<td>creep</td>\n<td>爬行</td>\n</tr>\n<tr>\n<td>cricket</td>\n<td>板球</td>\n</tr>\n<tr>\n<td>crime</td>\n<td>罪行</td>\n</tr>\n<tr>\n<td>criminal</td>\n<td>罪犯</td>\n</tr>\n<tr>\n<td>crop</td>\n<td>作物</td>\n</tr>\n<tr>\n<td>cross</td>\n<td>交叉</td>\n</tr>\n<tr>\n<td>crowd</td>\n<td>人群</td>\n</tr>\n<tr>\n<td>cruel</td>\n<td>残酷的</td>\n</tr>\n<tr>\n<td>cruelty</td>\n<td>残暴</td>\n</tr>\n<tr>\n<td>crush</td>\n<td>压碎</td>\n</tr>\n<tr>\n<td>cry</td>\n<td>哭泣</td>\n</tr>\n<tr>\n<td>cultivate</td>\n<td>培养</td>\n</tr>\n<tr>\n<td>cup</td>\n<td>杯子</td>\n</tr>\n<tr>\n<td>cupboard</td>\n<td>橱柜</td>\n</tr>\n<tr>\n<td>cure</td>\n<td>治愈</td>\n</tr>\n<tr>\n<td>curl</td>\n<td>卷曲</td>\n</tr>\n<tr>\n<td>current</td>\n<td>现在的</td>\n</tr>\n<tr>\n<td>curse</td>\n<td>诅咒</td>\n</tr>\n<tr>\n<td>curtain</td>\n<td>窗帘</td>\n</tr>\n<tr>\n<td>curve</td>\n<td>曲线</td>\n</tr>\n<tr>\n<td>custom</td>\n<td>习俗</td>\n</tr>\n<tr>\n<td>customer</td>\n<td>顾客</td>\n</tr>\n<tr>\n<td>cut</td>\n<td>切</td>\n</tr>\n<tr>\n<td>cycle</td>\n<td>周期</td>\n</tr>\n<tr>\n<td>daily</td>\n<td>每日的</td>\n</tr>\n<tr>\n<td>damage</td>\n<td>损害</td>\n</tr>\n<tr>\n<td>dance</td>\n<td>跳舞</td>\n</tr>\n<tr>\n<td>danger</td>\n<td>危险</td>\n</tr>\n<tr>\n<td>dangerous</td>\n<td>危险的</td>\n</tr>\n<tr>\n<td>dare</td>\n<td>敢</td>\n</tr>\n<tr>\n<td>daring</td>\n<td>大胆的</td>\n</tr>\n<tr>\n<td>dark</td>\n<td>黑暗的</td>\n</tr>\n<tr>\n<td>date</td>\n<td>日期</td>\n</tr>\n<tr>\n<td>daughter</td>\n<td>女儿</td>\n</tr>\n<tr>\n<td>day</td>\n<td>白天</td>\n</tr>\n<tr>\n<td>dead</td>\n<td>死去的</td>\n</tr>\n<tr>\n<td>deal</td>\n<td>处理</td>\n</tr>\n<tr>\n<td>dear</td>\n<td>亲爱的</td>\n</tr>\n<tr>\n<td>death</td>\n<td>死亡</td>\n</tr>\n<tr>\n<td>debt</td>\n<td>债务</td>\n</tr>\n<tr>\n<td>decay</td>\n<td>衰退</td>\n</tr>\n<tr>\n<td>deceit</td>\n<td>欺骗</td>\n</tr>\n<tr>\n<td>deceive</td>\n<td>欺骗</td>\n</tr>\n<tr>\n<td>decide</td>\n<td>决定</td>\n</tr>\n<tr>\n<td>decimal</td>\n<td>十进制的</td>\n</tr>\n<tr>\n<td>decision</td>\n<td>决策</td>\n</tr>\n<tr>\n<td>declaration</td>\n<td>宣言</td>\n</tr>\n<tr>\n<td>declare</td>\n<td>声明</td>\n</tr>\n<tr>\n<td>decorate</td>\n<td>装饰</td>\n</tr>\n<tr>\n<td>decoration</td>\n<td>装饰</td>\n</tr>\n<tr>\n<td>decrease</td>\n<td>减少</td>\n</tr>\n<tr>\n<td>deep</td>\n<td>深的</td>\n</tr>\n<tr>\n<td>deer</td>\n<td>鹿</td>\n</tr>\n<tr>\n<td>defeat</td>\n<td>击败</td>\n</tr>\n<tr>\n<td>defend</td>\n<td>保卫</td>\n</tr>\n<tr>\n<td>defense</td>\n<td>防守</td>\n</tr>\n<tr>\n<td>degree</td>\n<td>度</td>\n</tr>\n<tr>\n<td>delay</td>\n<td>延迟</td>\n</tr>\n<tr>\n<td>delicate</td>\n<td>精致的</td>\n</tr>\n<tr>\n<td>delight</td>\n<td>喜悦的</td>\n</tr>\n<tr>\n<td>deliver</td>\n<td>传送</td>\n</tr>\n<tr>\n<td>demand</td>\n<td>需要</td>\n</tr>\n<tr>\n<td>department</td>\n<td>部门</td>\n</tr>\n<tr>\n<td>depend</td>\n<td>依赖</td>\n</tr>\n<tr>\n<td>dependent</td>\n<td>依赖的</td>\n</tr>\n<tr>\n<td>depth</td>\n<td>深度</td>\n</tr>\n<tr>\n<td>descend</td>\n<td>下降</td>\n</tr>\n<tr>\n<td>describe</td>\n<td>描述</td>\n</tr>\n<tr>\n<td>description</td>\n<td>描述</td>\n</tr>\n<tr>\n<td>descriptive</td>\n<td>描述的</td>\n</tr>\n<tr>\n<td>desert</td>\n<td>沙漠</td>\n</tr>\n<tr>\n<td>deserve</td>\n<td>应得的</td>\n</tr>\n<tr>\n<td>desirable</td>\n<td>可取的</td>\n</tr>\n<tr>\n<td>desire</td>\n<td>欲望</td>\n</tr>\n<tr>\n<td>desk</td>\n<td>书桌</td>\n</tr>\n<tr>\n<td>destroy</td>\n<td>破坏</td>\n</tr>\n<tr>\n<td>destruction</td>\n<td>破坏</td>\n</tr>\n<tr>\n<td>detail</td>\n<td>细节</td>\n</tr>\n<tr>\n<td>determination</td>\n<td>决心</td>\n</tr>\n<tr>\n<td>determined</td>\n<td>确定的</td>\n</tr>\n<tr>\n<td>develop</td>\n<td>发展</td>\n</tr>\n<tr>\n<td>devil</td>\n<td>魔鬼</td>\n</tr>\n<tr>\n<td>diamond</td>\n<td>钻石</td>\n</tr>\n<tr>\n<td>dictionary</td>\n<td>词典</td>\n</tr>\n<tr>\n<td>die</td>\n<td>死亡</td>\n</tr>\n<tr>\n<td>difference</td>\n<td>差异</td>\n</tr>\n<tr>\n<td>different</td>\n<td>不同的</td>\n</tr>\n<tr>\n<td>difficult</td>\n<td>困难的</td>\n</tr>\n<tr>\n<td>difficulty</td>\n<td>困难</td>\n</tr>\n<tr>\n<td>dig</td>\n<td>挖掘</td>\n</tr>\n<tr>\n<td>dinner</td>\n<td>晚餐</td>\n</tr>\n<tr>\n<td>dip</td>\n<td>浸</td>\n</tr>\n<tr>\n<td>direct</td>\n<td>直接的</td>\n</tr>\n<tr>\n<td>direction</td>\n<td>方向</td>\n</tr>\n<tr>\n<td>dirt</td>\n<td>污垢</td>\n</tr>\n<tr>\n<td>dirty</td>\n<td>肮脏的</td>\n</tr>\n<tr>\n<td>disappoint</td>\n<td>令人失望</td>\n</tr>\n<tr>\n<td>discourage</td>\n<td>劝阻</td>\n</tr>\n<tr>\n<td>discouragement</td>\n<td>气馁</td>\n</tr>\n<tr>\n<td>discover</td>\n<td>发现</td>\n</tr>\n<tr>\n<td>discovery</td>\n<td>发现</td>\n</tr>\n<tr>\n<td>dish</td>\n<td>盘</td>\n</tr>\n<tr>\n<td>dismiss</td>\n<td>解雇</td>\n</tr>\n<tr>\n<td>distance</td>\n<td>距离</td>\n</tr>\n<tr>\n<td>distant</td>\n<td>遥远的</td>\n</tr>\n<tr>\n<td>ditch</td>\n<td>沟</td>\n</tr>\n<tr>\n<td>divide</td>\n<td>分</td>\n</tr>\n<tr>\n<td>division</td>\n<td>分开</td>\n</tr>\n<tr>\n<td>do</td>\n<td>做</td>\n</tr>\n<tr>\n<td>doctor</td>\n<td>医生</td>\n</tr>\n<tr>\n<td>dog</td>\n<td>狗</td>\n</tr>\n<tr>\n<td>dollar</td>\n<td>美元</td>\n</tr>\n<tr>\n<td>door</td>\n<td>门</td>\n</tr>\n<tr>\n<td>doorway</td>\n<td>门口</td>\n</tr>\n<tr>\n<td>dot</td>\n<td>点</td>\n</tr>\n<tr>\n<td>double</td>\n<td>双重的</td>\n</tr>\n<tr>\n<td>doubt</td>\n<td>怀疑</td>\n</tr>\n<tr>\n<td>down</td>\n<td>向下</td>\n</tr>\n<tr>\n<td>drag</td>\n<td>拖曳</td>\n</tr>\n<tr>\n<td>draw</td>\n<td>画</td>\n</tr>\n<tr>\n<td>drawer</td>\n<td>抽屉</td>\n</tr>\n<tr>\n<td>dream</td>\n<td>梦想</td>\n</tr>\n<tr>\n<td>dress</td>\n<td>连衣裙</td>\n</tr>\n<tr>\n<td>drink</td>\n<td>喝</td>\n</tr>\n<tr>\n<td>drive</td>\n<td>开车</td>\n</tr>\n<tr>\n<td>drop</td>\n<td>滴</td>\n</tr>\n<tr>\n<td>drown</td>\n<td>淹没</td>\n</tr>\n<tr>\n<td>drug</td>\n<td>药物</td>\n</tr>\n<tr>\n<td>drum</td>\n<td>鼓</td>\n</tr>\n<tr>\n<td>drunk</td>\n<td>醉的</td>\n</tr>\n<tr>\n<td>dry</td>\n<td>干的</td>\n</tr>\n<tr>\n<td>duck</td>\n<td>鸭子</td>\n</tr>\n<tr>\n<td>dull</td>\n<td>迟钝的</td>\n</tr>\n<tr>\n<td>during</td>\n<td>在期间</td>\n</tr>\n<tr>\n<td>dust</td>\n<td>灰尘</td>\n</tr>\n<tr>\n<td>duty</td>\n<td>责任</td>\n</tr>\n<tr>\n<td>each</td>\n<td>每个</td>\n</tr>\n<tr>\n<td>eager</td>\n<td>渴望的</td>\n</tr>\n<tr>\n<td>ear</td>\n<td>耳朵</td>\n</tr>\n<tr>\n<td>early</td>\n<td>早期的</td>\n</tr>\n<tr>\n<td>earn</td>\n<td>赚</td>\n</tr>\n<tr>\n<td>earth</td>\n<td>地球</td>\n</tr>\n<tr>\n<td>east</td>\n<td>东</td>\n</tr>\n<tr>\n<td>eastern</td>\n<td>东方的</td>\n</tr>\n<tr>\n<td>easy</td>\n<td>容易的</td>\n</tr>\n<tr>\n<td>eat</td>\n<td>吃</td>\n</tr>\n<tr>\n<td>edge</td>\n<td>边缘</td>\n</tr>\n<tr>\n<td>educate</td>\n<td>教育</td>\n</tr>\n<tr>\n<td>education</td>\n<td>教育</td>\n</tr>\n<tr>\n<td>effect</td>\n<td>影响</td>\n</tr>\n<tr>\n<td>effective</td>\n<td>有效的</td>\n</tr>\n<tr>\n<td>effort</td>\n<td>努力</td>\n</tr>\n<tr>\n<td>egg</td>\n<td>鸡蛋</td>\n</tr>\n<tr>\n<td>eight</td>\n<td>八</td>\n</tr>\n<tr>\n<td>eighth</td>\n<td>第八</td>\n</tr>\n<tr>\n<td>either</td>\n<td>任何一个</td>\n</tr>\n<tr>\n<td>elastic</td>\n<td>有弹力的</td>\n</tr>\n<tr>\n<td>elbow</td>\n<td>肘部</td>\n</tr>\n<tr>\n<td>elect</td>\n<td>选举</td>\n</tr>\n<tr>\n<td>election</td>\n<td>选举</td>\n</tr>\n<tr>\n<td>electric</td>\n<td>电的</td>\n</tr>\n<tr>\n<td>electricity</td>\n<td>电</td>\n</tr>\n<tr>\n<td>elephant</td>\n<td>大象</td>\n</tr>\n<tr>\n<td>else</td>\n<td>其他的</td>\n</tr>\n<tr>\n<td>employ</td>\n<td>雇用</td>\n</tr>\n<tr>\n<td>employer</td>\n<td>雇主</td>\n</tr>\n<tr>\n<td>employment</td>\n<td>就业</td>\n</tr>\n<tr>\n<td>empty</td>\n<td>空的</td>\n</tr>\n<tr>\n<td>enclose</td>\n<td>随函附上</td>\n</tr>\n<tr>\n<td>enclosure</td>\n<td>圈地</td>\n</tr>\n<tr>\n<td>encourage</td>\n<td>鼓励</td>\n</tr>\n<tr>\n<td>encouragement</td>\n<td>激励</td>\n</tr>\n<tr>\n<td>end</td>\n<td>结束</td>\n</tr>\n<tr>\n<td>enemy</td>\n<td>敌人</td>\n</tr>\n<tr>\n<td>engine</td>\n<td>发动机</td>\n</tr>\n<tr>\n<td>engineer</td>\n<td>工程师</td>\n</tr>\n<tr>\n<td>English</td>\n<td>英语</td>\n</tr>\n<tr>\n<td>enjoy</td>\n<td>享受</td>\n</tr>\n<tr>\n<td>enjoyment</td>\n<td>享受</td>\n</tr>\n<tr>\n<td>enough</td>\n<td>足够地</td>\n</tr>\n<tr>\n<td>enter</td>\n<td>进入</td>\n</tr>\n<tr>\n<td>entertain</td>\n<td>娱乐</td>\n</tr>\n<tr>\n<td>entertainment</td>\n<td>娱乐</td>\n</tr>\n<tr>\n<td>entrance</td>\n<td>入口</td>\n</tr>\n<tr>\n<td>envelope</td>\n<td>信封</td>\n</tr>\n<tr>\n<td>equal</td>\n<td>平等的</td>\n</tr>\n<tr>\n<td>equality</td>\n<td>平等</td>\n</tr>\n<tr>\n<td>escape</td>\n<td>逃跑</td>\n</tr>\n<tr>\n<td>especially</td>\n<td>尤其地</td>\n</tr>\n<tr>\n<td>establish</td>\n<td>建立</td>\n</tr>\n<tr>\n<td>establishment</td>\n<td>建立</td>\n</tr>\n<tr>\n<td>even</td>\n<td>即使</td>\n</tr>\n<tr>\n<td>evening</td>\n<td>傍晚</td>\n</tr>\n<tr>\n<td>event</td>\n<td>事件</td>\n</tr>\n<tr>\n<td>ever</td>\n<td>曾经</td>\n</tr>\n<tr>\n<td>every</td>\n<td>每一个</td>\n</tr>\n<tr>\n<td>everyone</td>\n<td>每个人</td>\n</tr>\n<tr>\n<td>everything</td>\n<td>一切</td>\n</tr>\n<tr>\n<td>everywhere</td>\n<td>到处</td>\n</tr>\n<tr>\n<td>evil</td>\n<td>邪恶的</td>\n</tr>\n<tr>\n<td>exact</td>\n<td>准确的</td>\n</tr>\n<tr>\n<td>examination</td>\n<td>检查</td>\n</tr>\n<tr>\n<td>examine</td>\n<td>检查</td>\n</tr>\n<tr>\n<td>example</td>\n<td>例子</td>\n</tr>\n<tr>\n<td>excellent</td>\n<td>杰出的</td>\n</tr>\n<tr>\n<td>except</td>\n<td>除了</td>\n</tr>\n<tr>\n<td>exchange</td>\n<td>交换</td>\n</tr>\n<tr>\n<td>excite</td>\n<td>激发</td>\n</tr>\n<tr>\n<td>excited</td>\n<td>兴奋的</td>\n</tr>\n<tr>\n<td>exciting</td>\n<td>令人兴奋的</td>\n</tr>\n<tr>\n<td>excuse</td>\n<td>借口</td>\n</tr>\n<tr>\n<td>exercise</td>\n<td>运动</td>\n</tr>\n<tr>\n<td>exist</td>\n<td>存在</td>\n</tr>\n<tr>\n<td>existence</td>\n<td>存在</td>\n</tr>\n<tr>\n<td>expect</td>\n<td>期待</td>\n</tr>\n<tr>\n<td>expensive</td>\n<td>昂贵的</td>\n</tr>\n<tr>\n<td>experience</td>\n<td>经验</td>\n</tr>\n<tr>\n<td>explain</td>\n<td>解释</td>\n</tr>\n<tr>\n<td>explanation</td>\n<td>解释</td>\n</tr>\n<tr>\n<td>explode</td>\n<td>爆炸</td>\n</tr>\n<tr>\n<td>explosion</td>\n<td>爆炸</td>\n</tr>\n<tr>\n<td>explosive</td>\n<td>爆炸的</td>\n</tr>\n<tr>\n<td>express</td>\n<td>表达</td>\n</tr>\n<tr>\n<td>expression</td>\n<td>表达</td>\n</tr>\n<tr>\n<td>extreme</td>\n<td>极端</td>\n</tr>\n<tr>\n<td>eye</td>\n<td>眼睛</td>\n</tr>\n<tr>\n<td>eyelid</td>\n<td>眼睑</td>\n</tr>\n<tr>\n<td>face</td>\n<td>面对</td>\n</tr>\n<tr>\n<td>fact</td>\n<td>事实</td>\n</tr>\n<tr>\n<td>factory</td>\n<td>工厂</td>\n</tr>\n<tr>\n<td>fail</td>\n<td>失败</td>\n</tr>\n<tr>\n<td>failure</td>\n<td>失败</td>\n</tr>\n<tr>\n<td>faint</td>\n<td>昏倒</td>\n</tr>\n<tr>\n<td>fair</td>\n<td>公平的</td>\n</tr>\n<tr>\n<td>fairy</td>\n<td>仙女</td>\n</tr>\n<tr>\n<td>faith</td>\n<td>信仰</td>\n</tr>\n<tr>\n<td>faithful</td>\n<td>忠实的</td>\n</tr>\n<tr>\n<td>fall</td>\n<td>落下</td>\n</tr>\n<tr>\n<td>FALSE</td>\n<td>假</td>\n</tr>\n<tr>\n<td>fame</td>\n<td>名声</td>\n</tr>\n<tr>\n<td>familiar</td>\n<td>熟悉的</td>\n</tr>\n<tr>\n<td>family</td>\n<td>家庭</td>\n</tr>\n<tr>\n<td>famous</td>\n<td>著名的</td>\n</tr>\n<tr>\n<td>fancy</td>\n<td>设想</td>\n</tr>\n<tr>\n<td>far</td>\n<td>远的</td>\n</tr>\n<tr>\n<td>farm</td>\n<td>农场</td>\n</tr>\n<tr>\n<td>farmer</td>\n<td>农民</td>\n</tr>\n<tr>\n<td>farmyard</td>\n<td>农家庭院</td>\n</tr>\n<tr>\n<td>fashion</td>\n<td>时尚</td>\n</tr>\n<tr>\n<td>fashionable</td>\n<td>流行的</td>\n</tr>\n<tr>\n<td>fast</td>\n<td>快速的</td>\n</tr>\n<tr>\n<td>fasten</td>\n<td>系牢</td>\n</tr>\n<tr>\n<td>fat</td>\n<td>脂肪</td>\n</tr>\n<tr>\n<td>fate</td>\n<td>命运</td>\n</tr>\n<tr>\n<td>father</td>\n<td>父亲</td>\n</tr>\n<tr>\n<td>fault</td>\n<td>过错</td>\n</tr>\n<tr>\n<td>favor</td>\n<td>赞成</td>\n</tr>\n<tr>\n<td>favorable</td>\n<td>有利的</td>\n</tr>\n<tr>\n<td>favorite</td>\n<td>最喜欢的</td>\n</tr>\n<tr>\n<td>fear</td>\n<td>害怕</td>\n</tr>\n<tr>\n<td>feather</td>\n<td>羽毛</td>\n</tr>\n<tr>\n<td>feed</td>\n<td>喂养</td>\n</tr>\n<tr>\n<td>feel</td>\n<td>感觉</td>\n</tr>\n<tr>\n<td>feeling</td>\n<td>感觉</td>\n</tr>\n<tr>\n<td>feelings</td>\n<td>感情</td>\n</tr>\n<tr>\n<td>fellow</td>\n<td>同伴</td>\n</tr>\n<tr>\n<td>female</td>\n<td>女性的</td>\n</tr>\n<tr>\n<td>fence</td>\n<td>栅栏</td>\n</tr>\n<tr>\n<td>fever</td>\n<td>发烧</td>\n</tr>\n<tr>\n<td>few</td>\n<td>很少的</td>\n</tr>\n<tr>\n<td>field</td>\n<td>领域</td>\n</tr>\n<tr>\n<td>fierce</td>\n<td>激烈的</td>\n</tr>\n<tr>\n<td>fifth</td>\n<td>第五</td>\n</tr>\n<tr>\n<td>fight</td>\n<td>战斗</td>\n</tr>\n<tr>\n<td>figure</td>\n<td>图形</td>\n</tr>\n<tr>\n<td>fill</td>\n<td>填满</td>\n</tr>\n<tr>\n<td>film</td>\n<td>电影</td>\n</tr>\n<tr>\n<td>find</td>\n<td>找到</td>\n</tr>\n<tr>\n<td>fine</td>\n<td>好的</td>\n</tr>\n<tr>\n<td>finger</td>\n<td>手指</td>\n</tr>\n<tr>\n<td>finish</td>\n<td>完成</td>\n</tr>\n<tr>\n<td>fire</td>\n<td>火</td>\n</tr>\n<tr>\n<td>fireplace</td>\n<td>壁炉</td>\n</tr>\n<tr>\n<td>firm</td>\n<td>公司</td>\n</tr>\n<tr>\n<td>first</td>\n<td>第一</td>\n</tr>\n<tr>\n<td>fish</td>\n<td>鱼</td>\n</tr>\n<tr>\n<td>fisherman</td>\n<td>渔夫</td>\n</tr>\n<tr>\n<td>fit</td>\n<td>适合</td>\n</tr>\n<tr>\n<td>five</td>\n<td>五</td>\n</tr>\n<tr>\n<td>fix</td>\n<td>修理</td>\n</tr>\n<tr>\n<td>flag</td>\n<td>旗帜</td>\n</tr>\n<tr>\n<td>flame</td>\n<td>火焰</td>\n</tr>\n<tr>\n<td>flash</td>\n<td>闪光</td>\n</tr>\n<tr>\n<td>flat</td>\n<td>平的</td>\n</tr>\n<tr>\n<td>flesh</td>\n<td>肉</td>\n</tr>\n<tr>\n<td>flight</td>\n<td>航班</td>\n</tr>\n<tr>\n<td>float</td>\n<td>浮动</td>\n</tr>\n<tr>\n<td>flood</td>\n<td>洪水</td>\n</tr>\n<tr>\n<td>floor</td>\n<td>地板</td>\n</tr>\n<tr>\n<td>flour</td>\n<td>面粉</td>\n</tr>\n<tr>\n<td>flow</td>\n<td>流</td>\n</tr>\n<tr>\n<td>flower</td>\n<td>花</td>\n</tr>\n<tr>\n<td>fly</td>\n<td>飞</td>\n</tr>\n<tr>\n<td>fold</td>\n<td>折叠</td>\n</tr>\n<tr>\n<td>follow</td>\n<td>跟随</td>\n</tr>\n<tr>\n<td>fond</td>\n<td>喜欢的</td>\n</tr>\n<tr>\n<td>food</td>\n<td>食物</td>\n</tr>\n<tr>\n<td>fool</td>\n<td>傻瓜</td>\n</tr>\n<tr>\n<td>foolish</td>\n<td>愚蠢的</td>\n</tr>\n<tr>\n<td>foot</td>\n<td>脚</td>\n</tr>\n<tr>\n<td>football</td>\n<td>足球</td>\n</tr>\n<tr>\n<td>footpath</td>\n<td>人行道</td>\n</tr>\n<tr>\n<td>footstep</td>\n<td>脚步</td>\n</tr>\n<tr>\n<td>for</td>\n<td>对于</td>\n</tr>\n<tr>\n<td>forbid</td>\n<td>禁止</td>\n</tr>\n<tr>\n<td>force</td>\n<td>力</td>\n</tr>\n<tr>\n<td>forehead</td>\n<td>额头</td>\n</tr>\n<tr>\n<td>foreign</td>\n<td>外国的</td>\n</tr>\n<tr>\n<td>foreigner</td>\n<td>外国人</td>\n</tr>\n<tr>\n<td>forest</td>\n<td>森林</td>\n</tr>\n<tr>\n<td>forget</td>\n<td>忘记</td>\n</tr>\n<tr>\n<td>forgive</td>\n<td>原谅</td>\n</tr>\n<tr>\n<td>fork</td>\n<td>叉</td>\n</tr>\n<tr>\n<td>form</td>\n<td>形式</td>\n</tr>\n<tr>\n<td>formal</td>\n<td>正式的</td>\n</tr>\n<tr>\n<td>former</td>\n<td>前者的</td>\n</tr>\n<tr>\n<td>formerly</td>\n<td>从前</td>\n</tr>\n<tr>\n<td>fort</td>\n<td>堡垒</td>\n</tr>\n<tr>\n<td>fortunate</td>\n<td>幸运的</td>\n</tr>\n<tr>\n<td>fortune</td>\n<td>财富</td>\n</tr>\n<tr>\n<td>forward</td>\n<td>向前地</td>\n</tr>\n<tr>\n<td>forwards</td>\n<td>前锋</td>\n</tr>\n<tr>\n<td>four</td>\n<td>四</td>\n</tr>\n<tr>\n<td>fourth</td>\n<td>第四</td>\n</tr>\n<tr>\n<td>fox</td>\n<td>狐狸</td>\n</tr>\n<tr>\n<td>frame</td>\n<td>框架</td>\n</tr>\n<tr>\n<td>free</td>\n<td>自由的</td>\n</tr>\n<tr>\n<td>freedom</td>\n<td>自由</td>\n</tr>\n<tr>\n<td>freeze</td>\n<td>冻结</td>\n</tr>\n<tr>\n<td>frequent</td>\n<td>频繁的</td>\n</tr>\n<tr>\n<td>fresh</td>\n<td>新鲜的</td>\n</tr>\n<tr>\n<td>friend</td>\n<td>朋友</td>\n</tr>\n<tr>\n<td>friendly</td>\n<td>友好的</td>\n</tr>\n<tr>\n<td>frighten</td>\n<td>吓唬</td>\n</tr>\n<tr>\n<td>frightening</td>\n<td>可怕的</td>\n</tr>\n<tr>\n<td>from</td>\n<td>从</td>\n</tr>\n<tr>\n<td>front</td>\n<td>前面</td>\n</tr>\n<tr>\n<td>fruit</td>\n<td>水果</td>\n</tr>\n<tr>\n<td>fulfill</td>\n<td>完成</td>\n</tr>\n<tr>\n<td>full</td>\n<td>满的</td>\n</tr>\n<tr>\n<td>fun</td>\n<td>乐趣</td>\n</tr>\n<tr>\n<td>funeral</td>\n<td>葬礼</td>\n</tr>\n<tr>\n<td>funny</td>\n<td>有趣的</td>\n</tr>\n<tr>\n<td>fur</td>\n<td>毛皮</td>\n</tr>\n<tr>\n<td>furnish</td>\n<td>装修</td>\n</tr>\n<tr>\n<td>furniture</td>\n<td>家具</td>\n</tr>\n<tr>\n<td>further</td>\n<td>进一步的</td>\n</tr>\n<tr>\n<td>future</td>\n<td>未来</td>\n</tr>\n<tr>\n<td>gain</td>\n<td>获得</td>\n</tr>\n<tr>\n<td>game</td>\n<td>游戏</td>\n</tr>\n<tr>\n<td>garage</td>\n<td>车库</td>\n</tr>\n<tr>\n<td>garden</td>\n<td>花园</td>\n</tr>\n<tr>\n<td>garment</td>\n<td>服装</td>\n</tr>\n<tr>\n<td>gas</td>\n<td>气体</td>\n</tr>\n<tr>\n<td>gasoline</td>\n<td>汽油</td>\n</tr>\n<tr>\n<td>gate</td>\n<td>大门</td>\n</tr>\n<tr>\n<td>gather</td>\n<td>聚集</td>\n</tr>\n<tr>\n<td>general</td>\n<td>一般的</td>\n</tr>\n<tr>\n<td>generous</td>\n<td>慷慨的</td>\n</tr>\n<tr>\n<td>gentle</td>\n<td>温和的</td>\n</tr>\n<tr>\n<td>gentleman</td>\n<td>绅士</td>\n</tr>\n<tr>\n<td>get</td>\n<td>得到</td>\n</tr>\n<tr>\n<td>gift</td>\n<td>礼物</td>\n</tr>\n<tr>\n<td>girl</td>\n<td>女孩</td>\n</tr>\n<tr>\n<td>give</td>\n<td>给</td>\n</tr>\n<tr>\n<td>glad</td>\n<td>高兴的</td>\n</tr>\n<tr>\n<td>glass</td>\n<td>玻璃</td>\n</tr>\n<tr>\n<td>glory</td>\n<td>光荣</td>\n</tr>\n<tr>\n<td>glue</td>\n<td>胶</td>\n</tr>\n<tr>\n<td>go</td>\n<td>去</td>\n</tr>\n<tr>\n<td>goat</td>\n<td>山羊</td>\n</tr>\n<tr>\n<td>god</td>\n<td>上帝</td>\n</tr>\n<tr>\n<td>gold</td>\n<td>金</td>\n</tr>\n<tr>\n<td>golden</td>\n<td>金色的</td>\n</tr>\n<tr>\n<td>good</td>\n<td>好的</td>\n</tr>\n<tr>\n<td>good-bye</td>\n<td>再见</td>\n</tr>\n<tr>\n<td>goods</td>\n<td>商品</td>\n</tr>\n<tr>\n<td>govern</td>\n<td>治理</td>\n</tr>\n<tr>\n<td>government</td>\n<td>政府</td>\n</tr>\n<tr>\n<td>grace</td>\n<td>优雅</td>\n</tr>\n<tr>\n<td>graceful</td>\n<td>优雅的</td>\n</tr>\n<tr>\n<td>gradual</td>\n<td>逐渐的</td>\n</tr>\n<tr>\n<td>grain</td>\n<td>粮食</td>\n</tr>\n<tr>\n<td>gram</td>\n<td>克</td>\n</tr>\n<tr>\n<td>grammar</td>\n<td>语法</td>\n</tr>\n<tr>\n<td>grand</td>\n<td>宏伟的</td>\n</tr>\n<tr>\n<td>grandfather</td>\n<td>祖父</td>\n</tr>\n<tr>\n<td>grandmother</td>\n<td>祖母</td>\n</tr>\n<tr>\n<td>grass</td>\n<td>草</td>\n</tr>\n<tr>\n<td>grateful</td>\n<td>感激的</td>\n</tr>\n<tr>\n<td>grave</td>\n<td>坟墓</td>\n</tr>\n<tr>\n<td>gray</td>\n<td>灰色</td>\n</tr>\n<tr>\n<td>great</td>\n<td>伟大的</td>\n</tr>\n<tr>\n<td>green</td>\n<td>绿色</td>\n</tr>\n<tr>\n<td>greet</td>\n<td>打招呼</td>\n</tr>\n<tr>\n<td>greeting</td>\n<td>招呼</td>\n</tr>\n<tr>\n<td>grief</td>\n<td>悲痛</td>\n</tr>\n<tr>\n<td>grieve</td>\n<td>悲伤</td>\n</tr>\n<tr>\n<td>ground</td>\n<td>地面</td>\n</tr>\n<tr>\n<td>group</td>\n<td>组</td>\n</tr>\n<tr>\n<td>grow</td>\n<td>成长</td>\n</tr>\n<tr>\n<td>growth</td>\n<td>生长</td>\n</tr>\n<tr>\n<td>guard</td>\n<td>警卫</td>\n</tr>\n<tr>\n<td>guess</td>\n<td>猜测</td>\n</tr>\n<tr>\n<td>guest</td>\n<td>客人</td>\n</tr>\n<tr>\n<td>guidance</td>\n<td>指导</td>\n</tr>\n<tr>\n<td>guide</td>\n<td>指导</td>\n</tr>\n<tr>\n<td>guilt</td>\n<td>内疚</td>\n</tr>\n<tr>\n<td>gun</td>\n<td>枪</td>\n</tr>\n<tr>\n<td>habit</td>\n<td>习惯</td>\n</tr>\n<tr>\n<td>habitual</td>\n<td>习惯性的</td>\n</tr>\n<tr>\n<td>hair</td>\n<td>头发</td>\n</tr>\n<tr>\n<td>hairy</td>\n<td>多毛的</td>\n</tr>\n<tr>\n<td>half</td>\n<td>一半</td>\n</tr>\n<tr>\n<td>hall</td>\n<td>大厅</td>\n</tr>\n<tr>\n<td>hammer</td>\n<td>铁锤</td>\n</tr>\n<tr>\n<td>hand</td>\n<td>手</td>\n</tr>\n<tr>\n<td>handkerchief</td>\n<td>手帕</td>\n</tr>\n<tr>\n<td>handle</td>\n<td>手柄</td>\n</tr>\n<tr>\n<td>hang</td>\n<td>悬挂</td>\n</tr>\n<tr>\n<td>happen</td>\n<td>发生</td>\n</tr>\n<tr>\n<td>happy</td>\n<td>幸福的</td>\n</tr>\n<tr>\n<td>hard</td>\n<td>坚硬的</td>\n</tr>\n<tr>\n<td>harden</td>\n<td>变硬</td>\n</tr>\n<tr>\n<td>hardly</td>\n<td>几乎不</td>\n</tr>\n<tr>\n<td>hardship</td>\n<td>困难</td>\n</tr>\n<tr>\n<td>harm</td>\n<td>伤害</td>\n</tr>\n<tr>\n<td>harmful</td>\n<td>有害的</td>\n</tr>\n<tr>\n<td>harmless</td>\n<td>无害的</td>\n</tr>\n<tr>\n<td>hasty</td>\n<td>草率的</td>\n</tr>\n<tr>\n<td>hat</td>\n<td>帽子</td>\n</tr>\n<tr>\n<td>hate</td>\n<td>憎恨</td>\n</tr>\n<tr>\n<td>hatred</td>\n<td>仇恨</td>\n</tr>\n<tr>\n<td>have</td>\n<td>有</td>\n</tr>\n<tr>\n<td>he</td>\n<td>他</td>\n</tr>\n<tr>\n<td>head</td>\n<td>头</td>\n</tr>\n<tr>\n<td>health</td>\n<td>健康</td>\n</tr>\n<tr>\n<td>healthy</td>\n<td>健康的</td>\n</tr>\n<tr>\n<td>hear</td>\n<td>听到</td>\n</tr>\n<tr>\n<td>heart</td>\n<td>心</td>\n</tr>\n<tr>\n<td>heat</td>\n<td>热</td>\n</tr>\n<tr>\n<td>heaven</td>\n<td>天堂</td>\n</tr>\n<tr>\n<td>heavy</td>\n<td>重的</td>\n</tr>\n<tr>\n<td>heel</td>\n<td>脚后跟</td>\n</tr>\n<tr>\n<td>height</td>\n<td>高度</td>\n</tr>\n<tr>\n<td>help</td>\n<td>帮助</td>\n</tr>\n<tr>\n<td>helpful</td>\n<td>有益的</td>\n</tr>\n<tr>\n<td>hen</td>\n<td>母鸡</td>\n</tr>\n<tr>\n<td>her</td>\n<td>她</td>\n</tr>\n<tr>\n<td>here</td>\n<td>在这里</td>\n</tr>\n<tr>\n<td>hers</td>\n<td>她的</td>\n</tr>\n<tr>\n<td>herself</td>\n<td>她自己</td>\n</tr>\n<tr>\n<td>hide</td>\n<td>隐藏</td>\n</tr>\n<tr>\n<td>high</td>\n<td>高的</td>\n</tr>\n<tr>\n<td>hill</td>\n<td>小山</td>\n</tr>\n<tr>\n<td>him</td>\n<td>他</td>\n</tr>\n<tr>\n<td>himself</td>\n<td>他自己</td>\n</tr>\n<tr>\n<td>hire</td>\n<td>雇用</td>\n</tr>\n<tr>\n<td>his</td>\n<td>他的</td>\n</tr>\n<tr>\n<td>historical</td>\n<td>历史的</td>\n</tr>\n<tr>\n<td>history</td>\n<td>历史</td>\n</tr>\n<tr>\n<td>hit</td>\n<td>打</td>\n</tr>\n<tr>\n<td>hold</td>\n<td>持有</td>\n</tr>\n<tr>\n<td>holiday</td>\n<td>假日</td>\n</tr>\n<tr>\n<td>hollow</td>\n<td>空洞的</td>\n</tr>\n<tr>\n<td>holy</td>\n<td>神圣的</td>\n</tr>\n<tr>\n<td>home</td>\n<td>家</td>\n</tr>\n<tr>\n<td>honest</td>\n<td>诚实</td>\n</tr>\n<tr>\n<td>honesty</td>\n<td>诚实</td>\n</tr>\n<tr>\n<td>honor</td>\n<td>荣誉</td>\n</tr>\n<tr>\n<td>honorable</td>\n<td>光荣的</td>\n</tr>\n<tr>\n<td>hook</td>\n<td>钩</td>\n</tr>\n<tr>\n<td>hope</td>\n<td>希望</td>\n</tr>\n<tr>\n<td>hopeful</td>\n<td>充满希望的</td>\n</tr>\n<tr>\n<td>hopeless</td>\n<td>绝望的</td>\n</tr>\n<tr>\n<td>horizon</td>\n<td>地平线</td>\n</tr>\n<tr>\n<td>horn</td>\n<td>喇叭</td>\n</tr>\n<tr>\n<td>horse</td>\n<td>马</td>\n</tr>\n<tr>\n<td>hospital</td>\n<td>医院</td>\n</tr>\n<tr>\n<td>host</td>\n<td>主办</td>\n</tr>\n<tr>\n<td>hot</td>\n<td>热的</td>\n</tr>\n<tr>\n<td>hotel</td>\n<td>酒店</td>\n</tr>\n<tr>\n<td>hour</td>\n<td>小时</td>\n</tr>\n<tr>\n<td>hourly</td>\n<td>每小时</td>\n</tr>\n<tr>\n<td>house</td>\n<td>房子</td>\n</tr>\n<tr>\n<td>how</td>\n<td>怎样</td>\n</tr>\n<tr>\n<td>human</td>\n<td>人类</td>\n</tr>\n<tr>\n<td>humor</td>\n<td>幽默</td>\n</tr>\n<tr>\n<td>humorous</td>\n<td>幽默的</td>\n</tr>\n<tr>\n<td>hundred</td>\n<td>一百</td>\n</tr>\n<tr>\n<td>hundredth</td>\n<td>第一百</td>\n</tr>\n<tr>\n<td>hunger</td>\n<td>饥饿</td>\n</tr>\n<tr>\n<td>hungry</td>\n<td>饥饿的</td>\n</tr>\n<tr>\n<td>hunt</td>\n<td>打猎</td>\n</tr>\n<tr>\n<td>hurry</td>\n<td>匆忙</td>\n</tr>\n<tr>\n<td>hurt</td>\n<td>伤害</td>\n</tr>\n<tr>\n<td>husband</td>\n<td>丈夫</td>\n</tr>\n<tr>\n<td>hut</td>\n<td>小屋</td>\n</tr>\n<tr>\n<td>I</td>\n<td>我</td>\n</tr>\n<tr>\n<td>ice</td>\n<td>冰</td>\n</tr>\n<tr>\n<td>icy</td>\n<td>冰冷的</td>\n</tr>\n<tr>\n<td>idea</td>\n<td>主意</td>\n</tr>\n<tr>\n<td>if</td>\n<td>如果</td>\n</tr>\n<tr>\n<td>ill</td>\n<td>生病的</td>\n</tr>\n<tr>\n<td>image</td>\n<td>形象</td>\n</tr>\n<tr>\n<td>imaginary</td>\n<td>想像的</td>\n</tr>\n<tr>\n<td>imagination</td>\n<td>想象</td>\n</tr>\n<tr>\n<td>imagine</td>\n<td>想象</td>\n</tr>\n<tr>\n<td>importance</td>\n<td>重要性</td>\n</tr>\n<tr>\n<td>important</td>\n<td>重要的</td>\n</tr>\n<tr>\n<td>improve</td>\n<td>改善</td>\n</tr>\n<tr>\n<td>improvement</td>\n<td>改进</td>\n</tr>\n<tr>\n<td>in</td>\n<td>在里面</td>\n</tr>\n<tr>\n<td>include</td>\n<td>包括</td>\n</tr>\n<tr>\n<td>including</td>\n<td>包括</td>\n</tr>\n<tr>\n<td>income</td>\n<td>收入</td>\n</tr>\n<tr>\n<td>increase</td>\n<td>增加</td>\n</tr>\n<tr>\n<td>indoor</td>\n<td>室内的</td>\n</tr>\n<tr>\n<td>indoors</td>\n<td>在室内</td>\n</tr>\n<tr>\n<td>industrial</td>\n<td>工业的</td>\n</tr>\n<tr>\n<td>industry</td>\n<td>行业</td>\n</tr>\n<tr>\n<td>infect</td>\n<td>感染</td>\n</tr>\n<tr>\n<td>infection</td>\n<td>感染</td>\n</tr>\n<tr>\n<td>infectious</td>\n<td>感染的</td>\n</tr>\n<tr>\n<td>influence</td>\n<td>影响</td>\n</tr>\n<tr>\n<td>influential</td>\n<td>有影响的</td>\n</tr>\n<tr>\n<td>inform</td>\n<td>通知</td>\n</tr>\n<tr>\n<td>information</td>\n<td>信息</td>\n</tr>\n<tr>\n<td>ink</td>\n<td>墨水</td>\n</tr>\n<tr>\n<td>inner</td>\n<td>内部的</td>\n</tr>\n<tr>\n<td>inquire</td>\n<td>询问</td>\n</tr>\n<tr>\n<td>inquiry</td>\n<td>调查</td>\n</tr>\n<tr>\n<td>insect</td>\n<td>昆虫</td>\n</tr>\n<tr>\n<td>inside</td>\n<td>里面</td>\n</tr>\n<tr>\n<td>instead</td>\n<td>相反</td>\n</tr>\n<tr>\n<td>instruct</td>\n<td>指导</td>\n</tr>\n<tr>\n<td>instruction</td>\n<td>指令</td>\n</tr>\n<tr>\n<td>instrument</td>\n<td>工具</td>\n</tr>\n<tr>\n<td>insurance</td>\n<td>保险</td>\n</tr>\n<tr>\n<td>insure</td>\n<td>确保</td>\n</tr>\n<tr>\n<td>intend</td>\n<td>打算</td>\n</tr>\n<tr>\n<td>intention</td>\n<td>意图</td>\n</tr>\n<tr>\n<td>interest</td>\n<td>兴趣</td>\n</tr>\n<tr>\n<td>interesting</td>\n<td>有趣的</td>\n</tr>\n<tr>\n<td>international</td>\n<td>国际的</td>\n</tr>\n<tr>\n<td>interrupt</td>\n<td>打断</td>\n</tr>\n<tr>\n<td>interruption</td>\n<td>中断</td>\n</tr>\n<tr>\n<td>into</td>\n<td>进入之内</td>\n</tr>\n<tr>\n<td>introduce</td>\n<td>介绍</td>\n</tr>\n<tr>\n<td>introduction</td>\n<td>介绍</td>\n</tr>\n<tr>\n<td>invent</td>\n<td>发明</td>\n</tr>\n<tr>\n<td>invention</td>\n<td>发明</td>\n</tr>\n<tr>\n<td>invitation</td>\n<td>邀请</td>\n</tr>\n<tr>\n<td>invite</td>\n<td>邀请</td>\n</tr>\n<tr>\n<td>inwards</td>\n<td>向内</td>\n</tr>\n<tr>\n<td>iron</td>\n<td>铁</td>\n</tr>\n<tr>\n<td>island</td>\n<td>岛</td>\n</tr>\n<tr>\n<td>it</td>\n<td>它</td>\n</tr>\n<tr>\n<td>its</td>\n<td>它的</td>\n</tr>\n<tr>\n<td>itself</td>\n<td>它本身</td>\n</tr>\n<tr>\n<td>jaw</td>\n<td>下巴</td>\n</tr>\n<tr>\n<td>jealous</td>\n<td>嫉妒的</td>\n</tr>\n<tr>\n<td>jealousy</td>\n<td>嫉妒</td>\n</tr>\n<tr>\n<td>jelly</td>\n<td>果冻</td>\n</tr>\n<tr>\n<td>jewel</td>\n<td>珠宝</td>\n</tr>\n<tr>\n<td>jewelry</td>\n<td>珠宝</td>\n</tr>\n<tr>\n<td>job</td>\n<td>工作</td>\n</tr>\n<tr>\n<td>join</td>\n<td>参加</td>\n</tr>\n<tr>\n<td>joint</td>\n<td>共同的</td>\n</tr>\n<tr>\n<td>joke</td>\n<td>笑话</td>\n</tr>\n<tr>\n<td>journey</td>\n<td>旅行</td>\n</tr>\n<tr>\n<td>joy</td>\n<td>快乐</td>\n</tr>\n<tr>\n<td>judge</td>\n<td>法官</td>\n</tr>\n<tr>\n<td>judgment</td>\n<td>判断</td>\n</tr>\n<tr>\n<td>juice</td>\n<td>果汁</td>\n</tr>\n<tr>\n<td>jump</td>\n<td>跳</td>\n</tr>\n<tr>\n<td>just</td>\n<td>只是</td>\n</tr>\n<tr>\n<td>justice</td>\n<td>公正</td>\n</tr>\n<tr>\n<td>keen</td>\n<td>热切的</td>\n</tr>\n<tr>\n<td>keep</td>\n<td>保持</td>\n</tr>\n<tr>\n<td>key</td>\n<td>钥匙</td>\n</tr>\n<tr>\n<td>kick</td>\n<td>踢</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>杀死</td>\n</tr>\n<tr>\n<td>kilo</td>\n<td>千克</td>\n</tr>\n<tr>\n<td>kilogram</td>\n<td>公斤</td>\n</tr>\n<tr>\n<td>kilometer</td>\n<td>公里</td>\n</tr>\n<tr>\n<td>kind</td>\n<td>友善的</td>\n</tr>\n<tr>\n<td>king</td>\n<td>国王</td>\n</tr>\n<tr>\n<td>kingdom</td>\n<td>王国</td>\n</tr>\n<tr>\n<td>kiss</td>\n<td>吻</td>\n</tr>\n<tr>\n<td>kitchen</td>\n<td>厨房</td>\n</tr>\n<tr>\n<td>knee</td>\n<td>膝</td>\n</tr>\n<tr>\n<td>kneel</td>\n<td>跪</td>\n</tr>\n<tr>\n<td>knife</td>\n<td>刀</td>\n</tr>\n<tr>\n<td>knock</td>\n<td>敲</td>\n</tr>\n<tr>\n<td>knot</td>\n<td>结</td>\n</tr>\n<tr>\n<td>know</td>\n<td>知道</td>\n</tr>\n<tr>\n<td>knowledge</td>\n<td>知识</td>\n</tr>\n<tr>\n<td>labor</td>\n<td>劳动</td>\n</tr>\n<tr>\n<td>lack</td>\n<td>缺乏</td>\n</tr>\n<tr>\n<td>ladder</td>\n<td>梯子</td>\n</tr>\n<tr>\n<td>lady</td>\n<td>女士</td>\n</tr>\n<tr>\n<td>lake</td>\n<td>湖</td>\n</tr>\n<tr>\n<td>lamb</td>\n<td>羔羊</td>\n</tr>\n<tr>\n<td>lamp</td>\n<td>灯</td>\n</tr>\n<tr>\n<td>land</td>\n<td>土地</td>\n</tr>\n<tr>\n<td>language</td>\n<td>语言</td>\n</tr>\n<tr>\n<td>large</td>\n<td>大的</td>\n</tr>\n<tr>\n<td>last</td>\n<td>最后的</td>\n</tr>\n<tr>\n<td>late</td>\n<td>晚的</td>\n</tr>\n<tr>\n<td>lately</td>\n<td>最近</td>\n</tr>\n<tr>\n<td>laugh</td>\n<td>笑</td>\n</tr>\n<tr>\n<td>laughter</td>\n<td>笑声</td>\n</tr>\n<tr>\n<td>law</td>\n<td>法律</td>\n</tr>\n<tr>\n<td>lawyer</td>\n<td>律师</td>\n</tr>\n<tr>\n<td>lay</td>\n<td>放置</td>\n</tr>\n<tr>\n<td>lazy</td>\n<td>懒惰的</td>\n</tr>\n<tr>\n<td>lead</td>\n<td>领导</td>\n</tr>\n<tr>\n<td>leaf</td>\n<td>叶</td>\n</tr>\n<tr>\n<td>lean</td>\n<td>倾斜</td>\n</tr>\n<tr>\n<td>learn</td>\n<td>学习</td>\n</tr>\n<tr>\n<td>least</td>\n<td>最少的</td>\n</tr>\n<tr>\n<td>leather</td>\n<td>皮革</td>\n</tr>\n<tr>\n<td>leave</td>\n<td>离开</td>\n</tr>\n<tr>\n<td>left</td>\n<td>左边</td>\n</tr>\n<tr>\n<td>leg</td>\n<td>腿</td>\n</tr>\n<tr>\n<td>legal</td>\n<td>合法的</td>\n</tr>\n<tr>\n<td>lend</td>\n<td>借给</td>\n</tr>\n<tr>\n<td>length</td>\n<td>长度</td>\n</tr>\n<tr>\n<td>less</td>\n<td>较少的</td>\n</tr>\n<tr>\n<td>lesson</td>\n<td>课程</td>\n</tr>\n<tr>\n<td>let</td>\n<td>让</td>\n</tr>\n<tr>\n<td>letter</td>\n<td>信</td>\n</tr>\n<tr>\n<td>level</td>\n<td>水平</td>\n</tr>\n<tr>\n<td>library</td>\n<td>图书馆</td>\n</tr>\n<tr>\n<td>lid</td>\n<td>盖子</td>\n</tr>\n<tr>\n<td>lie</td>\n<td>躺</td>\n</tr>\n<tr>\n<td>life</td>\n<td>生活</td>\n</tr>\n<tr>\n<td>lift</td>\n<td>举起</td>\n</tr>\n<tr>\n<td>light</td>\n<td>光</td>\n</tr>\n<tr>\n<td>lightning</td>\n<td>闪电</td>\n</tr>\n<tr>\n<td>like</td>\n<td>喜欢</td>\n</tr>\n<tr>\n<td>likely</td>\n<td>可能的</td>\n</tr>\n<tr>\n<td>limb</td>\n<td>肢</td>\n</tr>\n<tr>\n<td>limit</td>\n<td>限制</td>\n</tr>\n<tr>\n<td>line</td>\n<td>线</td>\n</tr>\n<tr>\n<td>lion</td>\n<td>狮子</td>\n</tr>\n<tr>\n<td>lip</td>\n<td>嘴唇</td>\n</tr>\n<tr>\n<td>liquid</td>\n<td>液体</td>\n</tr>\n<tr>\n<td>list</td>\n<td>列表</td>\n</tr>\n<tr>\n<td>listen</td>\n<td>听</td>\n</tr>\n<tr>\n<td>liter</td>\n<td>公升</td>\n</tr>\n<tr>\n<td>literature</td>\n<td>文学</td>\n</tr>\n<tr>\n<td>little</td>\n<td>小的</td>\n</tr>\n<tr>\n<td>live</td>\n<td>居住</td>\n</tr>\n<tr>\n<td>load</td>\n<td>负载</td>\n</tr>\n<tr>\n<td>loaf</td>\n<td>一条面包</td>\n</tr>\n<tr>\n<td>local</td>\n<td>地方的</td>\n</tr>\n<tr>\n<td>lock</td>\n<td>锁</td>\n</tr>\n<tr>\n<td>lodging</td>\n<td>住宿</td>\n</tr>\n<tr>\n<td>lodgings</td>\n<td>住宿</td>\n</tr>\n<tr>\n<td>log</td>\n<td>日志</td>\n</tr>\n<tr>\n<td>lonely</td>\n<td>孤独的</td>\n</tr>\n<tr>\n<td>long</td>\n<td>长的</td>\n</tr>\n<tr>\n<td>look</td>\n<td>看</td>\n</tr>\n<tr>\n<td>loose</td>\n<td>释放</td>\n</tr>\n<tr>\n<td>lord</td>\n<td>主</td>\n</tr>\n<tr>\n<td>lose</td>\n<td>失去</td>\n</tr>\n<tr>\n<td>loss</td>\n<td>损失</td>\n</tr>\n<tr>\n<td>lot</td>\n<td>许多</td>\n</tr>\n<tr>\n<td>loud</td>\n<td>大声的</td>\n</tr>\n<tr>\n<td>love</td>\n<td>爱</td>\n</tr>\n<tr>\n<td>low</td>\n<td>低的</td>\n</tr>\n<tr>\n<td>lower</td>\n<td>降低</td>\n</tr>\n<tr>\n<td>loyal</td>\n<td>忠诚的</td>\n</tr>\n<tr>\n<td>loyalty</td>\n<td>忠诚</td>\n</tr>\n<tr>\n<td>luck</td>\n<td>运气</td>\n</tr>\n<tr>\n<td>lump</td>\n<td>块</td>\n</tr>\n<tr>\n<td>lung</td>\n<td>肺</td>\n</tr>\n<tr>\n<td>machine</td>\n<td>机器</td>\n</tr>\n<tr>\n<td>machinery</td>\n<td>机械</td>\n</tr>\n<tr>\n<td>mad</td>\n<td>疯狂的</td>\n</tr>\n<tr>\n<td>magazine</td>\n<td>杂志</td>\n</tr>\n<tr>\n<td>magic</td>\n<td>魔术</td>\n</tr>\n<tr>\n<td>magician</td>\n<td>魔术师</td>\n</tr>\n<tr>\n<td>mail</td>\n<td>邮件</td>\n</tr>\n<tr>\n<td>main</td>\n<td>主要的</td>\n</tr>\n<tr>\n<td>make</td>\n<td>制作</td>\n</tr>\n<tr>\n<td>male</td>\n<td>男性的</td>\n</tr>\n<tr>\n<td>man</td>\n<td>男人</td>\n</tr>\n<tr>\n<td>manage</td>\n<td>管理</td>\n</tr>\n<tr>\n<td>manager</td>\n<td>经理</td>\n</tr>\n<tr>\n<td>manner</td>\n<td>方式</td>\n</tr>\n<tr>\n<td>many</td>\n<td>许多的</td>\n</tr>\n<tr>\n<td>map</td>\n<td>地图</td>\n</tr>\n<tr>\n<td>march</td>\n<td>前进</td>\n</tr>\n<tr>\n<td>mark</td>\n<td>作记号</td>\n</tr>\n<tr>\n<td>market</td>\n<td>市场</td>\n</tr>\n<tr>\n<td>marriage</td>\n<td>结婚</td>\n</tr>\n<tr>\n<td>marry</td>\n<td>结婚</td>\n</tr>\n<tr>\n<td>mass</td>\n<td>群众</td>\n</tr>\n<tr>\n<td>master</td>\n<td>主人</td>\n</tr>\n<tr>\n<td>mat</td>\n<td>垫子</td>\n</tr>\n<tr>\n<td>match</td>\n<td>比赛</td>\n</tr>\n<tr>\n<td>material</td>\n<td>材料</td>\n</tr>\n<tr>\n<td>matter</td>\n<td>问题</td>\n</tr>\n<tr>\n<td>may</td>\n<td>可以</td>\n</tr>\n<tr>\n<td>me</td>\n<td>我</td>\n</tr>\n<tr>\n<td>meal</td>\n<td>一餐</td>\n</tr>\n<tr>\n<td>mean</td>\n<td>意思是</td>\n</tr>\n<tr>\n<td>meaning</td>\n<td>意思</td>\n</tr>\n<tr>\n<td>means</td>\n<td>方法</td>\n</tr>\n<tr>\n<td>measure</td>\n<td>测量</td>\n</tr>\n<tr>\n<td>meat</td>\n<td>肉</td>\n</tr>\n<tr>\n<td>medical</td>\n<td>医学的</td>\n</tr>\n<tr>\n<td>medicine</td>\n<td>医学</td>\n</tr>\n<tr>\n<td>meet</td>\n<td>满足</td>\n</tr>\n<tr>\n<td>meeting</td>\n<td>会议</td>\n</tr>\n<tr>\n<td>melt</td>\n<td>熔化</td>\n</tr>\n<tr>\n<td>member</td>\n<td>成员</td>\n</tr>\n<tr>\n<td>memory</td>\n<td>记忆</td>\n</tr>\n<tr>\n<td>mend</td>\n<td>修理</td>\n</tr>\n<tr>\n<td>mention</td>\n<td>提到</td>\n</tr>\n<tr>\n<td>merry</td>\n<td>愉快的</td>\n</tr>\n<tr>\n<td>message</td>\n<td>消息</td>\n</tr>\n<tr>\n<td>messenger</td>\n<td>信使</td>\n</tr>\n<tr>\n<td>metal</td>\n<td>金属</td>\n</tr>\n<tr>\n<td>meter</td>\n<td>米</td>\n</tr>\n<tr>\n<td>method</td>\n<td>方法</td>\n</tr>\n<tr>\n<td>metric</td>\n<td>米制的</td>\n</tr>\n<tr>\n<td>microscope</td>\n<td>显微镜</td>\n</tr>\n<tr>\n<td>middle</td>\n<td>中间的</td>\n</tr>\n<tr>\n<td>might</td>\n<td>可以</td>\n</tr>\n<tr>\n<td>mile</td>\n<td>英里</td>\n</tr>\n<tr>\n<td>military</td>\n<td>军事的</td>\n</tr>\n<tr>\n<td>milk</td>\n<td>牛奶</td>\n</tr>\n<tr>\n<td>million</td>\n<td>百万</td>\n</tr>\n<tr>\n<td>millionth</td>\n<td>第一百万</td>\n</tr>\n<tr>\n<td>mind</td>\n<td>介意</td>\n</tr>\n<tr>\n<td>mine</td>\n<td>矿</td>\n</tr>\n<tr>\n<td>mineral</td>\n<td>矿物</td>\n</tr>\n<tr>\n<td>minister</td>\n<td>部长</td>\n</tr>\n<tr>\n<td>minute</td>\n<td>分钟</td>\n</tr>\n<tr>\n<td>mirror</td>\n<td>镜子</td>\n</tr>\n<tr>\n<td>miss</td>\n<td>错过</td>\n</tr>\n<tr>\n<td>mist</td>\n<td>薄雾</td>\n</tr>\n<tr>\n<td>mistake</td>\n<td>错误</td>\n</tr>\n<tr>\n<td>mix</td>\n<td>混合</td>\n</tr>\n<tr>\n<td>mixture</td>\n<td>混合物</td>\n</tr>\n<tr>\n<td>model</td>\n<td>模型</td>\n</tr>\n<tr>\n<td>modern</td>\n<td>现代的</td>\n</tr>\n<tr>\n<td>moment</td>\n<td>瞬间</td>\n</tr>\n<tr>\n<td>money</td>\n<td>钱</td>\n</tr>\n<tr>\n<td>monkey</td>\n<td>猴子</td>\n</tr>\n<tr>\n<td>month</td>\n<td>月</td>\n</tr>\n<tr>\n<td>monthly</td>\n<td>月刊</td>\n</tr>\n<tr>\n<td>moon</td>\n<td>月亮</td>\n</tr>\n<tr>\n<td>moral</td>\n<td>道德的</td>\n</tr>\n<tr>\n<td>morals</td>\n<td>道德</td>\n</tr>\n<tr>\n<td>more</td>\n<td>更多</td>\n</tr>\n<tr>\n<td>morning</td>\n<td>早晨</td>\n</tr>\n<tr>\n<td>most</td>\n<td>最</td>\n</tr>\n<tr>\n<td>mother</td>\n<td>母亲</td>\n</tr>\n<tr>\n<td>motor</td>\n<td>发动机</td>\n</tr>\n<tr>\n<td>mountain</td>\n<td>山</td>\n</tr>\n<tr>\n<td>mouse</td>\n<td>鼠标</td>\n</tr>\n<tr>\n<td>mouth</td>\n<td>口</td>\n</tr>\n<tr>\n<td>move</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>much</td>\n<td>许多的</td>\n</tr>\n<tr>\n<td>mud</td>\n<td>泥</td>\n</tr>\n<tr>\n<td>multiply</td>\n<td>乘</td>\n</tr>\n<tr>\n<td>murder</td>\n<td>谋杀</td>\n</tr>\n<tr>\n<td>muscle</td>\n<td>肌肉</td>\n</tr>\n<tr>\n<td>music</td>\n<td>音乐</td>\n</tr>\n<tr>\n<td>musician</td>\n<td>音乐家</td>\n</tr>\n<tr>\n<td>must</td>\n<td>必须</td>\n</tr>\n<tr>\n<td>my</td>\n<td>我的</td>\n</tr>\n<tr>\n<td>myself</td>\n<td>我自己</td>\n</tr>\n<tr>\n<td>mysterious</td>\n<td>神秘的</td>\n</tr>\n<tr>\n<td>mystery</td>\n<td>神秘</td>\n</tr>\n<tr>\n<td>nail</td>\n<td>指甲</td>\n</tr>\n<tr>\n<td>name</td>\n<td>名称</td>\n</tr>\n<tr>\n<td>narrow</td>\n<td>狭窄的</td>\n</tr>\n<tr>\n<td>nasty</td>\n<td>肮脏的</td>\n</tr>\n<tr>\n<td>nation</td>\n<td>国家</td>\n</tr>\n<tr>\n<td>national</td>\n<td>国家的</td>\n</tr>\n<tr>\n<td>nature</td>\n<td>自然</td>\n</tr>\n<tr>\n<td>naval</td>\n<td>海军的</td>\n</tr>\n<tr>\n<td>navy</td>\n<td>海军</td>\n</tr>\n<tr>\n<td>near</td>\n<td>近的</td>\n</tr>\n<tr>\n<td>nearly</td>\n<td>几乎</td>\n</tr>\n<tr>\n<td>neat</td>\n<td>整洁的</td>\n</tr>\n<tr>\n<td>necessary</td>\n<td>必要的</td>\n</tr>\n<tr>\n<td>neck</td>\n<td>脖子</td>\n</tr>\n<tr>\n<td>need</td>\n<td>需要</td>\n</tr>\n<tr>\n<td>needle</td>\n<td>针</td>\n</tr>\n<tr>\n<td>neighbor</td>\n<td>邻居</td>\n</tr>\n<tr>\n<td>neighborhood</td>\n<td>邻域</td>\n</tr>\n<tr>\n<td>neither</td>\n<td>也不</td>\n</tr>\n<tr>\n<td>nerve</td>\n<td>神经</td>\n</tr>\n<tr>\n<td>nervous</td>\n<td>焦虑的</td>\n</tr>\n<tr>\n<td>nest</td>\n<td>巢</td>\n</tr>\n<tr>\n<td>net</td>\n<td>网</td>\n</tr>\n<tr>\n<td>network</td>\n<td>网络</td>\n</tr>\n<tr>\n<td>never</td>\n<td>从未</td>\n</tr>\n<tr>\n<td>new</td>\n<td>新的</td>\n</tr>\n<tr>\n<td>news</td>\n<td>新闻</td>\n</tr>\n<tr>\n<td>newspaper</td>\n<td>报纸</td>\n</tr>\n<tr>\n<td>next</td>\n<td>下一个</td>\n</tr>\n<tr>\n<td>nice</td>\n<td>美好的</td>\n</tr>\n<tr>\n<td>night</td>\n<td>夜</td>\n</tr>\n<tr>\n<td>nine</td>\n<td>九</td>\n</tr>\n<tr>\n<td>ninth</td>\n<td>第九</td>\n</tr>\n<tr>\n<td>no</td>\n<td>不</td>\n</tr>\n<tr>\n<td>no one</td>\n<td>没有人</td>\n</tr>\n<tr>\n<td>noble</td>\n<td>高尚的</td>\n</tr>\n<tr>\n<td>nobleman</td>\n<td>贵族</td>\n</tr>\n<tr>\n<td>noise</td>\n<td>噪音</td>\n</tr>\n<tr>\n<td>none</td>\n<td>没有人</td>\n</tr>\n<tr>\n<td>nonsense</td>\n<td>胡说</td>\n</tr>\n<tr>\n<td>nor</td>\n<td>也不</td>\n</tr>\n<tr>\n<td>north</td>\n<td>北</td>\n</tr>\n<tr>\n<td>northern</td>\n<td>北方的</td>\n</tr>\n<tr>\n<td>nose</td>\n<td>鼻子</td>\n</tr>\n<tr>\n<td>not</td>\n<td>不</td>\n</tr>\n<tr>\n<td>nothing</td>\n<td>没有什么</td>\n</tr>\n<tr>\n<td>notice</td>\n<td>通知</td>\n</tr>\n<tr>\n<td>noun</td>\n<td>名词</td>\n</tr>\n<tr>\n<td>now</td>\n<td>现在</td>\n</tr>\n<tr>\n<td>nowhere</td>\n<td>无处</td>\n</tr>\n<tr>\n<td>number</td>\n<td>数</td>\n</tr>\n<tr>\n<td>nurse</td>\n<td>护士</td>\n</tr>\n<tr>\n<td>nut</td>\n<td>坚果</td>\n</tr>\n<tr>\n<td>nylon</td>\n<td>尼龙</td>\n</tr>\n<tr>\n<td>o’clock</td>\n<td>点</td>\n</tr>\n<tr>\n<td>obedience</td>\n<td>服从</td>\n</tr>\n<tr>\n<td>obedient</td>\n<td>顺从的</td>\n</tr>\n<tr>\n<td>obey</td>\n<td>服从</td>\n</tr>\n<tr>\n<td>object</td>\n<td>对象</td>\n</tr>\n<tr>\n<td>obtain</td>\n<td>获得</td>\n</tr>\n<tr>\n<td>occasion</td>\n<td>场合</td>\n</tr>\n<tr>\n<td>ocean</td>\n<td>海洋</td>\n</tr>\n<tr>\n<td>odd</td>\n<td>古怪的</td>\n</tr>\n<tr>\n<td>of</td>\n<td>属于</td>\n</tr>\n<tr>\n<td>off</td>\n<td>远离的</td>\n</tr>\n<tr>\n<td>offend</td>\n<td>冒犯</td>\n</tr>\n<tr>\n<td>offense</td>\n<td>进攻</td>\n</tr>\n<tr>\n<td>offensive</td>\n<td>无礼的</td>\n</tr>\n<tr>\n<td>offer</td>\n<td>提供</td>\n</tr>\n<tr>\n<td>office</td>\n<td>办公室</td>\n</tr>\n<tr>\n<td>officer</td>\n<td>官员</td>\n</tr>\n<tr>\n<td>official</td>\n<td>官方的</td>\n</tr>\n<tr>\n<td>often</td>\n<td>经常</td>\n</tr>\n<tr>\n<td>oil</td>\n<td>油</td>\n</tr>\n<tr>\n<td>old</td>\n<td>古老的</td>\n</tr>\n<tr>\n<td>old-fashioned</td>\n<td>老式的</td>\n</tr>\n<tr>\n<td>on</td>\n<td>在</td>\n</tr>\n<tr>\n<td>once</td>\n<td>一旦</td>\n</tr>\n<tr>\n<td>one</td>\n<td>一</td>\n</tr>\n<tr>\n<td>oneself</td>\n<td>自己</td>\n</tr>\n<tr>\n<td>onion</td>\n<td>洋葱</td>\n</tr>\n<tr>\n<td>only</td>\n<td>只有</td>\n</tr>\n<tr>\n<td>open</td>\n<td>打开</td>\n</tr>\n<tr>\n<td>operate</td>\n<td>操作</td>\n</tr>\n<tr>\n<td>operation</td>\n<td>操作</td>\n</tr>\n<tr>\n<td>opinion</td>\n<td>意见</td>\n</tr>\n<tr>\n<td>opponent</td>\n<td>对手</td>\n</tr>\n<tr>\n<td>oppose</td>\n<td>反对</td>\n</tr>\n<tr>\n<td>opposite</td>\n<td>相反的</td>\n</tr>\n<tr>\n<td>opposition</td>\n<td>反对</td>\n</tr>\n<tr>\n<td>or</td>\n<td>或</td>\n</tr>\n<tr>\n<td>orange</td>\n<td>橙色</td>\n</tr>\n<tr>\n<td>order</td>\n<td>秩序</td>\n</tr>\n<tr>\n<td>ordinary</td>\n<td>普通的</td>\n</tr>\n<tr>\n<td>organ</td>\n<td>器官</td>\n</tr>\n<tr>\n<td>organization</td>\n<td>组织</td>\n</tr>\n<tr>\n<td>origin</td>\n<td>起源</td>\n</tr>\n<tr>\n<td>other</td>\n<td>其他</td>\n</tr>\n<tr>\n<td>otherwise</td>\n<td>否则</td>\n</tr>\n<tr>\n<td>ought</td>\n<td>应该</td>\n</tr>\n<tr>\n<td>our</td>\n<td>我们的</td>\n</tr>\n<tr>\n<td>ours</td>\n<td>我们的</td>\n</tr>\n<tr>\n<td>ourselves</td>\n<td>我们自己</td>\n</tr>\n<tr>\n<td>out</td>\n<td>外面的</td>\n</tr>\n<tr>\n<td>outdoor</td>\n<td>户外的</td>\n</tr>\n<tr>\n<td>outdoors</td>\n<td>在户外</td>\n</tr>\n<tr>\n<td>outer</td>\n<td>外面的</td>\n</tr>\n<tr>\n<td>outside</td>\n<td>外部</td>\n</tr>\n<tr>\n<td>over</td>\n<td>结束</td>\n</tr>\n<tr>\n<td>owe</td>\n<td>欠</td>\n</tr>\n<tr>\n<td>owing to</td>\n<td>由于</td>\n</tr>\n<tr>\n<td>own</td>\n<td>拥有</td>\n</tr>\n<tr>\n<td>oxygen</td>\n<td>氧气</td>\n</tr>\n<tr>\n<td>pack</td>\n<td>包装</td>\n</tr>\n<tr>\n<td>packet</td>\n<td>小包裹</td>\n</tr>\n<tr>\n<td>page</td>\n<td>页</td>\n</tr>\n<tr>\n<td>pain</td>\n<td>疼痛</td>\n</tr>\n<tr>\n<td>painful</td>\n<td>痛苦的</td>\n</tr>\n<tr>\n<td>paint</td>\n<td>油漆</td>\n</tr>\n<tr>\n<td>painting</td>\n<td>绘画</td>\n</tr>\n<tr>\n<td>pair</td>\n<td>一对</td>\n</tr>\n<tr>\n<td>palace</td>\n<td>宫殿</td>\n</tr>\n<tr>\n<td>pale</td>\n<td>苍白</td>\n</tr>\n<tr>\n<td>pan</td>\n<td>潘</td>\n</tr>\n<tr>\n<td>paper</td>\n<td>纸</td>\n</tr>\n<tr>\n<td>parallel</td>\n<td>平行</td>\n</tr>\n<tr>\n<td>parcel</td>\n<td>包裹</td>\n</tr>\n<tr>\n<td>parent</td>\n<td>起源</td>\n</tr>\n<tr>\n<td>park</td>\n<td>公园</td>\n</tr>\n<tr>\n<td>parliament</td>\n<td>议会</td>\n</tr>\n<tr>\n<td>part</td>\n<td>部分</td>\n</tr>\n<tr>\n<td>participle</td>\n<td>分词</td>\n</tr>\n<tr>\n<td>particular</td>\n<td>特定的</td>\n</tr>\n<tr>\n<td>partner</td>\n<td>合作伙伴</td>\n</tr>\n<tr>\n<td>party</td>\n<td>聚会</td>\n</tr>\n<tr>\n<td>pass</td>\n<td>通过</td>\n</tr>\n<tr>\n<td>passage</td>\n<td>通道</td>\n</tr>\n<tr>\n<td>passenger</td>\n<td>乘客</td>\n</tr>\n<tr>\n<td>past</td>\n<td>过去的</td>\n</tr>\n<tr>\n<td>pastry</td>\n<td>糕点</td>\n</tr>\n<tr>\n<td>path</td>\n<td>路径</td>\n</tr>\n<tr>\n<td>patience</td>\n<td>耐心</td>\n</tr>\n<tr>\n<td>patient</td>\n<td>病人</td>\n</tr>\n<tr>\n<td>pattern</td>\n<td>模式</td>\n</tr>\n<tr>\n<td>pause</td>\n<td>暂停</td>\n</tr>\n<tr>\n<td>pay</td>\n<td>支付</td>\n</tr>\n<tr>\n<td>payment</td>\n<td>付款</td>\n</tr>\n<tr>\n<td>peace</td>\n<td>和平</td>\n</tr>\n<tr>\n<td>peaceful</td>\n<td>和平</td>\n</tr>\n<tr>\n<td>pen</td>\n<td>笔</td>\n</tr>\n<tr>\n<td>pence</td>\n<td>便士</td>\n</tr>\n<tr>\n<td>pencil</td>\n<td>铅笔</td>\n</tr>\n<tr>\n<td>people</td>\n<td>人</td>\n</tr>\n<tr>\n<td>pepper</td>\n<td>胡椒</td>\n</tr>\n<tr>\n<td>per</td>\n<td>每</td>\n</tr>\n<tr>\n<td>perfect</td>\n<td>很完美</td>\n</tr>\n<tr>\n<td>perform</td>\n<td>表演</td>\n</tr>\n<tr>\n<td>perhaps</td>\n<td>也许</td>\n</tr>\n<tr>\n<td>period</td>\n<td>时期</td>\n</tr>\n<tr>\n<td>permission</td>\n<td>许可</td>\n</tr>\n<tr>\n<td>permit</td>\n<td>许可证</td>\n</tr>\n<tr>\n<td>person</td>\n<td>人</td>\n</tr>\n<tr>\n<td>personal</td>\n<td>个人的</td>\n</tr>\n<tr>\n<td>persuade</td>\n<td>说服</td>\n</tr>\n<tr>\n<td>pet</td>\n<td>宠物</td>\n</tr>\n<tr>\n<td>photograph</td>\n<td>照片</td>\n</tr>\n<tr>\n<td>photography</td>\n<td>摄影</td>\n</tr>\n<tr>\n<td>phrase</td>\n<td>短语</td>\n</tr>\n<tr>\n<td>physical</td>\n<td>身体的</td>\n</tr>\n<tr>\n<td>piano</td>\n<td>钢琴</td>\n</tr>\n<tr>\n<td>pick</td>\n<td>挑选</td>\n</tr>\n<tr>\n<td>picture</td>\n<td>照片</td>\n</tr>\n<tr>\n<td>piece</td>\n<td>块</td>\n</tr>\n<tr>\n<td>pig</td>\n<td>猪</td>\n</tr>\n<tr>\n<td>pile</td>\n<td>一堆</td>\n</tr>\n<tr>\n<td>pilot</td>\n<td>飞行员</td>\n</tr>\n<tr>\n<td>pin</td>\n<td>大头针</td>\n</tr>\n<tr>\n<td>pink</td>\n<td>粉红色</td>\n</tr>\n<tr>\n<td>pipe</td>\n<td>管</td>\n</tr>\n<tr>\n<td>pity</td>\n<td>怜悯</td>\n</tr>\n<tr>\n<td>place</td>\n<td>地方</td>\n</tr>\n<tr>\n<td>plain</td>\n<td>平原</td>\n</tr>\n<tr>\n<td>plan</td>\n<td>计划</td>\n</tr>\n<tr>\n<td>plane</td>\n<td>飞机</td>\n</tr>\n<tr>\n<td>plant</td>\n<td>植物</td>\n</tr>\n<tr>\n<td>plastic</td>\n<td>塑料</td>\n</tr>\n<tr>\n<td>plate</td>\n<td>盘子</td>\n</tr>\n<tr>\n<td>play</td>\n<td>玩</td>\n</tr>\n<tr>\n<td>pleasant</td>\n<td>令人愉快的</td>\n</tr>\n<tr>\n<td>please</td>\n<td>拜托</td>\n</tr>\n<tr>\n<td>pleased</td>\n<td>高兴的</td>\n</tr>\n<tr>\n<td>pleasure</td>\n<td>快乐</td>\n</tr>\n<tr>\n<td>plenty</td>\n<td>大量</td>\n</tr>\n<tr>\n<td>plural</td>\n<td>复数的</td>\n</tr>\n<tr>\n<td>pocket</td>\n<td>口袋</td>\n</tr>\n<tr>\n<td>poem</td>\n<td>诗</td>\n</tr>\n<tr>\n<td>poet</td>\n<td>诗人</td>\n</tr>\n<tr>\n<td>poetry</td>\n<td>诗</td>\n</tr>\n<tr>\n<td>point</td>\n<td>指向</td>\n</tr>\n<tr>\n<td>pointed</td>\n<td>指出</td>\n</tr>\n<tr>\n<td>poison</td>\n<td>毒药</td>\n</tr>\n<tr>\n<td>poisonous</td>\n<td>有毒的</td>\n</tr>\n<tr>\n<td>pole</td>\n<td>极</td>\n</tr>\n<tr>\n<td>police</td>\n<td>警方</td>\n</tr>\n<tr>\n<td>polish</td>\n<td>磨光</td>\n</tr>\n<tr>\n<td>polite</td>\n<td>有礼貌的</td>\n</tr>\n<tr>\n<td>political</td>\n<td>政治的</td>\n</tr>\n<tr>\n<td>politician</td>\n<td>政治家</td>\n</tr>\n<tr>\n<td>politics</td>\n<td>政治</td>\n</tr>\n<tr>\n<td>pool</td>\n<td>水塘</td>\n</tr>\n<tr>\n<td>poor</td>\n<td>贫穷的</td>\n</tr>\n<tr>\n<td>popular</td>\n<td>流行的</td>\n</tr>\n<tr>\n<td>popularity</td>\n<td>人气</td>\n</tr>\n<tr>\n<td>population</td>\n<td>人口</td>\n</tr>\n<tr>\n<td>port</td>\n<td>港口</td>\n</tr>\n<tr>\n<td>position</td>\n<td>位置</td>\n</tr>\n<tr>\n<td>possess</td>\n<td>拥有</td>\n</tr>\n<tr>\n<td>possession</td>\n<td>个人财产</td>\n</tr>\n<tr>\n<td>possibility</td>\n<td>可能性</td>\n</tr>\n<tr>\n<td>possible</td>\n<td>可能的</td>\n</tr>\n<tr>\n<td>possibly</td>\n<td>可能地</td>\n</tr>\n<tr>\n<td>post</td>\n<td>邮递</td>\n</tr>\n<tr>\n<td>pot</td>\n<td>锅</td>\n</tr>\n<tr>\n<td>potato</td>\n<td>马铃薯</td>\n</tr>\n<tr>\n<td>pound</td>\n<td>英镑</td>\n</tr>\n<tr>\n<td>pour</td>\n<td>倒</td>\n</tr>\n<tr>\n<td>powder</td>\n<td>粉</td>\n</tr>\n<tr>\n<td>power</td>\n<td>权力</td>\n</tr>\n<tr>\n<td>powerful</td>\n<td>强大的</td>\n</tr>\n<tr>\n<td>practical</td>\n<td>实际的</td>\n</tr>\n<tr>\n<td>practice</td>\n<td>实践</td>\n</tr>\n<tr>\n<td>praise</td>\n<td>赞美</td>\n</tr>\n<tr>\n<td>pray</td>\n<td>祈祷</td>\n</tr>\n<tr>\n<td>prayer</td>\n<td>祈祷</td>\n</tr>\n<tr>\n<td>precious</td>\n<td>珍贵的</td>\n</tr>\n<tr>\n<td>preparation</td>\n<td>准备</td>\n</tr>\n<tr>\n<td>prepare</td>\n<td>准备</td>\n</tr>\n<tr>\n<td>presence</td>\n<td>存在</td>\n</tr>\n<tr>\n<td>present</td>\n<td>目前</td>\n</tr>\n<tr>\n<td>preserve</td>\n<td>保存</td>\n</tr>\n<tr>\n<td>president</td>\n<td>总统</td>\n</tr>\n<tr>\n<td>press</td>\n<td>按</td>\n</tr>\n<tr>\n<td>pressure</td>\n<td>压力</td>\n</tr>\n<tr>\n<td>pretend</td>\n<td>假装</td>\n</tr>\n<tr>\n<td>pretty</td>\n<td>漂亮的</td>\n</tr>\n<tr>\n<td>prevent</td>\n<td>防止</td>\n</tr>\n<tr>\n<td>price</td>\n<td>价格</td>\n</tr>\n<tr>\n<td>prickly</td>\n<td>多刺的</td>\n</tr>\n<tr>\n<td>pride</td>\n<td>骄傲</td>\n</tr>\n<tr>\n<td>priest</td>\n<td>牧师</td>\n</tr>\n<tr>\n<td>prince</td>\n<td>王子</td>\n</tr>\n<tr>\n<td>principle</td>\n<td>原理</td>\n</tr>\n<tr>\n<td>print</td>\n<td>打印</td>\n</tr>\n<tr>\n<td>prison</td>\n<td>监狱</td>\n</tr>\n<tr>\n<td>prisoner</td>\n<td>囚犯</td>\n</tr>\n<tr>\n<td>private</td>\n<td>私有的</td>\n</tr>\n<tr>\n<td>prize</td>\n<td>奖</td>\n</tr>\n<tr>\n<td>probability</td>\n<td>可能性</td>\n</tr>\n<tr>\n<td>probable</td>\n<td>可能的</td>\n</tr>\n<tr>\n<td>problem</td>\n<td>问题</td>\n</tr>\n<tr>\n<td>process</td>\n<td>过程</td>\n</tr>\n<tr>\n<td>procession</td>\n<td>游行</td>\n</tr>\n<tr>\n<td>produce</td>\n<td>生产</td>\n</tr>\n<tr>\n<td>product</td>\n<td>产品</td>\n</tr>\n<tr>\n<td>production</td>\n<td>生产</td>\n</tr>\n<tr>\n<td>profession</td>\n<td>职业</td>\n</tr>\n<tr>\n<td>profit</td>\n<td>利润</td>\n</tr>\n<tr>\n<td>promise</td>\n<td>承诺</td>\n</tr>\n<tr>\n<td>pronounce</td>\n<td>发音</td>\n</tr>\n<tr>\n<td>pronunciation</td>\n<td>发音</td>\n</tr>\n<tr>\n<td>proof</td>\n<td>证明</td>\n</tr>\n<tr>\n<td>proper</td>\n<td>适当的</td>\n</tr>\n<tr>\n<td>property</td>\n<td>财产</td>\n</tr>\n<tr>\n<td>protect</td>\n<td>保护</td>\n</tr>\n<tr>\n<td>protection</td>\n<td>保护</td>\n</tr>\n<tr>\n<td>protective</td>\n<td>防护的</td>\n</tr>\n<tr>\n<td>proud</td>\n<td>自豪的</td>\n</tr>\n<tr>\n<td>prove</td>\n<td>证明</td>\n</tr>\n<tr>\n<td>provide</td>\n<td>提供</td>\n</tr>\n<tr>\n<td>provision</td>\n<td>规定</td>\n</tr>\n<tr>\n<td>provisions</td>\n<td>规定</td>\n</tr>\n<tr>\n<td>public</td>\n<td>公众的</td>\n</tr>\n<tr>\n<td>pull</td>\n<td>拉</td>\n</tr>\n<tr>\n<td>pump</td>\n<td>泵</td>\n</tr>\n<tr>\n<td>punish</td>\n<td>惩罚</td>\n</tr>\n<tr>\n<td>punishment</td>\n<td>惩罚</td>\n</tr>\n<tr>\n<td>pupil</td>\n<td>学生</td>\n</tr>\n<tr>\n<td>pure</td>\n<td>纯净的</td>\n</tr>\n<tr>\n<td>purple</td>\n<td>紫色</td>\n</tr>\n<tr>\n<td>purpose</td>\n<td>目的</td>\n</tr>\n<tr>\n<td>push</td>\n<td>推</td>\n</tr>\n<tr>\n<td>put</td>\n<td>放</td>\n</tr>\n<tr>\n<td>quality</td>\n<td>质量</td>\n</tr>\n<tr>\n<td>quantity</td>\n<td>量</td>\n</tr>\n<tr>\n<td>quarrel</td>\n<td>争吵</td>\n</tr>\n<tr>\n<td>quarter</td>\n<td>季度</td>\n</tr>\n<tr>\n<td>queen</td>\n<td>女王</td>\n</tr>\n<tr>\n<td>question</td>\n<td>问题</td>\n</tr>\n<tr>\n<td>quick</td>\n<td>快的</td>\n</tr>\n<tr>\n<td>quiet</td>\n<td>安静的</td>\n</tr>\n<tr>\n<td>quite</td>\n<td>相当地</td>\n</tr>\n<tr>\n<td>rabbit</td>\n<td>兔子</td>\n</tr>\n<tr>\n<td>race</td>\n<td>比赛</td>\n</tr>\n<tr>\n<td>radio</td>\n<td>收音机</td>\n</tr>\n<tr>\n<td>railway</td>\n<td>铁路</td>\n</tr>\n<tr>\n<td>rain</td>\n<td>雨</td>\n</tr>\n<tr>\n<td>raise</td>\n<td>提升</td>\n</tr>\n<tr>\n<td>range</td>\n<td>范围</td>\n</tr>\n<tr>\n<td>rank</td>\n<td>等级</td>\n</tr>\n<tr>\n<td>rapid</td>\n<td>迅速的</td>\n</tr>\n<tr>\n<td>rare</td>\n<td>稀有的</td>\n</tr>\n<tr>\n<td>rat</td>\n<td>老鼠</td>\n</tr>\n<tr>\n<td>rate</td>\n<td>率</td>\n</tr>\n<tr>\n<td>rather</td>\n<td>相当地</td>\n</tr>\n<tr>\n<td>raw</td>\n<td>未经加工的</td>\n</tr>\n<tr>\n<td>reach</td>\n<td>达到</td>\n</tr>\n<tr>\n<td>read</td>\n<td>阅读</td>\n</tr>\n<tr>\n<td>ready</td>\n<td>准备好的</td>\n</tr>\n<tr>\n<td>real</td>\n<td>真实的</td>\n</tr>\n<tr>\n<td>really</td>\n<td>真的？</td>\n</tr>\n<tr>\n<td>reason</td>\n<td>原因</td>\n</tr>\n<tr>\n<td>reasonable</td>\n<td>合理的</td>\n</tr>\n<tr>\n<td>receive</td>\n<td>接收</td>\n</tr>\n<tr>\n<td>recent</td>\n<td>最近的</td>\n</tr>\n<tr>\n<td>recently</td>\n<td>最近</td>\n</tr>\n<tr>\n<td>recognition</td>\n<td>识别</td>\n</tr>\n<tr>\n<td>recognize</td>\n<td>认出</td>\n</tr>\n<tr>\n<td>record</td>\n<td>记录</td>\n</tr>\n<tr>\n<td>red</td>\n<td>红色</td>\n</tr>\n<tr>\n<td>reduce</td>\n<td>减少</td>\n</tr>\n<tr>\n<td>reduction</td>\n<td>减少</td>\n</tr>\n<tr>\n<td>refusal</td>\n<td>拒绝</td>\n</tr>\n<tr>\n<td>refuse</td>\n<td>拒绝</td>\n</tr>\n<tr>\n<td>regard</td>\n<td>注意</td>\n</tr>\n<tr>\n<td>regular</td>\n<td>有规律的</td>\n</tr>\n<tr>\n<td>related</td>\n<td>相关的</td>\n</tr>\n<tr>\n<td>relation</td>\n<td>关系</td>\n</tr>\n<tr>\n<td>relative</td>\n<td>相对的</td>\n</tr>\n<tr>\n<td>religion</td>\n<td>宗教</td>\n</tr>\n<tr>\n<td>religious</td>\n<td>宗教的</td>\n</tr>\n<tr>\n<td>remain</td>\n<td>保持</td>\n</tr>\n<tr>\n<td>remark</td>\n<td>评论</td>\n</tr>\n<tr>\n<td>remember</td>\n<td>记得</td>\n</tr>\n<tr>\n<td>remind</td>\n<td>提醒</td>\n</tr>\n<tr>\n<td>remove</td>\n<td>去除</td>\n</tr>\n<tr>\n<td>rent</td>\n<td>租金</td>\n</tr>\n<tr>\n<td>repair</td>\n<td>修理</td>\n</tr>\n<tr>\n<td>repeat</td>\n<td>重复</td>\n</tr>\n<tr>\n<td>reply</td>\n<td>回复</td>\n</tr>\n<tr>\n<td>report</td>\n<td>报告</td>\n</tr>\n<tr>\n<td>represent</td>\n<td>代表</td>\n</tr>\n<tr>\n<td>representative</td>\n<td>代表</td>\n</tr>\n<tr>\n<td>republic</td>\n<td>共和国</td>\n</tr>\n<tr>\n<td>request</td>\n<td>请求</td>\n</tr>\n<tr>\n<td>respect</td>\n<td>尊重</td>\n</tr>\n<tr>\n<td>respectful</td>\n<td>恭敬的</td>\n</tr>\n<tr>\n<td>responsible</td>\n<td>负责的</td>\n</tr>\n<tr>\n<td>rest</td>\n<td>休息</td>\n</tr>\n<tr>\n<td>restaurant</td>\n<td>餐厅</td>\n</tr>\n<tr>\n<td>result</td>\n<td>结果</td>\n</tr>\n<tr>\n<td>return</td>\n<td>返回</td>\n</tr>\n<tr>\n<td>reward</td>\n<td>奖励</td>\n</tr>\n<tr>\n<td>rice</td>\n<td>大米</td>\n</tr>\n<tr>\n<td>rich</td>\n<td>富有的</td>\n</tr>\n<tr>\n<td>rid</td>\n<td>摆脱</td>\n</tr>\n<tr>\n<td>ride</td>\n<td>骑</td>\n</tr>\n<tr>\n<td>right</td>\n<td>正确的</td>\n</tr>\n<tr>\n<td>ring</td>\n<td>戒指</td>\n</tr>\n<tr>\n<td>ripe</td>\n<td>成熟的</td>\n</tr>\n<tr>\n<td>rise</td>\n<td>上升</td>\n</tr>\n<tr>\n<td>risk</td>\n<td>风险</td>\n</tr>\n<tr>\n<td>river</td>\n<td>河</td>\n</tr>\n<tr>\n<td>road</td>\n<td>路</td>\n</tr>\n<tr>\n<td>rob</td>\n<td>抢劫</td>\n</tr>\n<tr>\n<td>rock</td>\n<td>岩石</td>\n</tr>\n<tr>\n<td>rod</td>\n<td>杆</td>\n</tr>\n<tr>\n<td>roll</td>\n<td>卷</td>\n</tr>\n<tr>\n<td>roof</td>\n<td>屋顶</td>\n</tr>\n<tr>\n<td>room</td>\n<td>房间</td>\n</tr>\n<tr>\n<td>root</td>\n<td>根</td>\n</tr>\n<tr>\n<td>rope</td>\n<td>绳</td>\n</tr>\n<tr>\n<td>rose</td>\n<td>玫瑰</td>\n</tr>\n<tr>\n<td>rough</td>\n<td>粗糙的</td>\n</tr>\n<tr>\n<td>round</td>\n<td>圆</td>\n</tr>\n<tr>\n<td>row</td>\n<td>行</td>\n</tr>\n<tr>\n<td>royal</td>\n<td>皇家的</td>\n</tr>\n<tr>\n<td>rub</td>\n<td>擦</td>\n</tr>\n<tr>\n<td>rubber</td>\n<td>橡胶</td>\n</tr>\n<tr>\n<td>rude</td>\n<td>粗鲁的</td>\n</tr>\n<tr>\n<td>ruin</td>\n<td>废墟</td>\n</tr>\n<tr>\n<td>rule</td>\n<td>规则</td>\n</tr>\n<tr>\n<td>ruler</td>\n<td>尺子</td>\n</tr>\n<tr>\n<td>run</td>\n<td>运行</td>\n</tr>\n<tr>\n<td>rush</td>\n<td>冲</td>\n</tr>\n<tr>\n<td>sad</td>\n<td>悲哀的</td>\n</tr>\n<tr>\n<td>safe</td>\n<td>安全的</td>\n</tr>\n<tr>\n<td>safety</td>\n<td>安全</td>\n</tr>\n<tr>\n<td>sail</td>\n<td>帆</td>\n</tr>\n<tr>\n<td>sale</td>\n<td>销售</td>\n</tr>\n<tr>\n<td>salt</td>\n<td>盐</td>\n</tr>\n<tr>\n<td>same</td>\n<td>相同的</td>\n</tr>\n<tr>\n<td>sand</td>\n<td>沙</td>\n</tr>\n<tr>\n<td>satisfaction</td>\n<td>满意</td>\n</tr>\n<tr>\n<td>satisfactory</td>\n<td>令人满意的</td>\n</tr>\n<tr>\n<td>satisfy</td>\n<td>满足</td>\n</tr>\n<tr>\n<td>save</td>\n<td>节约</td>\n</tr>\n<tr>\n<td>say</td>\n<td>说</td>\n</tr>\n<tr>\n<td>scale</td>\n<td>规模</td>\n</tr>\n<tr>\n<td>scatter</td>\n<td>分散</td>\n</tr>\n<tr>\n<td>scene</td>\n<td>场景</td>\n</tr>\n<tr>\n<td>scenery</td>\n<td>风景</td>\n</tr>\n<tr>\n<td>school</td>\n<td>学校</td>\n</tr>\n<tr>\n<td>science</td>\n<td>科学</td>\n</tr>\n<tr>\n<td>scientific</td>\n<td>科学的</td>\n</tr>\n<tr>\n<td>scientist</td>\n<td>科学家</td>\n</tr>\n<tr>\n<td>scissors</td>\n<td>剪刀</td>\n</tr>\n<tr>\n<td>screw</td>\n<td>螺丝钉</td>\n</tr>\n<tr>\n<td>sea</td>\n<td>海</td>\n</tr>\n<tr>\n<td>search</td>\n<td>搜索</td>\n</tr>\n<tr>\n<td>season</td>\n<td>季节</td>\n</tr>\n<tr>\n<td>seat</td>\n<td>座位</td>\n</tr>\n<tr>\n<td>second</td>\n<td>第二</td>\n</tr>\n<tr>\n<td>secrecy</td>\n<td>保密</td>\n</tr>\n<tr>\n<td>secret</td>\n<td>秘密</td>\n</tr>\n<tr>\n<td>secretary</td>\n<td>秘书</td>\n</tr>\n<tr>\n<td>see</td>\n<td>看见</td>\n</tr>\n<tr>\n<td>seed</td>\n<td>种子</td>\n</tr>\n<tr>\n<td>seem</td>\n<td>似乎</td>\n</tr>\n<tr>\n<td>seize</td>\n<td>抓住</td>\n</tr>\n<tr>\n<td>sell</td>\n<td>卖</td>\n</tr>\n<tr>\n<td>send</td>\n<td>发送</td>\n</tr>\n<tr>\n<td>sensation</td>\n<td>感觉</td>\n</tr>\n<tr>\n<td>sense</td>\n<td>感觉</td>\n</tr>\n<tr>\n<td>senseless</td>\n<td>无知觉的</td>\n</tr>\n<tr>\n<td>sensible</td>\n<td>明智的</td>\n</tr>\n<tr>\n<td>sensitive</td>\n<td>敏感的</td>\n</tr>\n<tr>\n<td>sentence</td>\n<td>句子</td>\n</tr>\n<tr>\n<td>separate</td>\n<td>分离</td>\n</tr>\n<tr>\n<td>serious</td>\n<td>严重的</td>\n</tr>\n<tr>\n<td>servant</td>\n<td>仆人</td>\n</tr>\n<tr>\n<td>serve</td>\n<td>服务</td>\n</tr>\n<tr>\n<td>service</td>\n<td>服务</td>\n</tr>\n<tr>\n<td>set</td>\n<td>设置</td>\n</tr>\n<tr>\n<td>settle</td>\n<td>解决</td>\n</tr>\n<tr>\n<td>seven</td>\n<td>七</td>\n</tr>\n<tr>\n<td>seventh</td>\n<td>第七</td>\n</tr>\n<tr>\n<td>several</td>\n<td>几个</td>\n</tr>\n<tr>\n<td>severe</td>\n<td>严峻的</td>\n</tr>\n<tr>\n<td>sew</td>\n<td>缝</td>\n</tr>\n<tr>\n<td>sex</td>\n<td>性</td>\n</tr>\n<tr>\n<td>sexual</td>\n<td>性的</td>\n</tr>\n<tr>\n<td>shade</td>\n<td>阴影</td>\n</tr>\n<tr>\n<td>shadow</td>\n<td>阴影</td>\n</tr>\n<tr>\n<td>shake</td>\n<td>摇</td>\n</tr>\n<tr>\n<td>shall</td>\n<td>应该</td>\n</tr>\n<tr>\n<td>shame</td>\n<td>羞耻</td>\n</tr>\n<tr>\n<td>shape</td>\n<td>形状</td>\n</tr>\n<tr>\n<td>share</td>\n<td>分享</td>\n</tr>\n<tr>\n<td>sharp</td>\n<td>锋利的</td>\n</tr>\n<tr>\n<td>she</td>\n<td>她</td>\n</tr>\n<tr>\n<td>sheep</td>\n<td>羊</td>\n</tr>\n<tr>\n<td>sheet</td>\n<td>床单</td>\n</tr>\n<tr>\n<td>shelf</td>\n<td>架子</td>\n</tr>\n<tr>\n<td>shell</td>\n<td>壳</td>\n</tr>\n<tr>\n<td>shelter</td>\n<td>避难所</td>\n</tr>\n<tr>\n<td>shield</td>\n<td>盾</td>\n</tr>\n<tr>\n<td>shine</td>\n<td>闪耀</td>\n</tr>\n<tr>\n<td>ship</td>\n<td>船</td>\n</tr>\n<tr>\n<td>shirt</td>\n<td>衬衫</td>\n</tr>\n<tr>\n<td>shock</td>\n<td>震惊</td>\n</tr>\n<tr>\n<td>shoe</td>\n<td>鞋</td>\n</tr>\n<tr>\n<td>shoot</td>\n<td>拍摄</td>\n</tr>\n<tr>\n<td>shop</td>\n<td>商店</td>\n</tr>\n<tr>\n<td>shopkeeper</td>\n<td>店主</td>\n</tr>\n<tr>\n<td>shore</td>\n<td>岸</td>\n</tr>\n<tr>\n<td>short</td>\n<td>短的</td>\n</tr>\n<tr>\n<td>shot</td>\n<td>射击</td>\n</tr>\n<tr>\n<td>should</td>\n<td>应该</td>\n</tr>\n<tr>\n<td>shoulder</td>\n<td>肩</td>\n</tr>\n<tr>\n<td>shout</td>\n<td>呼喊</td>\n</tr>\n<tr>\n<td>show</td>\n<td>显示</td>\n</tr>\n<tr>\n<td>shut</td>\n<td>关闭</td>\n</tr>\n<tr>\n<td>sick</td>\n<td>生病的</td>\n</tr>\n<tr>\n<td>side</td>\n<td>边</td>\n</tr>\n<tr>\n<td>sideways</td>\n<td>侧着</td>\n</tr>\n<tr>\n<td>sight</td>\n<td>景象</td>\n</tr>\n<tr>\n<td>sign</td>\n<td>签名</td>\n</tr>\n<tr>\n<td>signal</td>\n<td>信号</td>\n</tr>\n<tr>\n<td>signature</td>\n<td>签名</td>\n</tr>\n<tr>\n<td>silence</td>\n<td>沉默</td>\n</tr>\n<tr>\n<td>silent</td>\n<td>沉默的</td>\n</tr>\n<tr>\n<td>silk</td>\n<td>丝绸</td>\n</tr>\n<tr>\n<td>silly</td>\n<td>愚蠢的</td>\n</tr>\n<tr>\n<td>silver</td>\n<td>银</td>\n</tr>\n<tr>\n<td>similar</td>\n<td>类似的</td>\n</tr>\n<tr>\n<td>similarity</td>\n<td>相似性</td>\n</tr>\n<tr>\n<td>simple</td>\n<td>简单的</td>\n</tr>\n<tr>\n<td>since</td>\n<td>自从</td>\n</tr>\n<tr>\n<td>sincere</td>\n<td>真诚的</td>\n</tr>\n<tr>\n<td>sing</td>\n<td>唱</td>\n</tr>\n<tr>\n<td>single</td>\n<td>单一的</td>\n</tr>\n<tr>\n<td>singular</td>\n<td>单数的</td>\n</tr>\n<tr>\n<td>sink</td>\n<td>下沉</td>\n</tr>\n<tr>\n<td>sister</td>\n<td>姐妹</td>\n</tr>\n<tr>\n<td>sit</td>\n<td>坐</td>\n</tr>\n<tr>\n<td>situation</td>\n<td>情况</td>\n</tr>\n<tr>\n<td>six</td>\n<td>六</td>\n</tr>\n<tr>\n<td>sixth</td>\n<td>第六</td>\n</tr>\n<tr>\n<td>size</td>\n<td>大小</td>\n</tr>\n<tr>\n<td>skill</td>\n<td>技能</td>\n</tr>\n<tr>\n<td>skillful</td>\n<td>熟练的</td>\n</tr>\n<tr>\n<td>skin</td>\n<td>皮肤</td>\n</tr>\n<tr>\n<td>skirt</td>\n<td>裙子</td>\n</tr>\n<tr>\n<td>sky</td>\n<td>天空</td>\n</tr>\n<tr>\n<td>slave</td>\n<td>奴隶</td>\n</tr>\n<tr>\n<td>sleep</td>\n<td>睡觉</td>\n</tr>\n<tr>\n<td>slide</td>\n<td>滑动</td>\n</tr>\n<tr>\n<td>slight</td>\n<td>轻微的</td>\n</tr>\n<tr>\n<td>slip</td>\n<td>溜</td>\n</tr>\n<tr>\n<td>slippery</td>\n<td>滑的</td>\n</tr>\n<tr>\n<td>slope</td>\n<td>斜坡</td>\n</tr>\n<tr>\n<td>slow</td>\n<td>缓慢的</td>\n</tr>\n<tr>\n<td>small</td>\n<td>小的</td>\n</tr>\n<tr>\n<td>smell</td>\n<td>气味</td>\n</tr>\n<tr>\n<td>smile</td>\n<td>微笑</td>\n</tr>\n<tr>\n<td>smoke</td>\n<td>烟</td>\n</tr>\n<tr>\n<td>smooth</td>\n<td>光滑的</td>\n</tr>\n<tr>\n<td>snake</td>\n<td>蛇</td>\n</tr>\n<tr>\n<td>snow</td>\n<td>雪</td>\n</tr>\n<tr>\n<td>so</td>\n<td>所以</td>\n</tr>\n<tr>\n<td>soap</td>\n<td>肥皂</td>\n</tr>\n<tr>\n<td>social</td>\n<td>社会的</td>\n</tr>\n<tr>\n<td>society</td>\n<td>社会</td>\n</tr>\n<tr>\n<td>sock</td>\n<td>短袜</td>\n</tr>\n<tr>\n<td>soft</td>\n<td>软的</td>\n</tr>\n<tr>\n<td>soil</td>\n<td>土壤</td>\n</tr>\n<tr>\n<td>soldier</td>\n<td>士兵</td>\n</tr>\n<tr>\n<td>solemn</td>\n<td>庄严的</td>\n</tr>\n<tr>\n<td>solid</td>\n<td>固体</td>\n</tr>\n<tr>\n<td>some</td>\n<td>一些</td>\n</tr>\n<tr>\n<td>somehow</td>\n<td>以某种方式</td>\n</tr>\n<tr>\n<td>someone</td>\n<td>某人</td>\n</tr>\n<tr>\n<td>something</td>\n<td>某物</td>\n</tr>\n<tr>\n<td>sometimes</td>\n<td>有时</td>\n</tr>\n<tr>\n<td>somewhere</td>\n<td>在某处</td>\n</tr>\n<tr>\n<td>son</td>\n<td>儿子</td>\n</tr>\n<tr>\n<td>song</td>\n<td>歌曲</td>\n</tr>\n<tr>\n<td>soon</td>\n<td>很快</td>\n</tr>\n<tr>\n<td>sore</td>\n<td>疼痛的</td>\n</tr>\n<tr>\n<td>sorrow</td>\n<td>悲伤</td>\n</tr>\n<tr>\n<td>sorry</td>\n<td>对不起的</td>\n</tr>\n<tr>\n<td>sort</td>\n<td>分类</td>\n</tr>\n<tr>\n<td>soul</td>\n<td>灵魂</td>\n</tr>\n<tr>\n<td>sound</td>\n<td>声音</td>\n</tr>\n<tr>\n<td>soup</td>\n<td>汤</td>\n</tr>\n<tr>\n<td>sour</td>\n<td>酸的</td>\n</tr>\n<tr>\n<td>south</td>\n<td>南方</td>\n</tr>\n<tr>\n<td>southern</td>\n<td>南方的</td>\n</tr>\n<tr>\n<td>space</td>\n<td>空间</td>\n</tr>\n<tr>\n<td>spacecraft</td>\n<td>航天器</td>\n</tr>\n<tr>\n<td>spade</td>\n<td>铲</td>\n</tr>\n<tr>\n<td>speak</td>\n<td>说话</td>\n</tr>\n<tr>\n<td>spear</td>\n<td>矛</td>\n</tr>\n<tr>\n<td>special</td>\n<td>特殊的</td>\n</tr>\n<tr>\n<td>specialist</td>\n<td>专家</td>\n</tr>\n<tr>\n<td>speech</td>\n<td>演讲</td>\n</tr>\n<tr>\n<td>speed</td>\n<td>速度</td>\n</tr>\n<tr>\n<td>spell</td>\n<td>拼写</td>\n</tr>\n<tr>\n<td>spend</td>\n<td>花费</td>\n</tr>\n<tr>\n<td>spin</td>\n<td>旋转</td>\n</tr>\n<tr>\n<td>spirit</td>\n<td>精神</td>\n</tr>\n<tr>\n<td>spite</td>\n<td>怨恨</td>\n</tr>\n<tr>\n<td>splendid</td>\n<td>壮观的</td>\n</tr>\n<tr>\n<td>split</td>\n<td>分裂</td>\n</tr>\n<tr>\n<td>spoil</td>\n<td>破坏</td>\n</tr>\n<tr>\n<td>spoon</td>\n<td>勺子</td>\n</tr>\n<tr>\n<td>sport</td>\n<td>运动</td>\n</tr>\n<tr>\n<td>spot</td>\n<td>地点</td>\n</tr>\n<tr>\n<td>spread</td>\n<td>传播</td>\n</tr>\n<tr>\n<td>spring</td>\n<td>春天</td>\n</tr>\n<tr>\n<td>square</td>\n<td>广场</td>\n</tr>\n<tr>\n<td>stage</td>\n<td>阶段</td>\n</tr>\n<tr>\n<td>stair</td>\n<td>楼梯</td>\n</tr>\n<tr>\n<td>stamp</td>\n<td>邮票</td>\n</tr>\n<tr>\n<td>stand</td>\n<td>站</td>\n</tr>\n<tr>\n<td>standard</td>\n<td>标准</td>\n</tr>\n<tr>\n<td>star</td>\n<td>明星</td>\n</tr>\n<tr>\n<td>start</td>\n<td>开始</td>\n</tr>\n<tr>\n<td>state</td>\n<td>状态</td>\n</tr>\n<tr>\n<td>station</td>\n<td>站</td>\n</tr>\n<tr>\n<td>stay</td>\n<td>停留</td>\n</tr>\n<tr>\n<td>steady</td>\n<td>稳定的</td>\n</tr>\n<tr>\n<td>steal</td>\n<td>偷</td>\n</tr>\n<tr>\n<td>steam</td>\n<td>蒸汽</td>\n</tr>\n<tr>\n<td>steel</td>\n<td>钢</td>\n</tr>\n<tr>\n<td>steep</td>\n<td>陡峭的</td>\n</tr>\n<tr>\n<td>stem</td>\n<td>茎</td>\n</tr>\n<tr>\n<td>step</td>\n<td>步</td>\n</tr>\n<tr>\n<td>stick</td>\n<td>粘贴</td>\n</tr>\n<tr>\n<td>sticky</td>\n<td>粘性的</td>\n</tr>\n<tr>\n<td>stiff</td>\n<td>僵硬的</td>\n</tr>\n<tr>\n<td>still</td>\n<td>仍然</td>\n</tr>\n<tr>\n<td>sting</td>\n<td>刺</td>\n</tr>\n<tr>\n<td>stitch</td>\n<td>缝</td>\n</tr>\n<tr>\n<td>stomach</td>\n<td>胃</td>\n</tr>\n<tr>\n<td>stone</td>\n<td>石</td>\n</tr>\n<tr>\n<td>stop</td>\n<td>停止</td>\n</tr>\n<tr>\n<td>store</td>\n<td>商店</td>\n</tr>\n<tr>\n<td>storm</td>\n<td>暴风雨</td>\n</tr>\n<tr>\n<td>story</td>\n<td>故事</td>\n</tr>\n<tr>\n<td>straight</td>\n<td>直的</td>\n</tr>\n<tr>\n<td>strange</td>\n<td>奇怪的</td>\n</tr>\n<tr>\n<td>stranger</td>\n<td>陌生人</td>\n</tr>\n<tr>\n<td>stream</td>\n<td>流动</td>\n</tr>\n<tr>\n<td>street</td>\n<td>街道</td>\n</tr>\n<tr>\n<td>strength</td>\n<td>力量</td>\n</tr>\n<tr>\n<td>stretch</td>\n<td>伸展</td>\n</tr>\n<tr>\n<td>strike</td>\n<td>罢工</td>\n</tr>\n<tr>\n<td>string</td>\n<td>一串</td>\n</tr>\n<tr>\n<td>stroke</td>\n<td>划</td>\n</tr>\n<tr>\n<td>strong</td>\n<td>坚强的</td>\n</tr>\n<tr>\n<td>structure</td>\n<td>结构</td>\n</tr>\n<tr>\n<td>struggle</td>\n<td>斗争</td>\n</tr>\n<tr>\n<td>student</td>\n<td>学生</td>\n</tr>\n<tr>\n<td>study</td>\n<td>学习</td>\n</tr>\n<tr>\n<td>stupid</td>\n<td>愚蠢的</td>\n</tr>\n<tr>\n<td>style</td>\n<td>风格</td>\n</tr>\n<tr>\n<td>subject</td>\n<td>主题</td>\n</tr>\n<tr>\n<td>substance</td>\n<td>物质</td>\n</tr>\n<tr>\n<td>subtract</td>\n<td>减去</td>\n</tr>\n<tr>\n<td>succeed</td>\n<td>成功</td>\n</tr>\n<tr>\n<td>success</td>\n<td>成功</td>\n</tr>\n<tr>\n<td>successful</td>\n<td>成功的</td>\n</tr>\n<tr>\n<td>such</td>\n<td>这样的</td>\n</tr>\n<tr>\n<td>suck</td>\n<td>吮吸</td>\n</tr>\n<tr>\n<td>sudden</td>\n<td>突然的</td>\n</tr>\n<tr>\n<td>suffer</td>\n<td>遭受</td>\n</tr>\n<tr>\n<td>sugar</td>\n<td>糖</td>\n</tr>\n<tr>\n<td>suggest</td>\n<td>建议</td>\n</tr>\n<tr>\n<td>suit</td>\n<td>适合</td>\n</tr>\n<tr>\n<td>suitable</td>\n<td>合适的</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>总和</td>\n</tr>\n<tr>\n<td>summer</td>\n<td>夏天</td>\n</tr>\n<tr>\n<td>sun</td>\n<td>太阳</td>\n</tr>\n<tr>\n<td>supper</td>\n<td>晚饭</td>\n</tr>\n<tr>\n<td>supply</td>\n<td>供给</td>\n</tr>\n<tr>\n<td>support</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>suppose</td>\n<td>假设</td>\n</tr>\n<tr>\n<td>sure</td>\n<td>当然</td>\n</tr>\n<tr>\n<td>surface</td>\n<td>表面</td>\n</tr>\n<tr>\n<td>surprise</td>\n<td>惊喜</td>\n</tr>\n<tr>\n<td>surround</td>\n<td>环绕</td>\n</tr>\n<tr>\n<td>swallow</td>\n<td>吞</td>\n</tr>\n<tr>\n<td>swear</td>\n<td>发誓</td>\n</tr>\n<tr>\n<td>sweep</td>\n<td>打扫</td>\n</tr>\n<tr>\n<td>sweet</td>\n<td>甜的</td>\n</tr>\n<tr>\n<td>swell</td>\n<td>膨胀</td>\n</tr>\n<tr>\n<td>swim</td>\n<td>游泳</td>\n</tr>\n<tr>\n<td>swing</td>\n<td>摆动</td>\n</tr>\n<tr>\n<td>sword</td>\n<td>剑</td>\n</tr>\n<tr>\n<td>sympathetic</td>\n<td>同情的</td>\n</tr>\n<tr>\n<td>sympathy</td>\n<td>同情</td>\n</tr>\n<tr>\n<td>system</td>\n<td>系统</td>\n</tr>\n<tr>\n<td>table</td>\n<td>桌子</td>\n</tr>\n<tr>\n<td>tail</td>\n<td>尾</td>\n</tr>\n<tr>\n<td>take</td>\n<td>拿</td>\n</tr>\n<tr>\n<td>talk</td>\n<td>谈话</td>\n</tr>\n<tr>\n<td>tall</td>\n<td>高的</td>\n</tr>\n<tr>\n<td>taste</td>\n<td>味道</td>\n</tr>\n<tr>\n<td>tax</td>\n<td>税</td>\n</tr>\n<tr>\n<td>taxi</td>\n<td>出租车</td>\n</tr>\n<tr>\n<td>tea</td>\n<td>茶</td>\n</tr>\n<tr>\n<td>teach</td>\n<td>教</td>\n</tr>\n<tr>\n<td>team</td>\n<td>团队</td>\n</tr>\n<tr>\n<td>tear</td>\n<td>撕裂</td>\n</tr>\n<tr>\n<td>telephone</td>\n<td>电话</td>\n</tr>\n<tr>\n<td>television</td>\n<td>电视</td>\n</tr>\n<tr>\n<td>tell</td>\n<td>告诉</td>\n</tr>\n<tr>\n<td>temper</td>\n<td>脾气</td>\n</tr>\n<tr>\n<td>temperature</td>\n<td>温度</td>\n</tr>\n<tr>\n<td>temple</td>\n<td>寺庙</td>\n</tr>\n<tr>\n<td>tend</td>\n<td>倾向</td>\n</tr>\n<tr>\n<td>tendency</td>\n<td>趋势</td>\n</tr>\n<tr>\n<td>tender</td>\n<td>柔软的</td>\n</tr>\n<tr>\n<td>tennis</td>\n<td>网球</td>\n</tr>\n<tr>\n<td>tense</td>\n<td>紧张的</td>\n</tr>\n<tr>\n<td>tent</td>\n<td>帐篷</td>\n</tr>\n<tr>\n<td>terrible</td>\n<td>可怕的</td>\n</tr>\n<tr>\n<td>terror</td>\n<td>恐怖</td>\n</tr>\n<tr>\n<td>test</td>\n<td>测试</td>\n</tr>\n<tr>\n<td>than</td>\n<td>比</td>\n</tr>\n<tr>\n<td>thank</td>\n<td>感谢</td>\n</tr>\n<tr>\n<td>that</td>\n<td>那个</td>\n</tr>\n<tr>\n<td>the</td>\n<td>这个</td>\n</tr>\n<tr>\n<td>theater</td>\n<td>剧场</td>\n</tr>\n<tr>\n<td>their</td>\n<td>他们的</td>\n</tr>\n<tr>\n<td>theirs</td>\n<td>他们的</td>\n</tr>\n<tr>\n<td>them</td>\n<td>他们</td>\n</tr>\n<tr>\n<td>themselves</td>\n<td>他们自己</td>\n</tr>\n<tr>\n<td>then</td>\n<td>然后</td>\n</tr>\n<tr>\n<td>there</td>\n<td>那里</td>\n</tr>\n<tr>\n<td>therefore</td>\n<td>因此</td>\n</tr>\n<tr>\n<td>these</td>\n<td>这些</td>\n</tr>\n<tr>\n<td>they</td>\n<td>他们</td>\n</tr>\n<tr>\n<td>thick</td>\n<td>厚的</td>\n</tr>\n<tr>\n<td>thief</td>\n<td>小偷</td>\n</tr>\n<tr>\n<td>thin</td>\n<td>薄的</td>\n</tr>\n<tr>\n<td>thing</td>\n<td>事情</td>\n</tr>\n<tr>\n<td>think</td>\n<td>认为</td>\n</tr>\n<tr>\n<td>third</td>\n<td>第三的</td>\n</tr>\n<tr>\n<td>thirst</td>\n<td>口渴</td>\n</tr>\n<tr>\n<td>thirsty</td>\n<td>口渴的</td>\n</tr>\n<tr>\n<td>this</td>\n<td>这</td>\n</tr>\n<tr>\n<td>thorough</td>\n<td>彻底的</td>\n</tr>\n<tr>\n<td>those</td>\n<td>那些</td>\n</tr>\n<tr>\n<td>though</td>\n<td>虽然</td>\n</tr>\n<tr>\n<td>thought</td>\n<td>思想</td>\n</tr>\n<tr>\n<td>thousand</td>\n<td>千</td>\n</tr>\n<tr>\n<td>thousandth</td>\n<td>第一千</td>\n</tr>\n<tr>\n<td>thread</td>\n<td>线</td>\n</tr>\n<tr>\n<td>threat</td>\n<td>威胁</td>\n</tr>\n<tr>\n<td>threaten</td>\n<td>威胁</td>\n</tr>\n<tr>\n<td>three</td>\n<td>三</td>\n</tr>\n<tr>\n<td>throat</td>\n<td>喉咙</td>\n</tr>\n<tr>\n<td>through</td>\n<td>通过</td>\n</tr>\n<tr>\n<td>throw</td>\n<td>扔</td>\n</tr>\n<tr>\n<td>thumb</td>\n<td>拇指</td>\n</tr>\n<tr>\n<td>thunder</td>\n<td>打雷</td>\n</tr>\n<tr>\n<td>thus</td>\n<td>因此</td>\n</tr>\n<tr>\n<td>ticket</td>\n<td>票</td>\n</tr>\n<tr>\n<td>tidy</td>\n<td>整齐的</td>\n</tr>\n<tr>\n<td>tie</td>\n<td>领带</td>\n</tr>\n<tr>\n<td>tiger</td>\n<td>老虎</td>\n</tr>\n<tr>\n<td>tight</td>\n<td>紧的</td>\n</tr>\n<tr>\n<td>time</td>\n<td>时间</td>\n</tr>\n<tr>\n<td>timetable</td>\n<td>时间表</td>\n</tr>\n<tr>\n<td>tin</td>\n<td>锡</td>\n</tr>\n<tr>\n<td>tire</td>\n<td>轮胎</td>\n</tr>\n<tr>\n<td>tire</td>\n<td>轮胎</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>to</td>\n<td>到</td>\n</tr>\n<tr>\n<td>tobacco</td>\n<td>烟草</td>\n</tr>\n<tr>\n<td>today</td>\n<td>今天</td>\n</tr>\n<tr>\n<td>toe</td>\n<td>脚趾</td>\n</tr>\n<tr>\n<td>together</td>\n<td>在一起</td>\n</tr>\n<tr>\n<td>tomorrow</td>\n<td>明天</td>\n</tr>\n<tr>\n<td>tongue</td>\n<td>舌头</td>\n</tr>\n<tr>\n<td>tonight</td>\n<td>今晚</td>\n</tr>\n<tr>\n<td>too</td>\n<td>太</td>\n</tr>\n<tr>\n<td>tool</td>\n<td>工具</td>\n</tr>\n<tr>\n<td>tooth</td>\n<td>牙齿</td>\n</tr>\n<tr>\n<td>top</td>\n<td>顶部</td>\n</tr>\n<tr>\n<td>total</td>\n<td>全部的</td>\n</tr>\n<tr>\n<td>touch</td>\n<td>触摸</td>\n</tr>\n<tr>\n<td>tour</td>\n<td>旅游</td>\n</tr>\n<tr>\n<td>tourist</td>\n<td>旅行者</td>\n</tr>\n<tr>\n<td>towards</td>\n<td>朝着</td>\n</tr>\n<tr>\n<td>tower</td>\n<td>塔</td>\n</tr>\n<tr>\n<td>town</td>\n<td>镇</td>\n</tr>\n<tr>\n<td>toy</td>\n<td>玩具</td>\n</tr>\n<tr>\n<td>track</td>\n<td>轨道</td>\n</tr>\n<tr>\n<td>trade</td>\n<td>贸易</td>\n</tr>\n<tr>\n<td>traffic</td>\n<td>交通</td>\n</tr>\n<tr>\n<td>train</td>\n<td>火车</td>\n</tr>\n<tr>\n<td>translate</td>\n<td>翻译</td>\n</tr>\n<tr>\n<td>transparent</td>\n<td>透明的</td>\n</tr>\n<tr>\n<td>trap</td>\n<td>陷阱</td>\n</tr>\n<tr>\n<td>travel</td>\n<td>旅行</td>\n</tr>\n<tr>\n<td>treat</td>\n<td>对待</td>\n</tr>\n<tr>\n<td>treatment</td>\n<td>治疗</td>\n</tr>\n<tr>\n<td>tree</td>\n<td>树</td>\n</tr>\n<tr>\n<td>tremble</td>\n<td>颤抖</td>\n</tr>\n<tr>\n<td>tribe</td>\n<td>部落</td>\n</tr>\n<tr>\n<td>trick</td>\n<td>戏法</td>\n</tr>\n<tr>\n<td>trip</td>\n<td>旅行</td>\n</tr>\n<tr>\n<td>tropical</td>\n<td>热带的</td>\n</tr>\n<tr>\n<td>trouble</td>\n<td>麻烦</td>\n</tr>\n<tr>\n<td>trousers</td>\n<td>裤子</td>\n</tr>\n<tr>\n<td>TRUE</td>\n<td>真</td>\n</tr>\n<tr>\n<td>trunk</td>\n<td>大旅行箱</td>\n</tr>\n<tr>\n<td>trust</td>\n<td>信任</td>\n</tr>\n<tr>\n<td>truth</td>\n<td>真理</td>\n</tr>\n<tr>\n<td>try</td>\n<td>尝试</td>\n</tr>\n<tr>\n<td>tube</td>\n<td>管</td>\n</tr>\n<tr>\n<td>tune</td>\n<td>曲调</td>\n</tr>\n<tr>\n<td>turn</td>\n<td>转</td>\n</tr>\n<tr>\n<td>twice</td>\n<td>两次</td>\n</tr>\n<tr>\n<td>twist</td>\n<td>扭曲</td>\n</tr>\n<tr>\n<td>type</td>\n<td>类型</td>\n</tr>\n<tr>\n<td>typical</td>\n<td>典型的</td>\n</tr>\n<tr>\n<td>ugly</td>\n<td>丑陋的</td>\n</tr>\n<tr>\n<td>uncle</td>\n<td>叔叔</td>\n</tr>\n<tr>\n<td>under</td>\n<td>在下面</td>\n</tr>\n<tr>\n<td>understand</td>\n<td>理解</td>\n</tr>\n<tr>\n<td>undo</td>\n<td>解开</td>\n</tr>\n<tr>\n<td>uniform</td>\n<td>制服</td>\n</tr>\n<tr>\n<td>union</td>\n<td>联盟</td>\n</tr>\n<tr>\n<td>unit</td>\n<td>单元</td>\n</tr>\n<tr>\n<td>unite</td>\n<td>团结</td>\n</tr>\n<tr>\n<td>universal</td>\n<td>普遍的</td>\n</tr>\n<tr>\n<td>universe</td>\n<td>宇宙</td>\n</tr>\n<tr>\n<td>university</td>\n<td>大学</td>\n</tr>\n<tr>\n<td>until</td>\n<td>直到</td>\n</tr>\n<tr>\n<td>up</td>\n<td>向上的</td>\n</tr>\n<tr>\n<td>upper</td>\n<td>上面的</td>\n</tr>\n<tr>\n<td>upright</td>\n<td>直立的</td>\n</tr>\n<tr>\n<td>upset</td>\n<td>沮丧的</td>\n</tr>\n<tr>\n<td>upside down</td>\n<td>颠倒地</td>\n</tr>\n<tr>\n<td>upstairs</td>\n<td>楼上的</td>\n</tr>\n<tr>\n<td>urge</td>\n<td>催促</td>\n</tr>\n<tr>\n<td>urgent</td>\n<td>紧急的</td>\n</tr>\n<tr>\n<td>us</td>\n<td>我们</td>\n</tr>\n<tr>\n<td>use</td>\n<td>使用</td>\n</tr>\n<tr>\n<td>useful</td>\n<td>有用的</td>\n</tr>\n<tr>\n<td>useless</td>\n<td>无用的</td>\n</tr>\n<tr>\n<td>usual</td>\n<td>通常的</td>\n</tr>\n<tr>\n<td>valley</td>\n<td>山谷</td>\n</tr>\n<tr>\n<td>valuable</td>\n<td>有价值的</td>\n</tr>\n<tr>\n<td>value</td>\n<td>价值</td>\n</tr>\n<tr>\n<td>variety</td>\n<td>品种</td>\n</tr>\n<tr>\n<td>various</td>\n<td>各种各样的</td>\n</tr>\n<tr>\n<td>vary</td>\n<td>变化</td>\n</tr>\n<tr>\n<td>vegetable</td>\n<td>蔬菜</td>\n</tr>\n<tr>\n<td>vehicle</td>\n<td>车辆</td>\n</tr>\n<tr>\n<td>verb</td>\n<td>动词</td>\n</tr>\n<tr>\n<td>very</td>\n<td>非常</td>\n</tr>\n<tr>\n<td>victory</td>\n<td>胜利</td>\n</tr>\n<tr>\n<td>view</td>\n<td>看法</td>\n</tr>\n<tr>\n<td>village</td>\n<td>村庄</td>\n</tr>\n<tr>\n<td>violence</td>\n<td>暴力</td>\n</tr>\n<tr>\n<td>violent</td>\n<td>暴力的</td>\n</tr>\n<tr>\n<td>visit</td>\n<td>参观</td>\n</tr>\n<tr>\n<td>voice</td>\n<td>嗓音</td>\n</tr>\n<tr>\n<td>vote</td>\n<td>投票</td>\n</tr>\n<tr>\n<td>vowel</td>\n<td>元音</td>\n</tr>\n<tr>\n<td>voyage</td>\n<td>航行</td>\n</tr>\n<tr>\n<td>wages</td>\n<td>工资</td>\n</tr>\n<tr>\n<td>waist</td>\n<td>腰</td>\n</tr>\n<tr>\n<td>wait</td>\n<td>等待</td>\n</tr>\n<tr>\n<td>waiter</td>\n<td>服务员</td>\n</tr>\n<tr>\n<td>wake</td>\n<td>醒来</td>\n</tr>\n<tr>\n<td>walk</td>\n<td>步行</td>\n</tr>\n<tr>\n<td>wall</td>\n<td>墙</td>\n</tr>\n<tr>\n<td>wander</td>\n<td>漫步</td>\n</tr>\n<tr>\n<td>want</td>\n<td>希望</td>\n</tr>\n<tr>\n<td>war</td>\n<td>战争</td>\n</tr>\n<tr>\n<td>warm</td>\n<td>温暖的</td>\n</tr>\n<tr>\n<td>warmth</td>\n<td>温暖</td>\n</tr>\n<tr>\n<td>warn</td>\n<td>警告</td>\n</tr>\n<tr>\n<td>wash</td>\n<td>洗</td>\n</tr>\n<tr>\n<td>waste</td>\n<td>浪费</td>\n</tr>\n<tr>\n<td>watch</td>\n<td>看</td>\n</tr>\n<tr>\n<td>water</td>\n<td>水</td>\n</tr>\n<tr>\n<td>wave</td>\n<td>波动</td>\n</tr>\n<tr>\n<td>way</td>\n<td>方式</td>\n</tr>\n<tr>\n<td>we</td>\n<td>我们</td>\n</tr>\n<tr>\n<td>weak</td>\n<td>虚弱的</td>\n</tr>\n<tr>\n<td>wealth</td>\n<td>财富</td>\n</tr>\n<tr>\n<td>weapon</td>\n<td>武器</td>\n</tr>\n<tr>\n<td>wear</td>\n<td>穿</td>\n</tr>\n<tr>\n<td>weather</td>\n<td>天气</td>\n</tr>\n<tr>\n<td>weave</td>\n<td>编织</td>\n</tr>\n<tr>\n<td>wedding</td>\n<td>婚礼</td>\n</tr>\n<tr>\n<td>week</td>\n<td>周</td>\n</tr>\n<tr>\n<td>weekly</td>\n<td>每周的</td>\n</tr>\n<tr>\n<td>weigh</td>\n<td>权衡</td>\n</tr>\n<tr>\n<td>weight</td>\n<td>重量</td>\n</tr>\n<tr>\n<td>welcome</td>\n<td>欢迎</td>\n</tr>\n<tr>\n<td>well</td>\n<td>好</td>\n</tr>\n<tr>\n<td>west</td>\n<td>西</td>\n</tr>\n<tr>\n<td>western</td>\n<td>西方的</td>\n</tr>\n<tr>\n<td>wet</td>\n<td>潮湿的</td>\n</tr>\n<tr>\n<td>what</td>\n<td>什么</td>\n</tr>\n<tr>\n<td>whatever</td>\n<td>无论什么</td>\n</tr>\n<tr>\n<td>wheat</td>\n<td>小麦</td>\n</tr>\n<tr>\n<td>wheel</td>\n<td>轮</td>\n</tr>\n<tr>\n<td>when</td>\n<td>什么时候？</td>\n</tr>\n<tr>\n<td>whenever</td>\n<td>无论何时</td>\n</tr>\n<tr>\n<td>where</td>\n<td>哪里</td>\n</tr>\n<tr>\n<td>whether</td>\n<td>是否</td>\n</tr>\n<tr>\n<td>which</td>\n<td>哪一个</td>\n</tr>\n<tr>\n<td>whichever</td>\n<td>无论哪个</td>\n</tr>\n<tr>\n<td>while</td>\n<td>虽然</td>\n</tr>\n<tr>\n<td>whip</td>\n<td>鞭子</td>\n</tr>\n<tr>\n<td>whisper</td>\n<td>耳语</td>\n</tr>\n<tr>\n<td>whistle</td>\n<td>吹口哨</td>\n</tr>\n<tr>\n<td>white</td>\n<td>白色</td>\n</tr>\n<tr>\n<td>who</td>\n<td>谁</td>\n</tr>\n<tr>\n<td>whoever</td>\n<td>无论是谁</td>\n</tr>\n<tr>\n<td>whole</td>\n<td>整体</td>\n</tr>\n<tr>\n<td>why</td>\n<td>为什么？</td>\n</tr>\n<tr>\n<td>wicked</td>\n<td>邪恶的</td>\n</tr>\n<tr>\n<td>wide</td>\n<td>宽的</td>\n</tr>\n<tr>\n<td>widespread</td>\n<td>普遍的</td>\n</tr>\n<tr>\n<td>width</td>\n<td>宽度</td>\n</tr>\n<tr>\n<td>wife</td>\n<td>妻子</td>\n</tr>\n<tr>\n<td>wild</td>\n<td>野生的</td>\n</tr>\n<tr>\n<td>will</td>\n<td>将</td>\n</tr>\n<tr>\n<td>willing</td>\n<td>乐意的</td>\n</tr>\n<tr>\n<td>win</td>\n<td>赢</td>\n</tr>\n<tr>\n<td>wind</td>\n<td>风</td>\n</tr>\n<tr>\n<td>window</td>\n<td>窗口</td>\n</tr>\n<tr>\n<td>wine</td>\n<td>葡萄酒</td>\n</tr>\n<tr>\n<td>wing</td>\n<td>翼</td>\n</tr>\n<tr>\n<td>winter</td>\n<td>冬天</td>\n</tr>\n<tr>\n<td>wire</td>\n<td>电线</td>\n</tr>\n<tr>\n<td>wisdom</td>\n<td>智慧</td>\n</tr>\n<tr>\n<td>wise</td>\n<td>明智的</td>\n</tr>\n<tr>\n<td>wish</td>\n<td>希望</td>\n</tr>\n<tr>\n<td>with</td>\n<td>具有</td>\n</tr>\n<tr>\n<td>within</td>\n<td>在内部</td>\n</tr>\n<tr>\n<td>without</td>\n<td>没有</td>\n</tr>\n<tr>\n<td>witness</td>\n<td>目击者</td>\n</tr>\n<tr>\n<td>woman</td>\n<td>女人</td>\n</tr>\n<tr>\n<td>wonder</td>\n<td>想知道</td>\n</tr>\n<tr>\n<td>wood</td>\n<td>木材</td>\n</tr>\n<tr>\n<td>wooden</td>\n<td>木制的</td>\n</tr>\n<tr>\n<td>wool</td>\n<td>羊毛</td>\n</tr>\n<tr>\n<td>woolen</td>\n<td>毛纺</td>\n</tr>\n<tr>\n<td>word</td>\n<td>单词</td>\n</tr>\n<tr>\n<td>work</td>\n<td>工作</td>\n</tr>\n<tr>\n<td>world</td>\n<td>世界</td>\n</tr>\n<tr>\n<td>worm</td>\n<td>蠕虫</td>\n</tr>\n<tr>\n<td>worry</td>\n<td>担心</td>\n</tr>\n<tr>\n<td>worse</td>\n<td>更糟的</td>\n</tr>\n<tr>\n<td>worship</td>\n<td>崇拜</td>\n</tr>\n<tr>\n<td>worst</td>\n<td>最差的</td>\n</tr>\n<tr>\n<td>worth</td>\n<td>值得的</td>\n</tr>\n<tr>\n<td>worthy</td>\n<td>值得的</td>\n</tr>\n<tr>\n<td>worthy of</td>\n<td>值得</td>\n</tr>\n<tr>\n<td>would</td>\n<td>将</td>\n</tr>\n<tr>\n<td>wound</td>\n<td>伤口</td>\n</tr>\n<tr>\n<td>wrap</td>\n<td>包</td>\n</tr>\n<tr>\n<td>wreck</td>\n<td>沉船</td>\n</tr>\n<tr>\n<td>wrist</td>\n<td>手腕</td>\n</tr>\n<tr>\n<td>write</td>\n<td>写</td>\n</tr>\n<tr>\n<td>wrong</td>\n<td>错误的</td>\n</tr>\n<tr>\n<td>wrongdoing</td>\n<td>不法行为</td>\n</tr>\n<tr>\n<td>yard</td>\n<td>院子</td>\n</tr>\n<tr>\n<td>year</td>\n<td>年</td>\n</tr>\n<tr>\n<td>yearly</td>\n<td>每年的</td>\n</tr>\n<tr>\n<td>yellow</td>\n<td>黄色的</td>\n</tr>\n<tr>\n<td>yes</td>\n<td>对</td>\n</tr>\n<tr>\n<td>yesterday</td>\n<td>昨天</td>\n</tr>\n<tr>\n<td>yet</td>\n<td>然而</td>\n</tr>\n<tr>\n<td>you</td>\n<td>你</td>\n</tr>\n<tr>\n<td>young</td>\n<td>年轻的</td>\n</tr>\n<tr>\n<td>your</td>\n<td>你的</td>\n</tr>\n<tr>\n<td>yours</td>\n<td>你的</td>\n</tr>\n<tr>\n<td>yourself</td>\n<td>你自己</td>\n</tr>\n<tr>\n<td>youth</td>\n<td>青年</td>\n</tr>\n<tr>\n<td>zero</td>\n<td>零</td>\n</tr>\n</tbody></table>\n","categories":["Learn"]},{"title":"史上最全Quant资源整理","url":"/quant_list/","content":"<p><em>有些国外的平台、社区、博客如果连接无法打开，那说明可能需要“科学”上网</em></p>\n<span id=\"more\"></span>\n\n<h2 id=\"量化交易平台\"><a href=\"#量化交易平台\" class=\"headerlink\" title=\"量化交易平台\"></a>量化交易平台</h2><h3 id=\"国内在线量化平台：\"><a href=\"#国内在线量化平台：\" class=\"headerlink\" title=\"国内在线量化平台：\"></a>国内在线量化平台：</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9iaWdxdWFudC5jb20v\">BigQuant - 你的人工智能量化平台<i class=\"fa fa-external-link-alt\"></i></span> -  可以无门槛地使用机器学习、人工智能开发量化策略，基于python，提供策略自动生成器</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5yYXF1YW50LmNvbS8=\">镭矿<i class=\"fa fa-external-link-alt\"></i></span> -  基于量化回测平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9ndW9ybi5jb20v\">果仁网<i class=\"fa fa-external-link-alt\"></i></span> -  回测量化平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3F1YW50LmpkLmNvbS8=\">京东量化<i class=\"fa fa-external-link-alt\"></i></span> -  算法交易和量化回测平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuam9pbnF1YW50LmNvbS8=\">聚宽<i class=\"fa fa-external-link-alt\"></i></span> -  量化回测平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly91cWVyLmlvL2hvbWUv\">优矿<i class=\"fa fa-external-link-alt\"></i></span> -  通联量化实验室</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cucmljZXF1YW50LmNvbS8=\">Ricequant<i class=\"fa fa-external-link-alt\"></i></span> -  量化交易平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9xdXRrZS5jb20v\">况客<i class=\"fa fa-external-link-alt\"></i></span> -  基于R语言量化回测平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2ZhY3RvcnMuY2hpbmFzY29wZS5jb20v\">Factors<i class=\"fa fa-external-link-alt\"></i></span> -  数库多因子量化平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9ncHh0cmFkZS5jb20vZ3VpZGUuaHRtbA==\">诸葛量化<i class=\"fa fa-external-link-alt\"></i></span> -  量化交易平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5xdWFudGdvdS5jb20v\">宽狗量化<i class=\"fa fa-external-link-alt\"></i></span> -  回测量化平台</li>\n</ul>\n<h3 id=\"国外量化平台：\"><a href=\"#国外量化平台：\" class=\"headerlink\" title=\"国外量化平台：\"></a>国外量化平台：</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cucXVhbnRvcGlhbi5jb20v\">Quantopian<i class=\"fa fa-external-link-alt\"></i></span> 研究、回测、算法众包平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cucXVhbnRjb25uZWN0LmNvbS8=\">QuantConnect<i class=\"fa fa-external-link-alt\"></i></span> 研究、回测和投资交易</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cucXVhbnRzdGFydC5jb20v\">Quantstart<i class=\"fa fa-external-link-alt\"></i></span> 研究、回测和投资交易、数据科学网站</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2FscGhhc2VjdXJlY2FwaXRhbC5jb20v\">ASC<i class=\"fa fa-external-link-alt\"></i></span> 研究、交易平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9qYXBhbi56dWx1dHJhZGUuY29tLw==\">zulutrade<i class=\"fa fa-external-link-alt\"></i></span> 自动交易平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5xdWFudHBlZGlhLmNvbS8=\">quantpedia<i class=\"fa fa-external-link-alt\"></i></span> 研究、策略平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9hbGdvdHJhZGluZzEwMS5jb20v\">algotrading101<i class=\"fa fa-external-link-alt\"></i></span> 策略研究平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5pbnZlc3RvcGVkaWEuY29tLw==\">investopedia<i class=\"fa fa-external-link-alt\"></i></span> 可以股票、外汇模拟交易的财经网站</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5hbWlicm9rZXIuY29tLw==\">Amibroker<i class=\"fa fa-external-link-alt\"></i></span> 提供系统交易工具的一家公司</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5hbGdvdHJhZGVzLm5ldC8=\">AlgoTrades<i class=\"fa fa-external-link-alt\"></i></span> 股票、ETF、期货自动交易系统</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9udW1lci5haS8=\">Numerai<i class=\"fa fa-external-link-alt\"></i></span> 数据工程师众包的一家对冲基金</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cud2VhbHRoZnJvbnQuY29tLw==\">WealthFront<i class=\"fa fa-external-link-alt\"></i></span> 财富管理平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuYmV0dGVybWVudC5jb20v\">Betterment<i class=\"fa fa-external-link-alt\"></i></span> 个人投资平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy50cmFkZWxpbmtsbGMuY29tLw==\">TradeLink<i class=\"fa fa-external-link-alt\"></i></span> 量化交易平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL2FjdGl2ZXF1YW50\">ActiveQuant<i class=\"fa fa-external-link-alt\"></i></span> 基于JavaScript开源交易开发框架</li>\n</ul>\n<h3 id=\"相关平台：\"><a href=\"#相关平台：\" class=\"headerlink\" title=\"相关平台：\"></a>相关平台：</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5teXF1YW50LmNuLw==\">掘金量化<i class=\"fa fa-external-link-alt\"></i></span> -  支持C&#x2F;C++、C#、MATLAB、Python和R的量化交易平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5kaWdxdWFudC5jb20uY24v\">DigQuant<i class=\"fa fa-external-link-alt\"></i></span> -  提供基于matlab量化工具</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5zbWFydHF1YW50LmNuLw==\">SmartQuant<i class=\"fa fa-external-link-alt\"></i></span> -  策略交易平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL1F1YW50Qm94L09wZW5RdWFudC1Fc3Vubnk=\">OpenQuant<i class=\"fa fa-external-link-alt\"></i></span> -  基于C#的开源量化回测平台</li>\n</ul>\n<h3 id=\"基于图表的量化交易平台\"><a href=\"#基于图表的量化交易平台\" class=\"headerlink\" title=\"基于图表的量化交易平台\"></a>基于图表的量化交易平台</h3><ul>\n<li>文华赢智 、TB、金字塔、MultiCharts 中国版 - 程序化交易软件、MT4、TradeStation</li>\n<li>Auto-Trader - 基于MATLAB的量化交易平台</li>\n<li>BotVS - 首家支持传统期货与股票证券与数字货币的量化平台</li>\n</ul>\n<h2 id=\"开源框架\"><a href=\"#开源框架\" class=\"headerlink\" title=\"开源框架\"></a>开源框架</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL3BhbmRhcy1kZXYvcGFuZGFz\">Pandas<i class=\"fa fa-external-link-alt\"></i></span> -  数据分析包</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL3F1YW50b3BpYW4vemlwbGluZQ==\">Zipline<i class=\"fa fa-external-link-alt\"></i></span> -  一个Python的回测框架</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL3ZucHkvdm5weQ==\">vnpy<i class=\"fa fa-external-link-alt\"></i></span> -  基于python的开源交易平台开发框架</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9weXBpLnB5dGhvbi5vcmcvcHlwaS90dXNoYXJlLw==\">tushare<i class=\"fa fa-external-link-alt\"></i></span> -  财经数据接口包</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL3NoaWRlbmdndWkvZWFzeXRyYWRlcg==\">easytrader<i class=\"fa fa-external-link-alt\"></i></span> -  进行自动的程序化股票交易</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL2diZWNlZC9weWFsZ290cmFkZQ==\">pyalgotrade<i class=\"fa fa-external-link-alt\"></i></span> -  一个Python的事件驱动回测框架</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL1lhbS1jbi9weWFsZ290cmFkZS1jbg==\">pyalgotrade-cn<i class=\"fa fa-external-link-alt\"></i></span> -  Pyalgotrade-cn在原版pyalgotrade的基础上加入了A股历史行情回测，并整合了tushare提供实时行情。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL3ppd2FuZy1jb20v\">zwPython<i class=\"fa fa-external-link-alt\"></i></span> -  基于winpython的集成式python开发平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL2pvc2h1YXVscmljaC9xdWFudG1vZA==\">quantmod<i class=\"fa fa-external-link-alt\"></i></span> -  量化金融建模</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL3JpY2VxdWFudC9ycWFscGhhLw==\">rqalpha<i class=\"fa fa-external-link-alt\"></i></span> -  基于Python的回测引擎</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL1F1YW50RmFucy9xdWFudGRpZ2dlcg==\">quantdigger<i class=\"fa fa-external-link-alt\"></i></span> -  基于python的量化回测框架</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL2hhcnZleXd3dS9weWt0cmFkZXI=\">pyktrader<i class=\"fa fa-external-link-alt\"></i></span> -  基于pyctp接口，并采用vnpy的eventEngine，使用tkinter作为GUI的python交易平台</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL1F1YW50Q29ubmVjdC9MZWFu\">QuantConnect&#x2F;Lean<i class=\"fa fa-external-link-alt\"></i></span> -  Lean Algorithmic Trading Engine by QuantConnect (C#, Python, F#, VB, Java)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL3l1dGlhbnN1dC9RVUFOVEFYSVM=\">QUANTAXIS<i class=\"fa fa-external-link-alt\"></i></span> -  量化金融策略框架</li>\n</ul>\n<p>其他量化交易平台： Progress Apama、龙软DTS、国泰安量化投资平台、飞创STP、易盛程序化交易、盛立SPT平台、天软量化回测平台 、量邦天语、EQB-Quant</p>\n<h2 id=\"数据源\"><a href=\"#数据源\" class=\"headerlink\" title=\"数据源\"></a>数据源</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3R1c2hhcmUub3JnLw==\">TuShare - 中文财经数据接口包<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cucXVhbmRsLmNvbS8=\">Quandl - 国际金融和经济数据<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy53aW5kLmNvbS5jbi9OZXdTaXRlL2VkYi5odG1s\">Wind资讯-经济数据库 - 收费<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Nob2ljZS5lYXN0bW9uZXkuY29tL1Byb2R1Y3QvaW5kZXguaHRtbA==\">东方财富 Choice金融数据研究终端<i class=\"fa fa-external-link-alt\"></i></span> -  收费</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy41MWlmaW5kLmNvbS8=\">iFinD 同花顺金融数据终端<i class=\"fa fa-external-link-alt\"></i></span> -  收费</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5nby1nb2FsLmNuLw==\">朝阳永续 Go-Goal数据终端<i class=\"fa fa-external-link-alt\"></i></span> -  收费</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy50aW55c29mdC5jb20uY24vVFNETi9Ib21lUGFnZS50c2w=\">天软数据<i class=\"fa fa-external-link-alt\"></i></span> -  收费</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5ndGFyc2MuY29tLw==\">国泰安数据服务中心<i class=\"fa fa-external-link-alt\"></i></span> -  收费</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5yZXNzZXQuY24v\">锐思数据<i class=\"fa fa-external-link-alt\"></i></span> -  收费</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL29wZW4uaHNjbG91ZC5jbi8=\">恒生API<i class=\"fa fa-external-link-alt\"></i></span> -  收费</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuYmxvb21iZXJnbGFicy5jb20vYXBpL2xpYnJhcmllcy8=\">Bloomberg API<i class=\"fa fa-external-link-alt\"></i></span> -  收费</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2RldmVsb3Blci5jaGluYXNjb3BlLmNvbS8=\">数库金融数据和深度分析API服务<i class=\"fa fa-external-link-alt\"></i></span> -  收费</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3F1YW50cGVkaWEuY29tL0xpbmtzL0hpc3RvcmljYWxEYXRh\">Historical Data Sources - 一个数据源索引<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy55dWNlemhlLmNvbS8=\">预测者网<i class=\"fa fa-external-link-alt\"></i></span> -  收费</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5jbmluZm8uY29tLmNuL2NuaW5mby1uZXcvaW5kZXg=\">巨潮资讯<i class=\"fa fa-external-link-alt\"></i></span> -  收费</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuZGF0YXllcy5jb20v\">通联数据商城<i class=\"fa fa-external-link-alt\"></i></span> -  收费</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy50ZHguY29tLmNuLw==\">通达信<i class=\"fa fa-external-link-alt\"></i></span> -  免费</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9iaWdxdWFudC5jb20vZG9jcy9kYXRhX2hpc3RvcnlfZGF0YS5odG1s\">历史数据 -  文档 | BigQuant<i class=\"fa fa-external-link-alt\"></i></span> -  免费</li>\n<li>新浪、雅虎、东方财富网 -  免费</li>\n<li>聚合数据、数粮 、数据宝 -  收费</li>\n</ul>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL21hbmFobC9hcmN0aWM=\">manahl&#x2F;arctic: High performance datastore for time series and tick data<i class=\"fa fa-external-link-alt\"></i></span> -  基于mongodb和python的高性能时间序列和tick数据存储</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9reC5jb20v\">kdb | The Leader in High-Performance Tick Database Technology | Kx Systems<i class=\"fa fa-external-link-alt\"></i></span> -  收费的高性能金融序列数据库解决方案</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vYmxvZy9wb3N0L3NjaGVtYS1kZXNpZ24tZm9yLXRpbWUtc2VyaWVzLWRhdGEtaW4tbW9uZ29kYg==\">MongoDB Blog<i class=\"fa fa-external-link-alt\"></i></span> -  用mongodb存储时间序列数据</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuaW5mbHV4ZGF0YS5jb20vcHJvZHVjdHMv\">InfluxDB – Time-Series Data Storage | InfluxData<i class=\"fa fa-external-link-alt\"></i></span> -  Go写的分布式时间序列数据库</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL09wZW5UU0RCL29wZW50c2Ri\">OpenTSDB&#x2F;opentsdb: A scalable, distributed Time Series Database<i class=\"fa fa-external-link-alt\"></i></span>. -  基于HBase的时间序列数据库</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL2thaXJvc2RiL2thaXJvc2Ri\">kairosdb&#x2F;kairosdb: Fast scalable time series database<i class=\"fa fa-external-link-alt\"></i></span> -  基于Cassandra的时间序列数据库</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuc3FsaXRlLm9yZy8=\">SQLite Home Page<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"网站、论坛、社区、博客\"><a href=\"#网站、论坛、社区、博客\" class=\"headerlink\" title=\"网站、论坛、社区、博客\"></a><strong>网站、论坛、社区、博客</strong></h2><h3 id=\"国外：\"><a href=\"#国外：\" class=\"headerlink\" title=\"国外：\"></a>国外：</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuYXFyLmNvbS8=\">AQR - Alternative Investments<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2VwY2hhbi5ibG9nc3BvdC5qcC8=\">http://epchan.blogspot.jp/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Jsb2cuZm9zc3RyYWRpbmcuY29tLw==\">FOSS Trading<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9mb3J1bS53aWxtb3R0LmNvbS8=\">wilmott.com - Forum<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy50cmFkZXJzbWFnYXppbmUuY29tLw==\">Traders Magazine: The stock dealers and institutional traders complete interactive news and information service<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3ByYWN0aWNhbHF1YW50LmJsb2dzcG90LmpwLz92aWV3PWNsYXNzaWM=\">http://practicalquant.blogspot.jp/?view=classic<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy50aGV3aG9sZXN0cmVldC5jb20v\">http://www.thewholestreet.com/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5pbXBsZW1lbnRpbmdxdWFudGxpYi5jb20v\">Implementing QuantLib<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3RyYWRpbmd3aXRocHl0aG9uLmJsb2dzcG90LmpwLw==\">http://tradingwithpython.blogspot.jp/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9ldHJhZGluZy53b3JkcHJlc3MuY29tL2NhdGVnb3J5L2NvZGluZy8=\">Coding the markets<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9xdWFudGl2aXR5LndvcmRwcmVzcy5jb20vcGFnZS8yLw==\">Quantivity<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3F1YW50b2NyYWN5LmNvbS8=\">Quant Mashup | Quantocracy<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy56ZXJvaGVkZ2UuY29tLw==\">On a long enough timeline the survival rate for everyone drops to zero<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2tlcGxlcmlhbmZpbmFuY2UuY29tLw==\">Keplerian Finance - exploring the boundaries of quantitative finance<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5paWpvdXJuYWxzLmNvbS90b2Mvam90L2N1cnJlbnQ=\">The Journal of Trading: Home<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9taGl0dGVzZG9yZi53b3JkcHJlc3MuY29tLw==\">All things finance and technology…<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5xdWFudG5ld3MuY29tLw==\">Quant News<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL251bWVyaWNhbG1ldGhvZC5jb20vcXVhbnRpdGF0aXZlLXRyYWRpbmctc3RyYXRlZ2llcy8=\">Quantitative Trading Strategies | Numerical Method Inc.<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5udWNsZWFycGh5bmFuY2UuY29tLw==\">Nuclear Phynance<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuZWxpdGV0cmFkZXIuY29tL2V0Lw==\">Elite Trader<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL21lYmZhYmVyLmNvbS8=\">Meb Faber Research - Stock Market and Investing Blog<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5wb3J0Zm9saW93b3Jrc3RhdGlvbi5jb20v\">Portfolio Workstation by Alpha Level<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2ZhbGtlbmJsb2cuYmxvZ3Nwb3QuanAv\">http://falkenblog.blogspot.jp/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3F1YW50LnN0YWNrZXhjaGFuZ2UuY29tLw==\">Quantitative Finance Stack Exchange<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL3F1YW50ZmluYW5jZS8=\">The mathematics of investing and markets • r&#x2F;quantfinance<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cucXVhbnRuZXQuY29tLw==\">QuantNet Community<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2pvbmF0aGFua2lubGF5LmNvbS8=\">QUANTITATIVE RESEARCH AND TRADING - The latest theories, models and investment strategies in quantitative research and trading<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3F1c21hLmNvbS8=\">QUSMA - Quantitative Systematic Market Analysis<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9hYm5vcm1hbHJldHVybnMuY29tLw==\">https://abnormalreturns.com/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9jc3NhbmFseXRpY3Mud29yZHByZXNzLmNvbS8=\">CSSA<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy50cmFkaW5ndGhlb2Rkcy5jb20v\">http://www.tradingtheodds.com/<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2dla2tvcXVhbnQuY29tLw==\">Quantitative Trading, Statistical Arbitrage, Machine Learning and Binary Options<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly90cmFkZS5jb2xsZWN0aXZlMi5jb20v\">Collective2 - The platform that connects investors with top-traders<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2FsdmFyZXpxdWFudHRyYWRpbmcuY29tLw==\">Alvarez Quant Trading<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cucXVhbnRpYWNzLmNvbS8=\">The Marketplace For Algorithmic Trading Systems | Quantiacs<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy50YW5kZm9ubGluZS5jb20vYWN0aW9uL3Nob3dNb3N0UmVhZEFydGljbGVzP2pvdXJuYWxDb2RlPXJxdWYyMA==\">Quantitative Finance<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cucXVhbnRvcGlhbi5jb20vbGVjdHVyZXM=\">Quantopian Lectures<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cua2l0Y2VzLmNvbS8=\">Kitces.com - Advancing Knowledge in Financial Planning<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuZm9yZXhmYWN0b3J5LmNvbS8=\">Forex Factory<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy50aGVydHJhZGVyLmNvbS8=\">The R Trader<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy50dXJpbmdmaW5hbmNlLmNvbS9ob3ctdG8tYmUtYS1xdWFudC8=\">How to be a Quant<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cudWRhY2l0eS5jb20vY291cnNlL21hY2hpbmUtbGVhcm5pbmctZm9yLXRyYWRpbmctLXVkNTAx\">关于交易策略的机器学习<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3NjaWtpdC1sZWFybi5vcmcvc3RhYmxlLw==\">scikit-learn: machine learning in Python<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cud2lsbW90dC5jb20vYmxvZ3MvcGF1bC9pbmRleC5jZm0=\">Paul Wilmott<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy50aGUtdHJlbmQtaXMteW91ci1mcmllbmQuY29tLw==\">The Trend is your Friend<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3ByYWN0aWNhbHF1YW50LmJsb2dzcG90LmNvbS8=\">Practical Quant<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5pbnZlc3RvcnNpbnNpZ2h0LmNvbS9ibG9ncy9qb2huX21hdWxkaW5zX291dHNpZGVfdGhlX2JveC9kZWZhdWx0LmFzcHg=\">John Mauldin’s Outside the Box<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9xdWFudHVtZmluYW5jaWVyLndvcmRwcmVzcy5jb20v\">Quantum Financier<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5xdWFudGlmaWVkc3RyYXRlZ2llcy5jb20v\">Quantified Strategies<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuYmxhY2tyb2NrYmxvZy5jb20v\">BlackRock Blog<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5xdWFudGF0cmlzay5jb20v\">Quant at Risk<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"国内：\"><a href=\"#国内：\" class=\"headerlink\" title=\"国内：\"></a>国内：</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9jb21tdW5pdHkuYmlncXVhbnQuY29tLw==\">BigQuant量化社区<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3dlaWJvLmNvbS91LzMxODMwNjQ2NTc/dG9wbmF2PTEmd3ZyPTYmdG9wc3VnPTE=\">算法组_新浪微博<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5vY2VhbnRyaWJlLm9yZy94Zi9pbmRleC5waHA=\">海洋部落<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5uZXdzbXRoLm5ldC8=\">水木社区<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Jicy5waW5nZ3Uub3JnL2ZvcnVtLTIxNjYtMS5odG1s\">（经管之家）人大经济论坛<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2ZvcnVtLnRodXF1YW50LmNvbS8=\">清华大学学生经济金融论坛<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5tYXRsYWJza3kuY29tLw==\">matlab技术论坛<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy53cXVhbnQuY29tLw==\">微量网<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2NvZGUudHJhZGVjbGFzc3Jvb20uY29tLw==\">Code4Quant<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3RvcGljLzE5ODE1NDY1L2hvdA==\">量化交易 -  热门问答 -  知乎<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuamlzaWx1LmNuLw==\">集思录 -  低风险投资 -  集思录<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly94dWVxaXUuY29tLyUyMy8=\">雪球 -  聪明的投资者都在这里<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL215cXVhbnQvc3RyYXRlZ3kv\">myquant&#x2F;strategy: 掘金策略集锦<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL2JvdHZzL3N0cmF0ZWdpZXM=\">botvs&#x2F;strategies<i class=\"fa fa-external-link-alt\"></i></span> -  用Javascript or Python进行量化交易</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy56ZW5vdHJhZGUuY29tLw==\">芝诺量化交易,程序化交易<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9jb3MubmFtZS8=\">统计之都 (Capital of Statistics)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5jaGluYXFpLm9yZy9kZWZhdWx0LnBocA==\">中国量化投资学会<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3RvcGljLzE5NTU3NDgx\">宽客 (Quant) - 索引 - 知乎<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Jsb2cuc2luYS5jb20uY24vcy9ibG9nXzRjZjhhYWQzMDEwMmU1ZGguaHRtbA==\">faruto的博客<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Jsb2cuc2luYS5jb20uY24vcy9hcnRpY2xlbGlzdF8xNjQwMjYwMzYxXzBfMS5odG1s\">博文_bicloud_新浪博客<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Jsb2cuc2luYS5jb20uY24vcy9hcnRpY2xlbGlzdF8xNjA2NjQ1MDkzXzBfMS5odG1s\">博文_郑来轶_新浪博客<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Jsb2cuc2luYS5jb20uY24vdS8zMTU3MjI1NzUy\">flitter_新浪博客<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Jsb2cuc2luYS5jb20uY24vZmluYW5jaWFsaW5kZXBlbmRlbmNl\">david自由之路<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Jsb2cuc2luYS5jb20uY24vaGoxMG4=\">作者安道全_新浪博客<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3dhbmd6aGFpMjAwOC5ibG9nLmhleHVuLmNvbS8=\">债券的大拿没钱又丑<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2h1emkyMDEwLmJsb2cuaGV4dW4uY29tLw==\">期货用来复盘的blog<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Jsb2cuc2luYS5jb20uY24vaGpoaA==\">花荣_新浪博客<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3htYW43MDcuYmxvZy4xNjMuY29tLw==\">股海泛舟 -  股海范舟<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2R0ZGc3NzcuYmxvZy4xNjMuY29tLw==\">带头大哥777的博客<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"交易API\"><a href=\"#交易API\" class=\"headerlink\" title=\"交易API\"></a><strong>交易API</strong></h2><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5zZml0LmNvbS5jbi81XzJfRG9jdW1lbnREb3duLmh0bQ==\">上海期货信息技术有限公司CTP API<i class=\"fa fa-external-link-alt\"></i></span> -  期货交易所提供的API</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5jZmZleGl0LmNvbS5jbi9zdGF0aWMvMzAwMDIwMS5odG1s\">飞马快速交易平台 -  上海金融期货信息技术有限公司<i class=\"fa fa-external-link-alt\"></i></span> -  飞马</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5kZml0Yy5jb20uY24vcG9ydGFsL2NhdGU/Y2lkPTEzNjQ5Njc4MzkxMDAlMjMx\">大连飞创信息技术有限公司<i class=\"fa fa-external-link-alt\"></i></span> -  飞创</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL3ZucHkvdm5weQ==\">vnpy<i class=\"fa fa-external-link-alt\"></i></span> -  基于python的开源交易平台开发框架</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL1F1YW50Qm94L1hBUEky\">QuantBox&#x2F;XAPI2<i class=\"fa fa-external-link-alt\"></i></span> -  统一行情交易接口第2版</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL3NoaWRlbmdndWkvZWFzeXRyYWRlcg==\">easytrader<i class=\"fa fa-external-link-alt\"></i></span> -  提供券商华泰&#x2F;佣金宝&#x2F;银河&#x2F;广发&#x2F;雪球的基金、股票自动程序化交易，量化交易组件</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuaW50ZXJhY3RpdmVicm9rZXJzLmNvbS5oay9jbi9pbmRleC5waHA/Zj01MjM0Jm5zPVQ=\">IB API | Interactive Brokers<i class=\"fa fa-external-link-alt\"></i></span> -  盈透证券的交易API</li>\n</ul>\n<h2 id=\"编程\"><a href=\"#编程\" class=\"headerlink\" title=\"编程\"></a>编程</h2><h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuY29udGludXVtLmlvL2Rvd25sb2Fkcw==\">Anaconda<i class=\"fa fa-external-link-alt\"></i></span> -  推荐通过<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2hlbHAvYW5hY29uZGEv\">清华大学镜像 <i class=\"fa fa-external-link-alt\"></i></span>下载安装</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9weWNoYXJtL2Rvd25sb2FkLyUyM3NlY3Rpb249d2luZG93cw==\">Pycharm<i class=\"fa fa-external-link-alt\"></i></span> download</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5sZmQudWNpLmVkdS9+Z29obGtlL3B5dGhvbmxpYnMv\">Python Extension Packages for Windows - Christoph Gohlke<i class=\"fa fa-external-link-alt\"></i></span> -  Windows用户从这里可以下载许多python库的预编译包</li>\n</ul>\n<h4 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuY29kZWNhZGVteS5jb20vbGVhcm4vcHl0aG9u\">Python | Codecademy<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8lRTclOTQlQThQeXRob24lRTclOEUlQTklRTglQkQlQUMlRTYlOTUlQjAlRTYlOEQlQUUlMjBEYXRhJTIwUHJvY2Vzc2luZyUyMFVzaW5nJTIwUHl0aG9uJTIwLSUyME5hbmppbmclMjBVbml2ZXJzaXR5JTIwJTdDJTIwQ291cnNlcmE=\">用 Python 玩转数据 - 南京大学 | Coursera<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3poLWdvb2dsZS1zdHlsZWd1aWRlLnJlYWR0aGVkb2NzLmlvL2VuL2xhdGVzdC8=\">Google 开源项目风格指南 (中文版)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5saWFveHVlZmVuZy5jb20vYXJ0aWNsZS8wMDE0MzI2MTkyOTUxMTVjOTE4YTA5NGQ4OTU0YmQ0OTMwMzdiMDNkMjdiZjlhOTAwMA==\">廖雪峰python教程<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuY291cnNlcmEub3JnL2xlYXJuL3B5dGhvbi1kYXRhLWFuYWx5c2lz\">Introduction to Data Science in Python - University of Michigan | Coursera<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy8=\">The Python Tutorial<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3ZkaXNrLndlaWJvLmNvbS9zL3NMbmZkQThqcXdqY1U/Y2F0ZWdvcnlfaWQ9MCY=\">Python for Finance<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL29wZW4uMTYzLmNvbS9tb3ZpZS8yMDEzLzEyLzEvNS9NOURPS0ZEVjRfTUEyRVNLVDE1Lmh0bWw=\">Algorithmic Thinking <i class=\"fa fa-external-link-alt\"></i></span>-  Python 算法思维训练</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3B5dGhvbjMtY29va2Jvb2sucmVhZHRoZWRvY3MuaW8vemhfQ04vbGF0ZXN0L2luZGV4Lmh0bWw=\">Python Cookbook 3rd Edition Documentation<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h4 id=\"库\"><a href=\"#库\" class=\"headerlink\" title=\"库\"></a>库</h4><ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5sZmQudWNpLmVkdS9+Z29obGtlL3B5dGhvbmxpYnMvJTIzdGEtbGli\">Python Extension Packages for Windows<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL3ZpbnRhL2F3ZXNvbWUtcHl0aG9u\">awesome-python: A curated list of awesome Python frameworks, libraries, software and resources<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3BhbmRhcy5weWRhdGEub3JnLw==\">pandas<i class=\"fa fa-external-link-alt\"></i></span> -  Python做数据分析的基础</p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL2VudGhvdWdodC9weXFs\">pyql: Cython QuantLib wrappers<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3Btb3Jpc3NldHRlLmdpdGh1Yi5pby9mZm4vcXVpY2suaHRtbA==\">ffn<i class=\"fa fa-external-link-alt\"></i></span> -  绩效评估</p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL21yamJxNy90YS1saWI=\">ta-lib: Python wrapper for TA-Lib (http://ta-lib.org/).<i class=\"fa fa-external-link-alt\"></i></span> -  技术指标</p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3N0YXRzbW9kZWxzLnNvdXJjZWZvcmdlLm5ldC8=\">StatsModels: Statistics in Python — statsmodels documentation<i class=\"fa fa-external-link-alt\"></i></span> -  常用统计模型</p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL2Jhc2h0YWdlL2FyY2g=\">arch: ARCH models in Python<i class=\"fa fa-external-link-alt\"></i></span> -  时间序列</p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL3F1YW50b3BpYW4vcHlmb2xpbw==\">pyfolio: Portfolio and risk analytics in Python<i class=\"fa fa-external-link-alt\"></i></span> -  组合风险评估</p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL3R3b3NpZ21hL2ZsaW50\">twosigma&#x2F;flint: A Time Series Library for Apache Spark<i class=\"fa fa-external-link-alt\"></i></span> -  Apache Spark上的时间序列库</p>\n</li>\n</ul>\n<h3 id=\"R\"><a href=\"#R\" class=\"headerlink\" title=\"R\"></a>R</h3><h4 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL0NSQU4v\">The Comprehensive R Archive Network<i class=\"fa fa-external-link-alt\"></i></span> -  从国内清华镜像下载安装</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cucnN0dWRpby5jb20vcHJvZHVjdHMvcnN0dWRpby9kb3dubG9hZC8=\">RStudio<i class=\"fa fa-external-link-alt\"></i></span> -  R的常用开发平台下载</li>\n</ul>\n<h4 id=\"教程-1\"><a href=\"#教程-1\" class=\"headerlink\" title=\"教程\"></a>教程</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuZGF0YWNhbXAuY29tL2NvdXJzZXMvZnJlZS1pbnRyb2R1Y3Rpb24tdG8tcg==\">Free Introduction to R Programming Online Course<i class=\"fa fa-external-link-alt\"></i></span> -  datacamp的在线学习</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuY291cnNlcmEub3JnL2xlYXJuL3ItcHJvZ3JhbW1pbmc=\">R Programming - 约翰霍普金斯大学 | Coursera<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuZGF0YWNhbXAuY29tL2NvbW11bml0eS9vcGVuLWNvdXJzZXMvY29tcHV0YXRpb25hbC1maW5hbmNlLWFuZC1maW5hbmNpYWwtZWNvbm9tZXRyaWNzLXdpdGgtcg==\">Intro to Computational Finance with R<i class=\"fa fa-external-link-alt\"></i></span> -  用R进行计算金融分析</li>\n</ul>\n<h4 id=\"库-1\"><a href=\"#库-1\" class=\"headerlink\" title=\"库\"></a>库</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9jcmFuLnItcHJvamVjdC5vcmcvd2ViL3ZpZXdzL0ZpbmFuY2UuaHRtbA==\">CRAN Task View: Empirical Finance<i class=\"fa fa-external-link-alt\"></i></span> -  CRAN官方的R金融相关包整理</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL3FpbndmL2F3ZXNvbWUtUg==\">qinwf&#x2F;awesome-R: A curated list of awesome R packages, frameworks and software.<i class=\"fa fa-external-link-alt\"></i></span> -  R包的awesome</li>\n</ul>\n<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h3><h4 id=\"教程-2\"><a href=\"#教程-2\" class=\"headerlink\" title=\"教程\"></a>教程</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy54dWV0YW5neC5jb20vY291cnNlcy9jb3Vyc2UtdjE6UGVraW5nWCswNDgzMTc1MC4xeCsyMDE1VDEvYWJvdXQ=\">C++程序设计<i class=\"fa fa-external-link-alt\"></i></span> -  北京大学 郭炜</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy54dWV0YW5neC5jb20vY291cnNlcy9jb3Vyc2UtdjE6VHNpbmdodWFYKzIwNzQwMDg0WCtzcC9hYm91dA==\">基于Linux的C++ <i class=\"fa fa-external-link-alt\"></i></span>-  清华大学 乔林</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy54dWV0YW5neC5jb20vY291cnNlcy9jb3Vyc2UtdjE6VHNpbmdodWFYKzMwMjQwNTMyWCtzcC9hYm91dA==\">面向对象程序设计（C++）<i class=\"fa fa-external-link-alt\"></i></span> -  清华大学 徐明星</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc3ViamVjdC8xNDg1NDY4Lw==\">C++ Design Patterns and Derivatives Pricing <i class=\"fa fa-external-link-alt\"></i></span>-  C++设计模式</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2VuLmNwcHJlZmVyZW5jZS5jb20vdy9jcHA=\">C++ reference - cppreference.com<i class=\"fa fa-external-link-alt\"></i></span> -  在线文档</li>\n</ul>\n<h4 id=\"库-2\"><a href=\"#库-2\" class=\"headerlink\" title=\"库\"></a>库</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL2ZmZmFyYXovYXdlc29tZS1jcHA=\">fffaraz&#x2F;awesome-cpp: A curated list of awesome C&#x2F;C++ frameworks, libraries, resources, and shiny things.<i class=\"fa fa-external-link-alt\"></i></span> -  C++库整理</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL3JpZ3RvcnAvYXdlc29tZS1tb2Rlcm4tY3Bw\">rigtorp&#x2F;awesome-modern-cpp: A collection of resources on modern C++<i class=\"fa fa-external-link-alt\"></i></span> -  现代C++库整理</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3F1YW50bGliLm9yZy9pbmRleC5zaHRtbA==\">QuantLib: a free&#x2F;open-source library for quantitative finance<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL2xpYnRyYWRpbmcvbGlidHJhZGluZw==\">libtrading&#x2F;libtrading: Libtrading, an ultra low-latency trading connectivity library for C and C++.<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"Julia\"><a href=\"#Julia\" class=\"headerlink\" title=\"Julia\"></a>Julia</h3><h4 id=\"教程-3\"><a href=\"#教程-3\" class=\"headerlink\" title=\"教程\"></a>教程</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2p1bGlhbGFuZy5vcmcvbGVhcm5pbmcv\">Learning Julia<i class=\"fa fa-external-link-alt\"></i></span> -  官方整理</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3F1YW50LWVjb24ubmV0L19zdGF0aWMvcGRmcy9qbC1xdWFudC1lY29uLnBkZg==\">QUANTITATIVE ECONOMICS with Julia<i class=\"fa fa-external-link-alt\"></i></span> -  经济学诺奖获得者Thomas Sargent教你<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2p1bGlhbGFuZy5vcmcv\">Julia<i class=\"fa fa-external-link-alt\"></i></span>在量化经济的应用。</li>\n</ul>\n<h4 id=\"库-3\"><a href=\"#库-3\" class=\"headerlink\" title=\"库\"></a>库</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tL0p1bGlhUXVhbnQ=\">Quantitative Finance in Julia<i class=\"fa fa-external-link-alt\"></i></span> -  多数为正在实现中，感兴趣的可以参与</li>\n</ul>\n<h3 id=\"编程论坛\"><a href=\"#编程论坛\" class=\"headerlink\" title=\"编程论坛\"></a>编程论坛</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tLw==\">Stack Overflow<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tLw==\">SegmentFault<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cucXVvcmEuY29tLw==\">Quora<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9naXRodWIuY29tLw==\">Github<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tLw==\">知乎 -  与世界分享你的知识、经验和见解<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"编程能力在线训练\"><a href=\"#编程能力在线训练\" class=\"headerlink\" title=\"编程能力在线训练\"></a>编程能力在线训练</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly93d3cuaGFja2VycmFuay5jb20vZG9tYWlucw==\">Solve Programming Questions | HackerRank<i class=\"fa fa-external-link-alt\"></i></span> -  包含常用语言(C++, Java, Python, Ruby, SQL)和相关计算机应用技术(算法、数据结构、数学、AI、Linux Shell、分布式系统、正则表达式、安全)的教程和挑战。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9sZWV0Y29kZS5jb20v\">LeetCode Online Judge<i class=\"fa fa-external-link-alt\"></i></span> -  C, C++, Java, Python, C#, JavaScript, Ruby, Bash, MySQL在线编程训练</li>\n</ul>\n<h2 id=\"Quant-Books\"><a href=\"#Quant-Books\" class=\"headerlink\" title=\"Quant Books\"></a>Quant Books</h2><ul>\n<li><p>《投资学》第6版[美]兹维·博迪.文字版 (<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3ZkaXNrLndlaWJvLmNvbS9zL3NFdEJWeUpTNnB2bw==\">link<i class=\"fa fa-external-link-alt\"></i></span>)</p>\n</li>\n<li><p>《打开量化投资的黑箱》 里什·纳兰</p>\n</li>\n<li><p>《宽客》[美] <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Jvb2suamQuY29tL3dyaXRlci8lMjVFNiUyNTk2JTI1QUYlMjVFNyUyNUE3JTI1OTElMjVFNyUyNTg5JTI1QjklMjVDMiUyNUI3JTI1RTUlMjVCOCUyNTk1JTI1RTclMjU4OSUyNUI5JTI1RTYlMjVBMyUyNUFFXzEuaHRtbA==\">斯科特·帕特森<i class=\"fa fa-external-link-alt\"></i></span>（<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Jvb2suamQuY29tL3dyaXRlci9TY290dCUyNTIwUGF0dGVyc29uXzEuaHRtbA==\">Scott Patterson<i class=\"fa fa-external-link-alt\"></i></span>） 著；<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Jvb2suamQuY29tL3dyaXRlci8lMjVFOCUyNUFGJTI1OTElMjVFNyUyNUE3JTI1OTFfMS5odG1s\">译科<i class=\"fa fa-external-link-alt\"></i></span>，<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Jvb2suamQuY29tL3dyaXRlci8lMjVFNSUyNThEJTI1QTIlMjVFNSUyNUJDJTI1ODAlMjVFNiUyNUI1JTI1OEVfMS5odG1s\">卢开济<i class=\"fa fa-external-link-alt\"></i></span> 译</p>\n</li>\n<li><p>《解读量化投资：西蒙斯用公式打败市场的故事》 忻海</p>\n</li>\n<li><p>《Trends in Quantitative Finance》 Frank J. Fabozzi, Sergio M. Focardi, Petter N. Kolm</p>\n</li>\n<li><p>《漫步华尔街》麦基尔</p>\n</li>\n<li><p>《海龟交易法则》柯蒂斯·费思</p>\n</li>\n<li><p>《交易策略评估与最佳化》罗伯特·帕多</p>\n</li>\n<li><p>《统计套利》 安德鲁·波尔《信号与噪声》纳特•西尔弗</p>\n</li>\n<li><p>《期货截拳道》朱淋靖</p>\n</li>\n<li><p>《量化投资—策略与技术》 丁鹏</p>\n</li>\n<li><p>《量化投资—以matlab为工具》 李洋faruto</p>\n</li>\n<li><p>《量化投资策略:如何实现超额收益Alpha》 吴冲锋</p>\n</li>\n<li><p>《中低频量化交易策略研发（上）》 杨博理</p>\n</li>\n<li><p>《走出幻觉走向成熟》 金融帝国</p>\n</li>\n<li><p>《失控》凯文·凯利 《通往财务自由之路》范K撒普</p>\n</li>\n<li><p>《以交易为生》 埃尔德</p>\n</li>\n<li><p>《超越技术分析》图莎尔·钱德</p>\n</li>\n<li><p>《高级技术分析》布鲁斯·巴布科克</p>\n</li>\n<li><p>《积极型投资组合管理》格里纳德，卡恩</p>\n</li>\n<li><p>《金融计量学:从初级到高级建模技术》 斯维特洛扎</p>\n</li>\n<li><p>《投资革命》Bernstein</p>\n</li>\n<li><p>《富可敌国》Sebastian Mallaby</p>\n</li>\n<li><p>《量化交易——如何建立自己的算法交易事业》欧内斯特·陈</p>\n</li>\n<li><p>《<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Jvb2suZG91YmFuLmNvbS9zdWJqZWN0LzUyNDM3NzUv\">聪明的投资者<i class=\"fa fa-external-link-alt\"></i></span>》 巴菲特</p>\n</li>\n<li><p>《黑天鹅·如何应对不可知的未来》 纳西姆·塔勒布</p>\n</li>\n<li><p>《期权、期货和其他衍生品》 <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9ib29rLmRvdWJhbi5jb20vc2VhcmNoLyUyNUU3JTI1QkElMjVBNiUyNUU3JTI1QkYlMjVCMCUyNUMyJTI1QjclMjVFOCUyNUI1JTI1QUIlMjVFNSUyNUIwJTI1OTQv\">约翰·赫尔<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>《Building Reliable Trading Systems: Tradable Strategies That Perform As They Backtest and Meet Your Risk-Reward Goals》 Keith Fitschen</p>\n</li>\n<li><p>《Quantitative Equity Investing》by Frank J. Fabozzi, Sergio M. Focardi, Petter N. Kolm</p>\n</li>\n<li><p>Barra USE3 handbook</p>\n</li>\n<li><p>《Quantitative Equity Portfolio Management》 Ludwig Chincarini</p>\n</li>\n<li><p>《Quantitative Equity Portfolio Management》 Qian &amp; Hua &amp; Sorensen</p>\n</li>\n</ul>\n<h2 id=\"Quant-Papers\"><a href=\"#Quant-Papers\" class=\"headerlink\" title=\"Quant Papers\"></a>Quant Papers</h2><blockquote>\n<p>Machine Learning Related</p>\n</blockquote>\n<ul>\n<li>Cavalcante, Rodolfo C., et al. “Computational Intelligence and Financial Markets: A Survey and Future Directions.” Expert Systems with Applications 55 (2016): 194-211.<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5zY2llbmNlZGlyZWN0LmNvbS9zY2llbmNlL2FydGljbGUvcGlpL1MwOTU3NDE3NDE2MzAwMjlY\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"Low-Frequency-Prediction\"><a href=\"#Low-Frequency-Prediction\" class=\"headerlink\" title=\"Low Frequency Prediction\"></a>Low Frequency Prediction</h3><ul>\n<li>Atsalakis G S, Valavanis K P. Surveying stock market forecasting techniques Part II: Soft computing methods. Expert Systems with Applications, 2009, 36(3):5932–5941. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly93d3cuc2NpZW5jZWRpcmVjdC5jb20vc2NpZW5jZS9hcnRpY2xlL3BpaS9TMDk1NzQxNzQwODAwNDQxNyZobD16aC1DTiZzYT1UJm9pPWdzYiZjdD1yZXMmY2Q9MCZlaT1ieDk2V0p5c05NSzdqQUhyeTZUb0JBJnNjaXNpZz1BQUdCZm0wWmVFM2ZFYlM2UDd6bzlMdGNkOU0wdnRBdTl3\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Cai X, Lin X. Feature Extraction Using Restricted Boltzmann Machine for Stock Price Predic- tion. 2012 IEEE International Conference on Computer Science and Automation Engineering (CSAE), 2012. 80–83.<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly9pZWVleHBsb3JlLmllZWUub3JnL3hwbHMvYWJzX2FsbC5qc3AlMjUzRmFybnVtYmVyJTI1M0Q2MjcyOTEzJmhsPXpoLUNOJnNhPVQmb2k9Z3NiJmN0PXJlcyZjZD0wJmVpPXVSOTZXTjcxRjRuRTJBYUpzcmVvQlEmc2Npc2lnPUFBR0JmbTJiaVhkNTdSVVdlYVRkd3VTb3NBeU4tTHBraGc=\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Nair B B, Dharini N M, Mohandas V P. A stock market trend prediction system using a hybrid decision tree-neuro-fuzzy system. Proceedings - 2nd International Conference on Advances in Recent Technologies in Communication and Computing, ARTCom 2010, 2010. 381–385. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly9pZWVleHBsb3JlLmllZWUub3JnL3hwbHMvYWJzX2FsbC5qc3AlMjUzRmFybnVtYmVyJTI1M0Q1NjU1Mjk1JmhsPXpoLUNOJnNhPVQmb2k9Z3NiJmN0PXJlcyZjZD0wJmVpPXp4OTZXS0xTSnNTVjJBYmp5SWlBQ0Emc2Npc2lnPUFBR0JmbTBHUWJMaG9lRTZ3YVU5ZVdXZnNVVFliYTVGbVE=\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Lu C J, Lee T S, Chiu C C. Financial time series forecasting using independent component analysis and support vector regression. Decision Support Systems, 2009, 47(2):115–125. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly93d3cuc2NpZW5jZWRpcmVjdC5jb20vc2NpZW5jZS9hcnRpY2xlL3BpaS9TMDE2NzkyMzYwOTAwMDMyMyZobD16aC1DTiZzYT1UJm9pPWdzYiZjdD1yZXMmY2Q9MCZlaT1CeUI2V05QU0I0aVlqQUhsNHJlZ0NBJnNjaXNpZz1BQUdCZm0xaUhTeWR2d2NZU1V6Q00zWVhDaE5WWXVvUVln\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Creamer G, Freund Y. Automated trading with boosting and expert weighting. Quantitative Finance, 2010, 10(4):401–420. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly93d3cudGFuZGZvbmxpbmUuY29tL2RvaS9hYnMvMTAuMTA4MC8xNDY5NzY4MDkwMzEwNDExMyZobD16aC1DTiZzYT1UJm9pPWdzYiZjdD1yZXMmY2Q9MCZlaT1HQ0I2V082M0pjUExqQUd1bWJmd0J3JnNjaXNpZz1BQUdCZm0zcTRhbWNiVEZ4czJ0bDV5dUxHXzRob0xTQXN3\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Batres-Estrada, Bilberto. “Deep learning for multivariate financial time series.” (2015). <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5kaXZhLXBvcnRhbC5vcmcvc21hc2gvcmVjb3JkLmpzZj9waWQ9ZGl2YTI6ODIwODkx\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Xiong, Ruoxuan, Eric P. Nicholas, and Yuan Shen. “Deep Learning Stock Volatilities with Google Domestic Trends.” arXiv preprint arXiv:1512.04916 (2015).<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2FyeGl2Lm9yZy9hYnMvMTUxMi4wNDkxNg==\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Sharang, Abhijit, and Chetan Rao. “Using machine learning for medium frequency derivative portfolio trading.” arXiv preprint arXiv:1512.06228 (2015).<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2FyeGl2Lm9yZy9hYnMvMTUxMi4wNjIyOA==\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"Reinforcement-Learning\"><a href=\"#Reinforcement-Learning\" class=\"headerlink\" title=\"Reinforcement Learning\"></a>Reinforcement Learning</h3><ul>\n<li>Dempster, Michael AH, and Vasco Leemans. “An automated FX trading system using adaptive reinforcement learning.” Expert Systems with Applications 30.3 (2006): 543-552. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly93d3cuc2NpZW5jZWRpcmVjdC5jb20vc2NpZW5jZS9hcnRpY2xlL3BpaS9TMDk1NzQxNzQwNTAwMzAxNSZobD16aC1DTiZzYT1UJm9pPWdzYiZjdD1yZXMmY2Q9MCZlaT1MaUI2V05LbUtvSzNqQUhqeEp5QUJnJnNjaXNpZz1BQUdCZm0zYkpMTjM0cnNlYnZOR282SVVmZVl4aUlDMTV3\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Tan, Zhiyong, Chai Quek, and Philip YK Cheng. “Stock trading with cycles: A financial application of ANFIS and reinforcement learning.” Expert Systems with Applications 38.5 (2011): 4741-4755. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly93d3cuc2NpZW5jZWRpcmVjdC5jb20vc2NpZW5jZS9hcnRpY2xlL3BpaS9TMDk1NzQxNzQxMDAwOTA1WCZobD16aC1DTiZzYT1UJm9pPWdzYiZjdD1yZXMmY2Q9MCZlaT1QU0I2V0xfYUtNSzdqQUhyeTZUb0JBJnNjaXNpZz1BQUdCZm0xV1J3SDQ2NjBtcUs3UkUwTXVhMkVEcHV4TGxB\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Rutkauskas, Aleksandras Vytautas, and Tomas Ramanauskas. “Building an artificial stock market populated by reinforcement‐learning agents.” Journal of Business Economics and Management 10.4 (2009): 329-341.<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly93d3cudGFuZGZvbmxpbmUuY29tL2RvaS9hYnMvMTAuMzg0Ni8xNjExLTE2OTkuMjAwOS4xMC4zMjktMzQxJmhsPXpoLUNOJnNhPVQmb2k9Z3NiJmN0PXJlcyZjZD0wJmVpPVVTQjZXS1dFTTRXTWpBSFJwS0t3Qncmc2Npc2lnPUFBR0JmbTE1UEJGMDZfZnFsZXREVERrODBGck5peW9XSmc=\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Deng, Yue, et al. “Deep Direct Reinforcement Learning for Financial Signal Representation and Trading.” (2016).<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2llZWV4cGxvcmUuaWVlZS5vcmcveHBscy9hYnNfYWxsLmpzcD9hcm51bWJlcj03NDA3Mzg3\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"Natual-Language-Processing-Related\"><a href=\"#Natual-Language-Processing-Related\" class=\"headerlink\" title=\"Natual Language Processing Related\"></a>Natual Language Processing Related</h3><ul>\n<li>Bollen J, Mao H, Zeng X. Twitter mood predicts the stock market. Journal of Computational Science, 2011, 2(1):1–8. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly93d3cuc2NpZW5jZWRpcmVjdC5jb20vc2NpZW5jZS9hcnRpY2xlL3BpaS9TMTg3Nzc1MDMxMTAwMDA3WCZobD16aC1DTiZzYT1UJm9pPWdzYiZjdD1yZXMmY2Q9MCZlaT1oQ0I2V0pmLUY0bkUyQWFKc3Jlb0JRJnNjaXNpZz1BQUdCZm0wLUNkQ1NrSW9ycmFWVDA2M25aWE9NR1pQVm5n\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Preis T, Moat H S, Stanley H E, et al. Quantifying trading behavior in financial markets using Google Trends. Scientific reports, 2013, 3:1684. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly93d3cubmF0dXJlLmNvbS9zcmVwLzIwMTMvMTMwNDI1L3NyZXAwMTY4NC9mdWxsL3NyZXAwMTY4NC5odG1sJmhsPXpoLUNOJnNhPVQmb2k9Z3NiLWdncCZjdD1yZXMmY2Q9MCZlaT1sQ0I2V015TE9NU1YyQWJqeUlpQUNBJnNjaXNpZz1BQUdCZm0xS3c2UUVVMjVyUUlGTjVOcHB2S3BpYVp6bEZn\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Moat H S, Curme C, Avakian A, et al. Quantifying Wikipedia Usage Patterns Before Stock Market Moves. Scientific Reports, 2013, 3:1–5. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly93d3cubmF0dXJlLmNvbS9zcmVwLzIwMTMvMTMwNTA4L3NyZXAwMTgwMS9mdWxsL3NyZXAwMTgwMS5odG1sJTI1M0ZXVC5lY19pZCUyNTNEU1JFUC0yMDEzMDUxNCZobD16aC1DTiZzYT1UJm9pPWdzYi1nZ3AmY3Q9cmVzJmNkPTAmZWk9b0NCNldPbmhKNHVmakFIYzRMMkFEQSZzY2lzaWc9QUFHQmZtMkRlTDB3OENENDFhUGJJczFWN0d3QXo4Z09PZw==\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Ding, Xiao, et al. “Deep learning for event-driven stock prediction.” Proceedings of the 24th International Joint Conference on Artificial Intelligence (ICJAI’15). 2015. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly9pamNhaS5vcmcvcGFwZXJzMTUvUGFwZXJzL0lKQ0FJMTUtMzI5LnBkZiZobD16aC1DTiZzYT1UJm9pPWdzYi1nZ3AmY3Q9cmVzJmNkPTAmZWk9cENGNldPTHhGY0s3akFIcnk2VG9CQSZzY2lzaWc9QUFHQmZtMHhVTmRBVHJoeTFsTElGTHp5eE1zd1pVNmlmZw==\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Fehrer, R., &amp; Feuerriegel, S. (2015). Improving Decision Analytics with Deep Learning: The Case of Financial Disclosures. arXiv preprint arXiv:1508.01993. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2Fpc2VsLmFpc25ldC5vcmcvY2dpL3ZpZXdjb250ZW50LmNnaT9hcnRpY2xlPTEwMTgmY29udGV4dD1lY2lzMjAxNl9yaXA=\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"High-Frequency-Trading\"><a href=\"#High-Frequency-Trading\" class=\"headerlink\" title=\"High Frequency Trading\"></a>High Frequency Trading</h3><ul>\n<li>Nevmyvaka Y, Feng Y, Kearns M. Reinforcement learning for optimized trade execution. Proceedings of the 23rd international conference on Machine learning ICML 06, 2006, 17(1):673–680. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly9kbC5hY20ub3JnL2NpdGF0aW9uLmNmbSUyNTNGaWQlMjUzRDExNDM5MjkmaGw9emgtQ04mc2E9VCZvaT1nc2ImY3Q9cmVzJmNkPTAmZWk9cnlCNldQVEFNY2FMMkFicTVvYWdBUSZzY2lzaWc9QUFHQmZtM3pZaGgzdEZEbF9ad3lGMjVVY1JZVW5iSkFKZw==\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Ganchev K, Nevmyvaka Y, Kearns M, et al. Censored exploration and the dark pool problem. Communications of the ACM, 2010, 53(5):99. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly9kbC5hY20ub3JnL2NpdGF0aW9uLmNmbSUyNTNGaWQlMjUzRDE3MzUyNDcmaGw9emgtQ04mc2E9VCZvaT1nc2ImY3Q9cmVzJmNkPTAmZWk9dkNCNldKbldJWWlZakFIbDRyZWdDQSZzY2lzaWc9QUFHQmZtMlVUN2VrRTFXZC1QX1pkSkh0OFRCczZoSkZUZw==\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Kearns M, Nevmyvaka Y. Machine learning for market microstructure and high frequency trading. High frequency trading - New realities for traders, markets and regulators, 2013. 1–21. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcl91cmw/dXJsPWh0dHA6Ly93d3cuc21hbGxha2Uua3Ivd3AtY29udGVudC91cGxvYWRzLzIwMTQvMDEvS2Vhcm5zTmV2bXl2YWthSEZUUmlza0Jvb2tzLnBkZiZobD16aC1DTiZzYT1UJm9pPWdzYi1nZ3AmY3Q9cmVzJmNkPTAmZWk9ekNCNldQVG9Ic1BMakFHdW1iZndCdyZzY2lzaWc9QUFHQmZtM1BPc2NyaE1YdnBKYjVEQmI1LW9Zc1dseXpDdw==\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Sirignano, Justin A. “Deep Learning for Limit Order Books.” arXiv preprint arXiv:1601.01987 (2016). <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2phc2lyaWduLmdpdGh1Yi5pby9wZGYvRGVlcExlYXJuaW5nTGltaXRPcmRlckJvb2tzLnBkZg==\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Deng, Yue, et al. “Sparse coding-inspired optimal trading system for HFT industry.” IEEE Transactions on Industrial Informatics 11.2 (2015): 467-475.<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2llZWV4cGxvcmUuaWVlZS5vcmcveHBscy9hYnNfYWxsLmpzcD9hcm51bWJlcj03MDQyNzM0\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Ahuja, Saran, et al. “Limit order trading with a mean reverting reference price.” arXiv preprint arXiv:1607.00454 (2016). <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzE2MDcuMDA0NTQ=\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Aït-Sahalia, Yacine, and Jean Jacod. “Analyzing the spectrum of asset returns: Jump and volatility components in high frequency data.” Journal of Economic Literature 50.4 (2012): 1007-1050. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL3d3dy5pbmdlbnRhY29ubmVjdC5jb20vY29udGVudC9hZWEvamVsLzIwMTIvMDAwMDAwNTAvMDAwMDAwMDQvYXJ0MDAwMDI=\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<blockquote>\n<p>Portfolio Management</p>\n</blockquote>\n<ul>\n<li>B. Li and S. C. H. Hoi, “Online portfolio selection,” ACM Comput. Surv., vol. 46, no. 3, pp. 1–36, 2014. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2RsLmFjbS5vcmcvY2l0YXRpb24uY2ZtP2lkPTI1MTI5NjI=\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Heaton, J. B., Polson, N. G., &amp; Witte, J. H. (2016). Deep Portfolio Theory. <span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuemhpaHUuY29tLz90YXJnZXQ9aHR0cDovL2FyeGl2Lm9yZy9hYnMvMTYwNS4wNzIzMA==\">(link)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Eugene F. Fama, Kenneth R. French. The cross-section of expected stock returns. Journal of Finance, 47 (1992), pp. 427–465.</li>\n</ul>\n<h2 id=\"学术期刊\"><a href=\"#学术期刊\" class=\"headerlink\" title=\"学术期刊\"></a>学术期刊</h2><p>一堆<strong>学术期刊</strong>可以常常去浏览一下，也会有许多思路，作者常常看的有：</p>\n<ul>\n<li>Journal of FinanceJournal of Financial Economics</li>\n<li>Review of Financial Studies</li>\n<li>Journal of Accounting and Economics</li>\n<li>Review of Accounting Studies</li>\n<li>Journal of Accounting Research</li>\n<li>Accounting Review</li>\n<li>Journal of Financial and Quantitative Analysis</li>\n<li>Financial Analysts Journal</li>\n<li>Financial Management</li>\n<li>Journal of Empirical Finance</li>\n<li>Quantitative Finance</li>\n<li>Journal of Alternative Investments</li>\n<li>Journal of Fixed Income</li>\n<li>Journal of Investing</li>\n<li>Journal of Portfolio Management</li>\n<li>Journal of Trading</li>\n<li>Review of Asset Pricing Studies</li>\n<li>经济研究</li>\n<li>经济学（季刊）</li>\n<li>金融研究</li>\n<li>管理世界</li>\n<li>会计研究</li>\n<li>投资研究</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNjE3OTk0Mw==\">https://zhuanlan.zhihu.com/p/26179943<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Quant"],"tags":["quant"]},{"title":"HTTP协议详解","url":"/http_info/","content":"<p>一、概念</p>\n<p>协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则，超文本传输协议(HTTP)是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器。</p>\n<p>HTTP协议，即超文本传输协议(Hypertext transfer protocol)。是一种详细规定了浏览器和万维网(WWW &#x3D; World Wide Web)服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。</p>\n<p>HTTP协议是用于从WWW服务器传输超文本到本地浏览器的传送协议。它可以使浏览器更加高效，使网络传输减少。它不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示(如文本先于图形)等。</p>\n<p>HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。HTTP是一个无状态的协议。</p>\n<p>在Internet中所有的传输都是通过TCP&#x2F;IP进行的。HTTP协议作为TCP&#x2F;IP模型中应用层的协议也不例外。HTTP协议通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。如下图所示：</p>\n<p>HTTP默认的端口号为80，HTTPS的端口号为443。</p>\n<p>浏览网页是HTTP的主要应用，但是这并不代表HTTP就只能应用于网页的浏览。HTTP是一种协议，只要通信的双方都遵守这个协议，HTTP就能有用武之地。比如咱们常用的QQ，迅雷这些软件，都会使用HTTP协议(还包括其他的协议)。</p>\n<p>二、简史</p>\n<p>它的发展是万维网协会（World Wide Web Consortium）和Internet工作小组IETF（Internet Engineering Task Force）合作的结果，（他们）最终发布了一系列的RFC，RFC 1945定义了HTTP&#x2F;1.0版本。其中最著名的就是RFC 2616。RFC 2616定义了今天普遍使用的一个版本——HTTP 1.1。</p>\n<p>三、特点</p>\n<p>HTTP协议永远都是客户端发起请求，服务器回送响应。这样就限制了使用HTTP协议，无法实现在客户端没有发起请求的时候，服务器将消息推送给客户端。</p>\n<p>HTTP协议的主要特点可概括如下：<br>1、支持客户&#x2F;服务器模式。支持基本认证和安全认证。<br>2、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。<br>3、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。<br>4、HTTP 0.9和1.0使用非持续连接：限制每次连接只处理一个请求，服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。HTTP 1.1使用持续连接：不必为每个web对象创建一个新的连接，一个连接可以传送多个对象。<br>5、无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。</p>\n<p>无状态协议：<br>协议的状态是指下一次传输可以“记住”这次传输信息的能力。<br>http是不会为了下一次连接而维护这次连接所传输的信息,为了保证服务器内存。<br>比如客户获得一张网页之后关闭浏览器，然后再一次启动浏览器，再登陆该网站，但是服务器并不知道客户关闭了一次浏览器。<br>由于Web服务器要面对很多浏览器的并发访问，为了提高Web服务器对并发访问的处理能力，在设计HTTP协议时规定Web服务器发送HTTP应答报文和文档时，不保存发出请求的Web浏览器进程的任何状态信息。这有可能出现一个浏览器在短短几秒之内两次访问同一对象时，服务器进程不会因为已经给它发过应答报文而不接受第二期服务请求。由于Web服务器不保存发送请求的Web浏览器进程的任何信息，因此HTTP协议属于无状态协议（Stateless Protocol）。</p>\n<p>HTTP协议是无状态的和Connection: keep-alive的区别：<br>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。从另一方面讲，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。<br>HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（无连接）。<br>从HTTP&#x2F;1.1起，默认都开启了Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。<br>Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。</p>\n<p>四、工作流程</p>\n<p>一次HTTP操作称为一个事务，其工作过程可分为四步：<br>1）首先客户机与服务器需要建立连接。只要单击某个超级链接，HTTP的工作开始。<br>2）建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。<br>3）服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。<br>4）客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。<br>如果在以上过程中的某一步出现错误，那么产生错误的信息将返回到客户端，有显示屏输出。对于用户来说，这些过程是由HTTP自己完成的，用户只要用鼠标点击，等待信息显示就可以了。</p>\n<p>HTTP是基于传输层的TCP协议，而TCP是一个端到端的面向连接的协议。所谓的端到端可以理解为进程到进程之间的通信。所以HTTP在开始传输之前，首先需要建立TCP连接，而TCP连接的过程需要所谓的“三次握手”。下图所示TCP连接的三次握手。<br>在TCP三次握手之后，建立了TCP连接，此时HTTP就可以进行传输了。一个重要的概念是面向连接，既HTTP在传输完成之间并不断开TCP连接。在HTTP1.1中(通过Connection头设置)这是默认行为。</p>\n<p>五、使用Wireshark抓TCP、http包</p>\n<p>打开Wireshark，选择工具栏上的”Capture”-&gt;”Options”</p>\n<p>点击”Capture Filter”，此处选择的是”HTTP TCP port（80）”，选择后点击上图的”Start”开始抓包。<br>然后在浏览器中打开<code>http://image.baidu.com/</code></p>\n<p>可清晰的看到客户端浏览器（ip为192.168.1.6）与服务器（115.239.210.36）的交互过程：<br>1）No1：浏览器（192.168.1.6）向服务器（115.239.210.36）发出连接请求。此为TCP三次握手第一步，此时从图中可以看出，为SYN，seq:X （x&#x3D;0）；<br>2）No2：服务器（115.239.210.36）回应了浏览器（192.168.1.6）的请求，并要求确认，此时为：SYN，ACK，此时seq：y（y为0），ACK：x+1（为1）。此为三次握手的第二步；<br>3）No3：浏览器（192.168.1.6）回应了服务器（115.239.210.36）的确认，连接成功。为：ACK，此时seq：x+1（为1），ACK：y+1（为1）。此为三次握手的第三步；<br>4）No4：浏览器（192.168.1.6）发出一个页面HTTP请求；<br>5）No5：服务器（115.239.210.36）确认；<br>6）No6：服务器（115.239.210.36）发送数据；<br>7）No8：客户端浏览器（192.168.1.6）确认；<br>8）No81：客户端（192.168.1.6）发出一个图片HTTP请求；<br>9）No202：服务器（115.239.210.36）发送状态响应码200 OK。</p>\n<p>六、头域</p>\n<p>每个头域由一个域名，冒号（:）和域值三部分组成。域名是大小写无关的，域值前可以添加任何数量的空格符，头域可以被扩展为多行，在每行开始处，使用至少一个空格或制表符。</p>\n<p>6.1、请求信息：<br>发出的请求信息格式如下：<br>●请求行，例如GET &#x2F;images&#x2F;logo.gif HTTP&#x2F;1.1，表示从&#x2F;images目录下请求logo.gif这个文件。<br>●（请求）头，例如Accept-Language: en<br>●空行<br>●可选的消息体　请求行和标题必须以<CR><LF>作为结尾（也就是，回车然后换行）。空行内必须只有<CR><LF>而无其他空格。在HTTP&#x2F;1.1协议中，所有的请求头，除post外，都是可选的。</p>\n<p>三个部分分别是：请求行、消息报头、请求正文。</p>\n<p>6.2、请求方法<br>HTTP&#x2F;1.1协议中共定义了八种方法（有时也叫“动作”）来表明Request-URI指定的资源的不同操作方式：<br>OPTIONS – 返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送’*’的请求来测试服务器的功能性。<br>HEAD- 向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。该方法常用于测试超链接的有效性，是否可以访问，以及最近是否更新。<br>GET – 向特定的资源发出请求。注意：GET方法不应当被用于产生“副作用”的操作中，例如在web app.中。其中一个原因是GET可能会被网络蜘蛛等随意访问。<br>POST – 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。<br>PUT – 向指定资源位置上传其最新内容。<br>DELETE – 请求服务器删除Request-URI所标识的资源。<br>TRACE- 回显服务器收到的请求，主要用于测试或诊断。<br>CONNECT – HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器。<br>PATCH – 用来将局部修改应用于某一资源，添加于规范RFC5789。<br>方法名称是区分大小写的。当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Method Not Allowed）；当服务器不认识或者不支持对应的请求方法的时候，应当返回状态码501（Not Implemented）。<br>HTTP服务器至少应该实现GET和HEAD方法，其他方法都是可选的。此外，除了上述方法，特定的HTTP服务器还能够扩展自定义的方法。</p>\n<p>GET和POST的区别：<br>1、GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name&#x3D;test1&amp;id&#x3D;123456. POST方法是把提交的数据放在HTTP包的Body中。<br>2、GET提交的数据大小有限制，最多只能有1024字节（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制。<br>3、GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。<br>4、GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。<br>6.3、响应消息<br>客户端向服务器发送一个请求，服务器以一个状态行作为响应，响应的内容包括：消息协议的版本、成功或者错误编码、服务器信息、实体元信息以及必要的实体内容。根据响应类别的类别，服务器响应里可以含实体内容，但不是所有的响应都有实体内容。<br>响应头第一行也称为状态行，格式如下（下图中红线标出的那行）：<br>HTTP-Version 空格 Status-Code 空格 Reason-Phrase CRLF<br>HTTP- Version表示HTTP版本，例如为HTTP&#x2F;1.1。Status- Code是结果代码，用三个数字表示。Reason-Phrase是个简单的文本描述，解释Status-Code的具体原因。Status-Code用于机器自动识别，Reason-Phrase用于人工理解。Status-Code的第一个数字代表响应类别，可能取5个不同的值。后两个数字没有分类作用。Status-Code的第一个数字代表响应的类别，后续两位描述在该类响应下发生的具体状况，具体请参见：HTTP状态码 。</p>\n<p>响应消息的结构：</p>\n<p>三个部分分别是：状态行、消息报头、响应正文。</p>\n<p>无论你何时浏览一个网页，你的电脑都会通过一个使用HTTP协议的服务器来获取所请求的数据。在你请求的网页显示在浏览器之前，支配网页的网站服务器会返回一个包含有状态码的HTTP头文件。这个状态码提供了有关所请求网页的相关条件信息。如果一切正常，一个标准网页会收到一条诸如200的状态码。当然我们的目的不是去研究200响应码，而是去探讨那些代表出现错误信息的服务器头文件响应码，例如表示“未找到指定网页”的404码。</p>\n<p>6.4、响应头域<br>服务器需要传递许多附加信息，这些信息不能全放在状态行里。因此，需要另行定义响应头域，用来描述这些附加信息。响应头域主要描述服务器的信息和Request-URI的信息。</p>\n<p>6.5、HTTP常见的请求头（在HTTP&#x2F;1.1 协议中，所有的请求头，除Host外，都是可选的）</p>\n<p>If-Modified-Since：把浏览器端缓存页面的最后修改时间发送到服务器去，服务器会把这个时间与服务器上实际文件的最后修改时间进行对比。如果时间一致，那么返回304，客户端就直接使用本地缓存文件。如果时间不一致，就会返回200和新的文件内容。客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示在浏览器中。<br>例如：If-Modified-Since: Thu, 09 Feb 2012 09:07:57 GMT</p>\n<p>If-None-Match：If-None-Match和ETag一起工作，工作原理是在HTTP Response中添加ETag信息。 当用户再次请求该资源时，将在HTTP Request 中加入If-None-Match信息(ETag的值)。如果服务器验证资源的ETag没有改变（该资源没有更新），将返回一个304状态告诉客户端使用本地缓存文件。否则将返回200状态和新的资源和Etag. ?使用这样的机制将提高网站的性能。例如: If-None-Match: “03f2b33c0bfcc1:0″。</p>\n<p>Pragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝；在HTTP&#x2F;1.1版本中，它和Cache-Control:no-cache作用一模一样。Pargma只有一个用法， 例如： Pragma: no-cache<br>注意: 在HTTP&#x2F;1.0版本中，只实现了Pragema:no-cache, 没有实现Cache-Control</p>\n<p>Cache-Control：指定请求和响应遵循的缓存机制。缓存指令是单向的（响应中出现的缓存指令在请求中未必会出现），且是独立的（在请求消息或响应消息中设置Cache-Control并不会修改另一个消息处理过程中的缓存处理过程）。请求时的缓存指令包括no-cache、no-store、max-age、max-stale、min-fresh、only-if-cached，响应消息中的指令包括public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age、s-maxage。</p>\n<p>Cache-Control:Public 可以被任何缓存所缓存<br>Cache-Control:Private 内容只缓存到私有缓存中<br>Cache-Control:no-cache 所有内容都不会被缓存<br>Cache-Control:no-store 用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。<br>Cache-Control:max-age 指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。<br>Cache-Control:min-fresh 指示客户机可以接收响应时间小于当前时间加上指定时间的响应。<br>Cache-Control:max-stale 指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。</p>\n<p>Accept：浏览器端可以接受的MIME类型。例如：Accept: text&#x2F;html 代表浏览器可以接受服务器回发的类型为 text&#x2F;html 也就是我们常说的html文档，如果服务器无法返回text&#x2F;html类型的数据，服务器应该返回一个406错误(non acceptable)。通配符 * 代表任意类型，例如 Accept: <em>&#x2F;</em> 代表浏览器可以处理所有类型，(一般浏览器发给服务器都是发这个)。</p>\n<p>Accept-Encoding：浏览器申明自己可接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate）;Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。例如： Accept-Encoding: gzip, deflate。如果请求消息中没有设置这个域，服务器假定客户端对各种内容编码都可以接受。</p>\n<p>Accept-Language：浏览器申明自己接收的语言。语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等；例如：Accept-Language: en-us。如果请求消息中没有设置这个报头域，服务器假定客户端对各种语言都可以接受。</p>\n<p>Accept-Charset：浏览器可接受的字符集。如果在请求消息中没有设置这个域，缺省表示任何字符集都可以接受。</p>\n<p>User-Agent：告诉HTTP服务器，客户端使用的操作系统和浏览器的名称和版本。<br>例如： User-Agent: Mozilla&#x2F;4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident&#x2F;4.0; CIBA; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C; InfoPath.2; .NET4.0E)。</p>\n<p>Content-Type：例如：Content-Type: application&#x2F;x-www-form-urlencoded。</p>\n<p>Referer：包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。提供了Request的上下文信息的服务器，告诉服务器我是从哪个链接过来的，比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。<br>例如: Referer:<code>http://translate.google.cn/?hl=zh-cn&amp;tab=wT</code></p>\n<p>Connection：<br>例如：Connection: keep-alive 当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。HTTP 1.1默认进行持久连接。利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。<br>Connection: close 代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭，当客户端再次发送Request，需要重新建立TCP连接。</p>\n<p>Host：（发送请求时，该头域是必需的）主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的。HTTP&#x2F;1.1请求必须包含主机头域，否则系统会以400状态码返回。<br>例如: 我们在浏览器中输入：<code>http://www.guet.edu.cn/index.html</code>，浏览器发送的请求消息中，就会包含Host请求头域：<code>Host：http://www.guet.edu.cn</code>，此处使用缺省端口号80，若指定了端口号，则变成：Host：指定端口号。</p>\n<p>Cookie：最重要的请求头之一, 将cookie的值发送给HTTP服务器。</p>\n<p>Content-Length：表示请求消息正文的长度。例如：Content-Length: 38。</p>\n<p>Authorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。主要用于证明客户端有权查看某个资源。当浏览器访问一个页面时，如果收到服务器的响应代码为401（未授权），可以发送一个包含Authorization请求报头域的请求，要求服务器对其进行验证。</p>\n<p>UA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。</p>\n<p>From：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。</p>\n<p>Range：可以请求实体的一个或者多个子范围。例如，<br>表示头500个字节：bytes&#x3D;0-499<br>表示第二个500字节：bytes&#x3D;500-999<br>表示最后500个字节：bytes&#x3D;-500<br>表示500字节以后的范围：bytes&#x3D;500-<br>第一个和最后一个字节：bytes&#x3D;0-0,-1<br>同时指定几个范围：bytes&#x3D;500-600,601-999<br>但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206（PartialContent）返回而不是以200（OK）。</p>\n<p>6.6、HTTP常见的响应头</p>\n<p>Allow：服务器支持哪些请求方法（如GET、POST等）。</p>\n<p>Date：表示消息发送的时间，时间的描述格式由rfc822定义。例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦</p>\n<p>Expires：指明应该在什么时候认为文档已经过期，从而不再缓存它，重新从服务器获取，会更新缓存。过期之前使用本地缓存。HTTP1.1的客户端和缓存会将非法的日期格式（包括0）看作已经过期。eg：为了让浏览器不要缓存页面，我们也可以将Expires实体报头域，设置为0。<br>例如: Expires: Tue, 08 Feb 2022 11:35:14 GMT</p>\n<p>P3P：用于跨域设置Cookie, 这样可以解决iframe跨域访问cookie的问题<br>例如: P3P: CP&#x3D;CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR</p>\n<p>Set-Cookie：非常重要的header, 用于把cookie发送到客户端浏览器，每一个写入cookie都会生成一个Set-Cookie。<br>例如: Set-Cookie: sc&#x3D;4c31523a; path&#x3D;&#x2F;; domain&#x3D;.acookie.taobao.com</p>\n<p>ETag：和If-None-Match 配合使用。</p>\n<p>Last-Modified：用于指示资源的最后修改日期和时间。Last-Modified也可用setDateHeader方法来设置。</p>\n<p>Content-Type：WEB服务器告诉浏览器自己响应的对象的类型和字符集。Servlet默认为text&#x2F;plain，但通常需要显式地指定为text&#x2F;html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。可在web.xml文件中配置扩展名和MIME类型的对应关系。<br>例如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Content-Type: text/html;charset=utf-8</span><br><span class=\"line\">Content-Type:text/html;charset=GB2312</span><br><span class=\"line\">Content-Type: image/jpeg</span><br></pre></td></tr></table></figure>\n\n<p>媒体类型的格式为：大类&#x2F;小类，比如text&#x2F;html。<br>IANA(The Internet Assigned Numbers Authority，互联网数字分配机构)定义了8个大类的媒体类型，分别是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">application— (比如: application/vnd.ms-excel.)</span><br><span class=\"line\">audio (比如: audio/mpeg.)</span><br><span class=\"line\">image (比如: image/png.)</span><br><span class=\"line\">message (比如,:message/http.)</span><br><span class=\"line\">model(比如:model/vrml.)</span><br><span class=\"line\">multipart (比如:multipart/form-data.)</span><br><span class=\"line\">text(比如:text/html.)</span><br><span class=\"line\">video(比如:video/quicktime.)</span><br></pre></td></tr></table></figure>\n<p>Content-Range：用于指定整个实体中的一部分的插入位置，他也指示了整个实体的长度。在服务器向客户返回一个部分响应，它必须描述响应覆盖的范围和整个实体长度。一般格式：Content-Range:bytes-unitSPfirst-byte-pos-last-byte-pos&#x2F;entity-length。<br>例如，传送头500个字节次字段的形式：Content-Range:bytes0-499&#x2F;1234如果一个http消息包含此节（例如，对范围请求的响 应或对一系列范围的重叠请求），Content-Range表示传送的范围。</p>\n<p>Content-Length：指明实体正文的长度，以字节方式存储的十进制数字来表示。在数据下行的过程中，Content-Length的方式要预先在服务器中缓存所有数据，然后所有数据再一股脑儿地发给客户端。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。<br>例如: Content-Length: 19847</p>\n<p>Content-Encoding：WEB服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。<br>例如：Content-Encoding：gzip</p>\n<p>Content-Language：WEB服务器告诉浏览器自己响应的对象所用的自然语言。例如： Content-Language:da。没有设置该域则认为实体内容将提供给所有的语言阅读。</p>\n<p>Server：指明HTTP服务器用来处理请求的软件信息。例如：Server: Microsoft-IIS&#x2F;7.5、Server：Apache-Coyote&#x2F;1.1。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。</p>\n<p>X-AspNet-Version：如果网站是用ASP.NET开发的，这个header用来表示ASP.NET的版本。<br>例如: X-AspNet-Version: 4.0.30319</p>\n<p>X-Powered-By：表示网站是用什么技术开发的。<br>例如： X-Powered-By: ASP.NET</p>\n<p>Connection：<br>例如：Connection: keep-alive 当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。<br>Connection: close 代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭，当客户端再次发送Request，需要重新建立TCP连接。</p>\n<p>Location：用于重定向一个新的位置，包含新的URL地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。Location响应报头域常用在更换域名的时候。</p>\n<p>Refresh：表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过<code>setHeader(“Refresh”, “5; URL=http://host/path”)</code>让浏览器读取指定的页面。注意这种功能通常是通过设置HTML页面HEAD区的<code>&lt;META HTTP-EQUIV=”Refresh” CONTENT=”5;URL=http://host/path”&gt;</code>实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。注意Refresh的意义是“N秒之后刷新本页面或访问指定页面”，而不是“每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是<code>&lt;META HTTP-EQUIV=”Refresh” …&gt;</code>。注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</p>\n<p>WWW-Authenticate：该响应报头域必须被包含在401（未授权的）响应消息中，客户端收到401响应消息时候，并发送Authorization报头域请求服务器对其进行验证时，服务端响应报头就包含该报头域。<br>eg：WWW-Authenticate:Basic realm&#x3D;”Basic Auth Test!” &#x2F;&#x2F; 可以看出服务器对请求资源采用的是基本验证机制。</p>\n<p>七、解决HTTP无状态的问题</p>\n<p>7.1、通过Cookies保存状态信息<br>通过Cookies，服务器就可以清楚的知道请求2和请求1来自同一个客户端。</p>\n<p>7.2、通过Session保存状态信息</p>\n<p>Session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。<br>当程序需要为某个客户端的请求创建一个session的时候，服务器首先检查这个客户端的请求里是否已包含了一个session标识 – 称为 session id，如果已包含一个session id则说明以前已经为此客户端创建过session，服务器就按照session id把这个 session检索出来使用（如果检索不到，可能会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。</p>\n<p>Session的实现方式：</p>\n<p>1、使用Cookie来实现<br>服务器给每个Session分配一个唯一的JSESSIONID，并通过Cookie发送给客户端。<br>当客户端发起新的请求的时候，将在Cookie头中携带这个JSESSIONID。这样服务器能够找到这个客户端对应的Session。</p>\n<p>2、使用URL回写来实现<br>URL回写是指服务器在发送给浏览器页面的所有链接中都携带JSESSIONID的参数，这样客户端点击任何一个链接都会把JSESSIONID带会服务器。如果直接在浏览器输入服务端资源的url来请求该资源，那么Session是匹配不到的。<br>Tomcat对Session的实现，是一开始同时使用Cookie和URL回写机制，如果发现客户端支持Cookie，就继续使用Cookie，停止使用URL回写。如果发现Cookie被禁用，就一直使用URL回写。jsp开发处理到Session的时候，对页面中的链接记得使用response.encodeURL() 。</p>\n<p>Cookie和Session有以下明显的不同点：<br>1）Cookie将状态保存在客户端，Session将状态保存在服务器端；<br>2）Cookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器。Cookie最早在RFC2109中实现，后续RFC2965做了增强。网络服务器用HTTP头向客户端发送cookies，在客户终端，浏览器解析这些cookies并将它们保存为一个本地文件，它会自动将同一服务器的任何请求缚上这些cookies。Session并没有在HTTP的协议中定义；<br>3）Session是针对每一个用户的，变量的值保存在服务器上，用一个sessionID来区分是哪个用户session变量,这个值是通过用户的浏览器在访问的时候返回给服务器，当客户禁用cookie时，这个值也可能设置为由get来返回给服务器；<br>4）就安全性来说：当你访问一个使用session 的站点，同时在自己机子上建立一个cookie，建议在服务器端的SESSION机制更安全些。因为它不会任意读取客户存储的信息。</p>\n<p>7.3、通过表单变量保持状态<br>除了Cookies之外，还可以使用表单变量来保持状态，比如Asp.net就通过一个叫ViewState的Input&#x3D;“hidden”的框来保持状态,比如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">input type=”hidden” name=”__VIEWSTATE” id=”__VIEWSTATE” value=”/wEPDwUKMjA0OTM4MTAwNGRkXUfhlDv1Cs7/qhBlyZROCzlvf5U=”/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这个原理和Cookies大同小异，只是每次请求和响应所附带的信息变成了表单变量。</p>\n<p>7.4、通过QueryString保持状态<br>QueryString通过将信息保存在所请求地址的末尾来向服务器传送信息，通常和表单结合使用，一个典型的QueryString比如:<code>www.xxx.com/xxx.aspx?var1=value&amp;var2=value2</code><br>八、使用telnet进行http测试</p>\n<p>在Windows下，可使用命令窗口进行http简单测试。输入cmd进入命令窗口，在命令行键入如下命令后按回车：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">telnet www.baidu.com 80</span><br></pre></td></tr></table></figure>\n<p>而后在窗口中按下”Ctrl+]”后按回车可让返回结果回显。<br>接着开始发请求消息，例如发送如下请求消息请求baidu的首页消息，使用的HTTP协议为HTTP&#x2F;1.1：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /index.html HTTP/1.1</span><br></pre></td></tr></table></figure>\n<p>注意：copy如上的消息到命令窗口后需要按两个回车换行才能得到响应的消息，第一个回车换行是在命令后键入回车换行，是HTTP协议要求的。第二个是确认输入，发送请求。</p>\n<p>可看到，当采用HTTP&#x2F;1.1时，连接不是在请求结束后就断开的。若采用HTTP1.0，在命令窗口键入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /index.html HTTP/1.0</span><br></pre></td></tr></table></figure>\n<p>此时可以看到请求结束之后马上断开。<br>读者还可以尝试在使用GET或POST等时，带上头域信息，例如键入如下信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /index.html HTTP/1.1</span><br><span class=\"line\">connection: close</span><br><span class=\"line\">Host: www.baidu.com</span><br></pre></td></tr></table></figure>\n<p>九、URL详解</p>\n<p>URL(Uniform Resource Locator) 地址用于描述一个网络上的资源， 基本格式如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">schema://host[:port#]/path/…/[;url-params][?query-string][#anchor]</span><br><span class=\"line\">scheme 指定低层使用的协议(例如：http, https, ftp)</span><br><span class=\"line\">host HTTP服务器的IP地址或者域名</span><br><span class=\"line\">port# HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如`http://www.cnblogs.com:8080/`</span><br><span class=\"line\">path 访问资源的路径</span><br><span class=\"line\">url-params</span><br><span class=\"line\">query-string 发送给http服务器的数据</span><br><span class=\"line\">anchor- 锚</span><br></pre></td></tr></table></figure>\n<p>URL 的一个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.mywebsite.com/sj/test;id=8079?name=sviergn&amp;x=true#stuff</span><br><span class=\"line\"></span><br><span class=\"line\">Schema: http</span><br><span class=\"line\">host: www.mywebsite.com</span><br><span class=\"line\">path: /sj/test</span><br><span class=\"line\">URL params: id=8079</span><br><span class=\"line\">Query String: name=sviergn&amp;x=true</span><br><span class=\"line\">Anchor: stuff</span><br></pre></td></tr></table></figure>\n<p>十、缓存的实现原理</p>\n<p>WEB缓存(cache)位于Web服务器和客户端之间。<br>缓存会根据请求保存输出内容的副本，例如html页面，图片，文件，当下一个请求来到的时候：如果是相同的URL，缓存直接使用副本响应访问请求，而不是向源服务器再次发送请求。<br>HTTP协议定义了相关的消息头来使WEB缓存尽可能好的工作。</p>\n<p>10.1、缓存的优点<br>减少相应延迟：因为请求从缓存服务器（离客户端更近）而不是源服务器被相应，这个过程耗时更少，让web服务器看上去相应更快。<br>减少网络带宽消耗：当副本被重用时会减低客户端的带宽消耗；客户可以节省带宽费用，控制带宽的需求的增长并更易于管理。</p>\n<p>10.2、客户端缓存生效的常见流程</p>\n<p>服务器收到请求时，会在200OK中回送该资源的Last-Modified和ETag头，客户端将该资源保存在cache中，并记录这两个属性。当客户端需要发送相同的请求时，会在请求中携带If-Modified-Since和If-None-Match两个头。两个头的值分别是响应中Last-Modified和ETag头的值。服务器通过这两个头判断本地资源未发生变化，客户端不需要重新下载，返回304响应。</p>\n<p>10.3、Web缓存机制</p>\n<p>HTTP&#x2F;1.1中缓存的目的是为了在很多情况下减少发送请求，同时在许多情况下可以不需要发送完整响应。前者减少了网络回路的数量；HTTP利用一个“过期（expiration）”机制来为此目的。后者减少了网络应用的带宽；HTTP用“验证（validation）”机制来为此目的。<br>HTTP定义了3种缓存机制：<br>1）Freshness：允许一个回应消息可以在源服务器不被重新检查，并且可以由服务器和客户端来控制。例如，Expires回应头给了一个文档不可用的时间。Cache-Control中的max-age标识指明了缓存的最长时间；<br>2）Validation：用来检查以一个缓存的回应是否仍然可用。例如，如果一个回应有一个Last-Modified回应头，缓存能够使用If-Modified-Since来判断是否已改变，以便判断根据情况发送请求；<br>3）Invalidation：在另一个请求通过缓存的时候，常常有一个副作用。例如，如果一个URL关联到一个缓存回应，但是其后跟着POST、PUT和DELETE的请求的话，缓存就会过期。</p>\n<p>十一、HTTP应用</p>\n<p>11.1、断点续传的实现原理</p>\n<p>HTTP协议的GET方法，支持只请求某个资源的某一部分；<br>206 Partial Content 部分内容响应；<br>Range 请求的资源范围；<br>Content-Range 响应的资源范围；<br>在连接断开重连时，客户端只请求该资源未下载的部分，而不是重新请求整个资源，来实现断点续传。<br>分块请求资源实例：<br>Eg1：Range: bytes&#x3D;306302- ：请求这个资源从306302个字节到末尾的部分；<br>Eg2：Content-Range: bytes 306302-604047&#x2F;604048：响应中指示携带的是该资源的第306302-604047的字节，该资源共604048个字节；<br>客户端通过并发的请求相同资源的不同片段，来实现对某个资源的并发分块下载。从而达到快速下载的目的。目前流行的FlashGet和迅雷基本都是这个原理。</p>\n<p>11.2、多线程下载的原理<br>下载工具开启多个发出HTTP请求的线程；<br>每个http请求只请求资源文件的一部分：Content-Range: bytes 20000-40000&#x2F;47000；<br>合并每个线程下载的文件。</p>\n<p>11.3、http代理<br>http代理服务器</p>\n<p>代理服务器英文全称是Proxy Server，其功能就是代理网络用户去取得网络信息。形象的说：它是网络信息的中转站。<br>代理服务器是介于浏览器和Web服务器之间的一台服务器，有了它之后，浏览器不是直接到Web服务器去取回网页而是向代理服务器发出请求，Request信号会先送到代理服务器，由代理服务器来取回浏览器所需要的信息并传送给你的浏览器。<br>而且，大部分代理服务器都具有缓冲的功能，就好象一个大的Cache，它有很大的存储空间，它不断将新取得数据储存到它本机的存储器上，如果浏览器所请求的数据在它本机的存储器上已经存在而且是最新的，那么它就不重新从Web服务器取数据，而直接将存储器上的数据传送给用户的浏览器，这样就能显著提高浏览速度和效率。更重要的是：Proxy Server(代理服务器)是Internet链路级网关所提供的一种重要的安全功能，它的工作主要在开放系统互联(OSI)模型的对话层。</p>\n<p>http代理服务器的主要功能：</p>\n<p>1）突破自身IP访问限制，访问国外站点。如：教育网、169网等网络用户可以通过代理访问国外网站；<br>2）访问一些单位或团体内部资源，如某大学FTP(前提是该代理地址在该资源的允许访问范围之内)，使用教育网内地址段免费代理服务器，就可以用于对教育 网开放的各类FTP下载上传，以及各类资料查询共享等服务；<br>3）突破中国电信的IP封锁：中国电信用户有很多网站是被限制访问的，这种限制是人为的，不同Serve对地址的封锁是不同的。所以不能访问时可以换一个国外的代理服务器试试；<br>4）提高访问速度：通常代理服务器都设置一个较大的硬盘缓冲区，当有外界的信息通过时，同时也将其保存到缓冲区中，当其他用户再访问相同的信息时，则直接由缓冲区中取出信息，传给用户，以提高访问速度；<br>5）隐藏真实IP：上网者也可以通过这种方法隐藏自己的IP，免受攻击。</p>\n<p>对于客户端浏览器而言，http代理服务器相当于服务器。<br>而对于Web服务器而言，http代理服务器又担当了客户端的角色。</p>\n<p>11.4、虚拟主机</p>\n<p>虚拟主机：是在网络服务器上划分出一定的磁盘空间供用户放置站点、应用组件等，提供必要的站点功能与数据存放、传输功能。<br>所谓虚拟主机，也叫“网站空间”就是把一台运行在互联网上的服务器划分成多个“虚拟”的服务器，每一个虚拟主机都具有独立的域名和完整的Internet服务器（支持WWW、FTP、E-mail等）功能。一台服务器上的不同虚拟主机是各自独立的，并由用户自行管理。但一台服务器主机只能够支持一定数量的虚拟主机，当超过这个数量时，用户将会感到性能急剧下降。</p>\n<p>虚拟主机的实现原理</p>\n<p>虚拟主机是用同一个WEB服务器，为不同域名网站提供服务的技术。Apache、Tomcat等均可通过配置实现这个功能。<br>相关的HTTP消息头：Host。<br>例如：Host: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20v\">www.baidu.com<i class=\"fa fa-external-link-alt\"></i></span><br>客户端发送HTTP请求的时候，会携带Host头，Host头记录的是客户端输入的域名。这样服务器可以根据Host头确认客户要访问的是哪一个域名。</p>\n<p>十二、HTTP认证方式</p>\n<p>HTTP请求报头： Authorization<br>HTTP响应报头： WWW-Authenticate</p>\n<p>HTTP认证是基于质询&#x2F;回应(challenge&#x2F;response)的认证模式。</p>\n<p>12.1?基本认证 basic authentication（HTTP1.0提出的认证方法）</p>\n<p>基本认证是一种用来允许Web浏览器或其他客户端程序在请求时提供用户名和口令形式的身份凭证的一种登录验证方式。</p>\n<p>把 “用户名+冒号+密码”用BASE64算法加密后的字符串放在http request 中的header Authorization中发送给服务端。<br>客户端对于每一个realm，通过提供用户名和密码来进行认证的方式。<br>包含密码的明文传递。</p>\n<p>当浏览器访问使用基本认证的网站的时候， 浏览器会提示你输入用户名和密码，如下图：</p>\n<p>假如用户名密码错误的话，服务器会返回401，如下图：</p>\n<p>基本认证步骤：<br>1、客户端访问一个受http基本认证保护的资源。<br>2、服务器返回401状态，要求客户端提供用户名和密码进行认证。（验证失败的时候，响应头会加上WWW-Authenticate: Basic realm&#x3D;”请求域”。）<br>401 Unauthorized<br>WWW-Authenticate： Basic realm&#x3D;”WallyWorld”<br>3、客户端将输入的用户名密码用Base64进行编码后，采用非加密的明文方式传送给服务器。<br>Authorization: Basic xxxxxxxxxx.<br>4、服务器将Authorization头中的用户名密码解码并取出，进行验证，如果认证成功，则返回相应的资源。如果认证失败，则仍返回401状态，要求重新进行认证。</p>\n<p>特记事项：<br>1、Http是无状态的，同一个客户端对同一个realm内资源的每一个访问会被要求进行认证。<br>2、客户端通常会缓存用户名和密码，并和authentication realm一起保存，所以，一般不需要你重新输入用户名和密码。<br>3、以非加密的明文方式传输，虽然转换成了不易被人直接识别的字符串，但是无法防止用户名密码被恶意盗用。虽然用肉眼看不出来，但用程序很容易解密。</p>\n<p>优点：<br>基本认证的一个优点是基本上所有流行的网页浏览器都支持基本认证。基本认证很少在可公开访问的互联网网站上使用，有时候会在小的私有系统中使用（如路由器<br>网页管理接口）。后来的机制HTTP摘要认证是为替代基本认证而开发的，允许密钥以相对安全的方式在不安全的通道上传输。</p>\n<p>程序员和系统管理员有时会在可信网络环境中使用基本认证，使用Telnet或其他明文网络协议工具手动地测试Web服务器。这是一个麻烦的过程，但是网络上传输的<br>内容是人可读的，以便进行诊断。</p>\n<p>缺点：<br>虽然基本认证非常容易实现，但该方案建立在以下的假设的基础上，即：客户端和服务器主机之间的连接是安全可信的。特别是，如果没有使用SSL&#x2F;TLS这样的传输<br>层安全的协议，那么以明文传输的密钥和口令很容易被拦截。该方案也同样没有对服务器返回的信息提供保护。</p>\n<p>现存的浏览器保存认证信息直到标签页或浏览器被关闭，或者用户清除历史记录。HTTP没有为服务器提供一种方法指示客户端丢弃这些被缓存的密钥。这意味着服务<br>器端在用户不关闭浏览器的情况下，并没有一种有效的方法来让用户登出。</p>\n<p>一个例子：</p>\n<p>这一个典型的HTTP客户端和HTTP服务器的对话，服务器安装在同一台计算机上（localhost），包含以下步骤：</p>\n<p>客户端请求一个需要身份认证的页面，但是没有提供用户名和口令。这通常是用户在地址栏输入一个URL，或是打开了一个指向该页面的链接。服务端响应一个401应<br>答码，并提供一个认证域。接到应答后，客户端显示该认证域（通常是所访问的计算机或系统的描述）给用户并提示输入用户名和口令。此时用户可以选择确定或取<br>消。用户输入了用户名和口令后，客户端软件会在原先的请求上增加认证消息头（值是base64encode(username+”:”+password)），然后重新发送再次尝试。<br>在本例中，服务器接受了该认证屏幕并返回了页面。如果用户凭据非法或无效，服务器可能再次返回401应答码，客户端可以再次提示用户输入口令。<br>注意:客户端有可能不需要用户交互，在第一次请求中就发送认证消息头。</p>\n<p>客户端请求（没有认证信息）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /private/index.html HTTP/1.0</span><br><span class=\"line\">Host: localhost</span><br></pre></td></tr></table></figure>\n\n<p>服务端应答：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">HTTP/1.0 401 Authorization Required</span><br><span class=\"line\">Server: HTTPd/1.0</span><br><span class=\"line\">Date: Sat, 27 Nov 2004 10:18:15 GMT</span><br><span class=\"line\">WWW-Authenticate: Basic realm=&quot;Secure Area&quot;</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Content-Length: 311</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><br><span class=\"line\"> &quot;http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd&quot;&gt;</span><br><span class=\"line\">&lt;HTML&gt;</span><br><span class=\"line\">  &lt;HEAD&gt;</span><br><span class=\"line\">    &lt;TITLE&gt;Error&lt;/TITLE&gt;</span><br><span class=\"line\">    &lt;META HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html; charset=ISO-8859-1&quot;&gt;</span><br><span class=\"line\">  &lt;/HEAD&gt;</span><br><span class=\"line\">  &lt;BODY&gt;&lt;H1&gt;401 Unauthorized.&lt;/H1&gt;&lt;/BODY&gt;</span><br><span class=\"line\">&lt;/HTML&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>客户端的请求（用户名“”Aladdin”，口令, password “open sesame”）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /private/index.html HTTP/1.0</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>服务端的应答：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">HTTP/1.0 200 OK</span><br><span class=\"line\">Server: HTTPd/1.0</span><br><span class=\"line\">Date: Sat, 27 Nov 2004 10:19:07 GMT</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Content-Length: 10476</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>HTTP OAuth认证<br>OAuth对于Http来说，就是放在Authorization header中的不是用户名密码，而是一个token。微软的Skydrive就是使用这样的方式。</p>\n<p>12.2、摘要认证 digest authentication（HTTP1.1提出的基本认证的替代方法）</p>\n<p>这个认证可以看做是基本认证的增强版本，不包含密码的明文传递。</p>\n<p>引入了一系列安全增强的选项；“保护质量”(qop)、随机数计数器由客户端增加、以及客户生成的随机数。</p>\n<p>在HTTP摘要认证中使用 MD5 加密是为了达成”不可逆的”，也就是说，当输出已知的时候，确定原始的输入应该是相当困难的。如果密码本身太过简单，也许可以通过尝试所有可能的输入来找到对应的输出（穷举攻击），甚至可以通过字典或者适当的查找表加快查找速度。</p>\n<p>示例及说明<br>下面的例子仅仅涵盖了“auth”保护质量的代码，因为在撰写期间，所知道的只有Opera和Konqueror网页浏览器支持“auth-int”（带完整性保护的认证）。</p>\n<p>典型的认证过程包括如下步骤：<br>客户端请求一个需要认证的页面，但是不提供用户名和密码。通常这是由于用户简单的输入了一个地址或者在页面中点击了某个超链接。<br>服务器返回401 “Unauthorized” 响应代码，并提供认证域(realm)，以及一个随机生成的、只使用一次的数值，称为密码随机数 nonce。<br>此时，浏览器会向用户提示认证域(realm)（通常是所访问的计算机或系统的描述），并且提示用户名和密码。用户此时可以选择取消。<br>一旦提供了用户名和密码，客户端会重新发送同样的请求，但是添加了一个认证头包括了响应代码。</p>\n<p>注意：客户端可能已经拥有了用户名和密码，因此不需要提示用户，比如以前存储在浏览器里的。</p>\n<p>客户端请求 (无认证)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /dir/index.html HTTP/1.0</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>服务器响应：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">HTTP/1.0 401 Unauthorized</span><br><span class=\"line\">Server: HTTPd/0.9</span><br><span class=\"line\">Date: Sun, 10 Apr 2005 20:26:47 GMT</span><br><span class=\"line\">WWW-Authenticate: Digest realm=&quot;testrealm@host.com&quot;,   //认证域</span><br><span class=\"line\">                        qop=&quot;auth,auth-int&quot;,   //保护质量</span><br><span class=\"line\">                        nonce=&quot;dcd98b7102dd2f0e8b11d0f600bfb0c093&quot;,  //服务器密码随机数</span><br><span class=\"line\">                        opaque=&quot;5ccc069c403ebaf9f0171e9517f40e41&quot;</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Content-Length: 311</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><br><span class=\"line\"> &quot;http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd&quot;&gt;</span><br><span class=\"line\">&lt;HTML&gt;</span><br><span class=\"line\">  &lt;HEAD&gt;</span><br><span class=\"line\">    &lt;TITLE&gt;Error&lt;/TITLE&gt;</span><br><span class=\"line\">    &lt;META HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html; charset=ISO-8859-1&quot;&gt;</span><br><span class=\"line\">  &lt;/HEAD&gt;</span><br><span class=\"line\">  &lt;BODY&gt;&lt;H1&gt;401 Unauthorized.&lt;/H1&gt;&lt;/BODY&gt;</span><br><span class=\"line\">&lt;/HTML&gt;</span><br></pre></td></tr></table></figure>\n\n<p>客户端请求 (用户名 “Mufasa”, 密码 “Circle Of Life”)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /dir/index.html HTTP/1.0</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Authorization: Digest username=&quot;Mufasa&quot;,</span><br><span class=\"line\">                     realm=&quot;testrealm@host.com&quot;,</span><br><span class=\"line\">                     nonce=&quot;dcd98b7102dd2f0e8b11d0f600bfb0c093&quot;,</span><br><span class=\"line\">                     uri=&quot;/dir/index.html&quot;,</span><br><span class=\"line\">                     qop=auth,</span><br><span class=\"line\">                     nc=00000001,    //请求计数</span><br><span class=\"line\">                     cnonce=&quot;0a4f113b&quot;,   //客户端密码随机数</span><br><span class=\"line\">                     response=&quot;6629fae49393a05397450978507c4ef1&quot;,</span><br><span class=\"line\">                     opaque=&quot;5ccc069c403ebaf9f0171e9517f40e41&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>服务器响应：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">HTTP/1.0 200 OK</span><br><span class=\"line\">Server: HTTPd/0.9</span><br><span class=\"line\">Date: Sun, 10 Apr 2005 20:27:03 GMT</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Content-Length: 7984</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>response</code> 值由三步计算而成。当多个数值合并的时候，使用冒号作为分割符：</p>\n<ol>\n<li>对用户名、认证域(realm)以及密码的合并值计算 MD5 哈希值，结果称为 HA1。</li>\n<li>对HTTP方法以及URI的摘要的合并值计算 MD5 哈希值，例如，”GET” 和 “&#x2F;dir&#x2F;index.html”，结果称为 HA2。</li>\n<li>对HA1、服务器密码随机数(nonce)、请求计数(nc)、客户端密码随机数(cnonce)、保护质量(qop)以及 HA2 的合并值计算 MD5 哈希值。结果即为客户端提供的response 值。<br>因为服务器拥有与客户端同样的信息，因此服务器可以进行同样的计算，以验证客户端提交的 response 值的正确性。在上面给出的例子中，结果是如下计算的。<br>（MD5()表示用于计算MD5哈希值的函数；“\\”表示接下一行；引号并不参与计算）</li>\n</ol>\n<p>HA1 &#x3D; MD5( “Mufasa:<span class=\"exturl\" data-url=\"bWFpbHRvOiYjeDc0OyYjMTAxOyYjMTE1OyYjMTE2OyYjMTE0OyYjMTAxOyYjeDYxOyYjeDZjOyYjeDZkOyYjeDQwOyYjMTA0OyYjMTExOyYjMTE1OyYjeDc0OyYjNDY7JiM5OTsmIzExMTsmI3g2ZDs=\">&#x74;&#101;&#115;&#116;&#114;&#101;&#x61;&#x6c;&#x6d;&#x40;&#104;&#111;&#115;&#x74;&#46;&#99;&#111;&#x6d;<i class=\"fa fa-external-link-alt\"></i></span>:Circle Of Life” )<br>&#x3D; 939e7578ed9e3c518a452acee763bce9</p>\n<p>HA2 &#x3D; MD5( “GET:&#x2F;dir&#x2F;index.html” )<br>&#x3D; 39aff3a2bab6126f332b942af96d3366</p>\n<p>Response &#x3D; MD5( “939e7578ed9e3c518a452acee763bce9:<br>dcd98b7102dd2f0e8b11d0f600bfb0c093:<br>00000001:0a4f113b:auth:<br>39aff3a2bab6126f332b942af96d3366″ )<br>&#x3D; 6629fae49393a05397450978507c4ef1</p>\n<p>此时客户端可以提交一个新的请求，重复使用服务器密码随机数(nonce)（服务器仅在每次“401”响应后发行新的nonce），但是提供新的客户端密码随机数(cnonce)。在后续的请求中，十六进制请求计数器(nc)必须比前一次使用的时候要大，否则攻击者可以简单的使用同样的认证信息重放老的请求。由服务器来确保在每个发出的密码随机数nonce时，计数器是在增加的，并拒绝掉任何错误的请求。显然，改变HTTP方法和&#x2F;或计数器数值都会导致不同的 response值。</p>\n<p>服务器应当记住最近所生成的服务器密码随机数nonce的值。也可以在发行每一个密码随机数nonce后，记住过一段时间让它们过期。如果客户端使用了一个过期的值，服务器应该响应“401”状态号，并且在认证头中添加stale&#x3D;TRUE，表明客户端应当使用新提供的服务器密码随机数nonce重发请求，而不必提示用户其它用户名和口令。</p>\n<p>服务器不需要保存任何过期的密码随机数，它可以简单的认为所有不认识的数值都是过期的。服务器也可以只允许每一个服务器密码随机数nonce使用一次，当然，这样就会迫使客户端在发送每个请求的时候重复认证过程。需要注意的是，在生成后立刻过期服务器密码随机数nonce是不行的，因为客户端将没有任何机会来使用这个nonce。</p>\n<p>PS：以上只介绍了两种比较基础的，还有其他的一些认证方式就不在这里一一说明了。</p>\n<p>十三、HTTPS传输协议原理</p>\n<p>HTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容请看SSL。</p>\n<p>13.1、两种基本的加解密算法类型<br>对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称加密算法有DES、AES等。<br>非对称加密：密钥成对出现（且根据公钥无法推知私钥，根据私钥也无法推知公钥），加密解密使用不同密钥（公钥加密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的非对称加密算法有RSA、DSA等。</p>\n<p>13.2、HTTPS通信过程</p>\n<p>13.3、HTTPS通信的优点<br>客户端产生的密钥只有客户端和服务器端能得到；<br>加密的数据只有客户端和服务器端才能得到明文；<br>客户端到服务端的通信是安全的。</p>\n<p>十四、http的状态响应码</p>\n<p>1**(信息类)：表示接收到请求并且继续处理<br>100——客户必须继续发出请求<br>101——客户要求服务器根据请求转换HTTP协议版本2**(响应成功)：表示动作被成功接收、理解和接受<br>200——表明该请求被成功地完成，所请求的资源发送回客户端<br>201——提示知道新文件的URL<br>202——接受和处理、但处理未完成<br>203——返回信息不确定或不完整<br>204——请求收到，但返回信息为空<br>205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件<br>206——服务器已经完成了部分用户的GET请求<br>3**(重定向类)：为了完成指定的动作，必须接受进一步处理<br>300——请求的资源可在多处得到<br>301——本网页被永久性转移到另一个URL<br>302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。<br>303——建议客户访问其他URL或访问方式<br>304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用<br>305——请求的资源必须从服务器指定的地址得到<br>306——前一版本HTTP中使用的代码，现行版本中不再使用<br>307——申明请求的资源临时性删除</p>\n<p>4**(客户端错误类)：请求包含错误语法或不能正确执行<br>400——客户端请求有语法错误，不能被服务器所理解<br>401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>HTTP 401.1 – 未授权：登录失败<br>HTTP 401.2 – 未授权：服务器配置问题导致登录失败<br>HTTP 401.3 – ACL 禁止访问资源<br>HTTP 401.4 – 未授权：授权被筛选器拒绝<br>HTTP 401.5 – 未授权：ISAPI 或 CGI 授权失败<br>402——保留有效ChargeTo头响应<br>403——禁止访问，服务器收到请求，但是拒绝提供服务<br>HTTP 403.1 禁止访问：禁止可执行访问<br>HTTP 403.2 – 禁止访问：禁止读访问<br>HTTP 403.3 – 禁止访问：禁止写访问<br>HTTP 403.4 – 禁止访问：要求 SSL<br>HTTP 403.5 – 禁止访问：要求 SSL 128<br>HTTP 403.6 – 禁止访问：IP 地址被拒绝<br>HTTP 403.7 – 禁止访问：要求客户证书<br>HTTP 403.8 – 禁止访问：禁止站点访问<br>HTTP 403.9 – 禁止访问：连接的用户过多<br>HTTP 403.10 – 禁止访问：配置无效<br>HTTP 403.11 – 禁止访问：密码更改<br>HTTP 403.12 – 禁止访问：映射器拒绝访问<br>HTTP 403.13 – 禁止访问：客户证书已被吊销<br>HTTP 403.15 – 禁止访问：客户访问许可过多<br>HTTP 403.16 – 禁止访问：客户证书不可信或者无效<br>HTTP 403.17 – 禁止访问：客户证书已经到期或者尚未生效<br>404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL<br>405——用户在Request-Line字段定义的方法不允许<br>406——根据用户发送的Accept拖，请求资源不可访问<br>407——类似401，用户必须首先在代理服务器上得到授权<br>408——客户端没有在用户指定的饿时间内完成请求<br>409——对当前资源状态，请求不能完成<br>410——服务器上不再有此资源且无进一步的参考地址<br>411——服务器拒绝用户定义的Content-Length属性请求<br>412——一个或多个请求头字段在当前请求中错误<br>413——请求的资源大于服务器允许的大小<br>414——请求的资源URL长于服务器允许的长度<br>415——请求资源不支持请求项目格式<br>416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段<br>417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。</p>\n<p>5**(服务端错误类)：服务器不能正确执行一个正确的请求<br>HTTP 500 – 服务器遇到错误，无法完成请求<br>HTTP 500.100 – 内部服务器错误 – ASP 错误<br>HTTP 500-11 服务器关闭<br>HTTP 500-12 应用程序重新启动<br>HTTP 500-13 – 服务器太忙<br>HTTP 500-14 – 应用程序无效<br>HTTP 500-15 – 不允许请求 global.asa<br>Error 501 – 未实现<br>HTTP 502 – 网关错误<br>HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常</p>\n","categories":["Web","Theory"],"tags":["http"]}]